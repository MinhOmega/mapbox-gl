define(["./shared"],(function(t){"use strict";var e=t.createCommonjsModule((function(t){function e(t){return!i(t)}function i(t){return"undefined"==typeof window||"undefined"==typeof document?"not a browser":Array.prototype&&Array.prototype.every&&Array.prototype.filter&&Array.prototype.forEach&&Array.prototype.indexOf&&Array.prototype.lastIndexOf&&Array.prototype.map&&Array.prototype.some&&Array.prototype.reduce&&Array.prototype.reduceRight&&Array.isArray?Function.prototype&&Function.prototype.bind?Object.keys&&Object.create&&Object.getPrototypeOf&&Object.getOwnPropertyNames&&Object.isSealed&&Object.isFrozen&&Object.isExtensible&&Object.getOwnPropertyDescriptor&&Object.defineProperty&&Object.defineProperties&&Object.seal&&Object.freeze&&Object.preventExtensions?"JSON"in window&&"parse"in JSON&&"stringify"in JSON?function(){if(!("Worker"in window&&"Blob"in window&&"URL"in window))return!1;var t,e,i=new Blob([""],{type:"text/javascript"}),o=URL.createObjectURL(i);try{e=new Worker(o),t=!0}catch(e){t=!1}return e&&e.terminate(),URL.revokeObjectURL(o),t}()?"Uint8ClampedArray"in window?ArrayBuffer.isView?function(){var t=document.createElement("canvas");t.width=t.height=1;var e=t.getContext("2d");if(!e)return!1;var i=e.getImageData(0,0,1,1);return i&&i.width===t.width}()?(void 0===o[i=t&&t.failIfMajorPerformanceCaveat]&&(o[i]=function(t){var i=function(t){var i=document.createElement("canvas"),o=Object.create(e.webGLContextAttributes);return o.failIfMajorPerformanceCaveat=t,i.probablySupportsContext?i.probablySupportsContext("webgl",o)||i.probablySupportsContext("experimental-webgl",o):i.supportsContext?i.supportsContext("webgl",o)||i.supportsContext("experimental-webgl",o):i.getContext("webgl",o)||i.getContext("experimental-webgl",o)}(t);if(!i)return!1;var o=i.createShader(i.VERTEX_SHADER);return!(!o||i.isContextLost())&&(i.shaderSource(o,"void main() {}"),i.compileShader(o),!0===i.getShaderParameter(o,i.COMPILE_STATUS))}(i)),o[i]?void 0:"insufficient WebGL support"):"insufficient Canvas/getImageData support":"insufficient ArrayBuffer support":"insufficient Uint8ClampedArray support":"insufficient worker support":"insufficient JSON support":"insufficient Object support":"insufficient Function support":"insufficent Array support";var i}t.exports?t.exports=e:window&&(window.mapboxgl=window.mapboxgl||{},window.mapboxgl.supported=e,window.mapboxgl.notSupportedReason=i);var o={};e.webGLContextAttributes={antialias:!1,alpha:!0,stencil:!0,depth:!0}})),i={create:function(e,i,o){var r=t.window.document.createElement(e);return void 0!==i&&(r.className=i),o&&o.appendChild(r),r},createNS:function(e,i){return t.window.document.createElementNS(e,i)}},o=t.window.document&&t.window.document.documentElement.style;function r(t){if(!o)return t[0];for(var e=0;e<t.length;e++)if(t[e]in o)return t[e];return t[0]}var a,n=r(["userSelect","MozUserSelect","WebkitUserSelect","msUserSelect"]);i.disableDrag=function(){o&&n&&(a=o[n],o[n]="none")},i.enableDrag=function(){o&&n&&(o[n]=a)};var s=r(["transform","WebkitTransform"]);i.setTransform=function(t,e){t.style[s]=e};var l=!1;try{var c=Object.defineProperty({},"passive",{get:function(){l=!0}});t.window.addEventListener("test",c,c),t.window.removeEventListener("test",c,c)}catch(t){l=!1}i.addEventListener=function(t,e,i,o){void 0===o&&(o={}),t.addEventListener(e,i,"passive"in o&&l?o:o.capture)},i.removeEventListener=function(t,e,i,o){void 0===o&&(o={}),t.removeEventListener(e,i,"passive"in o&&l?o:o.capture)};var u=function(e){e.preventDefault(),e.stopPropagation(),t.window.removeEventListener("click",u,!0)};function h(t){var e=t.userImage;return!!(e&&e.render&&e.render())&&(t.data.replace(new Uint8Array(e.data.buffer)),!0)}i.suppressClick=function(){t.window.addEventListener("click",u,!0),t.window.setTimeout((function(){t.window.removeEventListener("click",u,!0)}),0)},i.mousePos=function(e,i){var o=e.getBoundingClientRect();return new t.Point(i.clientX-o.left-e.clientLeft,i.clientY-o.top-e.clientTop)},i.touchPos=function(e,i){for(var o=e.getBoundingClientRect(),r=[],a=0;a<i.length;a++)r.push(new t.Point(i[a].clientX-o.left-e.clientLeft,i[a].clientY-o.top-e.clientTop));return r},i.mouseButton=function(e){return void 0!==t.window.InstallTrigger&&2===e.button&&e.ctrlKey&&t.window.navigator.platform.toUpperCase().indexOf("MAC")>=0?0:e.button},i.remove=function(t){t.parentNode&&t.parentNode.removeChild(t)};var p=function(e){function i(){e.call(this),this.images={},this.updatedImages={},this.callbackDispatchedThisFrame={},this.loaded=!1,this.requestors=[],this.patterns={},this.atlasImage=new t.RGBAImage({width:1,height:1}),this.dirty=!0}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.isLoaded=function(){return this.loaded},i.prototype.setLoaded=function(t){if(this.loaded!==t&&(this.loaded=t,t)){for(var e=0,i=this.requestors;e<i.length;e+=1){var o=i[e];this._notify(o.ids,o.callback)}this.requestors=[]}},i.prototype.getImage=function(t){return this.images[t]},i.prototype.addImage=function(t,e){this._validate(t,e)&&(this.images[t]=e)},i.prototype._validate=function(e,i){var o=!0;return this._validateStretch(i.stretchX,i.data&&i.data.width)||(this.fire(new t.ErrorEvent(new Error('Image "'+e+'" has invalid "stretchX" value'))),o=!1),this._validateStretch(i.stretchY,i.data&&i.data.height)||(this.fire(new t.ErrorEvent(new Error('Image "'+e+'" has invalid "stretchY" value'))),o=!1),this._validateContent(i.content,i)||(this.fire(new t.ErrorEvent(new Error('Image "'+e+'" has invalid "content" value'))),o=!1),o},i.prototype._validateStretch=function(t,e){if(!t)return!0;for(var i=0,o=0,r=t;o<r.length;o+=1){var a=r[o];if(a[0]<i||a[1]<a[0]||e<a[1])return!1;i=a[1]}return!0},i.prototype._validateContent=function(t,e){return!(t&&(4!==t.length||t[0]<0||e.data.width<t[0]||t[1]<0||e.data.height<t[1]||t[2]<0||e.data.width<t[2]||t[3]<0||e.data.height<t[3]||t[2]<t[0]||t[3]<t[1]))},i.prototype.updateImage=function(t,e){e.version=this.images[t].version+1,this.images[t]=e,this.updatedImages[t]=!0},i.prototype.removeImage=function(t){var e=this.images[t];delete this.images[t],delete this.patterns[t],e.userImage&&e.userImage.onRemove&&e.userImage.onRemove()},i.prototype.listImages=function(){return Object.keys(this.images)},i.prototype.getImages=function(t,e){var i=!0;if(!this.isLoaded())for(var o=0,r=t;o<r.length;o+=1)this.images[r[o]]||(i=!1);this.isLoaded()||i?this._notify(t,e):this.requestors.push({ids:t,callback:e})},i.prototype._notify=function(e,i){for(var o={},r=0,a=e;r<a.length;r+=1){var n=a[r];this.images[n]||this.fire(new t.Event("styleimagemissing",{id:n}));var s=this.images[n];s?o[n]={data:s.data.clone(),pixelRatio:s.pixelRatio,sdf:s.sdf,version:s.version,stretchX:s.stretchX,stretchY:s.stretchY,content:s.content,hasRenderCallback:Boolean(s.userImage&&s.userImage.render)}:t.warnOnce('Image "'+n+'" could not be loaded. Please make sure you have added the image with map.addImage() or a "sprite" property in your style. You can provide missing images by listening for the "styleimagemissing" map event.')}i(null,o)},i.prototype.getPixelSize=function(){var t=this.atlasImage;return{width:t.width,height:t.height}},i.prototype.getPattern=function(e){var i=this.patterns[e],o=this.getImage(e);if(!o)return null;if(i&&i.position.version===o.version)return i.position;if(i)i.position.version=o.version;else{var r={w:o.data.width+2,h:o.data.height+2,x:0,y:0},a=new t.ImagePosition(r,o);this.patterns[e]={bin:r,position:a}}return this._updatePatternAtlas(),this.patterns[e].position},i.prototype.bind=function(e){var i=e.gl;this.atlasTexture?this.dirty&&(this.atlasTexture.update(this.atlasImage),this.dirty=!1):this.atlasTexture=new t.Texture(e,this.atlasImage,i.RGBA),this.atlasTexture.bind(i.LINEAR,i.CLAMP_TO_EDGE)},i.prototype._updatePatternAtlas=function(){var e=[];for(var i in this.patterns)e.push(this.patterns[i].bin);var o=t.potpack(e),r=o.w,a=o.h,n=this.atlasImage;for(var s in n.resize({width:r||1,height:a||1}),this.patterns){var l=this.patterns[s].bin,c=l.x+1,u=l.y+1,h=this.images[s].data,p=h.width,d=h.height;t.RGBAImage.copy(h,n,{x:0,y:0},{x:c,y:u},{width:p,height:d}),t.RGBAImage.copy(h,n,{x:0,y:d-1},{x:c,y:u-1},{width:p,height:1}),t.RGBAImage.copy(h,n,{x:0,y:0},{x:c,y:u+d},{width:p,height:1}),t.RGBAImage.copy(h,n,{x:p-1,y:0},{x:c-1,y:u},{width:1,height:d}),t.RGBAImage.copy(h,n,{x:0,y:0},{x:c+p,y:u},{width:1,height:d})}this.dirty=!0},i.prototype.beginFrame=function(){this.callbackDispatchedThisFrame={}},i.prototype.dispatchRenderCallbacks=function(t){for(var e=0,i=t;e<i.length;e+=1){var o=i[e];if(!this.callbackDispatchedThisFrame[o]){this.callbackDispatchedThisFrame[o]=!0;var r=this.images[o];h(r)&&this.updateImage(o,r)}}},i}(t.Evented),d=m,_=m,f=1e20;function m(t,e,i,o,r,a){this.fontSize=t||24,this.buffer=void 0===e?3:e,this.cutoff=o||.25,this.fontFamily=r||"sans-serif",this.fontWeight=a||"normal",this.radius=i||8;var n=this.size=this.fontSize+2*this.buffer;this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=n,this.ctx=this.canvas.getContext("2d"),this.ctx.font=this.fontWeight+" "+this.fontSize+"px "+this.fontFamily,this.ctx.textBaseline="middle",this.ctx.fillStyle="black",this.gridOuter=new Float64Array(n*n),this.gridInner=new Float64Array(n*n),this.f=new Float64Array(n),this.d=new Float64Array(n),this.z=new Float64Array(n+1),this.v=new Int16Array(n),this.middle=Math.round(n/2*(navigator.userAgent.indexOf("Gecko/")>=0?1.2:1))}function g(t,e,i,o,r,a,n){for(var s=0;s<e;s++){for(var l=0;l<i;l++)o[l]=t[l*e+s];for(v(o,r,a,n,i),l=0;l<i;l++)t[l*e+s]=r[l]}for(l=0;l<i;l++){for(s=0;s<e;s++)o[s]=t[l*e+s];for(v(o,r,a,n,e),s=0;s<e;s++)t[l*e+s]=Math.sqrt(r[s])}}function v(t,e,i,o,r){i[0]=0,o[0]=-f,o[1]=+f;for(var a=1,n=0;a<r;a++){for(var s=(t[a]+a*a-(t[i[n]]+i[n]*i[n]))/(2*a-2*i[n]);s<=o[n];)n--,s=(t[a]+a*a-(t[i[n]]+i[n]*i[n]))/(2*a-2*i[n]);i[++n]=a,o[n]=s,o[n+1]=+f}for(a=0,n=0;a<r;a++){for(;o[n+1]<a;)n++;e[a]=(a-i[n])*(a-i[n])+t[i[n]]}}m.prototype.draw=function(t){this.ctx.clearRect(0,0,this.size,this.size),this.ctx.fillText(t,this.buffer,this.middle);for(var e=this.ctx.getImageData(0,0,this.size,this.size),i=new Uint8ClampedArray(this.size*this.size),o=0;o<this.size*this.size;o++){var r=e.data[4*o+3]/255;this.gridOuter[o]=1===r?0:0===r?f:Math.pow(Math.max(0,.5-r),2),this.gridInner[o]=1===r?f:0===r?0:Math.pow(Math.max(0,r-.5),2)}for(g(this.gridOuter,this.size,this.size,this.f,this.d,this.v,this.z),g(this.gridInner,this.size,this.size,this.f,this.d,this.v,this.z),o=0;o<this.size*this.size;o++)i[o]=Math.max(0,Math.min(255,Math.round(255-255*((this.gridOuter[o]-this.gridInner[o])/this.radius+this.cutoff))));return i},d.default=_;var y=function(t,e){this.requestManager=t,this.localIdeographFontFamily=e,this.entries={}};y.prototype.setURL=function(t){this.url=t},y.prototype.getGlyphs=function(e,i){var o=this,r=[];for(var a in e)for(var n=0,s=e[a];n<s.length;n+=1)r.push({stack:a,id:s[n]});t.asyncAll(r,(function(t,e){var i=t.stack,r=t.id,a=o.entries[i];a||(a=o.entries[i]={glyphs:{},requests:{},ranges:{}});var n=a.glyphs[r];if(void 0===n){if(n=o._tinySDF(a,i,r))return a.glyphs[r]=n,void e(null,{stack:i,id:r,glyph:n});var s=Math.floor(r/256);if(256*s>65535)e(new Error("glyphs > 65535 not supported"));else if(a.ranges[s])e(null,{stack:i,id:r,glyph:n});else{var l=a.requests[s];l||(l=a.requests[s]=[],y.loadGlyphRange(i,s,o.url,o.requestManager,(function(t,e){if(e){for(var i in e)o._doesCharSupportLocalGlyph(+i)||(a.glyphs[+i]=e[+i]);a.ranges[s]=!0}for(var r=0,n=l;r<n.length;r+=1)(0,n[r])(t,e);delete a.requests[s]}))),l.push((function(t,o){t?e(t):o&&e(null,{stack:i,id:r,glyph:o[r]||null})}))}}else e(null,{stack:i,id:r,glyph:n})}),(function(t,e){if(t)i(t);else if(e){for(var o={},r=0,a=e;r<a.length;r+=1){var n=a[r],s=n.stack,l=n.id,c=n.glyph;(o[s]||(o[s]={}))[l]=c&&{id:c.id,bitmap:c.bitmap.clone(),metrics:c.metrics}}i(null,o)}}))},y.prototype._doesCharSupportLocalGlyph=function(e){return!!this.localIdeographFontFamily&&(t.isChar["CJK Unified Ideographs"](e)||t.isChar["Hangul Syllables"](e)||t.isChar.Hiragana(e)||t.isChar.Katakana(e))},y.prototype._tinySDF=function(e,i,o){var r=this.localIdeographFontFamily;if(r&&this._doesCharSupportLocalGlyph(o)){var a=e.tinySDF;if(!a){var n="400";/bold/i.test(i)?n="900":/medium/i.test(i)?n="500":/light/i.test(i)&&(n="200"),a=e.tinySDF=new y.TinySDF(24,3,8,.25,r,n)}return{id:o,bitmap:new t.AlphaImage({width:30,height:30},a.draw(String.fromCharCode(o))),metrics:{width:24,height:24,left:0,top:-8,advance:24}}}},y.loadGlyphRange=function(e,i,o,r,a){var n=256*i,s=n+255,l=r.transformRequest(r.normalizeGlyphsURL(o).replace("{fontstack}",e).replace("{range}",n+"-"+s),t.ResourceType.Glyphs);t.getArrayBuffer(l,(function(e,i){if(e)a(e);else if(i){for(var o={},r=0,n=t.parseGlyphPBF(i);r<n.length;r+=1){var s=n[r];o[s.id]=s}a(null,o)}}))},y.TinySDF=d;var x=function(){this.specification=t.styleSpec.light.position};x.prototype.possiblyEvaluate=function(e,i){return t.sphericalToCartesian(e.expression.evaluate(i))},x.prototype.interpolate=function(e,i,o){return{x:t.number(e.x,i.x,o),y:t.number(e.y,i.y,o),z:t.number(e.z,i.z,o)}};var b=new t.Properties({anchor:new t.DataConstantProperty(t.styleSpec.light.anchor),position:new x,color:new t.DataConstantProperty(t.styleSpec.light.color),intensity:new t.DataConstantProperty(t.styleSpec.light.intensity)}),w=function(e){function i(i){e.call(this),this._transitionable=new t.Transitionable(b),this.setLight(i),this._transitioning=this._transitionable.untransitioned()}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.getLight=function(){return this._transitionable.serialize()},i.prototype.setLight=function(e,i){if(void 0===i&&(i={}),!this._validate(t.validateLight,e,i))for(var o in e){var r=e[o];t.endsWith(o,"-transition")?this._transitionable.setTransition(o.slice(0,-"-transition".length),r):this._transitionable.setValue(o,r)}},i.prototype.updateTransitions=function(t){this._transitioning=this._transitionable.transitioned(t,this._transitioning)},i.prototype.hasTransition=function(){return this._transitioning.hasTransition()},i.prototype.recalculate=function(t){this.properties=this._transitioning.possiblyEvaluate(t)},i.prototype._validate=function(e,i,o){return(!o||!1!==o.validate)&&t.emitValidationErrors(this,e.call(t.validateStyle,t.extend({value:i,style:{glyphs:!0,sprite:!0},styleSpec:t.styleSpec})))},i}(t.Evented),T=function(t,e){this.width=t,this.height=e,this.nextRow=0,this.data=new Uint8Array(this.width*this.height),this.dashEntry={}};T.prototype.getDash=function(t,e){var i=t.join(",")+String(e);return this.dashEntry[i]||(this.dashEntry[i]=this.addDash(t,e)),this.dashEntry[i]},T.prototype.getDashRanges=function(t,e,i){var o=[],r=t.length%2==1?-t[t.length-1]*i:0,a=t[0]*i,n=!0;o.push({left:r,right:a,isDash:n,zeroLength:0===t[0]});for(var s=t[0],l=1;l<t.length;l++){var c=t[l];o.push({left:r=s*i,right:a=(s+=c)*i,isDash:n=!n,zeroLength:0===c})}return o},T.prototype.addRoundDash=function(t,e,i){for(var o=e/2,r=-i;r<=i;r++)for(var a=this.width*(this.nextRow+i+r),n=0,s=t[n],l=0;l<this.width;l++){l/s.right>1&&(s=t[++n]);var c=Math.abs(l-s.left),u=Math.abs(l-s.right),h=Math.min(c,u),p=void 0,d=r/i*(o+1);if(s.isDash){var _=o-Math.abs(d);p=Math.sqrt(h*h+_*_)}else p=o-Math.sqrt(h*h+d*d);this.data[a+l]=Math.max(0,Math.min(255,p+128))}},T.prototype.addRegularDash=function(t){for(var e=t.length-1;e>=0;--e){var i=t[e],o=t[e+1];i.zeroLength?t.splice(e,1):o&&o.isDash===i.isDash&&(o.left=i.left,t.splice(e,1))}var r=t[0],a=t[t.length-1];r.isDash===a.isDash&&(r.left=a.left-this.width,a.right=r.right+this.width);for(var n=this.width*this.nextRow,s=0,l=t[s],c=0;c<this.width;c++){c/l.right>1&&(l=t[++s]);var u=Math.abs(c-l.left),h=Math.abs(c-l.right),p=Math.min(u,h);this.data[n+c]=Math.max(0,Math.min(255,(l.isDash?p:-p)+128))}},T.prototype.addDash=function(e,i){var o=i?7:0,r=2*o+1;if(this.nextRow+r>this.height)return t.warnOnce("LineAtlas out of space"),null;for(var a=0,n=0;n<e.length;n++)a+=e[n];if(0!==a){var s=this.width/a,l=this.getDashRanges(e,this.width,s);i?this.addRoundDash(l,s,o):this.addRegularDash(l)}var c={y:(this.nextRow+o+.5)/this.height,height:2*o/this.height,width:a};return this.nextRow+=r,this.dirty=!0,c},T.prototype.bind=function(t){var e=t.gl;this.texture?(e.bindTexture(e.TEXTURE_2D,this.texture),this.dirty&&(this.dirty=!1,e.texSubImage2D(e.TEXTURE_2D,0,0,0,this.width,this.height,e.ALPHA,e.UNSIGNED_BYTE,this.data))):(this.texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.texture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.ALPHA,this.width,this.height,0,e.ALPHA,e.UNSIGNED_BYTE,this.data))};var E=function e(i,o){this.workerPool=i,this.actors=[],this.currentActor=0,this.id=t.uniqueId();for(var r=this.workerPool.acquire(this.id),a=0;a<r.length;a++){var n=new e.Actor(r[a],o,this.id);n.name="Worker "+a,this.actors.push(n)}};function I(e,i,o){var r=function(r,a){if(r)return o(r);if(a){var n=t.pick(t.extend(a,e),["tiles","minzoom","maxzoom","attribution","mapbox_logo","bounds","scheme","tileSize","encoding"]);a.vector_layers&&(n.vectorLayers=a.vector_layers,n.vectorLayerIds=n.vectorLayers.map((function(t){return t.id}))),n.tiles=i.canonicalizeTileset(n,e.url),o(null,n)}};return e.url?t.getJSON(i.transformRequest(i.normalizeSourceURL(e.url),t.ResourceType.Source),r):t.browser.frame((function(){return r(null,e)}))}E.prototype.broadcast=function(e,i,o){t.asyncAll(this.actors,(function(t,o){t.send(e,i,o)}),o=o||function(){})},E.prototype.getActor=function(){return this.currentActor=(this.currentActor+1)%this.actors.length,this.actors[this.currentActor]},E.prototype.remove=function(){this.actors.forEach((function(t){t.remove()})),this.actors=[],this.workerPool.release(this.id)},E.Actor=t.Actor;var P=function(e,i,o){this.bounds=t.LngLatBounds.convert(this.validateBounds(e)),this.minzoom=i||0,this.maxzoom=o||24};P.prototype.validateBounds=function(t){return Array.isArray(t)&&4===t.length?[Math.max(-180,t[0]),Math.max(-90,t[1]),Math.min(180,t[2]),Math.min(90,t[3])]:[-180,-90,180,90]},P.prototype.contains=function(e){var i=Math.pow(2,e.z),o=Math.floor(t.mercatorXfromLng(this.bounds.getWest())*i),r=Math.floor(t.mercatorYfromLat(this.bounds.getNorth())*i),a=Math.ceil(t.mercatorXfromLng(this.bounds.getEast())*i),n=Math.ceil(t.mercatorYfromLat(this.bounds.getSouth())*i);return e.x>=o&&e.x<a&&e.y>=r&&e.y<n};var S=function(e){function i(i,o,r,a){if(e.call(this),this.id=i,this.dispatcher=r,this.type="vector",this.minzoom=0,this.maxzoom=22,this.scheme="xyz",this.tileSize=512,this.reparseOverscaled=!0,this.isTileClipped=!0,this._loaded=!1,t.extend(this,t.pick(o,["url","scheme","tileSize","promoteId"])),this._options=t.extend({type:"vector"},o),this._collectResourceTiming=o.collectResourceTiming,512!==this.tileSize)throw new Error("vector tile sources must have a tileSize of 512");this.setEventedParent(a)}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.load=function(){var e=this;this._loaded=!1,this.fire(new t.Event("dataloading",{dataType:"source"})),this._tileJSONRequest=I(this._options,this.map._requestManager,(function(i,o){e._tileJSONRequest=null,e._loaded=!0,i?e.fire(new t.ErrorEvent(i)):o&&(t.extend(e,o),o.bounds&&(e.tileBounds=new P(o.bounds,e.minzoom,e.maxzoom)),t.postTurnstileEvent(o.tiles,e.map._requestManager._customAccessToken),t.postMapLoadEvent(o.tiles,e.map._getMapId(),e.map._requestManager._skuToken,e.map._requestManager._customAccessToken),e.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})),e.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})))}))},i.prototype.loaded=function(){return this._loaded},i.prototype.hasTile=function(t){return!this.tileBounds||this.tileBounds.contains(t.canonical)},i.prototype.onAdd=function(t){this.map=t,this.load()},i.prototype.setSourceProperty=function(t){this._tileJSONRequest&&this._tileJSONRequest.cancel(),t(),this.map.style.sourceCaches[this.id].clearTiles(),this.load()},i.prototype.setTiles=function(t){var e=this;return this.setSourceProperty((function(){e._options.tiles=t})),this},i.prototype.setUrl=function(t){var e=this;return this.setSourceProperty((function(){e.url=t,e._options.url=t})),this},i.prototype.onRemove=function(){this._tileJSONRequest&&(this._tileJSONRequest.cancel(),this._tileJSONRequest=null)},i.prototype.serialize=function(){return t.extend({},this._options)},i.prototype.loadTile=function(e,i){var o=this.map._requestManager.normalizeTileURL(e.tileID.canonical.url(this.tiles,this.scheme)),r={request:this.map._requestManager.transformRequest(o,t.ResourceType.Tile),uid:e.uid,tileID:e.tileID,zoom:e.tileID.overscaledZ,tileSize:this.tileSize*e.tileID.overscaleFactor(),type:this.type,source:this.id,pixelRatio:t.browser.devicePixelRatio,showCollisionBoxes:this.map.showCollisionBoxes,promoteId:this.promoteId};function a(o,r){return delete e.request,e.aborted?i(null):o&&404!==o.status?i(o):(r&&r.resourceTiming&&(e.resourceTiming=r.resourceTiming),this.map._refreshExpiredTiles&&r&&e.setExpiryData(r),e.loadVectorData(r,this.map.painter),t.cacheEntryPossiblyAdded(this.dispatcher),i(null),void(e.reloadCallback&&(this.loadTile(e,e.reloadCallback),e.reloadCallback=null)))}r.request.collectResourceTiming=this._collectResourceTiming,e.actor&&"expired"!==e.state?"loading"===e.state?e.reloadCallback=i:e.request=e.actor.send("reloadTile",r,a.bind(this)):(e.actor=this.dispatcher.getActor(),e.request=e.actor.send("loadTile",r,a.bind(this)))},i.prototype.abortTile=function(t){t.request&&(t.request.cancel(),delete t.request),t.actor&&t.actor.send("abortTile",{uid:t.uid,type:this.type,source:this.id},void 0)},i.prototype.unloadTile=function(t){t.unloadVectorData(),t.actor&&t.actor.send("removeTile",{uid:t.uid,type:this.type,source:this.id},void 0)},i.prototype.hasTransition=function(){return!1},i}(t.Evented),C=function(e){function i(i,o,r,a){e.call(this),this.id=i,this.dispatcher=r,this.setEventedParent(a),this.type="raster",this.minzoom=0,this.maxzoom=22,this.roundZoom=!0,this.scheme="xyz",this.tileSize=512,this._loaded=!1,this._options=t.extend({type:"raster"},o),t.extend(this,t.pick(o,["url","scheme","tileSize"]))}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.load=function(){var e=this;this._loaded=!1,this.fire(new t.Event("dataloading",{dataType:"source"})),this._tileJSONRequest=I(this._options,this.map._requestManager,(function(i,o){e._tileJSONRequest=null,e._loaded=!0,i?e.fire(new t.ErrorEvent(i)):o&&(t.extend(e,o),o.bounds&&(e.tileBounds=new P(o.bounds,e.minzoom,e.maxzoom)),t.postTurnstileEvent(o.tiles),t.postMapLoadEvent(o.tiles,e.map._getMapId(),e.map._requestManager._skuToken),e.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})),e.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})))}))},i.prototype.loaded=function(){return this._loaded},i.prototype.onAdd=function(t){this.map=t,this.load()},i.prototype.onRemove=function(){this._tileJSONRequest&&(this._tileJSONRequest.cancel(),this._tileJSONRequest=null)},i.prototype.serialize=function(){return t.extend({},this._options)},i.prototype.hasTile=function(t){return!this.tileBounds||this.tileBounds.contains(t.canonical)},i.prototype.loadTile=function(e,i){var o=this,r=this.map._requestManager.normalizeTileURL(e.tileID.canonical.url(this.tiles,this.scheme),this.tileSize);e.request=t.getImage(this.map._requestManager.transformRequest(r,t.ResourceType.Tile),(function(r,a){if(delete e.request,e.aborted)e.state="unloaded",i(null);else if(r)e.state="errored",i(r);else if(a){o.map._refreshExpiredTiles&&e.setExpiryData(a),delete a.cacheControl,delete a.expires;var n=o.map.painter.context,s=n.gl;e.texture=o.map.painter.getTileTexture(a.width),e.texture?e.texture.update(a,{useMipmap:!0}):(e.texture=new t.Texture(n,a,s.RGBA,{useMipmap:!0}),e.texture.bind(s.LINEAR,s.CLAMP_TO_EDGE,s.LINEAR_MIPMAP_NEAREST),n.extTextureFilterAnisotropic&&s.texParameterf(s.TEXTURE_2D,n.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,n.extTextureFilterAnisotropicMax)),e.state="loaded",t.cacheEntryPossiblyAdded(o.dispatcher),i(null)}}))},i.prototype.abortTile=function(t,e){t.request&&(t.request.cancel(),delete t.request),e()},i.prototype.unloadTile=function(t,e){t.texture&&this.map.painter.saveTileTexture(t.texture),e()},i.prototype.hasTransition=function(){return!1},i}(t.Evented),z=function(e){function i(i,o,r,a){e.call(this,i,o,r,a),this.type="raster-dem",this.maxzoom=22,this._options=t.extend({type:"raster-dem"},o),this.encoding=o.encoding||"mapbox"}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.serialize=function(){return{type:"raster-dem",url:this.url,tileSize:this.tileSize,tiles:this.tiles,bounds:this.bounds,encoding:this.encoding}},i.prototype.loadTile=function(e,i){var o=this.map._requestManager.normalizeTileURL(e.tileID.canonical.url(this.tiles,this.scheme),this.tileSize);function r(t,o){t&&(e.state="errored",i(t)),o&&(e.dem=o,e.needsHillshadePrepare=!0,e.state="loaded",i(null))}e.request=t.getImage(this.map._requestManager.transformRequest(o,t.ResourceType.Tile),function(o,a){if(delete e.request,e.aborted)e.state="unloaded",i(null);else if(o)e.state="errored",i(o);else if(a){this.map._refreshExpiredTiles&&e.setExpiryData(a),delete a.cacheControl,delete a.expires;var n=t.window.ImageBitmap&&a instanceof t.window.ImageBitmap&&t.offscreenCanvasSupported()?a:t.browser.getImageData(a,1),s={uid:e.uid,coord:e.tileID,source:this.id,rawImageData:n,encoding:this.encoding};e.actor&&"expired"!==e.state||(e.actor=this.dispatcher.getActor(),e.actor.send("loadDEMTile",s,r.bind(this)))}}.bind(this)),e.neighboringTiles=this._getNeighboringTiles(e.tileID)},i.prototype._getNeighboringTiles=function(e){var i=e.canonical,o=Math.pow(2,i.z),r=(i.x-1+o)%o,a=0===i.x?e.wrap-1:e.wrap,n=(i.x+1+o)%o,s=i.x+1===o?e.wrap+1:e.wrap,l={};return l[new t.OverscaledTileID(e.overscaledZ,a,i.z,r,i.y).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,s,i.z,n,i.y).key]={backfilled:!1},i.y>0&&(l[new t.OverscaledTileID(e.overscaledZ,a,i.z,r,i.y-1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,e.wrap,i.z,i.x,i.y-1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,s,i.z,n,i.y-1).key]={backfilled:!1}),i.y+1<o&&(l[new t.OverscaledTileID(e.overscaledZ,a,i.z,r,i.y+1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,e.wrap,i.z,i.x,i.y+1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,s,i.z,n,i.y+1).key]={backfilled:!1}),l},i.prototype.unloadTile=function(t){t.demTexture&&this.map.painter.saveTileTexture(t.demTexture),t.fbo&&(t.fbo.destroy(),delete t.fbo),t.dem&&delete t.dem,delete t.neighboringTiles,t.state="unloaded",t.actor&&t.actor.send("removeDEMTile",{uid:t.uid,source:this.id})},i}(C),D=function(e){function i(i,o,r,a){e.call(this),this.id=i,this.type="geojson",this.minzoom=0,this.maxzoom=18,this.tileSize=512,this.isTileClipped=!0,this.reparseOverscaled=!0,this._removed=!1,this._loaded=!1,this.actor=r.getActor(),this.setEventedParent(a),this._data=o.data,this._options=t.extend({},o),this._collectResourceTiming=o.collectResourceTiming,this._resourceTiming=[],void 0!==o.maxzoom&&(this.maxzoom=o.maxzoom),o.type&&(this.type=o.type),o.attribution&&(this.attribution=o.attribution),this.promoteId=o.promoteId;var n=t.EXTENT/this.tileSize;this.workerOptions=t.extend({source:this.id,cluster:o.cluster||!1,geojsonVtOptions:{buffer:(void 0!==o.buffer?o.buffer:128)*n,tolerance:(void 0!==o.tolerance?o.tolerance:.375)*n,extent:t.EXTENT,maxZoom:this.maxzoom,lineMetrics:o.lineMetrics||!1,generateId:o.generateId||!1},superclusterOptions:{maxZoom:void 0!==o.clusterMaxZoom?Math.min(o.clusterMaxZoom,this.maxzoom-1):this.maxzoom-1,minPoints:Math.max(2,o.clusterMinPoints||2),extent:t.EXTENT,radius:(o.clusterRadius||50)*n,log:!1,generateId:o.generateId||!1},clusterProperties:o.clusterProperties,filter:o.filter},o.workerOptions)}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.load=function(){var e=this;this.fire(new t.Event("dataloading",{dataType:"source"})),this._updateWorkerData((function(i){if(i)e.fire(new t.ErrorEvent(i));else{var o={dataType:"source",sourceDataType:"metadata"};e._collectResourceTiming&&e._resourceTiming&&e._resourceTiming.length>0&&(o.resourceTiming=e._resourceTiming,e._resourceTiming=[]),e.fire(new t.Event("data",o))}}))},i.prototype.onAdd=function(t){this.map=t,this.load()},i.prototype.setData=function(e){var i=this;return this._data=e,this.fire(new t.Event("dataloading",{dataType:"source"})),this._updateWorkerData((function(e){if(e)i.fire(new t.ErrorEvent(e));else{var o={dataType:"source",sourceDataType:"content"};i._collectResourceTiming&&i._resourceTiming&&i._resourceTiming.length>0&&(o.resourceTiming=i._resourceTiming,i._resourceTiming=[]),i.fire(new t.Event("data",o))}})),this},i.prototype.getClusterExpansionZoom=function(t,e){return this.actor.send("geojson.getClusterExpansionZoom",{clusterId:t,source:this.id},e),this},i.prototype.getClusterChildren=function(t,e){return this.actor.send("geojson.getClusterChildren",{clusterId:t,source:this.id},e),this},i.prototype.getClusterLeaves=function(t,e,i,o){return this.actor.send("geojson.getClusterLeaves",{source:this.id,clusterId:t,limit:e,offset:i},o),this},i.prototype._updateWorkerData=function(e){var i=this;this._loaded=!1;var o=t.extend({},this.workerOptions),r=this._data;"string"==typeof r?(o.request=this.map._requestManager.transformRequest(t.browser.resolveURL(r),t.ResourceType.Source),o.request.collectResourceTiming=this._collectResourceTiming):o.data=JSON.stringify(r),this.actor.send(this.type+".loadData",o,(function(t,r){i._removed||r&&r.abandoned||(i._loaded=!0,r&&r.resourceTiming&&r.resourceTiming[i.id]&&(i._resourceTiming=r.resourceTiming[i.id].slice(0)),i.actor.send(i.type+".coalesce",{source:o.source},null),e(t))}))},i.prototype.loaded=function(){return this._loaded},i.prototype.loadTile=function(e,i){var o=this,r=e.actor?"reloadTile":"loadTile";e.actor=this.actor,e.request=this.actor.send(r,{type:this.type,uid:e.uid,tileID:e.tileID,zoom:e.tileID.overscaledZ,maxZoom:this.maxzoom,tileSize:this.tileSize,source:this.id,pixelRatio:t.browser.devicePixelRatio,showCollisionBoxes:this.map.showCollisionBoxes,promoteId:this.promoteId},(function(t,a){return delete e.request,e.unloadVectorData(),e.aborted?i(null):t?i(t):(e.loadVectorData(a,o.map.painter,"reloadTile"===r),i(null))}))},i.prototype.abortTile=function(t){t.request&&(t.request.cancel(),delete t.request),t.aborted=!0},i.prototype.unloadTile=function(t){t.unloadVectorData(),this.actor.send("removeTile",{uid:t.uid,type:this.type,source:this.id})},i.prototype.onRemove=function(){this._removed=!0,this.actor.send("removeSource",{type:this.type,source:this.id})},i.prototype.serialize=function(){return t.extend({},this._options,{type:this.type,data:this._data})},i.prototype.hasTransition=function(){return!1},i}(t.Evented),A=t.createLayout([{name:"a_pos",type:"Int16",components:2},{name:"a_texture_pos",type:"Int16",components:2}]),M=function(e){function i(t,i,o,r){e.call(this),this.id=t,this.dispatcher=o,this.coordinates=i.coordinates,this.type="image",this.minzoom=0,this.maxzoom=22,this.tileSize=512,this.tiles={},this._loaded=!1,this.setEventedParent(r),this.options=i}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.load=function(e,i){var o=this;this._loaded=!1,this.fire(new t.Event("dataloading",{dataType:"source"})),this.url=this.options.url,t.getImage(this.map._requestManager.transformRequest(this.url,t.ResourceType.Image),(function(r,a){o._loaded=!0,r?o.fire(new t.ErrorEvent(r)):a&&(o.image=a,e&&(o.coordinates=e),i&&i(),o._finishLoading())}))},i.prototype.loaded=function(){return this._loaded},i.prototype.updateImage=function(t){var e=this;return this.image&&t.url?(this.options.url=t.url,this.load(t.coordinates,(function(){e.texture=null})),this):this},i.prototype._finishLoading=function(){this.map&&(this.setCoordinates(this.coordinates),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})))},i.prototype.onAdd=function(t){this.map=t,this.load()},i.prototype.setCoordinates=function(e){var i=this;this.coordinates=e;var o=e.map(t.MercatorCoordinate.fromLngLat);this.tileID=function(e){for(var i=1/0,o=1/0,r=-1/0,a=-1/0,n=0,s=e;n<s.length;n+=1){var l=s[n];i=Math.min(i,l.x),o=Math.min(o,l.y),r=Math.max(r,l.x),a=Math.max(a,l.y)}var c=Math.max(r-i,a-o),u=Math.max(0,Math.floor(-Math.log(c)/Math.LN2)),h=Math.pow(2,u);return new t.CanonicalTileID(u,Math.floor((i+r)/2*h),Math.floor((o+a)/2*h))}(o),this.minzoom=this.maxzoom=this.tileID.z;var r=o.map((function(t){return i.tileID.getTilePoint(t)._round()}));return this._boundsArray=new t.StructArrayLayout4i8,this._boundsArray.emplaceBack(r[0].x,r[0].y,0,0),this._boundsArray.emplaceBack(r[1].x,r[1].y,t.EXTENT,0),this._boundsArray.emplaceBack(r[3].x,r[3].y,0,t.EXTENT),this._boundsArray.emplaceBack(r[2].x,r[2].y,t.EXTENT,t.EXTENT),this.boundsBuffer&&(this.boundsBuffer.destroy(),delete this.boundsBuffer),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})),this},i.prototype.prepare=function(){if(0!==Object.keys(this.tiles).length&&this.image){var e=this.map.painter.context,i=e.gl;for(var o in this.boundsBuffer||(this.boundsBuffer=e.createVertexBuffer(this._boundsArray,A.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture||(this.texture=new t.Texture(e,this.image,i.RGBA),this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE)),this.tiles){var r=this.tiles[o];"loaded"!==r.state&&(r.state="loaded",r.texture=this.texture)}}},i.prototype.loadTile=function(t,e){this.tileID&&this.tileID.equals(t.tileID.canonical)?(this.tiles[String(t.tileID.wrap)]=t,t.buckets={},e(null)):(t.state="errored",e(null))},i.prototype.serialize=function(){return{type:"image",url:this.options.url,coordinates:this.coordinates}},i.prototype.hasTransition=function(){return!1},i}(t.Evented),L=function(e){function i(t,i,o,r){e.call(this,t,i,o,r),this.roundZoom=!0,this.type="video",this.options=i}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.load=function(){var e=this;this._loaded=!1;var i=this.options;this.urls=[];for(var o=0,r=i.urls;o<r.length;o+=1)this.urls.push(this.map._requestManager.transformRequest(r[o],t.ResourceType.Source).url);t.getVideo(this.urls,(function(i,o){e._loaded=!0,i?e.fire(new t.ErrorEvent(i)):o&&(e.video=o,e.video.loop=!0,e.video.addEventListener("playing",(function(){e.map.triggerRepaint()})),e.map&&e.video.play(),e._finishLoading())}))},i.prototype.pause=function(){this.video&&this.video.pause()},i.prototype.play=function(){this.video&&this.video.play()},i.prototype.seek=function(e){if(this.video){var i=this.video.seekable;e<i.start(0)||e>i.end(0)?this.fire(new t.ErrorEvent(new t.ValidationError("sources."+this.id,null,"Playback for this video can be set only between the "+i.start(0)+" and "+i.end(0)+"-second mark."))):this.video.currentTime=e}},i.prototype.getVideo=function(){return this.video},i.prototype.onAdd=function(t){this.map||(this.map=t,this.load(),this.video&&(this.video.play(),this.setCoordinates(this.coordinates)))},i.prototype.prepare=function(){if(!(0===Object.keys(this.tiles).length||this.video.readyState<2)){var e=this.map.painter.context,i=e.gl;for(var o in this.boundsBuffer||(this.boundsBuffer=e.createVertexBuffer(this._boundsArray,A.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture?this.video.paused||(this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE),i.texSubImage2D(i.TEXTURE_2D,0,0,0,i.RGBA,i.UNSIGNED_BYTE,this.video)):(this.texture=new t.Texture(e,this.video,i.RGBA),this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE)),this.tiles){var r=this.tiles[o];"loaded"!==r.state&&(r.state="loaded",r.texture=this.texture)}}},i.prototype.serialize=function(){return{type:"video",urls:this.urls,coordinates:this.coordinates}},i.prototype.hasTransition=function(){return this.video&&!this.video.paused},i}(M),R=function(e){function i(i,o,r,a){e.call(this,i,o,r,a),o.coordinates?Array.isArray(o.coordinates)&&4===o.coordinates.length&&!o.coordinates.some((function(t){return!Array.isArray(t)||2!==t.length||t.some((function(t){return"number"!=typeof t}))}))||this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'"coordinates" property must be an array of 4 longitude/latitude array pairs'))):this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'missing required property "coordinates"'))),o.animate&&"boolean"!=typeof o.animate&&this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'optional "animate" property must be a boolean value'))),o.canvas?"string"==typeof o.canvas||o.canvas instanceof t.window.HTMLCanvasElement||this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'"canvas" must be either a string representing the ID of the canvas element from which to read, or an HTMLCanvasElement instance'))):this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'missing required property "canvas"'))),this.options=o,this.animate=void 0===o.animate||o.animate}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.load=function(){this._loaded=!0,this.canvas||(this.canvas=this.options.canvas instanceof t.window.HTMLCanvasElement?this.options.canvas:t.window.document.getElementById(this.options.canvas)),this.width=this.canvas.width,this.height=this.canvas.height,this._hasInvalidDimensions()?this.fire(new t.ErrorEvent(new Error("Canvas dimensions cannot be less than or equal to zero."))):(this.play=function(){this._playing=!0,this.map.triggerRepaint()},this.pause=function(){this._playing&&(this.prepare(),this._playing=!1)},this._finishLoading())},i.prototype.getCanvas=function(){return this.canvas},i.prototype.onAdd=function(t){this.map=t,this.load(),this.canvas&&this.animate&&this.play()},i.prototype.onRemove=function(){this.pause()},i.prototype.prepare=function(){var e=!1;if(this.canvas.width!==this.width&&(this.width=this.canvas.width,e=!0),this.canvas.height!==this.height&&(this.height=this.canvas.height,e=!0),!this._hasInvalidDimensions()&&0!==Object.keys(this.tiles).length){var i=this.map.painter.context,o=i.gl;for(var r in this.boundsBuffer||(this.boundsBuffer=i.createVertexBuffer(this._boundsArray,A.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture?(e||this._playing)&&this.texture.update(this.canvas,{premultiply:!0}):this.texture=new t.Texture(i,this.canvas,o.RGBA,{premultiply:!0}),this.tiles){var a=this.tiles[r];"loaded"!==a.state&&(a.state="loaded",a.texture=this.texture)}}},i.prototype.serialize=function(){return{type:"canvas",coordinates:this.coordinates}},i.prototype.hasTransition=function(){return this._playing},i.prototype._hasInvalidDimensions=function(){for(var t=0,e=[this.canvas.width,this.canvas.height];t<e.length;t+=1){var i=e[t];if(isNaN(i)||i<=0)return!0}return!1},i}(M),k={vector:S,raster:C,"raster-dem":z,geojson:D,video:L,image:M,canvas:R};function O(e,i){var o=t.identity([]);return t.translate(o,o,[1,1,0]),t.scale(o,o,[.5*e.width,.5*e.height,1]),t.multiply(o,o,e.calculatePosMatrix(i.toUnwrapped()))}function B(t,e,i,o,r,a){var n=function(t,e,i){if(t)for(var o=0,r=t;o<r.length;o+=1){var a=e[r[o]];if(a&&a.source===i&&"fill-extrusion"===a.type)return!0}else for(var n in e){var s=e[n];if(s.source===i&&"fill-extrusion"===s.type)return!0}return!1}(r&&r.layers,e,t.id),s=a.maxPitchScaleFactor(),l=t.tilesIn(o,s,n);l.sort(F);for(var c=[],u=0,h=l;u<h.length;u+=1){var p=h[u];c.push({wrappedTileID:p.tileID.wrapped().key,queryResults:p.tile.queryRenderedFeatures(e,i,t._state,p.queryGeometry,p.cameraQueryGeometry,p.scale,r,a,s,O(t.transform,p.tileID))})}var d=function(t){for(var e={},i={},o=0,r=t;o<r.length;o+=1){var a=r[o],n=a.queryResults,s=a.wrappedTileID,l=i[s]=i[s]||{};for(var c in n)for(var u=n[c],h=l[c]=l[c]||{},p=e[c]=e[c]||[],d=0,_=u;d<_.length;d+=1){var f=_[d];h[f.featureIndex]||(h[f.featureIndex]=!0,p.push(f))}}return e}(c);for(var _ in d)d[_].forEach((function(e){var i=e.feature,o=t.getFeatureState(i.layer["source-layer"],i.id);i.source=i.layer.source,i.layer["source-layer"]&&(i.sourceLayer=i.layer["source-layer"]),i.state=o}));return d}function F(t,e){var i=t.tileID,o=e.tileID;return i.overscaledZ-o.overscaledZ||i.canonical.y-o.canonical.y||i.wrap-o.wrap||i.canonical.x-o.canonical.x}var U=function(t,e){this.max=t,this.onRemove=e,this.reset()};U.prototype.reset=function(){for(var t in this.data)for(var e=0,i=this.data[t];e<i.length;e+=1){var o=i[e];o.timeout&&clearTimeout(o.timeout),this.onRemove(o.value)}return this.data={},this.order=[],this},U.prototype.add=function(t,e,i){var o=this,r=t.wrapped().key;void 0===this.data[r]&&(this.data[r]=[]);var a={value:e,timeout:void 0};if(void 0!==i&&(a.timeout=setTimeout((function(){o.remove(t,a)}),i)),this.data[r].push(a),this.order.push(r),this.order.length>this.max){var n=this._getAndRemoveByKey(this.order[0]);n&&this.onRemove(n)}return this},U.prototype.has=function(t){return t.wrapped().key in this.data},U.prototype.getAndRemove=function(t){return this.has(t)?this._getAndRemoveByKey(t.wrapped().key):null},U.prototype._getAndRemoveByKey=function(t){var e=this.data[t].shift();return e.timeout&&clearTimeout(e.timeout),0===this.data[t].length&&delete this.data[t],this.order.splice(this.order.indexOf(t),1),e.value},U.prototype.getByKey=function(t){var e=this.data[t];return e?e[0].value:null},U.prototype.get=function(t){return this.has(t)?this.data[t.wrapped().key][0].value:null},U.prototype.remove=function(t,e){if(!this.has(t))return this;var i=t.wrapped().key,o=void 0===e?0:this.data[i].indexOf(e),r=this.data[i][o];return this.data[i].splice(o,1),r.timeout&&clearTimeout(r.timeout),0===this.data[i].length&&delete this.data[i],this.onRemove(r.value),this.order.splice(this.order.indexOf(i),1),this},U.prototype.setMaxSize=function(t){for(this.max=t;this.order.length>this.max;){var e=this._getAndRemoveByKey(this.order[0]);e&&this.onRemove(e)}return this},U.prototype.filter=function(t){var e=[];for(var i in this.data)for(var o=0,r=this.data[i];o<r.length;o+=1){var a=r[o];t(a.value)||e.push(a)}for(var n=0,s=e;n<s.length;n+=1){var l=s[n];this.remove(l.value.tileID,l)}};var N=function(t,e,i){this.context=t;var o=t.gl;this.buffer=o.createBuffer(),this.dynamicDraw=Boolean(i),this.context.unbindVAO(),t.bindElementBuffer.set(this.buffer),o.bufferData(o.ELEMENT_ARRAY_BUFFER,e.arrayBuffer,this.dynamicDraw?o.DYNAMIC_DRAW:o.STATIC_DRAW),this.dynamicDraw||delete e.arrayBuffer};N.prototype.bind=function(){this.context.bindElementBuffer.set(this.buffer)},N.prototype.updateData=function(t){var e=this.context.gl;this.context.unbindVAO(),this.bind(),e.bufferSubData(e.ELEMENT_ARRAY_BUFFER,0,t.arrayBuffer)},N.prototype.destroy=function(){this.buffer&&(this.context.gl.deleteBuffer(this.buffer),delete this.buffer)};var Z={Int8:"BYTE",Uint8:"UNSIGNED_BYTE",Int16:"SHORT",Uint16:"UNSIGNED_SHORT",Int32:"INT",Uint32:"UNSIGNED_INT",Float32:"FLOAT"},q=function(t,e,i,o){this.length=e.length,this.attributes=i,this.itemSize=e.bytesPerElement,this.dynamicDraw=o,this.context=t;var r=t.gl;this.buffer=r.createBuffer(),t.bindVertexBuffer.set(this.buffer),r.bufferData(r.ARRAY_BUFFER,e.arrayBuffer,this.dynamicDraw?r.DYNAMIC_DRAW:r.STATIC_DRAW),this.dynamicDraw||delete e.arrayBuffer};q.prototype.bind=function(){this.context.bindVertexBuffer.set(this.buffer)},q.prototype.updateData=function(t){var e=this.context.gl;this.bind(),e.bufferSubData(e.ARRAY_BUFFER,0,t.arrayBuffer)},q.prototype.enableAttributes=function(t,e){for(var i=0;i<this.attributes.length;i++){var o=e.attributes[this.attributes[i].name];void 0!==o&&t.enableVertexAttribArray(o)}},q.prototype.setVertexAttribPointers=function(t,e,i){for(var o=0;o<this.attributes.length;o++){var r=this.attributes[o],a=e.attributes[r.name];void 0!==a&&t.vertexAttribPointer(a,r.components,t[Z[r.type]],!1,this.itemSize,r.offset+this.itemSize*(i||0))}},q.prototype.destroy=function(){this.buffer&&(this.context.gl.deleteBuffer(this.buffer),delete this.buffer)};var j=function(t){this.gl=t.gl,this.default=this.getDefault(),this.current=this.default,this.dirty=!1};j.prototype.get=function(){return this.current},j.prototype.set=function(t){},j.prototype.getDefault=function(){return this.default},j.prototype.setDefault=function(){this.set(this.default)};var V=function(e){function i(){e.apply(this,arguments)}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.getDefault=function(){return t.Color.transparent},i.prototype.set=function(t){var e=this.current;(t.r!==e.r||t.g!==e.g||t.b!==e.b||t.a!==e.a||this.dirty)&&(this.gl.clearColor(t.r,t.g,t.b,t.a),this.current=t,this.dirty=!1)},i}(j),G=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return 1},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.clearDepth(t),this.current=t,this.dirty=!1)},e}(j),W=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return 0},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.clearStencil(t),this.current=t,this.dirty=!1)},e}(j),X=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return[!0,!0,!0,!0]},e.prototype.set=function(t){var e=this.current;(t[0]!==e[0]||t[1]!==e[1]||t[2]!==e[2]||t[3]!==e[3]||this.dirty)&&(this.gl.colorMask(t[0],t[1],t[2],t[3]),this.current=t,this.dirty=!1)},e}(j),H=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return!0},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.depthMask(t),this.current=t,this.dirty=!1)},e}(j),K=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return 255},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.stencilMask(t),this.current=t,this.dirty=!1)},e}(j),Y=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return{func:this.gl.ALWAYS,ref:0,mask:255}},e.prototype.set=function(t){var e=this.current;(t.func!==e.func||t.ref!==e.ref||t.mask!==e.mask||this.dirty)&&(this.gl.stencilFunc(t.func,t.ref,t.mask),this.current=t,this.dirty=!1)},e}(j),J=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){var t=this.gl;return[t.KEEP,t.KEEP,t.KEEP]},e.prototype.set=function(t){var e=this.current;(t[0]!==e[0]||t[1]!==e[1]||t[2]!==e[2]||this.dirty)&&(this.gl.stencilOp(t[0],t[1],t[2]),this.current=t,this.dirty=!1)},e}(j),Q=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return!1},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;t?e.enable(e.STENCIL_TEST):e.disable(e.STENCIL_TEST),this.current=t,this.dirty=!1}},e}(j),$=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return[0,1]},e.prototype.set=function(t){var e=this.current;(t[0]!==e[0]||t[1]!==e[1]||this.dirty)&&(this.gl.depthRange(t[0],t[1]),this.current=t,this.dirty=!1)},e}(j),tt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return!1},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;t?e.enable(e.DEPTH_TEST):e.disable(e.DEPTH_TEST),this.current=t,this.dirty=!1}},e}(j),et=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return this.gl.LESS},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.depthFunc(t),this.current=t,this.dirty=!1)},e}(j),it=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return!1},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;t?e.enable(e.BLEND):e.disable(e.BLEND),this.current=t,this.dirty=!1}},e}(j),ot=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){var t=this.gl;return[t.ONE,t.ZERO]},e.prototype.set=function(t){var e=this.current;(t[0]!==e[0]||t[1]!==e[1]||this.dirty)&&(this.gl.blendFunc(t[0],t[1]),this.current=t,this.dirty=!1)},e}(j),rt=function(e){function i(){e.apply(this,arguments)}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.getDefault=function(){return t.Color.transparent},i.prototype.set=function(t){var e=this.current;(t.r!==e.r||t.g!==e.g||t.b!==e.b||t.a!==e.a||this.dirty)&&(this.gl.blendColor(t.r,t.g,t.b,t.a),this.current=t,this.dirty=!1)},i}(j),at=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return this.gl.FUNC_ADD},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.blendEquation(t),this.current=t,this.dirty=!1)},e}(j),nt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return!1},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;t?e.enable(e.CULL_FACE):e.disable(e.CULL_FACE),this.current=t,this.dirty=!1}},e}(j),st=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return this.gl.BACK},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.cullFace(t),this.current=t,this.dirty=!1)},e}(j),lt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return this.gl.CCW},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.frontFace(t),this.current=t,this.dirty=!1)},e}(j),ct=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return null},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.useProgram(t),this.current=t,this.dirty=!1)},e}(j),ut=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return this.gl.TEXTURE0},e.prototype.set=function(t){(t!==this.current||this.dirty)&&(this.gl.activeTexture(t),this.current=t,this.dirty=!1)},e}(j),ht=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){var t=this.gl;return[0,0,t.drawingBufferWidth,t.drawingBufferHeight]},e.prototype.set=function(t){var e=this.current;(t[0]!==e[0]||t[1]!==e[1]||t[2]!==e[2]||t[3]!==e[3]||this.dirty)&&(this.gl.viewport(t[0],t[1],t[2],t[3]),this.current=t,this.dirty=!1)},e}(j),pt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return null},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,t),this.current=t,this.dirty=!1}},e}(j),dt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return null},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;e.bindRenderbuffer(e.RENDERBUFFER,t),this.current=t,this.dirty=!1}},e}(j),_t=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return null},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;e.bindTexture(e.TEXTURE_2D,t),this.current=t,this.dirty=!1}},e}(j),ft=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return null},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;e.bindBuffer(e.ARRAY_BUFFER,t),this.current=t,this.dirty=!1}},e}(j),mt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return null},e.prototype.set=function(t){var e=this.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t),this.current=t,this.dirty=!1},e}(j),gt=function(t){function e(e){t.call(this,e),this.vao=e.extVertexArrayObject}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return null},e.prototype.set=function(t){this.vao&&(t!==this.current||this.dirty)&&(this.vao.bindVertexArrayOES(t),this.current=t,this.dirty=!1)},e}(j),vt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return 4},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;e.pixelStorei(e.UNPACK_ALIGNMENT,t),this.current=t,this.dirty=!1}},e}(j),yt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return!1},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t),this.current=t,this.dirty=!1}},e}(j),xt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return!1},e.prototype.set=function(t){if(t!==this.current||this.dirty){var e=this.gl;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t),this.current=t,this.dirty=!1}},e}(j),bt=function(t){function e(e,i){t.call(this,e),this.context=e,this.parent=i}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.getDefault=function(){return null},e}(j),wt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.setDirty=function(){this.dirty=!0},e.prototype.set=function(t){if(t!==this.current||this.dirty){this.context.bindFramebuffer.set(this.parent);var e=this.gl;e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0),this.current=t,this.dirty=!1}},e}(bt),Tt=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.set=function(t){if(t!==this.current||this.dirty){this.context.bindFramebuffer.set(this.parent);var e=this.gl;e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t),this.current=t,this.dirty=!1}},e}(bt),Et=function(t,e,i,o){this.context=t,this.width=e,this.height=i;var r=this.framebuffer=t.gl.createFramebuffer();this.colorAttachment=new wt(t,r),o&&(this.depthAttachment=new Tt(t,r))};Et.prototype.destroy=function(){var t=this.context.gl,e=this.colorAttachment.get();if(e&&t.deleteTexture(e),this.depthAttachment){var i=this.depthAttachment.get();i&&t.deleteRenderbuffer(i)}t.deleteFramebuffer(this.framebuffer)};var It=function(t,e,i){this.func=t,this.mask=e,this.range=i};It.ReadOnly=!1,It.ReadWrite=!0,It.disabled=new It(519,It.ReadOnly,[0,1]);var Pt=function(t,e,i,o,r,a){this.test=t,this.ref=e,this.mask=i,this.fail=o,this.depthFail=r,this.pass=a};Pt.disabled=new Pt({func:519,mask:0},0,0,7680,7680,7680);var St=function(t,e,i){this.blendFunction=t,this.blendColor=e,this.mask=i};St.disabled=new St(St.Replace=[1,0],t.Color.transparent,[!1,!1,!1,!1]),St.unblended=new St(St.Replace,t.Color.transparent,[!0,!0,!0,!0]),St.alphaBlended=new St([1,771],t.Color.transparent,[!0,!0,!0,!0]);var Ct=function(t,e,i){this.enable=t,this.mode=e,this.frontFace=i};Ct.disabled=new Ct(!1,1029,2305),Ct.backCCW=new Ct(!0,1029,2305);var zt=function(t){this.gl=t,this.extVertexArrayObject=this.gl.getExtension("OES_vertex_array_object"),this.clearColor=new V(this),this.clearDepth=new G(this),this.clearStencil=new W(this),this.colorMask=new X(this),this.depthMask=new H(this),this.stencilMask=new K(this),this.stencilFunc=new Y(this),this.stencilOp=new J(this),this.stencilTest=new Q(this),this.depthRange=new $(this),this.depthTest=new tt(this),this.depthFunc=new et(this),this.blend=new it(this),this.blendFunc=new ot(this),this.blendColor=new rt(this),this.blendEquation=new at(this),this.cullFace=new nt(this),this.cullFaceSide=new st(this),this.frontFace=new lt(this),this.program=new ct(this),this.activeTexture=new ut(this),this.viewport=new ht(this),this.bindFramebuffer=new pt(this),this.bindRenderbuffer=new dt(this),this.bindTexture=new _t(this),this.bindVertexBuffer=new ft(this),this.bindElementBuffer=new mt(this),this.bindVertexArrayOES=this.extVertexArrayObject&&new gt(this),this.pixelStoreUnpack=new vt(this),this.pixelStoreUnpackPremultiplyAlpha=new yt(this),this.pixelStoreUnpackFlipY=new xt(this),this.extTextureFilterAnisotropic=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic"),this.extTextureFilterAnisotropic&&(this.extTextureFilterAnisotropicMax=t.getParameter(this.extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)),this.extTextureHalfFloat=t.getExtension("OES_texture_half_float"),this.extTextureHalfFloat&&(t.getExtension("OES_texture_half_float_linear"),this.extRenderToTextureHalfFloat=t.getExtension("EXT_color_buffer_half_float")),this.extTimerQuery=t.getExtension("EXT_disjoint_timer_query"),this.maxTextureSize=t.getParameter(t.MAX_TEXTURE_SIZE)};zt.prototype.setDefault=function(){this.unbindVAO(),this.clearColor.setDefault(),this.clearDepth.setDefault(),this.clearStencil.setDefault(),this.colorMask.setDefault(),this.depthMask.setDefault(),this.stencilMask.setDefault(),this.stencilFunc.setDefault(),this.stencilOp.setDefault(),this.stencilTest.setDefault(),this.depthRange.setDefault(),this.depthTest.setDefault(),this.depthFunc.setDefault(),this.blend.setDefault(),this.blendFunc.setDefault(),this.blendColor.setDefault(),this.blendEquation.setDefault(),this.cullFace.setDefault(),this.cullFaceSide.setDefault(),this.frontFace.setDefault(),this.program.setDefault(),this.activeTexture.setDefault(),this.bindFramebuffer.setDefault(),this.pixelStoreUnpack.setDefault(),this.pixelStoreUnpackPremultiplyAlpha.setDefault(),this.pixelStoreUnpackFlipY.setDefault()},zt.prototype.setDirty=function(){this.clearColor.dirty=!0,this.clearDepth.dirty=!0,this.clearStencil.dirty=!0,this.colorMask.dirty=!0,this.depthMask.dirty=!0,this.stencilMask.dirty=!0,this.stencilFunc.dirty=!0,this.stencilOp.dirty=!0,this.stencilTest.dirty=!0,this.depthRange.dirty=!0,this.depthTest.dirty=!0,this.depthFunc.dirty=!0,this.blend.dirty=!0,this.blendFunc.dirty=!0,this.blendColor.dirty=!0,this.blendEquation.dirty=!0,this.cullFace.dirty=!0,this.cullFaceSide.dirty=!0,this.frontFace.dirty=!0,this.program.dirty=!0,this.activeTexture.dirty=!0,this.viewport.dirty=!0,this.bindFramebuffer.dirty=!0,this.bindRenderbuffer.dirty=!0,this.bindTexture.dirty=!0,this.bindVertexBuffer.dirty=!0,this.bindElementBuffer.dirty=!0,this.extVertexArrayObject&&(this.bindVertexArrayOES.dirty=!0),this.pixelStoreUnpack.dirty=!0,this.pixelStoreUnpackPremultiplyAlpha.dirty=!0,this.pixelStoreUnpackFlipY.dirty=!0},zt.prototype.createIndexBuffer=function(t,e){return new N(this,t,e)},zt.prototype.createVertexBuffer=function(t,e,i){return new q(this,t,e,i)},zt.prototype.createRenderbuffer=function(t,e,i){var o=this.gl,r=o.createRenderbuffer();return this.bindRenderbuffer.set(r),o.renderbufferStorage(o.RENDERBUFFER,t,e,i),this.bindRenderbuffer.set(null),r},zt.prototype.createFramebuffer=function(t,e,i){return new Et(this,t,e,i)},zt.prototype.clear=function(t){var e=t.color,i=t.depth,o=this.gl,r=0;e&&(r|=o.COLOR_BUFFER_BIT,this.clearColor.set(e),this.colorMask.set([!0,!0,!0,!0])),void 0!==i&&(r|=o.DEPTH_BUFFER_BIT,this.depthRange.set([0,1]),this.clearDepth.set(i),this.depthMask.set(!0)),o.clear(r)},zt.prototype.setCullFace=function(t){!1===t.enable?this.cullFace.set(!1):(this.cullFace.set(!0),this.cullFaceSide.set(t.mode),this.frontFace.set(t.frontFace))},zt.prototype.setDepthMode=function(t){t.func!==this.gl.ALWAYS||t.mask?(this.depthTest.set(!0),this.depthFunc.set(t.func),this.depthMask.set(t.mask),this.depthRange.set(t.range)):this.depthTest.set(!1)},zt.prototype.setStencilMode=function(t){t.test.func!==this.gl.ALWAYS||t.mask?(this.stencilTest.set(!0),this.stencilMask.set(t.mask),this.stencilOp.set([t.fail,t.depthFail,t.pass]),this.stencilFunc.set({func:t.test.func,ref:t.ref,mask:t.test.mask})):this.stencilTest.set(!1)},zt.prototype.setColorMode=function(e){t.deepEqual(e.blendFunction,St.Replace)?this.blend.set(!1):(this.blend.set(!0),this.blendFunc.set(e.blendFunction),this.blendColor.set(e.blendColor)),this.colorMask.set(e.mask)},zt.prototype.unbindVAO=function(){this.extVertexArrayObject&&this.bindVertexArrayOES.set(null)};var Dt=function(e){function i(i,o,r){var a=this;e.call(this),this.id=i,this.dispatcher=r,this.on("data",(function(t){"source"===t.dataType&&"metadata"===t.sourceDataType&&(a._sourceLoaded=!0),a._sourceLoaded&&!a._paused&&"source"===t.dataType&&"content"===t.sourceDataType&&(a.reload(),a.transform&&a.update(a.transform))})),this.on("error",(function(){a._sourceErrored=!0})),this._source=function(e,i,o,r){var a=new k[i.type](e,i,o,r);if(a.id!==e)throw new Error("Expected Source id to be "+e+" instead of "+a.id);return t.bindAll(["load","abort","unload","serialize","prepare"],a),a}(i,o,r,this),this._tiles={},this._cache=new U(0,this._unloadTile.bind(this)),this._timers={},this._cacheTimers={},this._maxTileCacheSize=null,this._loadedParentTiles={},this._coveredTiles={},this._state=new t.SourceFeatureState}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.onAdd=function(t){this.map=t,this._maxTileCacheSize=t?t._maxTileCacheSize:null,this._source&&this._source.onAdd&&this._source.onAdd(t)},i.prototype.onRemove=function(t){this._source&&this._source.onRemove&&this._source.onRemove(t)},i.prototype.loaded=function(){if(this._sourceErrored)return!0;if(!this._sourceLoaded)return!1;if(!this._source.loaded())return!1;for(var t in this._tiles){var e=this._tiles[t];if("loaded"!==e.state&&"errored"!==e.state)return!1}return!0},i.prototype.getSource=function(){return this._source},i.prototype.pause=function(){this._paused=!0},i.prototype.resume=function(){if(this._paused){var t=this._shouldReloadOnResume;this._paused=!1,this._shouldReloadOnResume=!1,t&&this.reload(),this.transform&&this.update(this.transform)}},i.prototype._loadTile=function(t,e){return this._source.loadTile(t,e)},i.prototype._unloadTile=function(t){if(this._source.unloadTile)return this._source.unloadTile(t,(function(){}))},i.prototype._abortTile=function(t){if(this._source.abortTile)return this._source.abortTile(t,(function(){}))},i.prototype.serialize=function(){return this._source.serialize()},i.prototype.prepare=function(t){for(var e in this._source.prepare&&this._source.prepare(),this._state.coalesceChanges(this._tiles,this.map?this.map.painter:null),this._tiles){var i=this._tiles[e];i.upload(t),i.prepare(this.map.style.imageManager)}},i.prototype.getIds=function(){return t.values(this._tiles).map((function(t){return t.tileID})).sort(At).map((function(t){return t.key}))},i.prototype.getRenderableIds=function(e){var i=this,o=[];for(var r in this._tiles)this._isIdRenderable(r,e)&&o.push(this._tiles[r]);return e?o.sort((function(e,o){var r=e.tileID,a=o.tileID,n=new t.Point(r.canonical.x,r.canonical.y)._rotate(i.transform.angle),s=new t.Point(a.canonical.x,a.canonical.y)._rotate(i.transform.angle);return r.overscaledZ-a.overscaledZ||s.y-n.y||s.x-n.x})).map((function(t){return t.tileID.key})):o.map((function(t){return t.tileID})).sort(At).map((function(t){return t.key}))},i.prototype.hasRenderableParent=function(t){var e=this.findLoadedParent(t,0);return!!e&&this._isIdRenderable(e.tileID.key)},i.prototype._isIdRenderable=function(t,e){return this._tiles[t]&&this._tiles[t].hasData()&&!this._coveredTiles[t]&&(e||!this._tiles[t].holdingForFade())},i.prototype.reload=function(){if(this._paused)this._shouldReloadOnResume=!0;else for(var t in this._cache.reset(),this._tiles)"errored"!==this._tiles[t].state&&this._reloadTile(t,"reloading")},i.prototype._reloadTile=function(t,e){var i=this._tiles[t];i&&("loading"!==i.state&&(i.state=e),this._loadTile(i,this._tileLoaded.bind(this,i,t,e)))},i.prototype._tileLoaded=function(e,i,o,r){if(r)return e.state="errored",void(404!==r.status?this._source.fire(new t.ErrorEvent(r,{tile:e})):this.update(this.transform));e.timeAdded=t.browser.now(),"expired"===o&&(e.refreshedUponExpiration=!0),this._setTileReloadTimer(i,e),"raster-dem"===this.getSource().type&&e.dem&&this._backfillDEM(e),this._state.initializeTileState(e,this.map?this.map.painter:null),this._source.fire(new t.Event("data",{dataType:"source",tile:e,coord:e.tileID}))},i.prototype._backfillDEM=function(t){for(var e=this.getRenderableIds(),i=0;i<e.length;i++){var o=e[i];if(t.neighboringTiles&&t.neighboringTiles[o]){var r=this.getTileByID(o);a(t,r),a(r,t)}}function a(t,e){t.needsHillshadePrepare=!0;var i=e.tileID.canonical.x-t.tileID.canonical.x,o=e.tileID.canonical.y-t.tileID.canonical.y,r=Math.pow(2,t.tileID.canonical.z),a=e.tileID.key;0===i&&0===o||Math.abs(o)>1||(Math.abs(i)>1&&(1===Math.abs(i+r)?i+=r:1===Math.abs(i-r)&&(i-=r)),e.dem&&t.dem&&(t.dem.backfillBorder(e.dem,i,o),t.neighboringTiles&&t.neighboringTiles[a]&&(t.neighboringTiles[a].backfilled=!0)))}},i.prototype.getTile=function(t){return this.getTileByID(t.key)},i.prototype.getTileByID=function(t){return this._tiles[t]},i.prototype._retainLoadedChildren=function(t,e,i,o){for(var r in this._tiles){var a=this._tiles[r];if(!(o[r]||!a.hasData()||a.tileID.overscaledZ<=e||a.tileID.overscaledZ>i)){for(var n=a.tileID;a&&a.tileID.overscaledZ>e+1;){var s=a.tileID.scaledTo(a.tileID.overscaledZ-1);(a=this._tiles[s.key])&&a.hasData()&&(n=s)}for(var l=n;l.overscaledZ>e;)if(t[(l=l.scaledTo(l.overscaledZ-1)).key]){o[n.key]=n;break}}}},i.prototype.findLoadedParent=function(t,e){if(t.key in this._loadedParentTiles){var i=this._loadedParentTiles[t.key];return i&&i.tileID.overscaledZ>=e?i:null}for(var o=t.overscaledZ-1;o>=e;o--){var r=t.scaledTo(o),a=this._getLoadedTile(r);if(a)return a}},i.prototype._getLoadedTile=function(t){var e=this._tiles[t.key];return e&&e.hasData()?e:this._cache.getByKey(t.wrapped().key)},i.prototype.updateCacheSize=function(t){var e=Math.ceil(t.width/this._source.tileSize)+1,i=Math.ceil(t.height/this._source.tileSize)+1,o=Math.floor(e*i*5),r="number"==typeof this._maxTileCacheSize?Math.min(this._maxTileCacheSize,o):o;this._cache.setMaxSize(r)},i.prototype.handleWrapJump=function(t){var e=Math.round((t-(void 0===this._prevLng?t:this._prevLng))/360);if(this._prevLng=t,e){var i={};for(var o in this._tiles){var r=this._tiles[o];r.tileID=r.tileID.unwrapTo(r.tileID.wrap+e),i[r.tileID.key]=r}for(var a in this._tiles=i,this._timers)clearTimeout(this._timers[a]),delete this._timers[a];for(var n in this._tiles)this._setTileReloadTimer(n,this._tiles[n])}},i.prototype.update=function(e){var o=this;if(this.transform=e,this._sourceLoaded&&!this._paused){var r;this.updateCacheSize(e),this.handleWrapJump(this.transform.center.lng),this._coveredTiles={},this.used?this._source.tileID?r=e.getVisibleUnwrappedCoordinates(this._source.tileID).map((function(e){return new t.OverscaledTileID(e.canonical.z,e.wrap,e.canonical.z,e.canonical.x,e.canonical.y)})):(r=e.coveringTiles({tileSize:this._source.tileSize,minzoom:this._source.minzoom,maxzoom:this._source.maxzoom,roundZoom:this._source.roundZoom,reparseOverscaled:this._source.reparseOverscaled}),this._source.hasTile&&(r=r.filter((function(t){return o._source.hasTile(t)})))):r=[];var a=e.coveringZoomLevel(this._source),n=Math.max(a-i.maxOverzooming,this._source.minzoom),s=Math.max(a+i.maxUnderzooming,this._source.minzoom),l=this._updateRetainedTiles(r,a);if(Mt(this._source.type)){for(var c={},u={},h=0,p=Object.keys(l);h<p.length;h+=1){var d=p[h],_=l[d],f=this._tiles[d];if(f&&!(f.fadeEndTime&&f.fadeEndTime<=t.browser.now())){var m=this.findLoadedParent(_,n);m&&(this._addTile(m.tileID),c[m.tileID.key]=m.tileID),u[d]=_}}for(var g in this._retainLoadedChildren(u,a,s,l),c)l[g]||(this._coveredTiles[g]=!0,l[g]=c[g])}for(var v in l)this._tiles[v].clearFadeHold();for(var y=0,x=t.keysDifference(this._tiles,l);y<x.length;y+=1){var b=x[y],w=this._tiles[b];w.hasSymbolBuckets&&!w.holdingForFade()?w.setHoldDuration(this.map._fadeDuration):w.hasSymbolBuckets&&!w.symbolFadeFinished()||this._removeTile(b)}this._updateLoadedParentTileCache()}},i.prototype.releaseSymbolFadeTiles=function(){for(var t in this._tiles)this._tiles[t].holdingForFade()&&this._removeTile(t)},i.prototype._updateRetainedTiles=function(t,e){for(var o={},r={},a=Math.max(e-i.maxOverzooming,this._source.minzoom),n=Math.max(e+i.maxUnderzooming,this._source.minzoom),s={},l=0,c=t;l<c.length;l+=1){var u=c[l],h=this._addTile(u);o[u.key]=u,h.hasData()||e<this._source.maxzoom&&(s[u.key]=u)}this._retainLoadedChildren(s,e,n,o);for(var p=0,d=t;p<d.length;p+=1){var _=d[p],f=this._tiles[_.key];if(!f.hasData()){if(e+1>this._source.maxzoom){var m=_.children(this._source.maxzoom)[0],g=this.getTile(m);if(g&&g.hasData()){o[m.key]=m;continue}}else{var v=_.children(this._source.maxzoom);if(o[v[0].key]&&o[v[1].key]&&o[v[2].key]&&o[v[3].key])continue}for(var y=f.wasRequested(),x=_.overscaledZ-1;x>=a;--x){var b=_.scaledTo(x);if(r[b.key])break;if(r[b.key]=!0,!(f=this.getTile(b))&&y&&(f=this._addTile(b)),f&&(o[b.key]=b,y=f.wasRequested(),f.hasData()))break}}}return o},i.prototype._updateLoadedParentTileCache=function(){for(var t in this._loadedParentTiles={},this._tiles){for(var e=[],i=void 0,o=this._tiles[t].tileID;o.overscaledZ>0;){if(o.key in this._loadedParentTiles){i=this._loadedParentTiles[o.key];break}e.push(o.key);var r=o.scaledTo(o.overscaledZ-1);if(i=this._getLoadedTile(r))break;o=r}for(var a=0,n=e;a<n.length;a+=1)this._loadedParentTiles[n[a]]=i}},i.prototype._addTile=function(e){var i=this._tiles[e.key];if(i)return i;(i=this._cache.getAndRemove(e))&&(this._setTileReloadTimer(e.key,i),i.tileID=e,this._state.initializeTileState(i,this.map?this.map.painter:null),this._cacheTimers[e.key]&&(clearTimeout(this._cacheTimers[e.key]),delete this._cacheTimers[e.key],this._setTileReloadTimer(e.key,i)));var o=Boolean(i);return o||(i=new t.Tile(e,this._source.tileSize*e.overscaleFactor()),this._loadTile(i,this._tileLoaded.bind(this,i,e.key,i.state))),i?(i.uses++,this._tiles[e.key]=i,o||this._source.fire(new t.Event("dataloading",{tile:i,coord:i.tileID,dataType:"source"})),i):null},i.prototype._setTileReloadTimer=function(t,e){var i=this;t in this._timers&&(clearTimeout(this._timers[t]),delete this._timers[t]);var o=e.getExpiryTimeout();o&&(this._timers[t]=setTimeout((function(){i._reloadTile(t,"expired"),delete i._timers[t]}),o))},i.prototype._removeTile=function(t){var e=this._tiles[t];e&&(e.uses--,delete this._tiles[t],this._timers[t]&&(clearTimeout(this._timers[t]),delete this._timers[t]),e.uses>0||(e.hasData()&&"reloading"!==e.state?this._cache.add(e.tileID,e,e.getExpiryTimeout()):(e.aborted=!0,this._abortTile(e),this._unloadTile(e))))},i.prototype.clearTiles=function(){for(var t in this._shouldReloadOnResume=!1,this._paused=!1,this._tiles)this._removeTile(t);this._cache.reset()},i.prototype.tilesIn=function(e,i,o){var r=this,a=[],n=this.transform;if(!n)return a;for(var s=o?n.getCameraQueryGeometry(e):e,l=e.map((function(t){return n.pointCoordinate(t)})),c=s.map((function(t){return n.pointCoordinate(t)})),u=this.getIds(),h=1/0,p=1/0,d=-1/0,_=-1/0,f=0,m=c;f<m.length;f+=1){var g=m[f];h=Math.min(h,g.x),p=Math.min(p,g.y),d=Math.max(d,g.x),_=Math.max(_,g.y)}for(var v=function(e){var o=r._tiles[u[e]];if(!o.holdingForFade()){var s=o.tileID,f=Math.pow(2,n.zoom-o.tileID.overscaledZ),m=i*o.queryPadding*t.EXTENT/o.tileSize/f,g=[s.getTilePoint(new t.MercatorCoordinate(h,p)),s.getTilePoint(new t.MercatorCoordinate(d,_))];if(g[0].x-m<t.EXTENT&&g[0].y-m<t.EXTENT&&g[1].x+m>=0&&g[1].y+m>=0){var v=l.map((function(t){return s.getTilePoint(t)})),y=c.map((function(t){return s.getTilePoint(t)}));a.push({tile:o,tileID:s,queryGeometry:v,cameraQueryGeometry:y,scale:f})}}},y=0;y<u.length;y++)v(y);return a},i.prototype.getVisibleCoordinates=function(t){for(var e=this,i=this.getRenderableIds(t).map((function(t){return e._tiles[t].tileID})),o=0,r=i;o<r.length;o+=1){var a=r[o];a.posMatrix=this.transform.calculatePosMatrix(a.toUnwrapped())}return i},i.prototype.hasTransition=function(){if(this._source.hasTransition())return!0;if(Mt(this._source.type))for(var e in this._tiles){var i=this._tiles[e];if(void 0!==i.fadeEndTime&&i.fadeEndTime>=t.browser.now())return!0}return!1},i.prototype.setFeatureState=function(t,e,i){this._state.updateState(t=t||"_geojsonTileLayer",e,i)},i.prototype.removeFeatureState=function(t,e,i){this._state.removeFeatureState(t=t||"_geojsonTileLayer",e,i)},i.prototype.getFeatureState=function(t,e){return this._state.getState(t=t||"_geojsonTileLayer",e)},i.prototype.setDependencies=function(t,e,i){var o=this._tiles[t];o&&o.setDependencies(e,i)},i.prototype.reloadTilesForDependencies=function(t,e){for(var i in this._tiles)this._tiles[i].hasDependency(t,e)&&this._reloadTile(i,"reloading");this._cache.filter((function(i){return!i.hasDependency(t,e)}))},i}(t.Evented);function At(t,e){var i=Math.abs(2*t.wrap)-+(t.wrap<0),o=Math.abs(2*e.wrap)-+(e.wrap<0);return t.overscaledZ-e.overscaledZ||o-i||e.canonical.y-t.canonical.y||e.canonical.x-t.canonical.x}function Mt(t){return"raster"===t||"image"===t||"video"===t}function Lt(){return new t.window.Worker(Wr.workerUrl)}Dt.maxOverzooming=10,Dt.maxUnderzooming=3;var Rt="mapboxgl_preloaded_worker_pool",kt=function(){this.active={}};kt.prototype.acquire=function(t){if(!this.workers)for(this.workers=[];this.workers.length<kt.workerCount;)this.workers.push(new Lt);return this.active[t]=!0,this.workers.slice()},kt.prototype.release=function(t){delete this.active[t],0===this.numActive()&&(this.workers.forEach((function(t){t.terminate()})),this.workers=null)},kt.prototype.isPreloaded=function(){return!!this.active[Rt]},kt.prototype.numActive=function(){return Object.keys(this.active).length};var Ot,Bt=Math.floor(t.browser.hardwareConcurrency/2);function Ft(){return Ot||(Ot=new kt),Ot}function Ut(e,i){var o={};for(var r in e)"ref"!==r&&(o[r]=e[r]);return t.refProperties.forEach((function(t){t in i&&(o[t]=i[t])})),o}function Nt(t){t=t.slice();for(var e=Object.create(null),i=0;i<t.length;i++)e[t[i].id]=t[i];for(var o=0;o<t.length;o++)"ref"in t[o]&&(t[o]=Ut(t[o],e[t[o].ref]));return t}kt.workerCount=Math.max(Math.min(Bt,6),1);var Zt={setStyle:"setStyle",addLayer:"addLayer",removeLayer:"removeLayer",setPaintProperty:"setPaintProperty",setLayoutProperty:"setLayoutProperty",setFilter:"setFilter",addSource:"addSource",removeSource:"removeSource",setGeoJSONSourceData:"setGeoJSONSourceData",setLayerZoomRange:"setLayerZoomRange",setLayerProperty:"setLayerProperty",setCenter:"setCenter",setZoom:"setZoom",setBearing:"setBearing",setPitch:"setPitch",setSprite:"setSprite",setGlyphs:"setGlyphs",setTransition:"setTransition",setLight:"setLight"};function qt(t,e,i){i.push({command:Zt.addSource,args:[t,e[t]]})}function jt(t,e,i){e.push({command:Zt.removeSource,args:[t]}),i[t]=!0}function Vt(t,e,i,o){jt(t,i,o),qt(t,e,i)}function Gt(e,i,o){var r;for(r in e[o])if(e[o].hasOwnProperty(r)&&"data"!==r&&!t.deepEqual(e[o][r],i[o][r]))return!1;for(r in i[o])if(i[o].hasOwnProperty(r)&&"data"!==r&&!t.deepEqual(e[o][r],i[o][r]))return!1;return!0}function Wt(e,i,o,r,a,n){var s;for(s in i=i||{},e=e||{})e.hasOwnProperty(s)&&(t.deepEqual(e[s],i[s])||o.push({command:n,args:[r,s,i[s],a]}));for(s in i)i.hasOwnProperty(s)&&!e.hasOwnProperty(s)&&(t.deepEqual(e[s],i[s])||o.push({command:n,args:[r,s,i[s],a]}))}function Xt(t){return t.id}function Ht(t,e){return t[e.id]=e,t}var Kt=function(t,e){this.reset(t,e)};Kt.prototype.reset=function(t,e){this.points=t||[],this._distances=[0];for(var i=1;i<this.points.length;i++)this._distances[i]=this._distances[i-1]+this.points[i].dist(this.points[i-1]);this.length=this._distances[this._distances.length-1],this.padding=Math.min(e||0,.5*this.length),this.paddedLength=this.length-2*this.padding},Kt.prototype.lerp=function(e){if(1===this.points.length)return this.points[0];e=t.clamp(e,0,1);for(var i=1,o=this._distances[i],r=e*this.paddedLength+this.padding;o<r&&i<this._distances.length;)o=this._distances[++i];var a=i-1,n=this._distances[a],s=o-n,l=s>0?(r-n)/s:0;return this.points[a].mult(1-l).add(this.points[i].mult(l))};var Yt=function(t,e,i){var o=this.boxCells=[],r=this.circleCells=[];this.xCellCount=Math.ceil(t/i),this.yCellCount=Math.ceil(e/i);for(var a=0;a<this.xCellCount*this.yCellCount;a++)o.push([]),r.push([]);this.circleKeys=[],this.boxKeys=[],this.bboxes=[],this.circles=[],this.width=t,this.height=e,this.xScale=this.xCellCount/t,this.yScale=this.yCellCount/e,this.boxUid=0,this.circleUid=0};function Jt(e,i,o,r,a){var n=t.create();return i?(t.scale(n,n,[1/a,1/a,1]),o||t.rotateZ(n,n,r.angle)):t.multiply(n,r.labelPlaneMatrix,e),n}function Qt(e,i,o,r,a){if(i){var n=t.clone(e);return t.scale(n,n,[a,a,1]),o||t.rotateZ(n,n,-r.angle),n}return r.glCoordMatrix}function $t(e,i){var o=[e.x,e.y,0,1];ue(o,o,i);var r=o[3];return{point:new t.Point(o[0]/r,o[1]/r),signedDistanceFromCamera:r}}function te(t,e){return.5+t/e*.5}function ee(t,e){var i=t[0]/t[3],o=t[1]/t[3];return i>=-e[0]&&i<=e[0]&&o>=-e[1]&&o<=e[1]}function ie(e,i,o,r,a,n,s,l){var c=r?e.textSizeData:e.iconSizeData,u=t.evaluateSizeForZoom(c,o.transform.zoom),h=[256/o.width*2+1,256/o.height*2+1],p=r?e.text.dynamicLayoutVertexArray:e.icon.dynamicLayoutVertexArray;p.clear();for(var d=e.lineVertexArray,_=r?e.text.placedSymbolArray:e.icon.placedSymbolArray,f=o.transform.width/o.transform.height,m=!1,g=0;g<_.length;g++){var v=_.get(g);if(v.hidden||v.writingMode===t.WritingMode.vertical&&!m)ce(v.numGlyphs,p);else{m=!1;var y=[v.anchorX,v.anchorY,0,1];if(t.transformMat4(y,y,i),ee(y,h)){var x=te(o.transform.cameraToCenterDistance,y[3]),b=t.evaluateSizeForFeature(c,u,v),w=s?b/x:b*x,T=new t.Point(v.anchorX,v.anchorY),E=$t(T,a).point,I={},P=ae(v,w,!1,l,i,a,n,e.glyphOffsetArray,d,p,E,T,I,f);m=P.useVertical,(P.notEnoughRoom||m||P.needsFlipping&&ae(v,w,!0,l,i,a,n,e.glyphOffsetArray,d,p,E,T,I,f).notEnoughRoom)&&ce(v.numGlyphs,p)}else ce(v.numGlyphs,p)}}r?e.text.dynamicLayoutVertexBuffer.updateData(p):e.icon.dynamicLayoutVertexBuffer.updateData(p)}function oe(t,e,i,o,r,a,n,s,l,c,u){var h=s.glyphStartIndex+s.numGlyphs,p=s.lineStartIndex,d=s.lineStartIndex+s.lineLength,_=e.getoffsetX(s.glyphStartIndex),f=e.getoffsetX(h-1),m=se(t*_,i,o,r,a,n,s.segment,p,d,l,c,u);if(!m)return null;var g=se(t*f,i,o,r,a,n,s.segment,p,d,l,c,u);return g?{first:m,last:g}:null}function re(e,i,o,r){return e===t.WritingMode.horizontal&&Math.abs(o.y-i.y)>Math.abs(o.x-i.x)*r?{useVertical:!0}:(e===t.WritingMode.vertical?i.y<o.y:i.x>o.x)?{needsFlipping:!0}:null}function ae(e,i,o,r,a,n,s,l,c,u,h,p,d,_){var f,m=i/24,g=e.lineOffsetX*m,v=e.lineOffsetY*m;if(e.numGlyphs>1){var y=e.glyphStartIndex+e.numGlyphs,x=e.lineStartIndex,b=e.lineStartIndex+e.lineLength,w=oe(m,l,g,v,o,h,p,e,c,n,d);if(!w)return{notEnoughRoom:!0};var T=$t(w.first.point,s).point,E=$t(w.last.point,s).point;if(r&&!o){var I=re(e.writingMode,T,E,_);if(I)return I}f=[w.first];for(var P=e.glyphStartIndex+1;P<y-1;P++)f.push(se(m*l.getoffsetX(P),g,v,o,h,p,e.segment,x,b,c,n,d));f.push(w.last)}else{if(r&&!o){var S=$t(p,a).point,C=e.lineStartIndex+e.segment+1,z=new t.Point(c.getx(C),c.gety(C)),D=$t(z,a),A=D.signedDistanceFromCamera>0?D.point:ne(p,z,S,1,a),M=re(e.writingMode,S,A,_);if(M)return M}var L=se(m*l.getoffsetX(e.glyphStartIndex),g,v,o,h,p,e.segment,e.lineStartIndex,e.lineStartIndex+e.lineLength,c,n,d);if(!L)return{notEnoughRoom:!0};f=[L]}for(var R=0,k=f;R<k.length;R+=1){var O=k[R];t.addDynamicAttributes(u,O.point,O.angle)}return{}}function ne(t,e,i,o,r){var a=$t(t.add(t.sub(e)._unit()),r).point,n=i.sub(a);return i.add(n._mult(o/n.mag()))}function se(e,i,o,r,a,n,s,l,c,u,h,p){var d=r?e-i:e+i,_=d>0?1:-1,f=0;r&&(_*=-1,f=Math.PI),_<0&&(f+=Math.PI);for(var m=_>0?l+s:l+s+1,g=a,v=a,y=0,x=0,b=Math.abs(d),w=[];y+x<=b;){if((m+=_)<l||m>=c)return null;if(v=g,w.push(g),void 0===(g=p[m])){var T=new t.Point(u.getx(m),u.gety(m)),E=$t(T,h);if(E.signedDistanceFromCamera>0)g=p[m]=E.point;else{var I=m-_;g=ne(0===y?n:new t.Point(u.getx(I),u.gety(I)),T,v,b-y+1,h)}}y+=x,x=v.dist(g)}var P=(b-y)/x,S=g.sub(v),C=S.mult(P)._add(v);C._add(S._unit()._perp()._mult(o*_));var z=f+Math.atan2(g.y-v.y,g.x-v.x);return w.push(C),{point:C,angle:z,path:w}}Yt.prototype.keysLength=function(){return this.boxKeys.length+this.circleKeys.length},Yt.prototype.insert=function(t,e,i,o,r){this._forEachCell(e,i,o,r,this._insertBoxCell,this.boxUid++),this.boxKeys.push(t),this.bboxes.push(e),this.bboxes.push(i),this.bboxes.push(o),this.bboxes.push(r)},Yt.prototype.insertCircle=function(t,e,i,o){this._forEachCell(e-o,i-o,e+o,i+o,this._insertCircleCell,this.circleUid++),this.circleKeys.push(t),this.circles.push(e),this.circles.push(i),this.circles.push(o)},Yt.prototype._insertBoxCell=function(t,e,i,o,r,a){this.boxCells[r].push(a)},Yt.prototype._insertCircleCell=function(t,e,i,o,r,a){this.circleCells[r].push(a)},Yt.prototype._query=function(t,e,i,o,r,a){if(i<0||t>this.width||o<0||e>this.height)return!r&&[];var n=[];if(t<=0&&e<=0&&this.width<=i&&this.height<=o){if(r)return!0;for(var s=0;s<this.boxKeys.length;s++)n.push({key:this.boxKeys[s],x1:this.bboxes[4*s],y1:this.bboxes[4*s+1],x2:this.bboxes[4*s+2],y2:this.bboxes[4*s+3]});for(var l=0;l<this.circleKeys.length;l++){var c=this.circles[3*l],u=this.circles[3*l+1],h=this.circles[3*l+2];n.push({key:this.circleKeys[l],x1:c-h,y1:u-h,x2:c+h,y2:u+h})}return a?n.filter(a):n}return this._forEachCell(t,e,i,o,this._queryCell,n,{hitTest:r,seenUids:{box:{},circle:{}}},a),r?n.length>0:n},Yt.prototype._queryCircle=function(t,e,i,o,r){var a=t-i,n=t+i,s=e-i,l=e+i;if(n<0||a>this.width||l<0||s>this.height)return!o&&[];var c=[];return this._forEachCell(a,s,n,l,this._queryCellCircle,c,{hitTest:o,circle:{x:t,y:e,radius:i},seenUids:{box:{},circle:{}}},r),o?c.length>0:c},Yt.prototype.query=function(t,e,i,o,r){return this._query(t,e,i,o,!1,r)},Yt.prototype.hitTest=function(t,e,i,o,r){return this._query(t,e,i,o,!0,r)},Yt.prototype.hitTestCircle=function(t,e,i,o){return this._queryCircle(t,e,i,!0,o)},Yt.prototype._queryCell=function(t,e,i,o,r,a,n,s){var l=n.seenUids,c=this.boxCells[r];if(null!==c)for(var u=this.bboxes,h=0,p=c;h<p.length;h+=1){var d=p[h];if(!l.box[d]){l.box[d]=!0;var _=4*d;if(t<=u[_+2]&&e<=u[_+3]&&i>=u[_+0]&&o>=u[_+1]&&(!s||s(this.boxKeys[d]))){if(n.hitTest)return a.push(!0),!0;a.push({key:this.boxKeys[d],x1:u[_],y1:u[_+1],x2:u[_+2],y2:u[_+3]})}}}var f=this.circleCells[r];if(null!==f)for(var m=this.circles,g=0,v=f;g<v.length;g+=1){var y=v[g];if(!l.circle[y]){l.circle[y]=!0;var x=3*y;if(this._circleAndRectCollide(m[x],m[x+1],m[x+2],t,e,i,o)&&(!s||s(this.circleKeys[y]))){if(n.hitTest)return a.push(!0),!0;var b=m[x],w=m[x+1],T=m[x+2];a.push({key:this.circleKeys[y],x1:b-T,y1:w-T,x2:b+T,y2:w+T})}}}},Yt.prototype._queryCellCircle=function(t,e,i,o,r,a,n,s){var l=n.circle,c=n.seenUids,u=this.boxCells[r];if(null!==u)for(var h=this.bboxes,p=0,d=u;p<d.length;p+=1){var _=d[p];if(!c.box[_]){c.box[_]=!0;var f=4*_;if(this._circleAndRectCollide(l.x,l.y,l.radius,h[f+0],h[f+1],h[f+2],h[f+3])&&(!s||s(this.boxKeys[_])))return a.push(!0),!0}}var m=this.circleCells[r];if(null!==m)for(var g=this.circles,v=0,y=m;v<y.length;v+=1){var x=y[v];if(!c.circle[x]){c.circle[x]=!0;var b=3*x;if(this._circlesCollide(g[b],g[b+1],g[b+2],l.x,l.y,l.radius)&&(!s||s(this.circleKeys[x])))return a.push(!0),!0}}},Yt.prototype._forEachCell=function(t,e,i,o,r,a,n,s){for(var l=this._convertToXCellCoord(t),c=this._convertToYCellCoord(e),u=this._convertToXCellCoord(i),h=this._convertToYCellCoord(o),p=l;p<=u;p++)for(var d=c;d<=h;d++)if(r.call(this,t,e,i,o,this.xCellCount*d+p,a,n,s))return},Yt.prototype._convertToXCellCoord=function(t){return Math.max(0,Math.min(this.xCellCount-1,Math.floor(t*this.xScale)))},Yt.prototype._convertToYCellCoord=function(t){return Math.max(0,Math.min(this.yCellCount-1,Math.floor(t*this.yScale)))},Yt.prototype._circlesCollide=function(t,e,i,o,r,a){var n=o-t,s=r-e,l=i+a;return l*l>n*n+s*s},Yt.prototype._circleAndRectCollide=function(t,e,i,o,r,a,n){var s=(a-o)/2,l=Math.abs(t-(o+s));if(l>s+i)return!1;var c=(n-r)/2,u=Math.abs(e-(r+c));if(u>c+i)return!1;if(l<=s||u<=c)return!0;var h=l-s,p=u-c;return h*h+p*p<=i*i};var le=new Float32Array([-1/0,-1/0,0,-1/0,-1/0,0,-1/0,-1/0,0,-1/0,-1/0,0]);function ce(t,e){for(var i=0;i<t;i++){var o=e.length;e.resize(o+4),e.float32.set(le,3*o)}}function ue(t,e,i){var o=e[0],r=e[1];return t[0]=i[0]*o+i[4]*r+i[12],t[1]=i[1]*o+i[5]*r+i[13],t[3]=i[3]*o+i[7]*r+i[15],t}var he=function(t,e,i){void 0===e&&(e=new Yt(t.width+200,t.height+200,25)),void 0===i&&(i=new Yt(t.width+200,t.height+200,25)),this.transform=t,this.grid=e,this.ignoredGrid=i,this.pitchfactor=Math.cos(t._pitch)*t.cameraToCenterDistance,this.screenRightBoundary=t.width+100,this.screenBottomBoundary=t.height+100,this.gridRightBoundary=t.width+200,this.gridBottomBoundary=t.height+200};function pe(e,i,o){return i*(t.EXTENT/(e.tileSize*Math.pow(2,o-e.tileID.overscaledZ)))}he.prototype.placeCollisionBox=function(t,e,i,o,r){var a=this.projectAndGetPerspectiveRatio(o,t.anchorPointX,t.anchorPointY),n=i*a.perspectiveRatio,s=t.x1*n+a.point.x,l=t.y1*n+a.point.y,c=t.x2*n+a.point.x,u=t.y2*n+a.point.y;return!this.isInsideGrid(s,l,c,u)||!e&&this.grid.hitTest(s,l,c,u,r)?{box:[],offscreen:!1}:{box:[s,l,c,u],offscreen:this.isOffscreen(s,l,c,u)}},he.prototype.placeCollisionCircles=function(e,i,o,r,a,n,s,l,c,u,h,p,d){var _=[],f=new t.Point(i.anchorX,i.anchorY),m=$t(f,n),g=te(this.transform.cameraToCenterDistance,m.signedDistanceFromCamera),v=(u?a/g:a*g)/t.ONE_EM,y=$t(f,s).point,x=oe(v,r,i.lineOffsetX*v,i.lineOffsetY*v,!1,y,f,i,o,s,{}),b=!1,w=!1,T=!0;if(x){for(var E=.5*p*g+d,I=new t.Point(-100,-100),P=new t.Point(this.screenRightBoundary,this.screenBottomBoundary),S=new Kt,C=x.first,z=x.last,D=[],A=C.path.length-1;A>=1;A--)D.push(C.path[A]);for(var M=1;M<z.path.length;M++)D.push(z.path[M]);var L=2.5*E;if(l){var R=D.map((function(t){return $t(t,l)}));D=R.some((function(t){return t.signedDistanceFromCamera<=0}))?[]:R.map((function(t){return t.point}))}var k=[];if(D.length>0){for(var O=D[0].clone(),B=D[0].clone(),F=1;F<D.length;F++)O.x=Math.min(O.x,D[F].x),O.y=Math.min(O.y,D[F].y),B.x=Math.max(B.x,D[F].x),B.y=Math.max(B.y,D[F].y);k=O.x>=I.x&&B.x<=P.x&&O.y>=I.y&&B.y<=P.y?[D]:B.x<I.x||O.x>P.x||B.y<I.y||O.y>P.y?[]:t.clipLine([D],I.x,I.y,P.x,P.y)}for(var U=0,N=k;U<N.length;U+=1){var Z;S.reset(N[U],.25*E),Z=S.length<=.5*E?1:Math.ceil(S.paddedLength/L)+1;for(var q=0;q<Z;q++){var j=q/Math.max(Z-1,1),V=S.lerp(j),G=V.x+100,W=V.y+100;_.push(G,W,E,0);var X=G-E,H=W-E,K=G+E,Y=W+E;if(T=T&&this.isOffscreen(X,H,K,Y),w=w||this.isInsideGrid(X,H,K,Y),!e&&this.grid.hitTestCircle(G,W,E,h)&&(b=!0,!c))return{circles:[],offscreen:!1,collisionDetected:b}}}}return{circles:!c&&b||!w?[]:_,offscreen:T,collisionDetected:b}},he.prototype.queryRenderedSymbols=function(e){if(0===e.length||0===this.grid.keysLength()&&0===this.ignoredGrid.keysLength())return{};for(var i=[],o=1/0,r=1/0,a=-1/0,n=-1/0,s=0,l=e;s<l.length;s+=1){var c=l[s],u=new t.Point(c.x+100,c.y+100);o=Math.min(o,u.x),r=Math.min(r,u.y),a=Math.max(a,u.x),n=Math.max(n,u.y),i.push(u)}for(var h={},p={},d=0,_=this.grid.query(o,r,a,n).concat(this.ignoredGrid.query(o,r,a,n));d<_.length;d+=1){var f=_[d],m=f.key;if(void 0===h[m.bucketInstanceId]&&(h[m.bucketInstanceId]={}),!h[m.bucketInstanceId][m.featureIndex]){var g=[new t.Point(f.x1,f.y1),new t.Point(f.x2,f.y1),new t.Point(f.x2,f.y2),new t.Point(f.x1,f.y2)];t.polygonIntersectsPolygon(i,g)&&(h[m.bucketInstanceId][m.featureIndex]=!0,void 0===p[m.bucketInstanceId]&&(p[m.bucketInstanceId]=[]),p[m.bucketInstanceId].push(m.featureIndex))}}return p},he.prototype.insertCollisionBox=function(t,e,i,o,r){(e?this.ignoredGrid:this.grid).insert({bucketInstanceId:i,featureIndex:o,collisionGroupID:r},t[0],t[1],t[2],t[3])},he.prototype.insertCollisionCircles=function(t,e,i,o,r){for(var a=e?this.ignoredGrid:this.grid,n={bucketInstanceId:i,featureIndex:o,collisionGroupID:r},s=0;s<t.length;s+=4)a.insertCircle(n,t[s],t[s+1],t[s+2])},he.prototype.projectAndGetPerspectiveRatio=function(e,i,o){var r=[i,o,0,1];return ue(r,r,e),{point:new t.Point((r[0]/r[3]+1)/2*this.transform.width+100,(-r[1]/r[3]+1)/2*this.transform.height+100),perspectiveRatio:.5+this.transform.cameraToCenterDistance/r[3]*.5}},he.prototype.isOffscreen=function(t,e,i,o){return i<100||t>=this.screenRightBoundary||o<100||e>this.screenBottomBoundary},he.prototype.isInsideGrid=function(t,e,i,o){return i>=0&&t<this.gridRightBoundary&&o>=0&&e<this.gridBottomBoundary},he.prototype.getViewportMatrix=function(){var e=t.identity([]);return t.translate(e,e,[-100,-100,0]),e};var de=function(t,e,i,o){this.opacity=t?Math.max(0,Math.min(1,t.opacity+(t.placed?e:-e))):o&&i?1:0,this.placed=i};de.prototype.isHidden=function(){return 0===this.opacity&&!this.placed};var _e=function(t,e,i,o,r){this.text=new de(t?t.text:null,e,i,r),this.icon=new de(t?t.icon:null,e,o,r)};_e.prototype.isHidden=function(){return this.text.isHidden()&&this.icon.isHidden()};var fe=function(t,e,i){this.text=t,this.icon=e,this.skipFade=i},me=function(){this.invProjMatrix=t.create(),this.viewportMatrix=t.create(),this.circles=[]},ge=function(t,e,i,o,r){this.bucketInstanceId=t,this.featureIndex=e,this.sourceLayerIndex=i,this.bucketIndex=o,this.tileID=r},ve=function(t){this.crossSourceCollisions=t,this.maxGroupID=0,this.collisionGroups={}};function ye(e,i,o,r,a){var n=t.getAnchorAlignment(e),s=-(n.horizontalAlign-.5)*i,l=-(n.verticalAlign-.5)*o,c=t.evaluateVariableOffset(e,r);return new t.Point(s+c[0]*a,l+c[1]*a)}function xe(e,i,o,r,a,n){var s=e.x1,l=e.x2,c=e.y1,u=e.y2,h=e.anchorPointX,p=e.anchorPointY,d=new t.Point(i,o);return r&&d._rotate(a?n:-n),{x1:s+d.x,y1:c+d.y,x2:l+d.x,y2:u+d.y,anchorPointX:h,anchorPointY:p}}ve.prototype.get=function(t){if(this.crossSourceCollisions)return{ID:0,predicate:null};if(!this.collisionGroups[t]){var e=++this.maxGroupID;this.collisionGroups[t]={ID:e,predicate:function(t){return t.collisionGroupID===e}}}return this.collisionGroups[t]};var be=function(t,e,i,o){this.transform=t.clone(),this.collisionIndex=new he(this.transform),this.placements={},this.opacities={},this.variableOffsets={},this.stale=!1,this.commitTime=0,this.fadeDuration=e,this.retainedQueryData={},this.collisionGroups=new ve(i),this.collisionCircleArrays={},this.prevPlacement=o,o&&(o.prevPlacement=void 0),this.placedOrientations={}};function we(t,e,i,o,r){t.emplaceBack(e?1:0,i?1:0,o||0,r||0),t.emplaceBack(e?1:0,i?1:0,o||0,r||0),t.emplaceBack(e?1:0,i?1:0,o||0,r||0),t.emplaceBack(e?1:0,i?1:0,o||0,r||0)}be.prototype.getBucketParts=function(e,i,o,r){var a=o.getBucket(i),n=o.latestFeatureIndex;if(a&&n&&i.id===a.layerIds[0]){var s=o.collisionBoxArray,l=a.layers[0].layout,c=Math.pow(2,this.transform.zoom-o.tileID.overscaledZ),u=o.tileSize/t.EXTENT,h=this.transform.calculatePosMatrix(o.tileID.toUnwrapped()),p="map"===l.get("text-pitch-alignment"),d="map"===l.get("text-rotation-alignment"),_=pe(o,1,this.transform.zoom),f=Jt(h,p,d,this.transform,_),m=null;if(p){var g=Qt(h,p,d,this.transform,_);m=t.multiply([],this.transform.labelPlaneMatrix,g)}this.retainedQueryData[a.bucketInstanceId]=new ge(a.bucketInstanceId,n,a.sourceLayerIndex,a.index,o.tileID);var v={bucket:a,layout:l,posMatrix:h,textLabelPlaneMatrix:f,labelToScreenMatrix:m,scale:c,textPixelRatio:u,holdingForFade:o.holdingForFade(),collisionBoxArray:s,partiallyEvaluatedTextSize:t.evaluateSizeForZoom(a.textSizeData,this.transform.zoom),collisionGroup:this.collisionGroups.get(a.sourceID)};if(r)for(var y=0,x=a.sortKeyRanges;y<x.length;y+=1){var b=x[y];e.push({sortKey:b.sortKey,symbolInstanceStart:b.symbolInstanceStart,symbolInstanceEnd:b.symbolInstanceEnd,parameters:v})}else e.push({symbolInstanceStart:0,symbolInstanceEnd:a.symbolInstances.length,parameters:v})}},be.prototype.attemptAnchorPlacement=function(t,e,i,o,r,a,n,s,l,c,u,h,p,d,_){var f,m=[h.textOffset0,h.textOffset1],g=ye(t,i,o,m,r),v=this.collisionIndex.placeCollisionBox(xe(e,g.x,g.y,a,n,this.transform.angle),u,s,l,c.predicate);if(!_||0!==this.collisionIndex.placeCollisionBox(xe(_,g.x,g.y,a,n,this.transform.angle),u,s,l,c.predicate).box.length)return v.box.length>0?(this.prevPlacement&&this.prevPlacement.variableOffsets[h.crossTileID]&&this.prevPlacement.placements[h.crossTileID]&&this.prevPlacement.placements[h.crossTileID].text&&(f=this.prevPlacement.variableOffsets[h.crossTileID].anchor),this.variableOffsets[h.crossTileID]={textOffset:m,width:i,height:o,anchor:t,textBoxScale:r,prevAnchor:f},this.markUsedJustification(p,t,h,d),p.allowVerticalPlacement&&(this.markUsedOrientation(p,d,h),this.placedOrientations[h.crossTileID]=d),{shift:g,placedGlyphBoxes:v}):void 0},be.prototype.placeLayerBucketPart=function(e,i,o){var r=this,a=e.parameters,n=a.bucket,s=a.layout,l=a.posMatrix,c=a.textLabelPlaneMatrix,u=a.labelToScreenMatrix,h=a.textPixelRatio,p=a.holdingForFade,d=a.collisionBoxArray,_=a.partiallyEvaluatedTextSize,f=a.collisionGroup,m=s.get("text-optional"),g=s.get("icon-optional"),v=s.get("text-allow-overlap"),y=s.get("icon-allow-overlap"),x="map"===s.get("text-rotation-alignment"),b="map"===s.get("text-pitch-alignment"),w="none"!==s.get("icon-text-fit"),T="viewport-y"===s.get("symbol-z-order"),E=v&&(y||!n.hasIconData()||g),I=y&&(v||!n.hasTextData()||m);!n.collisionArrays&&d&&n.deserializeCollisionBoxes(d);var P=function(e,a){if(!i[e.crossTileID])if(p)r.placements[e.crossTileID]=new fe(!1,!1,!1);else{var d,T=!1,P=!1,S=!0,C=null,z={box:null,offscreen:null},D={box:null,offscreen:null},A=null,M=null,L=0,R=0,k=0;a.textFeatureIndex?L=a.textFeatureIndex:e.useRuntimeCollisionCircles&&(L=e.featureIndex),a.verticalTextFeatureIndex&&(R=a.verticalTextFeatureIndex);var O=a.textBox;if(O){var B=function(i){var o=t.WritingMode.horizontal;if(n.allowVerticalPlacement&&!i&&r.prevPlacement){var a=r.prevPlacement.placedOrientations[e.crossTileID];a&&(r.placedOrientations[e.crossTileID]=a,r.markUsedOrientation(n,o=a,e))}return o},F=function(i,o){if(n.allowVerticalPlacement&&e.numVerticalGlyphVertices>0&&a.verticalTextBox)for(var r=0,s=n.writingModes;r<s.length&&(s[r]===t.WritingMode.vertical?(z=o(),D=z):z=i(),!(z&&z.box&&z.box.length));r+=1);else z=i()};if(s.get("text-variable-anchor")){var U=s.get("text-variable-anchor");if(r.prevPlacement&&r.prevPlacement.variableOffsets[e.crossTileID]){var N=r.prevPlacement.variableOffsets[e.crossTileID];U.indexOf(N.anchor)>0&&(U=U.filter((function(t){return t!==N.anchor}))).unshift(N.anchor)}var Z=function(t,i,o){for(var a=t.x2-t.x1,s=t.y2-t.y1,c=e.textBoxScale,u=w&&!y?i:null,p={box:[],offscreen:!1},d=v?2*U.length:U.length,_=0;_<d;++_){var m=r.attemptAnchorPlacement(U[_%U.length],t,a,s,c,x,b,h,l,f,_>=U.length,e,n,o,u);if(m&&(p=m.placedGlyphBoxes)&&p.box&&p.box.length){T=!0,C=m.shift;break}}return p};F((function(){return Z(O,a.iconBox,t.WritingMode.horizontal)}),(function(){var i=a.verticalTextBox;return n.allowVerticalPlacement&&!(z&&z.box&&z.box.length)&&e.numVerticalGlyphVertices>0&&i?Z(i,a.verticalIconBox,t.WritingMode.vertical):{box:null,offscreen:null}})),z&&(T=z.box,S=z.offscreen);var q=B(z&&z.box);if(!T&&r.prevPlacement){var j=r.prevPlacement.variableOffsets[e.crossTileID];j&&(r.variableOffsets[e.crossTileID]=j,r.markUsedJustification(n,j.anchor,e,q))}}else{var V=function(t,i){var o=r.collisionIndex.placeCollisionBox(t,v,h,l,f.predicate);return o&&o.box&&o.box.length&&(r.markUsedOrientation(n,i,e),r.placedOrientations[e.crossTileID]=i),o};F((function(){return V(O,t.WritingMode.horizontal)}),(function(){var i=a.verticalTextBox;return n.allowVerticalPlacement&&e.numVerticalGlyphVertices>0&&i?V(i,t.WritingMode.vertical):{box:null,offscreen:null}})),B(z&&z.box&&z.box.length)}}if(T=(d=z)&&d.box&&d.box.length>0,S=d&&d.offscreen,e.useRuntimeCollisionCircles){var G=n.text.placedSymbolArray.get(e.centerJustifiedTextSymbolIndex),W=t.evaluateSizeForFeature(n.textSizeData,_,G),X=s.get("text-padding");A=r.collisionIndex.placeCollisionCircles(v,G,n.lineVertexArray,n.glyphOffsetArray,W,l,c,u,o,b,f.predicate,e.collisionCircleDiameter,X),T=v||A.circles.length>0&&!A.collisionDetected,S=S&&A.offscreen}if(a.iconFeatureIndex&&(k=a.iconFeatureIndex),a.iconBox){var H=function(t){var e=w&&C?xe(t,C.x,C.y,x,b,r.transform.angle):t;return r.collisionIndex.placeCollisionBox(e,y,h,l,f.predicate)};P=D&&D.box&&D.box.length&&a.verticalIconBox?(M=H(a.verticalIconBox)).box.length>0:(M=H(a.iconBox)).box.length>0,S=S&&M.offscreen}var K=m||0===e.numHorizontalGlyphVertices&&0===e.numVerticalGlyphVertices,Y=g||0===e.numIconVertices;if(K||Y?Y?K||(P=P&&T):T=P&&T:P=T=P&&T,T&&d&&d.box&&r.collisionIndex.insertCollisionBox(d.box,s.get("text-ignore-placement"),n.bucketInstanceId,D&&D.box&&R?R:L,f.ID),P&&M&&r.collisionIndex.insertCollisionBox(M.box,s.get("icon-ignore-placement"),n.bucketInstanceId,k,f.ID),A&&(T&&r.collisionIndex.insertCollisionCircles(A.circles,s.get("text-ignore-placement"),n.bucketInstanceId,L,f.ID),o)){var J=n.bucketInstanceId,Q=r.collisionCircleArrays[J];void 0===Q&&(Q=r.collisionCircleArrays[J]=new me);for(var $=0;$<A.circles.length;$+=4)Q.circles.push(A.circles[$+0]),Q.circles.push(A.circles[$+1]),Q.circles.push(A.circles[$+2]),Q.circles.push(A.collisionDetected?1:0)}r.placements[e.crossTileID]=new fe(T||E,P||I,S||n.justReloaded),i[e.crossTileID]=!0}};if(T)for(var S=n.getSortedSymbolIndexes(this.transform.angle),C=S.length-1;C>=0;--C){var z=S[C];P(n.symbolInstances.get(z),n.collisionArrays[z])}else for(var D=e.symbolInstanceStart;D<e.symbolInstanceEnd;D++)P(n.symbolInstances.get(D),n.collisionArrays[D]);if(o&&n.bucketInstanceId in this.collisionCircleArrays){var A=this.collisionCircleArrays[n.bucketInstanceId];t.invert(A.invProjMatrix,l),A.viewportMatrix=this.collisionIndex.getViewportMatrix()}n.justReloaded=!1},be.prototype.markUsedJustification=function(e,i,o,r){var a;a=r===t.WritingMode.vertical?o.verticalPlacedTextSymbolIndex:{left:o.leftJustifiedTextSymbolIndex,center:o.centerJustifiedTextSymbolIndex,right:o.rightJustifiedTextSymbolIndex}[t.getAnchorJustification(i)];for(var n=0,s=[o.leftJustifiedTextSymbolIndex,o.centerJustifiedTextSymbolIndex,o.rightJustifiedTextSymbolIndex,o.verticalPlacedTextSymbolIndex];n<s.length;n+=1){var l=s[n];l>=0&&(e.text.placedSymbolArray.get(l).crossTileID=a>=0&&l!==a?0:o.crossTileID)}},be.prototype.markUsedOrientation=function(e,i,o){for(var r=i===t.WritingMode.horizontal||i===t.WritingMode.horizontalOnly?i:0,a=i===t.WritingMode.vertical?i:0,n=0,s=[o.leftJustifiedTextSymbolIndex,o.centerJustifiedTextSymbolIndex,o.rightJustifiedTextSymbolIndex];n<s.length;n+=1)e.text.placedSymbolArray.get(s[n]).placedOrientation=r;o.verticalPlacedTextSymbolIndex&&(e.text.placedSymbolArray.get(o.verticalPlacedTextSymbolIndex).placedOrientation=a)},be.prototype.commit=function(t){this.commitTime=t,this.zoomAtLastRecencyCheck=this.transform.zoom;var e=this.prevPlacement,i=!1;this.prevZoomAdjustment=e?e.zoomAdjustment(this.transform.zoom):0;var o=e?e.symbolFadeChange(t):1,r=e?e.opacities:{},a=e?e.variableOffsets:{},n=e?e.placedOrientations:{};for(var s in this.placements){var l=this.placements[s],c=r[s];c?(this.opacities[s]=new _e(c,o,l.text,l.icon),i=i||l.text!==c.text.placed||l.icon!==c.icon.placed):(this.opacities[s]=new _e(null,o,l.text,l.icon,l.skipFade),i=i||l.text||l.icon)}for(var u in r){var h=r[u];if(!this.opacities[u]){var p=new _e(h,o,!1,!1);p.isHidden()||(this.opacities[u]=p,i=i||h.text.placed||h.icon.placed)}}for(var d in a)this.variableOffsets[d]||!this.opacities[d]||this.opacities[d].isHidden()||(this.variableOffsets[d]=a[d]);for(var _ in n)this.placedOrientations[_]||!this.opacities[_]||this.opacities[_].isHidden()||(this.placedOrientations[_]=n[_]);i?this.lastPlacementChangeTime=t:"number"!=typeof this.lastPlacementChangeTime&&(this.lastPlacementChangeTime=e?e.lastPlacementChangeTime:t)},be.prototype.updateLayerOpacities=function(t,e){for(var i={},o=0,r=e;o<r.length;o+=1){var a=r[o],n=a.getBucket(t);n&&a.latestFeatureIndex&&t.id===n.layerIds[0]&&this.updateBucketOpacities(n,i,a.collisionBoxArray)}},be.prototype.updateBucketOpacities=function(e,i,o){var r=this;e.hasTextData()&&e.text.opacityVertexArray.clear(),e.hasIconData()&&e.icon.opacityVertexArray.clear(),e.hasIconCollisionBoxData()&&e.iconCollisionBox.collisionVertexArray.clear(),e.hasTextCollisionBoxData()&&e.textCollisionBox.collisionVertexArray.clear();var a=e.layers[0].layout,n=new _e(null,0,!1,!1,!0),s=a.get("text-allow-overlap"),l=a.get("icon-allow-overlap"),c=a.get("text-variable-anchor"),u="map"===a.get("text-rotation-alignment"),h="map"===a.get("text-pitch-alignment"),p="none"!==a.get("icon-text-fit"),d=new _e(null,0,s&&(l||!e.hasIconData()||a.get("icon-optional")),l&&(s||!e.hasTextData()||a.get("text-optional")),!0);!e.collisionArrays&&o&&(e.hasIconCollisionBoxData()||e.hasTextCollisionBoxData())&&e.deserializeCollisionBoxes(o);for(var _=function(t,e,i){for(var o=0;o<e/4;o++)t.opacityVertexArray.emplaceBack(i)},f=function(o){var a=e.symbolInstances.get(o),s=a.numHorizontalGlyphVertices,l=a.numVerticalGlyphVertices,f=a.crossTileID,m=r.opacities[f];i[f]?m=n:m||(r.opacities[f]=m=d),i[f]=!0;var g=a.numIconVertices>0,v=r.placedOrientations[a.crossTileID],y=v===t.WritingMode.vertical,x=v===t.WritingMode.horizontal||v===t.WritingMode.horizontalOnly;if(s>0||l>0){var b=De(m.text);_(e.text,s,y?Ae:b),_(e.text,l,x?Ae:b);var w=m.text.isHidden();[a.rightJustifiedTextSymbolIndex,a.centerJustifiedTextSymbolIndex,a.leftJustifiedTextSymbolIndex].forEach((function(t){t>=0&&(e.text.placedSymbolArray.get(t).hidden=w||y?1:0)})),a.verticalPlacedTextSymbolIndex>=0&&(e.text.placedSymbolArray.get(a.verticalPlacedTextSymbolIndex).hidden=w||x?1:0);var T=r.variableOffsets[a.crossTileID];T&&r.markUsedJustification(e,T.anchor,a,v);var E=r.placedOrientations[a.crossTileID];E&&(r.markUsedJustification(e,"left",a,E),r.markUsedOrientation(e,E,a))}if(g){var I=De(m.icon),P=!(p&&a.verticalPlacedIconSymbolIndex&&y);a.placedIconSymbolIndex>=0&&(_(e.icon,a.numIconVertices,P?I:Ae),e.icon.placedSymbolArray.get(a.placedIconSymbolIndex).hidden=m.icon.isHidden()),a.verticalPlacedIconSymbolIndex>=0&&(_(e.icon,a.numVerticalIconVertices,P?Ae:I),e.icon.placedSymbolArray.get(a.verticalPlacedIconSymbolIndex).hidden=m.icon.isHidden())}if(e.hasIconCollisionBoxData()||e.hasTextCollisionBoxData()){var S=e.collisionArrays[o];if(S){var C=new t.Point(0,0);if(S.textBox||S.verticalTextBox){var z=!0;if(c){var D=r.variableOffsets[f];D?(C=ye(D.anchor,D.width,D.height,D.textOffset,D.textBoxScale),u&&C._rotate(h?r.transform.angle:-r.transform.angle)):z=!1}S.textBox&&we(e.textCollisionBox.collisionVertexArray,m.text.placed,!z||y,C.x,C.y),S.verticalTextBox&&we(e.textCollisionBox.collisionVertexArray,m.text.placed,!z||x,C.x,C.y)}var A=Boolean(!x&&S.verticalIconBox);S.iconBox&&we(e.iconCollisionBox.collisionVertexArray,m.icon.placed,A,p?C.x:0,p?C.y:0),S.verticalIconBox&&we(e.iconCollisionBox.collisionVertexArray,m.icon.placed,!A,p?C.x:0,p?C.y:0)}}},m=0;m<e.symbolInstances.length;m++)f(m);if(e.sortFeatures(this.transform.angle),this.retainedQueryData[e.bucketInstanceId]&&(this.retainedQueryData[e.bucketInstanceId].featureSortOrder=e.featureSortOrder),e.hasTextData()&&e.text.opacityVertexBuffer&&e.text.opacityVertexBuffer.updateData(e.text.opacityVertexArray),e.hasIconData()&&e.icon.opacityVertexBuffer&&e.icon.opacityVertexBuffer.updateData(e.icon.opacityVertexArray),e.hasIconCollisionBoxData()&&e.iconCollisionBox.collisionVertexBuffer&&e.iconCollisionBox.collisionVertexBuffer.updateData(e.iconCollisionBox.collisionVertexArray),e.hasTextCollisionBoxData()&&e.textCollisionBox.collisionVertexBuffer&&e.textCollisionBox.collisionVertexBuffer.updateData(e.textCollisionBox.collisionVertexArray),e.bucketInstanceId in this.collisionCircleArrays){var g=this.collisionCircleArrays[e.bucketInstanceId];e.placementInvProjMatrix=g.invProjMatrix,e.placementViewportMatrix=g.viewportMatrix,e.collisionCircleArray=g.circles,delete this.collisionCircleArrays[e.bucketInstanceId]}},be.prototype.symbolFadeChange=function(t){return 0===this.fadeDuration?1:(t-this.commitTime)/this.fadeDuration+this.prevZoomAdjustment},be.prototype.zoomAdjustment=function(t){return Math.max(0,(this.transform.zoom-t)/1.5)},be.prototype.hasTransitions=function(t){return this.stale||t-this.lastPlacementChangeTime<this.fadeDuration},be.prototype.stillRecent=function(t,e){var i=this.zoomAtLastRecencyCheck===e?1-this.zoomAdjustment(e):1;return this.zoomAtLastRecencyCheck=e,this.commitTime+this.fadeDuration*i>t},be.prototype.setStale=function(){this.stale=!0};var Te=Math.pow(2,25),Ee=Math.pow(2,24),Ie=Math.pow(2,17),Pe=Math.pow(2,16),Se=Math.pow(2,9),Ce=Math.pow(2,8),ze=Math.pow(2,1);function De(t){if(0===t.opacity&&!t.placed)return 0;if(1===t.opacity&&t.placed)return 4294967295;var e=t.placed?1:0,i=Math.floor(127*t.opacity);return i*Te+e*Ee+i*Ie+e*Pe+i*Se+e*Ce+i*ze+e}var Ae=0,Me=function(t){this._sortAcrossTiles="viewport-y"!==t.layout.get("symbol-z-order")&&void 0!==t.layout.get("symbol-sort-key").constantOr(1),this._currentTileIndex=0,this._currentPartIndex=0,this._seenCrossTileIDs={},this._bucketParts=[]};Me.prototype.continuePlacement=function(t,e,i,o,r){for(var a=this._bucketParts;this._currentTileIndex<t.length;)if(e.getBucketParts(a,o,t[this._currentTileIndex],this._sortAcrossTiles),this._currentTileIndex++,r())return!0;for(this._sortAcrossTiles&&(this._sortAcrossTiles=!1,a.sort((function(t,e){return t.sortKey-e.sortKey})));this._currentPartIndex<a.length;)if(e.placeLayerBucketPart(a[this._currentPartIndex],this._seenCrossTileIDs,i),this._currentPartIndex++,r())return!0;return!1};var Le=function(t,e,i,o,r,a,n){this.placement=new be(t,r,a,n),this._currentPlacementIndex=e.length-1,this._forceFullPlacement=i,this._showCollisionBoxes=o,this._done=!1};Le.prototype.isDone=function(){return this._done},Le.prototype.continuePlacement=function(e,i,o){for(var r=this,a=t.browser.now(),n=function(){var e=t.browser.now()-a;return!r._forceFullPlacement&&e>2};this._currentPlacementIndex>=0;){var s=i[e[this._currentPlacementIndex]],l=this.placement.collisionIndex.transform.zoom;if("symbol"===s.type&&(!s.minzoom||s.minzoom<=l)&&(!s.maxzoom||s.maxzoom>l)){if(this._inProgressLayer||(this._inProgressLayer=new Me(s)),this._inProgressLayer.continuePlacement(o[s.source],this.placement,this._showCollisionBoxes,s,n))return;delete this._inProgressLayer}this._currentPlacementIndex--}this._done=!0},Le.prototype.commit=function(t){return this.placement.commit(t),this.placement};var Re=512/t.EXTENT/2,ke=function(t,e,i){this.tileID=t,this.indexedSymbolInstances={},this.bucketInstanceId=i;for(var o=0;o<e.length;o++){var r=e.get(o),a=r.key;this.indexedSymbolInstances[a]||(this.indexedSymbolInstances[a]=[]),this.indexedSymbolInstances[a].push({crossTileID:r.crossTileID,coord:this.getScaledCoordinates(r,t)})}};ke.prototype.getScaledCoordinates=function(e,i){var o=Re/Math.pow(2,i.canonical.z-this.tileID.canonical.z);return{x:Math.floor((i.canonical.x*t.EXTENT+e.anchorX)*o),y:Math.floor((i.canonical.y*t.EXTENT+e.anchorY)*o)}},ke.prototype.findMatches=function(t,e,i){for(var o=this.tileID.canonical.z<e.canonical.z?1:Math.pow(2,this.tileID.canonical.z-e.canonical.z),r=0;r<t.length;r++){var a=t.get(r);if(!a.crossTileID){var n=this.indexedSymbolInstances[a.key];if(n)for(var s=this.getScaledCoordinates(a,e),l=0,c=n;l<c.length;l+=1){var u=c[l];if(Math.abs(u.coord.x-s.x)<=o&&Math.abs(u.coord.y-s.y)<=o&&!i[u.crossTileID]){i[u.crossTileID]=!0,a.crossTileID=u.crossTileID;break}}}}};var Oe=function(){this.maxCrossTileID=0};Oe.prototype.generate=function(){return++this.maxCrossTileID};var Be=function(){this.indexes={},this.usedCrossTileIDs={},this.lng=0};Be.prototype.handleWrapJump=function(t){var e=Math.round((t-this.lng)/360);if(0!==e)for(var i in this.indexes){var o=this.indexes[i],r={};for(var a in o){var n=o[a];n.tileID=n.tileID.unwrapTo(n.tileID.wrap+e),r[n.tileID.key]=n}this.indexes[i]=r}this.lng=t},Be.prototype.addBucket=function(t,e,i){if(this.indexes[t.overscaledZ]&&this.indexes[t.overscaledZ][t.key]){if(this.indexes[t.overscaledZ][t.key].bucketInstanceId===e.bucketInstanceId)return!1;this.removeBucketCrossTileIDs(t.overscaledZ,this.indexes[t.overscaledZ][t.key])}for(var o=0;o<e.symbolInstances.length;o++)e.symbolInstances.get(o).crossTileID=0;this.usedCrossTileIDs[t.overscaledZ]||(this.usedCrossTileIDs[t.overscaledZ]={});var r=this.usedCrossTileIDs[t.overscaledZ];for(var a in this.indexes){var n=this.indexes[a];if(Number(a)>t.overscaledZ)for(var s in n){var l=n[s];l.tileID.isChildOf(t)&&l.findMatches(e.symbolInstances,t,r)}else{var c=n[t.scaledTo(Number(a)).key];c&&c.findMatches(e.symbolInstances,t,r)}}for(var u=0;u<e.symbolInstances.length;u++){var h=e.symbolInstances.get(u);h.crossTileID||(h.crossTileID=i.generate(),r[h.crossTileID]=!0)}return void 0===this.indexes[t.overscaledZ]&&(this.indexes[t.overscaledZ]={}),this.indexes[t.overscaledZ][t.key]=new ke(t,e.symbolInstances,e.bucketInstanceId),!0},Be.prototype.removeBucketCrossTileIDs=function(t,e){for(var i in e.indexedSymbolInstances)for(var o=0,r=e.indexedSymbolInstances[i];o<r.length;o+=1)delete this.usedCrossTileIDs[t][r[o].crossTileID]},Be.prototype.removeStaleBuckets=function(t){var e=!1;for(var i in this.indexes){var o=this.indexes[i];for(var r in o)t[o[r].bucketInstanceId]||(this.removeBucketCrossTileIDs(i,o[r]),delete o[r],e=!0)}return e};var Fe=function(){this.layerIndexes={},this.crossTileIDs=new Oe,this.maxBucketInstanceId=0,this.bucketsInCurrentPlacement={}};Fe.prototype.addLayer=function(t,e,i){var o=this.layerIndexes[t.id];void 0===o&&(o=this.layerIndexes[t.id]=new Be);var r=!1,a={};o.handleWrapJump(i);for(var n=0,s=e;n<s.length;n+=1){var l=s[n],c=l.getBucket(t);c&&t.id===c.layerIds[0]&&(c.bucketInstanceId||(c.bucketInstanceId=++this.maxBucketInstanceId),o.addBucket(l.tileID,c,this.crossTileIDs)&&(r=!0),a[c.bucketInstanceId]=!0)}return o.removeStaleBuckets(a)&&(r=!0),r},Fe.prototype.pruneUnusedLayers=function(t){var e={};for(var i in t.forEach((function(t){e[t]=!0})),this.layerIndexes)e[i]||delete this.layerIndexes[i]};var Ue=function(e,i){return t.emitValidationErrors(e,i&&i.filter((function(t){return"source.canvas"!==t.identifier})))},Ne=t.pick(Zt,["addLayer","removeLayer","setPaintProperty","setLayoutProperty","setFilter","addSource","removeSource","setLayerZoomRange","setLight","setTransition","setGeoJSONSourceData"]),Ze=t.pick(Zt,["setCenter","setZoom","setBearing","setPitch"]),qe=function(){var e={},i=t.styleSpec.$version;for(var o in t.styleSpec.$root){var r,a=t.styleSpec.$root[o];if(a.required)null!=(r="version"===o?i:"array"===a.type?[]:{})&&(e[o]=r)}return e}(),je=function(e){function i(o,r){var a=this;void 0===r&&(r={}),e.call(this),this.map=o,this.dispatcher=new E(Ft(),this),this.imageManager=new p,this.imageManager.setEventedParent(this),this.glyphManager=new y(o._requestManager,r.localIdeographFontFamily),this.lineAtlas=new T(256,512),this.crossTileSymbolIndex=new Fe,this._layers={},this._serializedLayers={},this._order=[],this.sourceCaches={},this.zoomHistory=new t.ZoomHistory,this._loaded=!1,this._availableImages=[],this._resetUpdates(),this.dispatcher.broadcast("setReferrer",t.getReferrer());var n=this;this._rtlTextPluginCallback=i.registerForPluginStateChange((function(e){n.dispatcher.broadcast("syncRTLPluginState",{pluginStatus:e.pluginStatus,pluginURL:e.pluginURL},(function(e,i){if(t.triggerPluginCompletionEvent(e),i&&i.every((function(t){return t})))for(var o in n.sourceCaches)n.sourceCaches[o].reload()}))})),this.on("data",(function(t){if("source"===t.dataType&&"metadata"===t.sourceDataType){var e=a.sourceCaches[t.sourceId];if(e){var i=e.getSource();if(i&&i.vectorLayerIds)for(var o in a._layers){var r=a._layers[o];r.source===i.id&&a._validateLayer(r)}}}}))}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.loadURL=function(e,i){var o=this;void 0===i&&(i={}),this.fire(new t.Event("dataloading",{dataType:"style"}));var r="boolean"==typeof i.validate?i.validate:!t.isMapboxURL(e);e=this.map._requestManager.normalizeStyleURL(e,i.accessToken);var a=this.map._requestManager.transformRequest(e,t.ResourceType.Style);this._request=t.getJSON(a,(function(e,i){o._request=null,e?o.fire(new t.ErrorEvent(e)):i&&o._load(i,r)}))},i.prototype.loadJSON=function(e,i){var o=this;void 0===i&&(i={}),this.fire(new t.Event("dataloading",{dataType:"style"})),this._request=t.browser.frame((function(){o._request=null,o._load(e,!1!==i.validate)}))},i.prototype.loadEmpty=function(){this.fire(new t.Event("dataloading",{dataType:"style"})),this._load(qe,!1)},i.prototype._load=function(e,i){if(!i||!Ue(this,t.validateStyle(e))){for(var o in this._loaded=!0,this.stylesheet=e,e.sources)this.addSource(o,e.sources[o],{validate:!1});e.sprite?this._loadSprite(e.sprite):this.imageManager.setLoaded(!0),this.glyphManager.setURL(e.glyphs);var r=Nt(this.stylesheet.layers);this._order=r.map((function(t){return t.id})),this._layers={},this._serializedLayers={};for(var a=0,n=r;a<n.length;a+=1){var s=n[a];(s=t.createStyleLayer(s)).setEventedParent(this,{layer:{id:s.id}}),this._layers[s.id]=s,this._serializedLayers[s.id]=s.serialize()}this.dispatcher.broadcast("setLayers",this._serializeLayers(this._order)),this.light=new w(this.stylesheet.light),this.fire(new t.Event("data",{dataType:"style"})),this.fire(new t.Event("style.load"))}},i.prototype._loadSprite=function(e){var i=this;this._spriteRequest=function(e,i,o){var r,a,n,s=t.browser.devicePixelRatio>1?"@2x":"",l=t.getJSON(i.transformRequest(i.normalizeSpriteURL(e,s,".json"),t.ResourceType.SpriteJSON),(function(t,e){l=null,n||(n=t,r=e,u())})),c=t.getImage(i.transformRequest(i.normalizeSpriteURL(e,s,".png"),t.ResourceType.SpriteImage),(function(t,e){c=null,n||(n=t,a=e,u())}));function u(){if(n)o(n);else if(r&&a){var e=t.browser.getImageData(a),i={};for(var s in r){var l=r[s],c=l.width,u=l.height,h=l.x,p=l.y,d=l.sdf,_=l.pixelRatio,f=l.stretchX,m=l.stretchY,g=l.content,v=new t.RGBAImage({width:c,height:u});t.RGBAImage.copy(e,v,{x:h,y:p},{x:0,y:0},{width:c,height:u}),i[s]={data:v,pixelRatio:_,sdf:d,stretchX:f,stretchY:m,content:g}}o(null,i)}}return{cancel:function(){l&&(l.cancel(),l=null),c&&(c.cancel(),c=null)}}}(e,this.map._requestManager,(function(e,o){if(i._spriteRequest=null,e)i.fire(new t.ErrorEvent(e));else if(o)for(var r in o)i.imageManager.addImage(r,o[r]);i.imageManager.setLoaded(!0),i._availableImages=i.imageManager.listImages(),i.dispatcher.broadcast("setImages",i._availableImages),i.fire(new t.Event("data",{dataType:"style"}))}))},i.prototype._validateLayer=function(e){var i=this.sourceCaches[e.source];if(i){var o=e.sourceLayer;if(o){var r=i.getSource();("geojson"===r.type||r.vectorLayerIds&&-1===r.vectorLayerIds.indexOf(o))&&this.fire(new t.ErrorEvent(new Error('Source layer "'+o+'" does not exist on source "'+r.id+'" as specified by style layer "'+e.id+'"')))}}},i.prototype.loaded=function(){if(!this._loaded)return!1;if(Object.keys(this._updatedSources).length)return!1;for(var t in this.sourceCaches)if(!this.sourceCaches[t].loaded())return!1;return!!this.imageManager.isLoaded()},i.prototype._serializeLayers=function(t){for(var e=[],i=0,o=t;i<o.length;i+=1){var r=this._layers[o[i]];"custom"!==r.type&&e.push(r.serialize())}return e},i.prototype.hasTransitions=function(){if(this.light&&this.light.hasTransition())return!0;for(var t in this.sourceCaches)if(this.sourceCaches[t].hasTransition())return!0;for(var e in this._layers)if(this._layers[e].hasTransition())return!0;return!1},i.prototype._checkLoaded=function(){if(!this._loaded)throw new Error("Style is not done loading")},i.prototype.update=function(e){if(this._loaded){var i=this._changed;if(this._changed){var o=Object.keys(this._updatedLayers),r=Object.keys(this._removedLayers);for(var a in(o.length||r.length)&&this._updateWorkerLayers(o,r),this._updatedSources){var n=this._updatedSources[a];"reload"===n?this._reloadSource(a):"clear"===n&&this._clearSource(a)}for(var s in this._updateTilesForChangedImages(),this._updatedPaintProps)this._layers[s].updateTransitions(e);this.light.updateTransitions(e),this._resetUpdates()}var l={};for(var c in this.sourceCaches){var u=this.sourceCaches[c];l[c]=u.used,u.used=!1}for(var h=0,p=this._order;h<p.length;h+=1){var d=this._layers[p[h]];d.recalculate(e,this._availableImages),!d.isHidden(e.zoom)&&d.source&&(this.sourceCaches[d.source].used=!0)}for(var _ in l){var f=this.sourceCaches[_];l[_]!==f.used&&f.fire(new t.Event("data",{sourceDataType:"visibility",dataType:"source",sourceId:_}))}this.light.recalculate(e),this.z=e.zoom,i&&this.fire(new t.Event("data",{dataType:"style"}))}},i.prototype._updateTilesForChangedImages=function(){var t=Object.keys(this._changedImages);if(t.length){for(var e in this.sourceCaches)this.sourceCaches[e].reloadTilesForDependencies(["icons","patterns"],t);this._changedImages={}}},i.prototype._updateWorkerLayers=function(t,e){this.dispatcher.broadcast("updateLayers",{layers:this._serializeLayers(t),removedIds:e})},i.prototype._resetUpdates=function(){this._changed=!1,this._updatedLayers={},this._removedLayers={},this._updatedSources={},this._updatedPaintProps={},this._changedImages={}},i.prototype.setState=function(e){var i=this;if(this._checkLoaded(),Ue(this,t.validateStyle(e)))return!1;(e=t.clone$1(e)).layers=Nt(e.layers);var o=function(e,i){if(!e)return[{command:Zt.setStyle,args:[i]}];var o=[];try{if(!t.deepEqual(e.version,i.version))return[{command:Zt.setStyle,args:[i]}];t.deepEqual(e.center,i.center)||o.push({command:Zt.setCenter,args:[i.center]}),t.deepEqual(e.zoom,i.zoom)||o.push({command:Zt.setZoom,args:[i.zoom]}),t.deepEqual(e.bearing,i.bearing)||o.push({command:Zt.setBearing,args:[i.bearing]}),t.deepEqual(e.pitch,i.pitch)||o.push({command:Zt.setPitch,args:[i.pitch]}),t.deepEqual(e.sprite,i.sprite)||o.push({command:Zt.setSprite,args:[i.sprite]}),t.deepEqual(e.glyphs,i.glyphs)||o.push({command:Zt.setGlyphs,args:[i.glyphs]}),t.deepEqual(e.transition,i.transition)||o.push({command:Zt.setTransition,args:[i.transition]}),t.deepEqual(e.light,i.light)||o.push({command:Zt.setLight,args:[i.light]});var r={},a=[];!function(e,i,o,r){var a;for(a in i=i||{},e=e||{})e.hasOwnProperty(a)&&(i.hasOwnProperty(a)||jt(a,o,r));for(a in i)i.hasOwnProperty(a)&&(e.hasOwnProperty(a)?t.deepEqual(e[a],i[a])||("geojson"===e[a].type&&"geojson"===i[a].type&&Gt(e,i,a)?o.push({command:Zt.setGeoJSONSourceData,args:[a,i[a].data]}):Vt(a,i,o,r)):qt(a,i,o))}(e.sources,i.sources,a,r);var n=[];e.layers&&e.layers.forEach((function(t){r[t.source]?o.push({command:Zt.removeLayer,args:[t.id]}):n.push(t)})),o=o.concat(a),function(e,i,o){i=i||[];var r,a,n,s,l,c,u,h=(e=e||[]).map(Xt),p=i.map(Xt),d=e.reduce(Ht,{}),_=i.reduce(Ht,{}),f=h.slice(),m=Object.create(null);for(r=0,a=0;r<h.length;r++)_.hasOwnProperty(n=h[r])?a++:(o.push({command:Zt.removeLayer,args:[n]}),f.splice(f.indexOf(n,a),1));for(r=0,a=0;r<p.length;r++)f[f.length-1-r]!==(n=p[p.length-1-r])&&(d.hasOwnProperty(n)?(o.push({command:Zt.removeLayer,args:[n]}),f.splice(f.lastIndexOf(n,f.length-a),1)):a++,o.push({command:Zt.addLayer,args:[_[n],c=f[f.length-r]]}),f.splice(f.length-r,0,n),m[n]=!0);for(r=0;r<p.length;r++)if(s=d[n=p[r]],l=_[n],!m[n]&&!t.deepEqual(s,l))if(t.deepEqual(s.source,l.source)&&t.deepEqual(s["source-layer"],l["source-layer"])&&t.deepEqual(s.type,l.type)){for(u in Wt(s.layout,l.layout,o,n,null,Zt.setLayoutProperty),Wt(s.paint,l.paint,o,n,null,Zt.setPaintProperty),t.deepEqual(s.filter,l.filter)||o.push({command:Zt.setFilter,args:[n,l.filter]}),t.deepEqual(s.minzoom,l.minzoom)&&t.deepEqual(s.maxzoom,l.maxzoom)||o.push({command:Zt.setLayerZoomRange,args:[n,l.minzoom,l.maxzoom]}),s)s.hasOwnProperty(u)&&"layout"!==u&&"paint"!==u&&"filter"!==u&&"metadata"!==u&&"minzoom"!==u&&"maxzoom"!==u&&(0===u.indexOf("paint.")?Wt(s[u],l[u],o,n,u.slice(6),Zt.setPaintProperty):t.deepEqual(s[u],l[u])||o.push({command:Zt.setLayerProperty,args:[n,u,l[u]]}));for(u in l)l.hasOwnProperty(u)&&!s.hasOwnProperty(u)&&"layout"!==u&&"paint"!==u&&"filter"!==u&&"metadata"!==u&&"minzoom"!==u&&"maxzoom"!==u&&(0===u.indexOf("paint.")?Wt(s[u],l[u],o,n,u.slice(6),Zt.setPaintProperty):t.deepEqual(s[u],l[u])||o.push({command:Zt.setLayerProperty,args:[n,u,l[u]]}))}else o.push({command:Zt.removeLayer,args:[n]}),c=f[f.lastIndexOf(n)+1],o.push({command:Zt.addLayer,args:[l,c]})}(n,i.layers,o)}catch(t){console.warn("Unable to compute style diff:",t),o=[{command:Zt.setStyle,args:[i]}]}return o}(this.serialize(),e).filter((function(t){return!(t.command in Ze)}));if(0===o.length)return!1;var r=o.filter((function(t){return!(t.command in Ne)}));if(r.length>0)throw new Error("Unimplemented: "+r.map((function(t){return t.command})).join(", ")+".");return o.forEach((function(t){"setTransition"!==t.command&&i[t.command].apply(i,t.args)})),this.stylesheet=e,!0},i.prototype.addImage=function(e,i){if(this.getImage(e))return this.fire(new t.ErrorEvent(new Error("An image with this name already exists.")));this.imageManager.addImage(e,i),this._afterImageUpdated(e)},i.prototype.updateImage=function(t,e){this.imageManager.updateImage(t,e)},i.prototype.getImage=function(t){return this.imageManager.getImage(t)},i.prototype.removeImage=function(e){if(!this.getImage(e))return this.fire(new t.ErrorEvent(new Error("No image with this name exists.")));this.imageManager.removeImage(e),this._afterImageUpdated(e)},i.prototype._afterImageUpdated=function(e){this._availableImages=this.imageManager.listImages(),this._changedImages[e]=!0,this._changed=!0,this.dispatcher.broadcast("setImages",this._availableImages),this.fire(new t.Event("data",{dataType:"style"}))},i.prototype.listImages=function(){return this._checkLoaded(),this.imageManager.listImages()},i.prototype.addSource=function(e,i,o){var r=this;if(void 0===o&&(o={}),this._checkLoaded(),void 0!==this.sourceCaches[e])throw new Error("There is already a source with this ID");if(!i.type)throw new Error("The type property must be defined, but only the following properties were given: "+Object.keys(i).join(", ")+".");if(!(["vector","raster","geojson","video","image"].indexOf(i.type)>=0&&this._validate(t.validateStyle.source,"sources."+e,i,null,o))){this.map&&this.map._collectResourceTiming&&(i.collectResourceTiming=!0);var a=this.sourceCaches[e]=new Dt(e,i,this.dispatcher);a.style=this,a.setEventedParent(this,(function(){return{isSourceLoaded:r.loaded(),source:a.serialize(),sourceId:e}})),a.onAdd(this.map),this._changed=!0}},i.prototype.removeSource=function(e){if(this._checkLoaded(),void 0===this.sourceCaches[e])throw new Error("There is no source with this ID");for(var i in this._layers)if(this._layers[i].source===e)return this.fire(new t.ErrorEvent(new Error('Source "'+e+'" cannot be removed while layer "'+i+'" is using it.')));var o=this.sourceCaches[e];delete this.sourceCaches[e],delete this._updatedSources[e],o.fire(new t.Event("data",{sourceDataType:"metadata",dataType:"source",sourceId:e})),o.setEventedParent(null),o.clearTiles(),o.onRemove&&o.onRemove(this.map),this._changed=!0},i.prototype.setGeoJSONSourceData=function(t,e){this._checkLoaded(),this.sourceCaches[t].getSource().setData(e),this._changed=!0},i.prototype.getSource=function(t){return this.sourceCaches[t]&&this.sourceCaches[t].getSource()},i.prototype.addLayer=function(e,i,o){void 0===o&&(o={}),this._checkLoaded();var r=e.id;if(this.getLayer(r))this.fire(new t.ErrorEvent(new Error('Layer with id "'+r+'" already exists on this map')));else{var a;if("custom"===e.type){if(Ue(this,t.validateCustomStyleLayer(e)))return;a=t.createStyleLayer(e)}else{if("object"==typeof e.source&&(this.addSource(r,e.source),e=t.clone$1(e),e=t.extend(e,{source:r})),this._validate(t.validateStyle.layer,"layers."+r,e,{arrayIndex:-1},o))return;a=t.createStyleLayer(e),this._validateLayer(a),a.setEventedParent(this,{layer:{id:r}}),this._serializedLayers[a.id]=a.serialize()}var n=i?this._order.indexOf(i):this._order.length;if(i&&-1===n)this.fire(new t.ErrorEvent(new Error('Layer with id "'+i+'" does not exist on this map.')));else{if(this._order.splice(n,0,r),this._layerOrderChanged=!0,this._layers[r]=a,this._removedLayers[r]&&a.source&&"custom"!==a.type){var s=this._removedLayers[r];delete this._removedLayers[r],s.type!==a.type?this._updatedSources[a.source]="clear":(this._updatedSources[a.source]="reload",this.sourceCaches[a.source].pause())}this._updateLayer(a),a.onAdd&&a.onAdd(this.map)}}},i.prototype.moveLayer=function(e,i){if(this._checkLoaded(),this._changed=!0,this._layers[e]){if(e!==i){var o=this._order.indexOf(e);this._order.splice(o,1);var r=i?this._order.indexOf(i):this._order.length;i&&-1===r?this.fire(new t.ErrorEvent(new Error('Layer with id "'+i+'" does not exist on this map.'))):(this._order.splice(r,0,e),this._layerOrderChanged=!0)}}else this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be moved.")))},i.prototype.removeLayer=function(e){this._checkLoaded();var i=this._layers[e];if(i){i.setEventedParent(null);var o=this._order.indexOf(e);this._order.splice(o,1),this._layerOrderChanged=!0,this._changed=!0,this._removedLayers[e]=i,delete this._layers[e],delete this._serializedLayers[e],delete this._updatedLayers[e],delete this._updatedPaintProps[e],i.onRemove&&i.onRemove(this.map)}else this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be removed.")))},i.prototype.getLayer=function(t){return this._layers[t]},i.prototype.hasLayer=function(t){return t in this._layers},i.prototype.setLayerZoomRange=function(e,i,o){this._checkLoaded();var r=this.getLayer(e);r?r.minzoom===i&&r.maxzoom===o||(null!=i&&(r.minzoom=i),null!=o&&(r.maxzoom=o),this._updateLayer(r)):this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot have zoom extent.")))},i.prototype.setFilter=function(e,i,o){void 0===o&&(o={}),this._checkLoaded();var r=this.getLayer(e);if(r){if(!t.deepEqual(r.filter,i))return null==i?(r.filter=void 0,void this._updateLayer(r)):void(this._validate(t.validateStyle.filter,"layers."+r.id+".filter",i,null,o)||(r.filter=t.clone$1(i),this._updateLayer(r)))}else this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be filtered.")))},i.prototype.getFilter=function(e){return t.clone$1(this.getLayer(e).filter)},i.prototype.setLayoutProperty=function(e,i,o,r){void 0===r&&(r={}),this._checkLoaded();var a=this.getLayer(e);a?t.deepEqual(a.getLayoutProperty(i),o)||(a.setLayoutProperty(i,o,r),this._updateLayer(a)):this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be styled.")))},i.prototype.getLayoutProperty=function(e,i){var o=this.getLayer(e);if(o)return o.getLayoutProperty(i);this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style.")))},i.prototype.setPaintProperty=function(e,i,o,r){void 0===r&&(r={}),this._checkLoaded();var a=this.getLayer(e);a?t.deepEqual(a.getPaintProperty(i),o)||(a.setPaintProperty(i,o,r)&&this._updateLayer(a),this._changed=!0,this._updatedPaintProps[e]=!0):this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be styled.")))},i.prototype.getPaintProperty=function(t,e){return this.getLayer(t).getPaintProperty(e)},i.prototype.setFeatureState=function(e,i){this._checkLoaded();var o=e.source,r=e.sourceLayer,a=this.sourceCaches[o];if(void 0!==a){var n=a.getSource().type;"geojson"===n&&r?this.fire(new t.ErrorEvent(new Error("GeoJSON sources cannot have a sourceLayer parameter."))):"vector"!==n||r?(void 0===e.id&&this.fire(new t.ErrorEvent(new Error("The feature id parameter must be provided."))),a.setFeatureState(r,e.id,i)):this.fire(new t.ErrorEvent(new Error("The sourceLayer parameter must be provided for vector source types.")))}else this.fire(new t.ErrorEvent(new Error("The source '"+o+"' does not exist in the map's style.")))},i.prototype.removeFeatureState=function(e,i){this._checkLoaded();var o=e.source,r=this.sourceCaches[o];if(void 0!==r){var a=r.getSource().type,n="vector"===a?e.sourceLayer:void 0;"vector"!==a||n?i&&"string"!=typeof e.id&&"number"!=typeof e.id?this.fire(new t.ErrorEvent(new Error("A feature id is required to remove its specific state property."))):r.removeFeatureState(n,e.id,i):this.fire(new t.ErrorEvent(new Error("The sourceLayer parameter must be provided for vector source types.")))}else this.fire(new t.ErrorEvent(new Error("The source '"+o+"' does not exist in the map's style.")))},i.prototype.getFeatureState=function(e){this._checkLoaded();var i=e.source,o=e.sourceLayer,r=this.sourceCaches[i];if(void 0!==r){if("vector"!==r.getSource().type||o)return void 0===e.id&&this.fire(new t.ErrorEvent(new Error("The feature id parameter must be provided."))),r.getFeatureState(o,e.id);this.fire(new t.ErrorEvent(new Error("The sourceLayer parameter must be provided for vector source types.")))}else this.fire(new t.ErrorEvent(new Error("The source '"+i+"' does not exist in the map's style.")))},i.prototype.getTransition=function(){return t.extend({duration:300,delay:0},this.stylesheet&&this.stylesheet.transition)},i.prototype.serialize=function(){return t.filterObject({version:this.stylesheet.version,name:this.stylesheet.name,metadata:this.stylesheet.metadata,light:this.stylesheet.light,center:this.stylesheet.center,zoom:this.stylesheet.zoom,bearing:this.stylesheet.bearing,pitch:this.stylesheet.pitch,sprite:this.stylesheet.sprite,glyphs:this.stylesheet.glyphs,transition:this.stylesheet.transition,sources:t.mapObject(this.sourceCaches,(function(t){return t.serialize()})),layers:this._serializeLayers(this._order)},(function(t){return void 0!==t}))},i.prototype._updateLayer=function(t){this._updatedLayers[t.id]=!0,t.source&&!this._updatedSources[t.source]&&"raster"!==this.sourceCaches[t.source].getSource().type&&(this._updatedSources[t.source]="reload",this.sourceCaches[t.source].pause()),this._changed=!0},i.prototype._flattenAndSortRenderedFeatures=function(t){for(var e=this,i=function(t){return"fill-extrusion"===e._layers[t].type},o={},r=[],a=this._order.length-1;a>=0;a--){var n=this._order[a];if(i(n)){o[n]=a;for(var s=0,l=t;s<l.length;s+=1){var c=l[s][n];if(c)for(var u=0,h=c;u<h.length;u+=1)r.push(h[u])}}}r.sort((function(t,e){return e.intersectionZ-t.intersectionZ}));for(var p=[],d=this._order.length-1;d>=0;d--){var _=this._order[d];if(i(_))for(var f=r.length-1;f>=0;f--){var m=r[f].feature;if(o[m.layer.id]<d)break;p.push(m),r.pop()}else for(var g=0,v=t;g<v.length;g+=1){var y=v[g][_];if(y)for(var x=0,b=y;x<b.length;x+=1)p.push(b[x].feature)}}return p},i.prototype.queryRenderedFeatures=function(e,i,o){i&&i.filter&&this._validate(t.validateStyle.filter,"queryRenderedFeatures.filter",i.filter,null,i);var r={};if(i&&i.layers){if(!Array.isArray(i.layers))return this.fire(new t.ErrorEvent(new Error("parameters.layers must be an Array."))),[];for(var a=0,n=i.layers;a<n.length;a+=1){var s=n[a],l=this._layers[s];if(!l)return this.fire(new t.ErrorEvent(new Error("The layer '"+s+"' does not exist in the map's style and cannot be queried for features."))),[];r[l.source]=!0}}var c=[];for(var u in i.availableImages=this._availableImages,this.sourceCaches)i.layers&&!r[u]||c.push(B(this.sourceCaches[u],this._layers,this._serializedLayers,e,i,o));return this.placement&&c.push(function(t,e,i,o,r,a,n){for(var s={},l=a.queryRenderedSymbols(o),c=[],u=0,h=Object.keys(l).map(Number);u<h.length;u+=1)c.push(n[h[u]]);c.sort(F);for(var p=function(){var i=_[d],o=i.featureIndex.lookupSymbolFeatures(l[i.bucketInstanceId],e,i.bucketIndex,i.sourceLayerIndex,r.filter,r.layers,r.availableImages,t);for(var a in o){var n=s[a]=s[a]||[],c=o[a];c.sort((function(t,e){var o=i.featureSortOrder;if(o){var r=o.indexOf(t.featureIndex);return o.indexOf(e.featureIndex)-r}return e.featureIndex-t.featureIndex}));for(var u=0,h=c;u<h.length;u+=1)n.push(h[u])}},d=0,_=c;d<_.length;d+=1)p();var f=function(e){s[e].forEach((function(o){var r=o.feature,a=i[t[e].source].getFeatureState(r.layer["source-layer"],r.id);r.source=r.layer.source,r.layer["source-layer"]&&(r.sourceLayer=r.layer["source-layer"]),r.state=a}))};for(var m in s)f(m);return s}(this._layers,this._serializedLayers,this.sourceCaches,e,i,this.placement.collisionIndex,this.placement.retainedQueryData)),this._flattenAndSortRenderedFeatures(c)},i.prototype.querySourceFeatures=function(e,i){i&&i.filter&&this._validate(t.validateStyle.filter,"querySourceFeatures.filter",i.filter,null,i);var o=this.sourceCaches[e];return o?function(t,e){for(var i=t.getRenderableIds().map((function(e){return t.getTileByID(e)})),o=[],r={},a=0;a<i.length;a++){var n=i[a],s=n.tileID.canonical.key;r[s]||(r[s]=!0,n.querySourceFeatures(o,e))}return o}(o,i):[]},i.prototype.addSourceType=function(t,e,o){return i.getSourceType(t)?o(new Error('A source type called "'+t+'" already exists.')):(i.setSourceType(t,e),e.workerSourceURL?void this.dispatcher.broadcast("loadWorkerSource",{name:t,url:e.workerSourceURL},o):o(null,null))},i.prototype.getLight=function(){return this.light.getLight()},i.prototype.setLight=function(e,i){void 0===i&&(i={}),this._checkLoaded();var o=this.light.getLight(),r=!1;for(var a in e)if(!t.deepEqual(e[a],o[a])){r=!0;break}if(r){var n={now:t.browser.now(),transition:t.extend({duration:300,delay:0},this.stylesheet.transition)};this.light.setLight(e,i),this.light.updateTransitions(n)}},i.prototype._validate=function(e,i,o,r,a){return void 0===a&&(a={}),(!a||!1!==a.validate)&&Ue(this,e.call(t.validateStyle,t.extend({key:i,style:this.serialize(),value:o,styleSpec:t.styleSpec},r)))},i.prototype._remove=function(){for(var e in this._request&&(this._request.cancel(),this._request=null),this._spriteRequest&&(this._spriteRequest.cancel(),this._spriteRequest=null),t.evented.off("pluginStateChange",this._rtlTextPluginCallback),this._layers)this._layers[e].setEventedParent(null);for(var i in this.sourceCaches)this.sourceCaches[i].clearTiles(),this.sourceCaches[i].setEventedParent(null);this.imageManager.setEventedParent(null),this.setEventedParent(null),this.dispatcher.remove()},i.prototype._clearSource=function(t){this.sourceCaches[t].clearTiles()},i.prototype._reloadSource=function(t){this.sourceCaches[t].resume(),this.sourceCaches[t].reload()},i.prototype._updateSources=function(t){for(var e in this.sourceCaches)this.sourceCaches[e].update(t)},i.prototype._generateCollisionBoxes=function(){for(var t in this.sourceCaches)this._reloadSource(t)},i.prototype._updatePlacement=function(e,i,o,r,a){void 0===a&&(a=!1);for(var n=!1,s=!1,l={},c=0,u=this._order;c<u.length;c+=1){var h=this._layers[u[c]];if("symbol"===h.type){if(!l[h.source]){var p=this.sourceCaches[h.source];l[h.source]=p.getRenderableIds(!0).map((function(t){return p.getTileByID(t)})).sort((function(t,e){return e.tileID.overscaledZ-t.tileID.overscaledZ||(t.tileID.isLessThan(e.tileID)?-1:1)}))}var d=this.crossTileSymbolIndex.addLayer(h,l[h.source],e.center.lng);n=n||d}}if(this.crossTileSymbolIndex.pruneUnusedLayers(this._order),((a=a||this._layerOrderChanged||0===o)||!this.pauseablePlacement||this.pauseablePlacement.isDone()&&!this.placement.stillRecent(t.browser.now(),e.zoom))&&(this.pauseablePlacement=new Le(e,this._order,a,i,o,r,this.placement),this._layerOrderChanged=!1),this.pauseablePlacement.isDone()?this.placement.setStale():(this.pauseablePlacement.continuePlacement(this._order,this._layers,l),this.pauseablePlacement.isDone()&&(this.placement=this.pauseablePlacement.commit(t.browser.now()),s=!0),n&&this.pauseablePlacement.placement.setStale()),s||n)for(var _=0,f=this._order;_<f.length;_+=1){var m=this._layers[f[_]];"symbol"===m.type&&this.placement.updateLayerOpacities(m,l[m.source])}return!this.pauseablePlacement.isDone()||this.placement.hasTransitions(t.browser.now())},i.prototype._releaseSymbolFadeTiles=function(){for(var t in this.sourceCaches)this.sourceCaches[t].releaseSymbolFadeTiles()},i.prototype.getImages=function(t,e,i){this.imageManager.getImages(e.icons,i),this._updateTilesForChangedImages();var o=this.sourceCaches[e.source];o&&o.setDependencies(e.tileID.key,e.type,e.icons)},i.prototype.getGlyphs=function(t,e,i){this.glyphManager.getGlyphs(e.stacks,i)},i.prototype.getResource=function(e,i,o){return t.makeRequest(i,o)},i}(t.Evented);je.getSourceType=function(t){return k[t]},je.setSourceType=function(t,e){k[t]=e},je.registerForPluginStateChange=t.registerForPluginStateChange;var Ve=t.createLayout([{name:"a_pos",type:"Int16",components:2}]),Ge=gi("#ifdef GL_ES\nprecision mediump float;\n#else\n#if !defined(lowp)\n#define lowp\n#endif\n#if !defined(mediump)\n#define mediump\n#endif\n#if !defined(highp)\n#define highp\n#endif\n#endif","#ifdef GL_ES\nprecision highp float;\n#else\n#if !defined(lowp)\n#define lowp\n#endif\n#if !defined(mediump)\n#define mediump\n#endif\n#if !defined(highp)\n#define highp\n#endif\n#endif\nvec2 unpack_float(const float packedValue) {int packedIntValue=int(packedValue);int v0=packedIntValue/256;return vec2(v0,packedIntValue-v0*256);}vec2 unpack_opacity(const float packedOpacity) {int intOpacity=int(packedOpacity)/2;return vec2(float(intOpacity)/127.0,mod(packedOpacity,2.0));}vec4 decode_color(const vec2 encodedColor) {return vec4(unpack_float(encodedColor[0])/255.0,unpack_float(encodedColor[1])/255.0\n);}float unpack_mix_vec2(const vec2 packedValue,const float t) {return mix(packedValue[0],packedValue[1],t);}vec4 unpack_mix_color(const vec4 packedColors,const float t) {vec4 minColor=decode_color(vec2(packedColors[0],packedColors[1]));vec4 maxColor=decode_color(vec2(packedColors[2],packedColors[3]));return mix(minColor,maxColor,t);}vec2 get_pattern_pos(const vec2 pixel_coord_upper,const vec2 pixel_coord_lower,const vec2 pattern_size,const float tile_units_to_pixels,const vec2 pos) {vec2 offset=mod(mod(mod(pixel_coord_upper,pattern_size)*256.0,pattern_size)*256.0+pixel_coord_lower,pattern_size);return (tile_units_to_pixels*pos+offset)/pattern_size;}"),We=gi("uniform vec4 u_color;uniform float u_opacity;void main() {gl_FragColor=u_color*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}"),Xe=gi("uniform vec2 u_pattern_tl_a;uniform vec2 u_pattern_br_a;uniform vec2 u_pattern_tl_b;uniform vec2 u_pattern_br_b;uniform vec2 u_texsize;uniform float u_mix;uniform float u_opacity;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;void main() {vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(u_pattern_tl_a/u_texsize,u_pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(u_pattern_tl_b/u_texsize,u_pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);gl_FragColor=mix(color1,color2,u_mix)*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_pattern_size_a;uniform vec2 u_pattern_size_b;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform float u_scale_a;uniform float u_scale_b;uniform float u_tile_units_to_pixels;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,u_scale_a*u_pattern_size_a,u_tile_units_to_pixels,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,u_scale_b*u_pattern_size_b,u_tile_units_to_pixels,a_pos);}"),He=gi("varying vec3 v_data;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize mediump float radius\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize highp vec4 stroke_color\n#pragma mapbox: initialize mediump float stroke_width\n#pragma mapbox: initialize lowp float stroke_opacity\nvec2 extrude=v_data.xy;float extrude_length=length(extrude);lowp float antialiasblur=v_data.z;float antialiased_blur=-max(blur,antialiasblur);float opacity_t=smoothstep(0.0,antialiased_blur,extrude_length-1.0);float color_t=stroke_width < 0.01 ? 0.0 : smoothstep(antialiased_blur,0.0,extrude_length-radius/(radius+stroke_width));gl_FragColor=opacity_t*mix(color*opacity,stroke_color*stroke_opacity,color_t);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform bool u_scale_with_map;uniform bool u_pitch_with_map;uniform vec2 u_extrude_scale;uniform lowp float u_device_pixel_ratio;uniform highp float u_camera_to_center_distance;attribute vec2 a_pos;varying vec3 v_data;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\nvoid main(void) {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize mediump float radius\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize highp vec4 stroke_color\n#pragma mapbox: initialize mediump float stroke_width\n#pragma mapbox: initialize lowp float stroke_opacity\nvec2 extrude=vec2(mod(a_pos,2.0)*2.0-1.0);vec2 circle_center=floor(a_pos*0.5);if (u_pitch_with_map) {vec2 corner_position=circle_center;if (u_scale_with_map) {corner_position+=extrude*(radius+stroke_width)*u_extrude_scale;} else {vec4 projected_center=u_matrix*vec4(circle_center,0,1);corner_position+=extrude*(radius+stroke_width)*u_extrude_scale*(projected_center.w/u_camera_to_center_distance);}gl_Position=u_matrix*vec4(corner_position,0,1);} else {gl_Position=u_matrix*vec4(circle_center,0,1);if (u_scale_with_map) {gl_Position.xy+=extrude*(radius+stroke_width)*u_extrude_scale*u_camera_to_center_distance;} else {gl_Position.xy+=extrude*(radius+stroke_width)*u_extrude_scale*gl_Position.w;}}lowp float antialiasblur=1.0/u_device_pixel_ratio/(radius+stroke_width);v_data=vec3(extrude.x,extrude.y,antialiasblur);}"),Ke=gi("void main() {gl_FragColor=vec4(1.0);}","attribute vec2 a_pos;uniform mat4 u_matrix;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);}"),Ye=gi("uniform highp float u_intensity;varying vec2 v_extrude;\n#pragma mapbox: define highp float weight\n#define GAUSS_COEF 0.3989422804014327\nvoid main() {\n#pragma mapbox: initialize highp float weight\nfloat d=-0.5*3.0*3.0*dot(v_extrude,v_extrude);float val=weight*u_intensity*GAUSS_COEF*exp(d);gl_FragColor=vec4(val,1.0,1.0,1.0);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform float u_extrude_scale;uniform float u_opacity;uniform float u_intensity;attribute vec2 a_pos;varying vec2 v_extrude;\n#pragma mapbox: define highp float weight\n#pragma mapbox: define mediump float radius\nconst highp float ZERO=1.0/255.0/16.0;\n#define GAUSS_COEF 0.3989422804014327\nvoid main(void) {\n#pragma mapbox: initialize highp float weight\n#pragma mapbox: initialize mediump float radius\nvec2 unscaled_extrude=vec2(mod(a_pos,2.0)*2.0-1.0);float S=sqrt(-2.0*log(ZERO/weight/u_intensity/GAUSS_COEF))/3.0;v_extrude=S*unscaled_extrude;vec2 extrude=v_extrude*radius*u_extrude_scale;vec4 pos=vec4(floor(a_pos*0.5)+extrude,0,1);gl_Position=u_matrix*pos;}"),Je=gi("uniform sampler2D u_image;uniform sampler2D u_color_ramp;uniform float u_opacity;varying vec2 v_pos;void main() {float t=texture2D(u_image,v_pos).r;vec4 color=texture2D(u_color_ramp,vec2(t,0.5));gl_FragColor=color*u_opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(0.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_world;attribute vec2 a_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos*u_world,0,1);v_pos.x=a_pos.x;v_pos.y=1.0-a_pos.y;}"),Qe=gi("varying float v_placed;varying float v_notUsed;void main() {float alpha=0.5;gl_FragColor=vec4(1.0,0.0,0.0,1.0)*alpha;if (v_placed > 0.5) {gl_FragColor=vec4(0.0,0.0,1.0,0.5)*alpha;}if (v_notUsed > 0.5) {gl_FragColor*=.1;}}","attribute vec2 a_pos;attribute vec2 a_anchor_pos;attribute vec2 a_extrude;attribute vec2 a_placed;attribute vec2 a_shift;uniform mat4 u_matrix;uniform vec2 u_extrude_scale;uniform float u_camera_to_center_distance;varying float v_placed;varying float v_notUsed;void main() {vec4 projectedPoint=u_matrix*vec4(a_anchor_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float collision_perspective_ratio=clamp(0.5+0.5*(u_camera_to_center_distance/camera_to_anchor_distance),0.0,4.0);gl_Position=u_matrix*vec4(a_pos,0.0,1.0);gl_Position.xy+=(a_extrude+a_shift)*u_extrude_scale*gl_Position.w*collision_perspective_ratio;v_placed=a_placed.x;v_notUsed=a_placed.y;}"),$e=gi("varying float v_radius;varying vec2 v_extrude;varying float v_perspective_ratio;varying float v_collision;void main() {float alpha=0.5*min(v_perspective_ratio,1.0);float stroke_radius=0.9*max(v_perspective_ratio,1.0);float distance_to_center=length(v_extrude);float distance_to_edge=abs(distance_to_center-v_radius);float opacity_t=smoothstep(-stroke_radius,0.0,-distance_to_edge);vec4 color=mix(vec4(0.0,0.0,1.0,0.5),vec4(1.0,0.0,0.0,1.0),v_collision);gl_FragColor=color*alpha*opacity_t;}","attribute vec2 a_pos;attribute float a_radius;attribute vec2 a_flags;uniform mat4 u_matrix;uniform mat4 u_inv_matrix;uniform vec2 u_viewport_size;uniform float u_camera_to_center_distance;varying float v_radius;varying vec2 v_extrude;varying float v_perspective_ratio;varying float v_collision;vec3 toTilePosition(vec2 screenPos) {vec4 rayStart=u_inv_matrix*vec4(screenPos,-1.0,1.0);vec4 rayEnd  =u_inv_matrix*vec4(screenPos, 1.0,1.0);rayStart.xyz/=rayStart.w;rayEnd.xyz  /=rayEnd.w;highp float t=(0.0-rayStart.z)/(rayEnd.z-rayStart.z);return mix(rayStart.xyz,rayEnd.xyz,t);}void main() {vec2 quadCenterPos=a_pos;float radius=a_radius;float collision=a_flags.x;float vertexIdx=a_flags.y;vec2 quadVertexOffset=vec2(mix(-1.0,1.0,float(vertexIdx >=2.0)),mix(-1.0,1.0,float(vertexIdx >=1.0 && vertexIdx <=2.0)));vec2 quadVertexExtent=quadVertexOffset*radius;vec3 tilePos=toTilePosition(quadCenterPos);vec4 clipPos=u_matrix*vec4(tilePos,1.0);highp float camera_to_anchor_distance=clipPos.w;highp float collision_perspective_ratio=clamp(0.5+0.5*(u_camera_to_center_distance/camera_to_anchor_distance),0.0,4.0);float padding_factor=1.2;v_radius=radius;v_extrude=quadVertexExtent*padding_factor;v_perspective_ratio=collision_perspective_ratio;v_collision=collision;gl_Position=vec4(clipPos.xyz/clipPos.w,1.0)+vec4(quadVertexExtent*padding_factor/u_viewport_size*2.0,0.0,0.0);}"),ti=gi("uniform highp vec4 u_color;uniform sampler2D u_overlay;varying vec2 v_uv;void main() {vec4 overlay_color=texture2D(u_overlay,v_uv);gl_FragColor=mix(u_color,overlay_color,overlay_color.a);}","attribute vec2 a_pos;varying vec2 v_uv;uniform mat4 u_matrix;uniform float u_overlay_scale;void main() {v_uv=a_pos/8192.0;gl_Position=u_matrix*vec4(a_pos*u_overlay_scale,0,1);}"),ei=gi("#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float opacity\ngl_FragColor=color*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","attribute vec2 a_pos;uniform mat4 u_matrix;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float opacity\ngl_Position=u_matrix*vec4(a_pos,0,1);}"),ii=gi("varying vec2 v_pos;\n#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 outline_color\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_pos-gl_FragCoord.xy);float alpha=1.0-smoothstep(0.0,1.0,dist);gl_FragColor=outline_color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","attribute vec2 a_pos;uniform mat4 u_matrix;uniform vec2 u_world;varying vec2 v_pos;\n#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 outline_color\n#pragma mapbox: initialize lowp float opacity\ngl_Position=u_matrix*vec4(a_pos,0,1);v_pos=(gl_Position.xy/gl_Position.w+1.0)/2.0*u_world;}"),oi=gi("uniform vec2 u_texsize;uniform sampler2D u_image;uniform float u_fade;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec2 v_pos;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);float dist=length(v_pos-gl_FragCoord.xy);float alpha=1.0-smoothstep(0.0,1.0,dist);gl_FragColor=mix(color1,color2,u_fade)*alpha*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_world;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform vec3 u_scale;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec2 v_pos;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;gl_Position=u_matrix*vec4(a_pos,0,1);vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileRatio,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileRatio,a_pos);v_pos=(gl_Position.xy/gl_Position.w+1.0)/2.0*u_world;}"),ri=gi("uniform vec2 u_texsize;uniform float u_fade;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);gl_FragColor=mix(color1,color2,u_fade)*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform vec3 u_scale;attribute vec2 a_pos;varying vec2 v_pos_a;varying vec2 v_pos_b;\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileZoomRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;gl_Position=u_matrix*vec4(a_pos,0,1);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileZoomRatio,a_pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileZoomRatio,a_pos);}"),ai=gi("varying vec4 v_color;void main() {gl_FragColor=v_color;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec3 u_lightcolor;uniform lowp vec3 u_lightpos;uniform lowp float u_lightintensity;uniform float u_vertical_gradient;uniform lowp float u_opacity;attribute vec2 a_pos;attribute vec4 a_normal_ed;varying vec4 v_color;\n#pragma mapbox: define highp float base\n#pragma mapbox: define highp float height\n#pragma mapbox: define highp vec4 color\nvoid main() {\n#pragma mapbox: initialize highp float base\n#pragma mapbox: initialize highp float height\n#pragma mapbox: initialize highp vec4 color\nvec3 normal=a_normal_ed.xyz;base=max(0.0,base);height=max(0.0,height);float t=mod(normal.x,2.0);gl_Position=u_matrix*vec4(a_pos,t > 0.0 ? height : base,1);float colorvalue=color.r*0.2126+color.g*0.7152+color.b*0.0722;v_color=vec4(0.0,0.0,0.0,1.0);vec4 ambientlight=vec4(0.03,0.03,0.03,1.0);color+=ambientlight;float directional=clamp(dot(normal/16384.0,u_lightpos),0.0,1.0);directional=mix((1.0-u_lightintensity),max((1.0-colorvalue+u_lightintensity),1.0),directional);if (normal.y !=0.0) {directional*=((1.0-u_vertical_gradient)+(u_vertical_gradient*clamp((t+base)*pow(height/150.0,0.5),mix(0.7,0.98,1.0-u_lightintensity),1.0)));}v_color.r+=clamp(color.r*directional*u_lightcolor.r,mix(0.0,0.3,1.0-u_lightcolor.r),1.0);v_color.g+=clamp(color.g*directional*u_lightcolor.g,mix(0.0,0.3,1.0-u_lightcolor.g),1.0);v_color.b+=clamp(color.b*directional*u_lightcolor.b,mix(0.0,0.3,1.0-u_lightcolor.b),1.0);v_color*=u_opacity;}"),ni=gi("uniform vec2 u_texsize;uniform float u_fade;uniform sampler2D u_image;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec4 v_lighting;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float base\n#pragma mapbox: initialize lowp float height\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;vec2 imagecoord=mod(v_pos_a,1.0);vec2 pos=mix(pattern_tl_a/u_texsize,pattern_br_a/u_texsize,imagecoord);vec4 color1=texture2D(u_image,pos);vec2 imagecoord_b=mod(v_pos_b,1.0);vec2 pos2=mix(pattern_tl_b/u_texsize,pattern_br_b/u_texsize,imagecoord_b);vec4 color2=texture2D(u_image,pos2);vec4 mixedColor=mix(color1,color2,u_fade);gl_FragColor=mixedColor*v_lighting;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_pixel_coord_upper;uniform vec2 u_pixel_coord_lower;uniform float u_height_factor;uniform vec3 u_scale;uniform float u_vertical_gradient;uniform lowp float u_opacity;uniform vec3 u_lightcolor;uniform lowp vec3 u_lightpos;uniform lowp float u_lightintensity;attribute vec2 a_pos;attribute vec4 a_normal_ed;varying vec2 v_pos_a;varying vec2 v_pos_b;varying vec4 v_lighting;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float base\n#pragma mapbox: initialize lowp float height\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec3 normal=a_normal_ed.xyz;float edgedistance=a_normal_ed.w;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;base=max(0.0,base);height=max(0.0,height);float t=mod(normal.x,2.0);float z=t > 0.0 ? height : base;gl_Position=u_matrix*vec4(a_pos,z,1);vec2 pos=normal.x==1.0 && normal.y==0.0 && normal.z==16384.0\n? a_pos\n: vec2(edgedistance,z*u_height_factor);v_pos_a=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,fromScale*display_size_a,tileRatio,pos);v_pos_b=get_pattern_pos(u_pixel_coord_upper,u_pixel_coord_lower,toScale*display_size_b,tileRatio,pos);v_lighting=vec4(0.0,0.0,0.0,1.0);float directional=clamp(dot(normal/16383.0,u_lightpos),0.0,1.0);directional=mix((1.0-u_lightintensity),max((0.5+u_lightintensity),1.0),directional);if (normal.y !=0.0) {directional*=((1.0-u_vertical_gradient)+(u_vertical_gradient*clamp((t+base)*pow(height/150.0,0.5),mix(0.7,0.98,1.0-u_lightintensity),1.0)));}v_lighting.rgb+=clamp(directional*u_lightcolor,mix(vec3(0.0),vec3(0.3),1.0-u_lightcolor),vec3(1.0));v_lighting*=u_opacity;}"),si=gi("#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D u_image;varying vec2 v_pos;uniform vec2 u_dimension;uniform float u_zoom;uniform vec4 u_unpack;float getElevation(vec2 coord,float bias) {vec4 data=texture2D(u_image,coord)*255.0;data.a=-1.0;return dot(data,u_unpack)/4.0;}void main() {vec2 epsilon=1.0/u_dimension;float a=getElevation(v_pos+vec2(-epsilon.x,-epsilon.y),0.0);float b=getElevation(v_pos+vec2(0,-epsilon.y),0.0);float c=getElevation(v_pos+vec2(epsilon.x,-epsilon.y),0.0);float d=getElevation(v_pos+vec2(-epsilon.x,0),0.0);float e=getElevation(v_pos,0.0);float f=getElevation(v_pos+vec2(epsilon.x,0),0.0);float g=getElevation(v_pos+vec2(-epsilon.x,epsilon.y),0.0);float h=getElevation(v_pos+vec2(0,epsilon.y),0.0);float i=getElevation(v_pos+vec2(epsilon.x,epsilon.y),0.0);float exaggerationFactor=u_zoom < 2.0 ? 0.4 : u_zoom < 4.5 ? 0.35 : 0.3;float exaggeration=u_zoom < 15.0 ? (u_zoom-15.0)*exaggerationFactor : 0.0;vec2 deriv=vec2((c+f+f+i)-(a+d+d+g),(g+h+h+i)-(a+b+b+c))/pow(2.0,exaggeration+(19.2562-u_zoom));gl_FragColor=clamp(vec4(deriv.x/2.0+0.5,deriv.y/2.0+0.5,1.0,1.0),0.0,1.0);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_dimension;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);highp vec2 epsilon=1.0/u_dimension;float scale=(u_dimension.x-2.0)/u_dimension.x;v_pos=(a_texture_pos/8192.0)*scale+epsilon;}"),li=gi("uniform sampler2D u_image;varying vec2 v_pos;uniform vec2 u_latrange;uniform vec2 u_light;uniform vec4 u_shadow;uniform vec4 u_highlight;uniform vec4 u_accent;\n#define PI 3.141592653589793\nvoid main() {vec4 pixel=texture2D(u_image,v_pos);vec2 deriv=((pixel.rg*2.0)-1.0);float scaleFactor=cos(radians((u_latrange[0]-u_latrange[1])*(1.0-v_pos.y)+u_latrange[1]));float slope=atan(1.25*length(deriv)/scaleFactor);float aspect=deriv.x !=0.0 ? atan(deriv.y,-deriv.x) : PI/2.0*(deriv.y > 0.0 ? 1.0 :-1.0);float intensity=u_light.x;float azimuth=u_light.y+PI;float base=1.875-intensity*1.75;float maxValue=0.5*PI;float scaledSlope=intensity !=0.5 ? ((pow(base,slope)-1.0)/(pow(base,maxValue)-1.0))*maxValue : slope;float accent=cos(scaledSlope);vec4 accent_color=(1.0-accent)*u_accent*clamp(intensity*2.0,0.0,1.0);float shade=abs(mod((aspect+azimuth)/PI+0.5,2.0)-1.0);vec4 shade_color=mix(u_shadow,u_highlight,shade)*sin(scaledSlope)*clamp(intensity*2.0,0.0,1.0);gl_FragColor=accent_color*(1.0-shade_color.a)+shade_color;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos=a_texture_pos/8192.0;}"),ci=gi("uniform lowp float u_device_pixel_ratio;varying vec2 v_width2;varying vec2 v_normal;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","\n#define scale 0.015873016\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform vec2 u_units_to_pixels;uniform lowp float u_device_pixel_ratio;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp float v_linesofar;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;v_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*2.0;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_width2=vec2(outset,inset);}"),ui=gi("uniform lowp float u_device_pixel_ratio;uniform sampler2D u_image;varying vec2 v_width2;varying vec2 v_normal;varying float v_gamma_scale;varying highp vec2 v_uv;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);vec4 color=texture2D(u_image,v_uv);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","\n#define scale 0.015873016\nattribute vec2 a_pos_normal;attribute vec4 a_data;attribute float a_uv_x;attribute float a_split_index;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;uniform vec2 u_units_to_pixels;uniform float u_image_height;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp vec2 v_uv;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;highp float texel_height=1.0/u_image_height;highp float half_texel_height=0.5*texel_height;v_uv=vec2(a_uv_x,a_split_index*texel_height-half_texel_height);vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_width2=vec2(outset,inset);}"),hi=gi("uniform lowp float u_device_pixel_ratio;uniform vec2 u_texsize;uniform float u_fade;uniform mediump vec3 u_scale;uniform sampler2D u_image;varying vec2 v_normal;varying vec2 v_width2;varying float v_linesofar;varying float v_gamma_scale;varying float v_width;\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\nvec2 pattern_tl_a=pattern_from.xy;vec2 pattern_br_a=pattern_from.zw;vec2 pattern_tl_b=pattern_to.xy;vec2 pattern_br_b=pattern_to.zw;float tileZoomRatio=u_scale.x;float fromScale=u_scale.y;float toScale=u_scale.z;vec2 display_size_a=(pattern_br_a-pattern_tl_a)/pixel_ratio_from;vec2 display_size_b=(pattern_br_b-pattern_tl_b)/pixel_ratio_to;vec2 pattern_size_a=vec2(display_size_a.x*fromScale/tileZoomRatio,display_size_a.y);vec2 pattern_size_b=vec2(display_size_b.x*toScale/tileZoomRatio,display_size_b.y);float aspect_a=display_size_a.y/v_width;float aspect_b=display_size_b.y/v_width;float dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);float x_a=mod(v_linesofar/pattern_size_a.x*aspect_a,1.0);float x_b=mod(v_linesofar/pattern_size_b.x*aspect_b,1.0);float y=0.5*v_normal.y+0.5;vec2 texel_size=1.0/u_texsize;vec2 pos_a=mix(pattern_tl_a*texel_size-texel_size,pattern_br_a*texel_size+texel_size,vec2(x_a,y));vec2 pos_b=mix(pattern_tl_b*texel_size-texel_size,pattern_br_b*texel_size+texel_size,vec2(x_b,y));vec4 color=mix(texture2D(u_image,pos_a),texture2D(u_image,pos_b),u_fade);gl_FragColor=color*alpha*opacity;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","\n#define scale 0.015873016\n#define LINE_DISTANCE_SCALE 2.0\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform vec2 u_units_to_pixels;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;varying vec2 v_normal;varying vec2 v_width2;varying float v_linesofar;varying float v_gamma_scale;varying float v_width;\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float pixel_ratio_from\n#pragma mapbox: define lowp float pixel_ratio_to\nvoid main() {\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\n#pragma mapbox: initialize mediump vec4 pattern_from\n#pragma mapbox: initialize mediump vec4 pattern_to\n#pragma mapbox: initialize lowp float pixel_ratio_from\n#pragma mapbox: initialize lowp float pixel_ratio_to\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;float a_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*LINE_DISTANCE_SCALE;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_linesofar=a_linesofar;v_width2=vec2(outset,inset);v_width=floorwidth;}"),pi=gi("uniform lowp float u_device_pixel_ratio;uniform sampler2D u_image;uniform float u_sdfgamma;uniform float u_mix;varying vec2 v_normal;varying vec2 v_width2;varying vec2 v_tex_a;varying vec2 v_tex_b;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\nfloat dist=length(v_normal)*v_width2.s;float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);float sdfdist_a=texture2D(u_image,v_tex_a).a;float sdfdist_b=texture2D(u_image,v_tex_b).a;float sdfdist=mix(sdfdist_a,sdfdist_b,u_mix);alpha*=smoothstep(0.5-u_sdfgamma/floorwidth,0.5+u_sdfgamma/floorwidth,sdfdist);gl_FragColor=color*(alpha*opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","\n#define scale 0.015873016\n#define LINE_DISTANCE_SCALE 2.0\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform lowp float u_device_pixel_ratio;uniform vec2 u_patternscale_a;uniform float u_tex_y_a;uniform vec2 u_patternscale_b;uniform float u_tex_y_b;uniform vec2 u_units_to_pixels;varying vec2 v_normal;varying vec2 v_width2;varying vec2 v_tex_a;varying vec2 v_tex_b;varying float v_gamma_scale;\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\nvoid main() {\n#pragma mapbox: initialize highp vec4 color\n#pragma mapbox: initialize lowp float blur\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize mediump float gapwidth\n#pragma mapbox: initialize lowp float offset\n#pragma mapbox: initialize mediump float width\n#pragma mapbox: initialize lowp float floorwidth\nfloat ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;float a_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*LINE_DISTANCE_SCALE;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth > 0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth > 0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_tex_a=vec2(a_linesofar*u_patternscale_a.x/floorwidth,normal.y*u_patternscale_a.y+u_tex_y_a);v_tex_b=vec2(a_linesofar*u_patternscale_b.x/floorwidth,normal.y*u_patternscale_b.y+u_tex_y_b);v_width2=vec2(outset,inset);}"),di=gi("uniform float u_fade_t;uniform float u_opacity;uniform sampler2D u_image0;uniform sampler2D u_image1;varying vec2 v_pos0;varying vec2 v_pos1;uniform float u_brightness_low;uniform float u_brightness_high;uniform float u_saturation_factor;uniform float u_contrast_factor;uniform vec3 u_spin_weights;void main() {vec4 color0=texture2D(u_image0,v_pos0);vec4 color1=texture2D(u_image1,v_pos1);if (color0.a > 0.0) {color0.rgb=color0.rgb/color0.a;}if (color1.a > 0.0) {color1.rgb=color1.rgb/color1.a;}vec4 color=mix(color0,color1,u_fade_t);color.a*=u_opacity;vec3 rgb=color.rgb;rgb=vec3(dot(rgb,u_spin_weights.xyz),dot(rgb,u_spin_weights.zxy),dot(rgb,u_spin_weights.yzx));float average=(color.r+color.g+color.b)/3.0;rgb+=(average-rgb)*u_saturation_factor;rgb=(rgb-0.5)*u_contrast_factor+0.5;vec3 u_high_vec=vec3(u_brightness_low,u_brightness_low,u_brightness_low);vec3 u_low_vec=vec3(u_brightness_high,u_brightness_high,u_brightness_high);gl_FragColor=vec4(mix(u_high_vec,u_low_vec,rgb)*color.a,color.a);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","uniform mat4 u_matrix;uniform vec2 u_tl_parent;uniform float u_scale_parent;uniform float u_buffer_scale;attribute vec2 a_pos;attribute vec2 a_texture_pos;varying vec2 v_pos0;varying vec2 v_pos1;void main() {gl_Position=u_matrix*vec4(a_pos,0,1);v_pos0=(((a_texture_pos/8192.0)-0.5)/u_buffer_scale )+0.5;v_pos1=(v_pos0*u_scale_parent)+u_tl_parent;}"),_i=gi("uniform sampler2D u_texture;varying vec2 v_tex;varying float v_fade_opacity;\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\nlowp float alpha=opacity*v_fade_opacity;gl_FragColor=texture2D(u_texture,v_tex)*alpha;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec4 a_pixeloffset;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform highp float u_camera_to_center_distance;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform float u_fade_change;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform vec2 u_texsize;varying vec2 v_tex;varying float v_fade_opacity;\n#pragma mapbox: define lowp float opacity\nvoid main() {\n#pragma mapbox: initialize lowp float opacity\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);vec2 a_pxoffset=a_pixeloffset.xy;vec2 a_minFontScale=a_pixeloffset.zw/256.0;highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*max(a_minFontScale,fontScale)+a_pxoffset/16.0),0.0,1.0);v_tex=a_tex/u_texsize;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;v_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));}"),fi=gi("#define SDF_PX 8.0\nuniform bool u_is_halo;uniform sampler2D u_texture;uniform highp float u_gamma_scale;uniform lowp float u_device_pixel_ratio;uniform bool u_is_text;varying vec2 v_data0;varying vec3 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nfloat EDGE_GAMMA=0.105/u_device_pixel_ratio;vec2 tex=v_data0.xy;float gamma_scale=v_data1.x;float size=v_data1.y;float fade_opacity=v_data1[2];float fontScale=u_is_text ? size/24.0 : size;lowp vec4 color=fill_color;highp float gamma=EDGE_GAMMA/(fontScale*u_gamma_scale);lowp float buff=(256.0-64.0)/256.0;if (u_is_halo) {color=halo_color;gamma=(halo_blur*1.19/SDF_PX+EDGE_GAMMA)/(fontScale*u_gamma_scale);buff=(6.0-halo_width/fontScale)/SDF_PX;}lowp float dist=texture2D(u_texture,tex).a;highp float gamma_scaled=gamma*gamma_scale;highp float alpha=smoothstep(buff-gamma_scaled,buff+gamma_scaled,dist);gl_FragColor=color*(alpha*opacity*fade_opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec4 a_pixeloffset;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform highp float u_camera_to_center_distance;uniform float u_fade_change;uniform vec2 u_texsize;varying vec2 v_data0;varying vec3 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);vec2 a_pxoffset=a_pixeloffset.xy;highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale+a_pxoffset),0.0,1.0);float gamma_scale=gl_Position.w;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;float interpolated_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));v_data0=a_tex/u_texsize;v_data1=vec3(gamma_scale,size,interpolated_fade_opacity);}"),mi=gi("#define SDF_PX 8.0\n#define SDF 1.0\n#define ICON 0.0\nuniform bool u_is_halo;uniform sampler2D u_texture;uniform sampler2D u_texture_icon;uniform highp float u_gamma_scale;uniform lowp float u_device_pixel_ratio;varying vec4 v_data0;varying vec4 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nfloat fade_opacity=v_data1[2];if (v_data1.w==ICON) {vec2 tex_icon=v_data0.zw;lowp float alpha=opacity*fade_opacity;gl_FragColor=texture2D(u_texture_icon,tex_icon)*alpha;\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\nreturn;}vec2 tex=v_data0.xy;float EDGE_GAMMA=0.105/u_device_pixel_ratio;float gamma_scale=v_data1.x;float size=v_data1.y;float fontScale=size/24.0;lowp vec4 color=fill_color;highp float gamma=EDGE_GAMMA/(fontScale*u_gamma_scale);lowp float buff=(256.0-64.0)/256.0;if (u_is_halo) {color=halo_color;gamma=(halo_blur*1.19/SDF_PX+EDGE_GAMMA)/(fontScale*u_gamma_scale);buff=(6.0-halo_width/fontScale)/SDF_PX;}lowp float dist=texture2D(u_texture,tex).a;highp float gamma_scaled=gamma*gamma_scale;highp float alpha=smoothstep(buff-gamma_scaled,buff+gamma_scaled,dist);gl_FragColor=color*(alpha*opacity*fade_opacity);\n#ifdef OVERDRAW_INSPECTOR\ngl_FragColor=vec4(1.0);\n#endif\n}","const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform highp float u_pitch;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform highp float u_camera_to_center_distance;uniform float u_fade_change;uniform vec2 u_texsize;uniform vec2 u_texsize_icon;varying vec4 v_data0;varying vec4 v_data1;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\nvoid main() {\n#pragma mapbox: initialize highp vec4 fill_color\n#pragma mapbox: initialize highp vec4 halo_color\n#pragma mapbox: initialize lowp float opacity\n#pragma mapbox: initialize lowp float halo_width\n#pragma mapbox: initialize lowp float halo_blur\nvec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;float a_size_min=floor(a_size[0]*0.5);float is_sdf=a_size[0]-2.0*a_size_min;highp float segment_angle=-a_projected_pos[2];float size;if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {size=mix(a_size_min,a_size[1],u_size_t)/128.0;} else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {size=a_size_min/128.0;} else {size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?\ncamera_to_anchor_distance/u_camera_to_center_distance :\nu_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=size/24.0;highp float symbol_rotation=0.0;if (u_rotate_symbol) {vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale),0.0,1.0);float gamma_scale=gl_Position.w;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1] > 0.5 ? u_fade_change :-u_fade_change;float interpolated_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));v_data0.xy=a_tex/u_texsize;v_data0.zw=a_tex/u_texsize_icon;v_data1=vec4(gamma_scale,size,interpolated_fade_opacity,is_sdf);}");function gi(t,e){var i=/#pragma mapbox: ([\w]+) ([\w]+) ([\w]+) ([\w]+)/g,o=e.match(/attribute ([\w]+) ([\w]+)/g),r=t.match(/uniform ([\w]+) ([\w]+)([\s]*)([\w]*)/g),a=e.match(/uniform ([\w]+) ([\w]+)([\s]*)([\w]*)/g),n=a?a.concat(r):r,s={};return{fragmentSource:t=t.replace(i,(function(t,e,i,o,r){return s[r]=!0,"define"===e?"\n#ifndef HAS_UNIFORM_u_"+r+"\nvarying "+i+" "+o+" "+r+";\n#else\nuniform "+i+" "+o+" u_"+r+";\n#endif\n":"\n#ifdef HAS_UNIFORM_u_"+r+"\n    "+i+" "+o+" "+r+" = u_"+r+";\n#endif\n"})),vertexSource:e=e.replace(i,(function(t,e,i,o,r){var a="float"===o?"vec2":"vec4",n=r.match(/color/)?"color":a;return s[r]?"define"===e?"\n#ifndef HAS_UNIFORM_u_"+r+"\nuniform lowp float u_"+r+"_t;\nattribute "+i+" "+a+" a_"+r+";\nvarying "+i+" "+o+" "+r+";\n#else\nuniform "+i+" "+o+" u_"+r+";\n#endif\n":"vec4"===n?"\n#ifndef HAS_UNIFORM_u_"+r+"\n    "+r+" = a_"+r+";\n#else\n    "+i+" "+o+" "+r+" = u_"+r+";\n#endif\n":"\n#ifndef HAS_UNIFORM_u_"+r+"\n    "+r+" = unpack_mix_"+n+"(a_"+r+", u_"+r+"_t);\n#else\n    "+i+" "+o+" "+r+" = u_"+r+";\n#endif\n":"define"===e?"\n#ifndef HAS_UNIFORM_u_"+r+"\nuniform lowp float u_"+r+"_t;\nattribute "+i+" "+a+" a_"+r+";\n#else\nuniform "+i+" "+o+" u_"+r+";\n#endif\n":"vec4"===n?"\n#ifndef HAS_UNIFORM_u_"+r+"\n    "+i+" "+o+" "+r+" = a_"+r+";\n#else\n    "+i+" "+o+" "+r+" = u_"+r+";\n#endif\n":"\n#ifndef HAS_UNIFORM_u_"+r+"\n    "+i+" "+o+" "+r+" = unpack_mix_"+n+"(a_"+r+", u_"+r+"_t);\n#else\n    "+i+" "+o+" "+r+" = u_"+r+";\n#endif\n"})),staticAttributes:o,staticUniforms:n}}var vi=Object.freeze({__proto__:null,prelude:Ge,background:We,backgroundPattern:Xe,circle:He,clippingMask:Ke,heatmap:Ye,heatmapTexture:Je,collisionBox:Qe,collisionCircle:$e,debug:ti,fill:ei,fillOutline:ii,fillOutlinePattern:oi,fillPattern:ri,fillExtrusion:ai,fillExtrusionPattern:ni,hillshadePrepare:si,hillshade:li,line:ci,lineGradient:ui,linePattern:hi,lineSDF:pi,raster:di,symbolIcon:_i,symbolSDF:fi,symbolTextAndIcon:mi}),yi=function(){this.boundProgram=null,this.boundLayoutVertexBuffer=null,this.boundPaintVertexBuffers=[],this.boundIndexBuffer=null,this.boundVertexOffset=null,this.boundDynamicVertexBuffer=null,this.vao=null};function xi(t){for(var e=[],i=0;i<t.length;i++)if(null!==t[i]){var o=t[i].split(" ");e.push(o.pop())}return e}yi.prototype.bind=function(t,e,i,o,r,a,n,s){this.context=t;for(var l=this.boundPaintVertexBuffers.length!==o.length,c=0;!l&&c<o.length;c++)this.boundPaintVertexBuffers[c]!==o[c]&&(l=!0);t.extVertexArrayObject&&this.vao&&this.boundProgram===e&&this.boundLayoutVertexBuffer===i&&!l&&this.boundIndexBuffer===r&&this.boundVertexOffset===a&&this.boundDynamicVertexBuffer===n&&this.boundDynamicVertexBuffer2===s?(t.bindVertexArrayOES.set(this.vao),n&&n.bind(),r&&r.dynamicDraw&&r.bind(),s&&s.bind()):this.freshBind(e,i,o,r,a,n,s)},yi.prototype.freshBind=function(t,e,i,o,r,a,n){var s,l=t.numAttributes,c=this.context,u=c.gl;if(c.extVertexArrayObject)this.vao&&this.destroy(),this.vao=c.extVertexArrayObject.createVertexArrayOES(),c.bindVertexArrayOES.set(this.vao),s=0,this.boundProgram=t,this.boundLayoutVertexBuffer=e,this.boundPaintVertexBuffers=i,this.boundIndexBuffer=o,this.boundVertexOffset=r,this.boundDynamicVertexBuffer=a,this.boundDynamicVertexBuffer2=n;else{s=c.currentNumAttributes||0;for(var h=l;h<s;h++)u.disableVertexAttribArray(h)}e.enableAttributes(u,t);for(var p=0,d=i;p<d.length;p+=1)d[p].enableAttributes(u,t);a&&a.enableAttributes(u,t),n&&n.enableAttributes(u,t),e.bind(),e.setVertexAttribPointers(u,t,r);for(var _=0,f=i;_<f.length;_+=1){var m=f[_];m.bind(),m.setVertexAttribPointers(u,t,r)}a&&(a.bind(),a.setVertexAttribPointers(u,t,r)),o&&o.bind(),n&&(n.bind(),n.setVertexAttribPointers(u,t,r)),c.currentNumAttributes=l},yi.prototype.destroy=function(){this.vao&&(this.context.extVertexArrayObject.deleteVertexArrayOES(this.vao),this.vao=null)};var bi=function(t,e,i,o,r,a){var n=t.gl;this.program=n.createProgram();for(var s=xi(i.staticAttributes),l=o?o.getBinderAttributes():[],c=s.concat(l),u=i.staticUniforms?xi(i.staticUniforms):[],h=o?o.getBinderUniforms():[],p=[],d=0,_=u.concat(h);d<_.length;d+=1){var f=_[d];p.indexOf(f)<0&&p.push(f)}var m=o?o.defines():[];a&&m.push("#define OVERDRAW_INSPECTOR;");var g=m.concat(Ge.fragmentSource,i.fragmentSource).join("\n"),v=m.concat(Ge.vertexSource,i.vertexSource).join("\n"),y=n.createShader(n.FRAGMENT_SHADER);if(n.isContextLost())this.failedToCreate=!0;else{n.shaderSource(y,g),n.compileShader(y),n.attachShader(this.program,y);var x=n.createShader(n.VERTEX_SHADER);if(n.isContextLost())this.failedToCreate=!0;else{n.shaderSource(x,v),n.compileShader(x),n.attachShader(this.program,x),this.attributes={};var b={};this.numAttributes=c.length;for(var w=0;w<this.numAttributes;w++)c[w]&&(n.bindAttribLocation(this.program,w,c[w]),this.attributes[c[w]]=w);n.linkProgram(this.program),n.deleteShader(x),n.deleteShader(y);for(var T=0;T<p.length;T++){var E=p[T];if(E&&!b[E]){var I=n.getUniformLocation(this.program,E);I&&(b[E]=I)}}this.fixedUniforms=r(t,b),this.binderUniforms=o?o.getUniforms(t,b):[]}}};function wi(t,e,i){var o=1/pe(i,1,e.transform.tileZoom),r=Math.pow(2,i.tileID.overscaledZ),a=i.tileSize*Math.pow(2,e.transform.tileZoom)/r,n=a*(i.tileID.canonical.x+i.tileID.wrap*r),s=a*i.tileID.canonical.y;return{u_image:0,u_texsize:i.imageAtlasTexture.size,u_scale:[o,t.fromScale,t.toScale],u_fade:t.t,u_pixel_coord_upper:[n>>16,s>>16],u_pixel_coord_lower:[65535&n,65535&s]}}bi.prototype.draw=function(t,e,i,o,r,a,n,s,l,c,u,h,p,d,_,f){var m,g=t.gl;if(!this.failedToCreate){for(var v in t.program.set(this.program),t.setDepthMode(i),t.setStencilMode(o),t.setColorMode(r),t.setCullFace(a),this.fixedUniforms)this.fixedUniforms[v].set(n[v]);d&&d.setUniforms(t,this.binderUniforms,h,{zoom:p});for(var y=(m={},m[g.LINES]=2,m[g.TRIANGLES]=3,m[g.LINE_STRIP]=1,m)[e],x=0,b=u.get();x<b.length;x+=1){var w=b[x],T=w.vaos||(w.vaos={});(T[s]||(T[s]=new yi)).bind(t,this,l,d?d.getPaintVertexBuffers():[],c,w.vertexOffset,_,f),g.drawElements(e,w.primitiveLength*y,g.UNSIGNED_SHORT,w.primitiveOffset*y*2)}}};var Ti=function(e,i,o,r){var a=i.style.light,n=a.properties.get("position"),s=[n.x,n.y,n.z],l=t.create$1();"viewport"===a.properties.get("anchor")&&t.fromRotation(l,-i.transform.angle),t.transformMat3(s,s,l);var c=a.properties.get("color");return{u_matrix:e,u_lightpos:s,u_lightintensity:a.properties.get("intensity"),u_lightcolor:[c.r,c.g,c.b],u_vertical_gradient:+o,u_opacity:r}},Ei=function(e,i,o,r,a,n,s){return t.extend(Ti(e,i,o,r),wi(n,i,s),{u_height_factor:-Math.pow(2,a.overscaledZ)/s.tileSize/8})},Ii=function(t){return{u_matrix:t}},Pi=function(e,i,o,r){return t.extend(Ii(e),wi(o,i,r))},Si=function(t,e){return{u_matrix:t,u_world:e}},Ci=function(e,i,o,r,a){return t.extend(Pi(e,i,o,r),{u_world:a})},zi=function(e,i,o,r){var a,n,s=e.transform;if("map"===r.paint.get("circle-pitch-alignment")){var l=pe(o,1,s.zoom);a=!0,n=[l,l]}else a=!1,n=s.pixelsToGLUnits;return{u_camera_to_center_distance:s.cameraToCenterDistance,u_scale_with_map:+("map"===r.paint.get("circle-pitch-scale")),u_matrix:e.translatePosMatrix(i.posMatrix,o,r.paint.get("circle-translate"),r.paint.get("circle-translate-anchor")),u_pitch_with_map:+a,u_device_pixel_ratio:t.browser.devicePixelRatio,u_extrude_scale:n}},Di=function(t,e,i){var o=pe(i,1,e.zoom),r=Math.pow(2,e.zoom-i.tileID.overscaledZ),a=i.tileID.overscaleFactor();return{u_matrix:t,u_camera_to_center_distance:e.cameraToCenterDistance,u_pixels_to_tile_units:o,u_extrude_scale:[e.pixelsToGLUnits[0]/(o*r),e.pixelsToGLUnits[1]/(o*r)],u_overscale_factor:a}},Ai=function(t,e,i){return{u_matrix:t,u_inv_matrix:e,u_camera_to_center_distance:i.cameraToCenterDistance,u_viewport_size:[i.width,i.height]}},Mi=function(t,e,i){return void 0===i&&(i=1),{u_matrix:t,u_color:e,u_overlay:0,u_overlay_scale:i}},Li=function(t){return{u_matrix:t}},Ri=function(t,e,i,o){return{u_matrix:t,u_extrude_scale:pe(e,1,i),u_intensity:o}},ki=function(e,i,o){var r=e.transform;return{u_matrix:Ni(e,i,o),u_ratio:1/pe(i,1,r.zoom),u_device_pixel_ratio:t.browser.devicePixelRatio,u_units_to_pixels:[1/r.pixelsToGLUnits[0],1/r.pixelsToGLUnits[1]]}},Oi=function(e,i,o,r){return t.extend(ki(e,i,o),{u_image:0,u_image_height:r})},Bi=function(e,i,o,r){var a=e.transform,n=Ui(i,a);return{u_matrix:Ni(e,i,o),u_texsize:i.imageAtlasTexture.size,u_ratio:1/pe(i,1,a.zoom),u_device_pixel_ratio:t.browser.devicePixelRatio,u_image:0,u_scale:[n,r.fromScale,r.toScale],u_fade:r.t,u_units_to_pixels:[1/a.pixelsToGLUnits[0],1/a.pixelsToGLUnits[1]]}},Fi=function(e,i,o,r,a){var n=e.lineAtlas,s=Ui(i,e.transform),l="round"===o.layout.get("line-cap"),c=n.getDash(r.from,l),u=n.getDash(r.to,l),h=c.width*a.fromScale,p=u.width*a.toScale;return t.extend(ki(e,i,o),{u_patternscale_a:[s/h,-c.height/2],u_patternscale_b:[s/p,-u.height/2],u_sdfgamma:n.width/(256*Math.min(h,p)*t.browser.devicePixelRatio)/2,u_image:0,u_tex_y_a:c.y,u_tex_y_b:u.y,u_mix:a.t})};function Ui(t,e){return 1/pe(t,1,e.tileZoom)}function Ni(t,e,i){return t.translatePosMatrix(e.tileID.posMatrix,e,i.paint.get("line-translate"),i.paint.get("line-translate-anchor"))}var Zi=function(t,e,i,o,r){return{u_matrix:t,u_tl_parent:e,u_scale_parent:i,u_buffer_scale:1,u_fade_t:o.mix,u_opacity:o.opacity*r.paint.get("raster-opacity"),u_image0:0,u_image1:1,u_brightness_low:r.paint.get("raster-brightness-min"),u_brightness_high:r.paint.get("raster-brightness-max"),u_saturation_factor:(n=r.paint.get("raster-saturation"),n>0?1-1/(1.001-n):-n),u_contrast_factor:(a=r.paint.get("raster-contrast"),a>0?1/(1-a):1+a),u_spin_weights:qi(r.paint.get("raster-hue-rotate"))};var a,n};function qi(t){t*=Math.PI/180;var e=Math.sin(t),i=Math.cos(t);return[(2*i+1)/3,(-Math.sqrt(3)*e-i+1)/3,(Math.sqrt(3)*e-i+1)/3]}var ji,Vi=function(t,e,i,o,r,a,n,s,l,c){var u=r.transform;return{u_is_size_zoom_constant:+("constant"===t||"source"===t),u_is_size_feature_constant:+("constant"===t||"camera"===t),u_size_t:e?e.uSizeT:0,u_size:e?e.uSize:0,u_camera_to_center_distance:u.cameraToCenterDistance,u_pitch:u.pitch/360*2*Math.PI,u_rotate_symbol:+i,u_aspect_ratio:u.width/u.height,u_fade_change:r.options.fadeDuration?r.symbolFadeChange:1,u_matrix:a,u_label_plane_matrix:n,u_coord_matrix:s,u_is_text:+l,u_pitch_with_map:+o,u_texsize:c,u_texture:0}},Gi=function(e,i,o,r,a,n,s,l,c,u,h){var p=a.transform;return t.extend(Vi(e,i,o,r,a,n,s,l,c,u),{u_gamma_scale:r?Math.cos(p._pitch)*p.cameraToCenterDistance:1,u_device_pixel_ratio:t.browser.devicePixelRatio,u_is_halo:+h})},Wi=function(e,i,o,r,a,n,s,l,c,u){return t.extend(Gi(e,i,o,r,a,n,s,l,!0,c,!0),{u_texsize_icon:u,u_texture_icon:1})},Xi=function(t,e,i){return{u_matrix:t,u_opacity:e,u_color:i}},Hi=function(e,i,o,r,a,n){return t.extend(function(t,e,i,o){var r=i.imageManager.getPattern(t.from.toString()),a=i.imageManager.getPattern(t.to.toString()),n=i.imageManager.getPixelSize(),s=n.width,l=n.height,c=Math.pow(2,o.tileID.overscaledZ),u=o.tileSize*Math.pow(2,i.transform.tileZoom)/c,h=u*(o.tileID.canonical.x+o.tileID.wrap*c),p=u*o.tileID.canonical.y;return{u_image:0,u_pattern_tl_a:r.tl,u_pattern_br_a:r.br,u_pattern_tl_b:a.tl,u_pattern_br_b:a.br,u_texsize:[s,l],u_mix:e.t,u_pattern_size_a:r.displaySize,u_pattern_size_b:a.displaySize,u_scale_a:e.fromScale,u_scale_b:e.toScale,u_tile_units_to_pixels:1/pe(o,1,i.transform.tileZoom),u_pixel_coord_upper:[h>>16,p>>16],u_pixel_coord_lower:[65535&h,65535&p]}}(r,n,o,a),{u_matrix:e,u_opacity:i})},Ki={fillExtrusion:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_lightpos:new t.Uniform3f(e,i.u_lightpos),u_lightintensity:new t.Uniform1f(e,i.u_lightintensity),u_lightcolor:new t.Uniform3f(e,i.u_lightcolor),u_vertical_gradient:new t.Uniform1f(e,i.u_vertical_gradient),u_opacity:new t.Uniform1f(e,i.u_opacity)}},fillExtrusionPattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_lightpos:new t.Uniform3f(e,i.u_lightpos),u_lightintensity:new t.Uniform1f(e,i.u_lightintensity),u_lightcolor:new t.Uniform3f(e,i.u_lightcolor),u_vertical_gradient:new t.Uniform1f(e,i.u_vertical_gradient),u_height_factor:new t.Uniform1f(e,i.u_height_factor),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform3f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade),u_opacity:new t.Uniform1f(e,i.u_opacity)}},fill:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},fillPattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform3f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}},fillOutline:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world)}},fillOutlinePattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform3f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}},circle:function(e,i){return{u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_scale_with_map:new t.Uniform1i(e,i.u_scale_with_map),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_extrude_scale:new t.Uniform2f(e,i.u_extrude_scale),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},collisionBox:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pixels_to_tile_units:new t.Uniform1f(e,i.u_pixels_to_tile_units),u_extrude_scale:new t.Uniform2f(e,i.u_extrude_scale),u_overscale_factor:new t.Uniform1f(e,i.u_overscale_factor)}},collisionCircle:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_inv_matrix:new t.UniformMatrix4f(e,i.u_inv_matrix),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_viewport_size:new t.Uniform2f(e,i.u_viewport_size)}},debug:function(e,i){return{u_color:new t.UniformColor(e,i.u_color),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_overlay:new t.Uniform1i(e,i.u_overlay),u_overlay_scale:new t.Uniform1f(e,i.u_overlay_scale)}},clippingMask:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},heatmap:function(e,i){return{u_extrude_scale:new t.Uniform1f(e,i.u_extrude_scale),u_intensity:new t.Uniform1f(e,i.u_intensity),u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},heatmapTexture:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world),u_image:new t.Uniform1i(e,i.u_image),u_color_ramp:new t.Uniform1i(e,i.u_color_ramp),u_opacity:new t.Uniform1f(e,i.u_opacity)}},hillshade:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_latrange:new t.Uniform2f(e,i.u_latrange),u_light:new t.Uniform2f(e,i.u_light),u_shadow:new t.UniformColor(e,i.u_shadow),u_highlight:new t.UniformColor(e,i.u_highlight),u_accent:new t.UniformColor(e,i.u_accent)}},hillshadePrepare:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_dimension:new t.Uniform2f(e,i.u_dimension),u_zoom:new t.Uniform1f(e,i.u_zoom),u_unpack:new t.Uniform4f(e,i.u_unpack)}},line:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_units_to_pixels:new t.Uniform2f(e,i.u_units_to_pixels)}},lineGradient:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_units_to_pixels:new t.Uniform2f(e,i.u_units_to_pixels),u_image:new t.Uniform1i(e,i.u_image),u_image_height:new t.Uniform1f(e,i.u_image_height)}},linePattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_texsize:new t.Uniform2f(e,i.u_texsize),u_ratio:new t.Uniform1f(e,i.u_ratio),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_image:new t.Uniform1i(e,i.u_image),u_units_to_pixels:new t.Uniform2f(e,i.u_units_to_pixels),u_scale:new t.Uniform3f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}},lineSDF:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_units_to_pixels:new t.Uniform2f(e,i.u_units_to_pixels),u_patternscale_a:new t.Uniform2f(e,i.u_patternscale_a),u_patternscale_b:new t.Uniform2f(e,i.u_patternscale_b),u_sdfgamma:new t.Uniform1f(e,i.u_sdfgamma),u_image:new t.Uniform1i(e,i.u_image),u_tex_y_a:new t.Uniform1f(e,i.u_tex_y_a),u_tex_y_b:new t.Uniform1f(e,i.u_tex_y_b),u_mix:new t.Uniform1f(e,i.u_mix)}},raster:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_tl_parent:new t.Uniform2f(e,i.u_tl_parent),u_scale_parent:new t.Uniform1f(e,i.u_scale_parent),u_buffer_scale:new t.Uniform1f(e,i.u_buffer_scale),u_fade_t:new t.Uniform1f(e,i.u_fade_t),u_opacity:new t.Uniform1f(e,i.u_opacity),u_image0:new t.Uniform1i(e,i.u_image0),u_image1:new t.Uniform1i(e,i.u_image1),u_brightness_low:new t.Uniform1f(e,i.u_brightness_low),u_brightness_high:new t.Uniform1f(e,i.u_brightness_high),u_saturation_factor:new t.Uniform1f(e,i.u_saturation_factor),u_contrast_factor:new t.Uniform1f(e,i.u_contrast_factor),u_spin_weights:new t.Uniform3f(e,i.u_spin_weights)}},symbolIcon:function(e,i){return{u_is_size_zoom_constant:new t.Uniform1i(e,i.u_is_size_zoom_constant),u_is_size_feature_constant:new t.Uniform1i(e,i.u_is_size_feature_constant),u_size_t:new t.Uniform1f(e,i.u_size_t),u_size:new t.Uniform1f(e,i.u_size),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pitch:new t.Uniform1f(e,i.u_pitch),u_rotate_symbol:new t.Uniform1i(e,i.u_rotate_symbol),u_aspect_ratio:new t.Uniform1f(e,i.u_aspect_ratio),u_fade_change:new t.Uniform1f(e,i.u_fade_change),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_label_plane_matrix:new t.UniformMatrix4f(e,i.u_label_plane_matrix),u_coord_matrix:new t.UniformMatrix4f(e,i.u_coord_matrix),u_is_text:new t.Uniform1i(e,i.u_is_text),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_texsize:new t.Uniform2f(e,i.u_texsize),u_texture:new t.Uniform1i(e,i.u_texture)}},symbolSDF:function(e,i){return{u_is_size_zoom_constant:new t.Uniform1i(e,i.u_is_size_zoom_constant),u_is_size_feature_constant:new t.Uniform1i(e,i.u_is_size_feature_constant),u_size_t:new t.Uniform1f(e,i.u_size_t),u_size:new t.Uniform1f(e,i.u_size),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pitch:new t.Uniform1f(e,i.u_pitch),u_rotate_symbol:new t.Uniform1i(e,i.u_rotate_symbol),u_aspect_ratio:new t.Uniform1f(e,i.u_aspect_ratio),u_fade_change:new t.Uniform1f(e,i.u_fade_change),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_label_plane_matrix:new t.UniformMatrix4f(e,i.u_label_plane_matrix),u_coord_matrix:new t.UniformMatrix4f(e,i.u_coord_matrix),u_is_text:new t.Uniform1i(e,i.u_is_text),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_texsize:new t.Uniform2f(e,i.u_texsize),u_texture:new t.Uniform1i(e,i.u_texture),u_gamma_scale:new t.Uniform1f(e,i.u_gamma_scale),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_is_halo:new t.Uniform1i(e,i.u_is_halo)}},symbolTextAndIcon:function(e,i){return{u_is_size_zoom_constant:new t.Uniform1i(e,i.u_is_size_zoom_constant),u_is_size_feature_constant:new t.Uniform1i(e,i.u_is_size_feature_constant),u_size_t:new t.Uniform1f(e,i.u_size_t),u_size:new t.Uniform1f(e,i.u_size),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pitch:new t.Uniform1f(e,i.u_pitch),u_rotate_symbol:new t.Uniform1i(e,i.u_rotate_symbol),u_aspect_ratio:new t.Uniform1f(e,i.u_aspect_ratio),u_fade_change:new t.Uniform1f(e,i.u_fade_change),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_label_plane_matrix:new t.UniformMatrix4f(e,i.u_label_plane_matrix),u_coord_matrix:new t.UniformMatrix4f(e,i.u_coord_matrix),u_is_text:new t.Uniform1i(e,i.u_is_text),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_texsize:new t.Uniform2f(e,i.u_texsize),u_texsize_icon:new t.Uniform2f(e,i.u_texsize_icon),u_texture:new t.Uniform1i(e,i.u_texture),u_texture_icon:new t.Uniform1i(e,i.u_texture_icon),u_gamma_scale:new t.Uniform1f(e,i.u_gamma_scale),u_device_pixel_ratio:new t.Uniform1f(e,i.u_device_pixel_ratio),u_is_halo:new t.Uniform1i(e,i.u_is_halo)}},background:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_opacity:new t.Uniform1f(e,i.u_opacity),u_color:new t.UniformColor(e,i.u_color)}},backgroundPattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_opacity:new t.Uniform1f(e,i.u_opacity),u_image:new t.Uniform1i(e,i.u_image),u_pattern_tl_a:new t.Uniform2f(e,i.u_pattern_tl_a),u_pattern_br_a:new t.Uniform2f(e,i.u_pattern_br_a),u_pattern_tl_b:new t.Uniform2f(e,i.u_pattern_tl_b),u_pattern_br_b:new t.Uniform2f(e,i.u_pattern_br_b),u_texsize:new t.Uniform2f(e,i.u_texsize),u_mix:new t.Uniform1f(e,i.u_mix),u_pattern_size_a:new t.Uniform2f(e,i.u_pattern_size_a),u_pattern_size_b:new t.Uniform2f(e,i.u_pattern_size_b),u_scale_a:new t.Uniform1f(e,i.u_scale_a),u_scale_b:new t.Uniform1f(e,i.u_scale_b),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_tile_units_to_pixels:new t.Uniform1f(e,i.u_tile_units_to_pixels)}}};function Yi(e,i,o,r,a,n,s){for(var l=e.context,c=l.gl,u=e.useProgram("collisionBox"),h=[],p=0,d=0,_=0;_<r.length;_++){var f=r[_],m=i.getTile(f),g=m.getBucket(o);if(g){var v=f.posMatrix;0===a[0]&&0===a[1]||(v=e.translatePosMatrix(f.posMatrix,m,a,n));var y=s?g.textCollisionBox:g.iconCollisionBox,x=g.collisionCircleArray;if(x.length>0){var b=t.create(),w=v;t.mul(b,g.placementInvProjMatrix,e.transform.glCoordMatrix),t.mul(b,b,g.placementViewportMatrix),h.push({circleArray:x,circleOffset:d,transform:w,invTransform:b}),d=p+=x.length/4}y&&u.draw(l,c.LINES,It.disabled,Pt.disabled,e.colorModeForRenderPass(),Ct.disabled,Di(v,e.transform,m),o.id,y.layoutVertexBuffer,y.indexBuffer,y.segments,null,e.transform.zoom,null,null,y.collisionVertexBuffer)}}if(s&&h.length){var T=e.useProgram("collisionCircle"),E=new t.StructArrayLayout2f1f2i16;E.resize(4*p),E._trim();for(var I=0,P=0,S=h;P<S.length;P+=1)for(var C=S[P],z=0;z<C.circleArray.length/4;z++){var D=4*z,A=C.circleArray[D+0],M=C.circleArray[D+1],L=C.circleArray[D+2],R=C.circleArray[D+3];E.emplace(I++,A,M,L,R,0),E.emplace(I++,A,M,L,R,1),E.emplace(I++,A,M,L,R,2),E.emplace(I++,A,M,L,R,3)}(!ji||ji.length<2*p)&&(ji=function(e){var i=2*e,o=new t.StructArrayLayout3ui6;o.resize(i),o._trim();for(var r=0;r<i;r++){var a=6*r;o.uint16[a+0]=4*r+0,o.uint16[a+1]=4*r+1,o.uint16[a+2]=4*r+2,o.uint16[a+3]=4*r+2,o.uint16[a+4]=4*r+3,o.uint16[a+5]=4*r+0}return o}(p));for(var k=l.createIndexBuffer(ji,!0),O=l.createVertexBuffer(E,t.collisionCircleLayout.members,!0),B=0,F=h;B<F.length;B+=1){var U=F[B],N=Ai(U.transform,U.invTransform,e.transform);T.draw(l,c.TRIANGLES,It.disabled,Pt.disabled,e.colorModeForRenderPass(),Ct.disabled,N,o.id,O,k,t.SegmentVector.simpleSegment(0,2*U.circleOffset,U.circleArray.length,U.circleArray.length/2),null,e.transform.zoom,null,null,null)}O.destroy(),k.destroy()}}var Ji=t.identity(new Float32Array(16));function Qi(e,i,o,r,a,n){var s=t.getAnchorAlignment(e),l=-(s.horizontalAlign-.5)*i,c=-(s.verticalAlign-.5)*o,u=t.evaluateVariableOffset(e,r);return new t.Point((l/a+u[0])*n,(c/a+u[1])*n)}function $i(e,i,o,r,a,n,s,l,c,u,h){var p=e.text.placedSymbolArray,d=e.text.dynamicLayoutVertexArray,_=e.icon.dynamicLayoutVertexArray,f={};d.clear();for(var m=0;m<p.length;m++){var g=p.get(m),v=g.hidden||!g.crossTileID||e.allowVerticalPlacement&&!g.placedOrientation?null:r[g.crossTileID];if(v){var y=new t.Point(g.anchorX,g.anchorY),x=$t(y,o?l:s),b=te(n.cameraToCenterDistance,x.signedDistanceFromCamera),w=a.evaluateSizeForFeature(e.textSizeData,u,g)*b/t.ONE_EM;o&&(w*=e.tilePixelRatio/c);for(var T=Qi(v.anchor,v.width,v.height,v.textOffset,v.textBoxScale,w),E=o?$t(y.add(T),s).point:x.point.add(i?T.rotate(-n.angle):T),I=e.allowVerticalPlacement&&g.placedOrientation===t.WritingMode.vertical?Math.PI/2:0,P=0;P<g.numGlyphs;P++)t.addDynamicAttributes(d,E,I);h&&g.associatedIconIndex>=0&&(f[g.associatedIconIndex]={shiftedAnchor:E,angle:I})}else ce(g.numGlyphs,d)}if(h){_.clear();for(var S=e.icon.placedSymbolArray,C=0;C<S.length;C++){var z=S.get(C);if(z.hidden)ce(z.numGlyphs,_);else{var D=f[C];if(D)for(var A=0;A<z.numGlyphs;A++)t.addDynamicAttributes(_,D.shiftedAnchor,D.angle);else ce(z.numGlyphs,_)}}e.icon.dynamicLayoutVertexBuffer.updateData(_)}e.text.dynamicLayoutVertexBuffer.updateData(d)}function to(t,e,i){return i.iconsInText&&e?"symbolTextAndIcon":t?"symbolSDF":"symbolIcon"}function eo(e,i,o,r,a,n,s,l,c,u,h,p){for(var d=e.context,_=d.gl,f=e.transform,m="map"===l,g="map"===c,v=m&&"point"!==o.layout.get("symbol-placement"),y=m&&!g&&!v,x=void 0!==o.layout.get("symbol-sort-key").constantOr(1),b=!1,w=e.depthModeForSublayer(0,It.ReadOnly),T=o.layout.get("text-variable-anchor"),E=[],I=0,P=r;I<P.length;I+=1){var S=P[I],C=i.getTile(S),z=C.getBucket(o);if(z){var D=a?z.text:z.icon;if(D&&D.segments.get().length){var A=D.programConfigurations.get(o.id),M=a||z.sdfIcons,L=a?z.textSizeData:z.iconSizeData,R=g||0!==f.pitch,k=e.useProgram(to(M,a,z),A),O=t.evaluateSizeForZoom(L,f.zoom),B=void 0,F=[0,0],U=void 0,N=void 0,Z=null,q=void 0;if(a)U=C.glyphAtlasTexture,N=_.LINEAR,B=C.glyphAtlasTexture.size,z.iconsInText&&(F=C.imageAtlasTexture.size,Z=C.imageAtlasTexture,q=R||e.options.rotating||e.options.zooming||"composite"===L.kind||"camera"===L.kind?_.LINEAR:_.NEAREST);else{var j=1!==o.layout.get("icon-size").constantOr(0)||z.iconsNeedLinear;U=C.imageAtlasTexture,N=M||e.options.rotating||e.options.zooming||j||R?_.LINEAR:_.NEAREST,B=C.imageAtlasTexture.size}var V=pe(C,1,e.transform.zoom),G=Jt(S.posMatrix,g,m,e.transform,V),W=Qt(S.posMatrix,g,m,e.transform,V),X=T&&z.hasTextData(),H="none"!==o.layout.get("icon-text-fit")&&X&&z.hasIconData();v&&ie(z,S.posMatrix,e,a,G,W,g,u);var K=e.translatePosMatrix(S.posMatrix,C,n,s),Y=v||a&&T||H?Ji:G,J=e.translatePosMatrix(W,C,n,s,!0),Q=M&&0!==o.paint.get(a?"text-halo-width":"icon-halo-width").constantOr(1),$={program:k,buffers:D,uniformValues:M?z.iconsInText?Wi(L.kind,O,y,g,e,K,Y,J,B,F):Gi(L.kind,O,y,g,e,K,Y,J,a,B,!0):Vi(L.kind,O,y,g,e,K,Y,J,a,B),atlasTexture:U,atlasTextureIcon:Z,atlasInterpolation:N,atlasInterpolationIcon:q,isSDF:M,hasHalo:Q};if(x&&z.canOverlap){b=!0;for(var tt=0,et=D.segments.get();tt<et.length;tt+=1){var it=et[tt];E.push({segments:new t.SegmentVector([it]),sortKey:it.sortKey,state:$})}}else E.push({segments:D.segments,sortKey:0,state:$})}}}b&&E.sort((function(t,e){return t.sortKey-e.sortKey}));for(var ot=0,rt=E;ot<rt.length;ot+=1){var at=rt[ot],nt=at.state;if(d.activeTexture.set(_.TEXTURE0),nt.atlasTexture.bind(nt.atlasInterpolation,_.CLAMP_TO_EDGE),nt.atlasTextureIcon&&(d.activeTexture.set(_.TEXTURE1),nt.atlasTextureIcon&&nt.atlasTextureIcon.bind(nt.atlasInterpolationIcon,_.CLAMP_TO_EDGE)),nt.isSDF){var st=nt.uniformValues;nt.hasHalo&&(st.u_is_halo=1,io(nt.buffers,at.segments,o,e,nt.program,w,h,p,st)),st.u_is_halo=0}io(nt.buffers,at.segments,o,e,nt.program,w,h,p,nt.uniformValues)}}function io(t,e,i,o,r,a,n,s,l){var c=o.context;r.draw(c,c.gl.TRIANGLES,a,n,s,Ct.disabled,l,i.id,t.layoutVertexBuffer,t.indexBuffer,e,i.paint,o.transform.zoom,t.programConfigurations.get(i.id),t.dynamicLayoutVertexBuffer,t.opacityVertexBuffer)}function oo(t,e,i,o,r,a,n){var s,l,c,u,h,p=t.context.gl,d=i.paint.get("fill-pattern"),_=d&&d.constantOr(1),f=i.getCrossfadeParameters();n?(l=_&&!i.getPaintProperty("fill-outline-color")?"fillOutlinePattern":"fillOutline",s=p.LINES):(l=_?"fillPattern":"fill",s=p.TRIANGLES);for(var m=0,g=o;m<g.length;m+=1){var v=g[m],y=e.getTile(v);if(!_||y.patternsLoaded()){var x=y.getBucket(i);if(x){var b=x.programConfigurations.get(i.id),w=t.useProgram(l,b);_&&(t.context.activeTexture.set(p.TEXTURE0),y.imageAtlasTexture.bind(p.LINEAR,p.CLAMP_TO_EDGE),b.updatePaintBuffers(f));var T=d.constantOr(null);if(T&&y.imageAtlas){var E=y.imageAtlas,I=E.patternPositions[T.to.toString()],P=E.patternPositions[T.from.toString()];I&&P&&b.setConstantPatternPositions(I,P)}var S=t.translatePosMatrix(v.posMatrix,y,i.paint.get("fill-translate"),i.paint.get("fill-translate-anchor"));if(n){u=x.indexBuffer2,h=x.segments2;var C=[p.drawingBufferWidth,p.drawingBufferHeight];c="fillOutlinePattern"===l&&_?Ci(S,t,f,y,C):Si(S,C)}else u=x.indexBuffer,h=x.segments,c=_?Pi(S,t,f,y):Ii(S);w.draw(t.context,s,r,t.stencilModeForClipping(v),a,Ct.disabled,c,i.id,x.layoutVertexBuffer,u,h,i.paint,t.transform.zoom,b)}}}}function ro(t,e,i,o,r,a,n){for(var s=t.context,l=s.gl,c=i.paint.get("fill-extrusion-pattern"),u=c.constantOr(1),h=i.getCrossfadeParameters(),p=i.paint.get("fill-extrusion-opacity"),d=0,_=o;d<_.length;d+=1){var f=_[d],m=e.getTile(f),g=m.getBucket(i);if(g){var v=g.programConfigurations.get(i.id),y=t.useProgram(u?"fillExtrusionPattern":"fillExtrusion",v);u&&(t.context.activeTexture.set(l.TEXTURE0),m.imageAtlasTexture.bind(l.LINEAR,l.CLAMP_TO_EDGE),v.updatePaintBuffers(h));var x=c.constantOr(null);if(x&&m.imageAtlas){var b=m.imageAtlas,w=b.patternPositions[x.to.toString()],T=b.patternPositions[x.from.toString()];w&&T&&v.setConstantPatternPositions(w,T)}var E=t.translatePosMatrix(f.posMatrix,m,i.paint.get("fill-extrusion-translate"),i.paint.get("fill-extrusion-translate-anchor")),I=i.paint.get("fill-extrusion-vertical-gradient"),P=u?Ei(E,t,I,p,f,h,m):Ti(E,t,I,p);y.draw(s,s.gl.TRIANGLES,r,a,n,Ct.backCCW,P,i.id,g.layoutVertexBuffer,g.indexBuffer,g.segments,i.paint,t.transform.zoom,v)}}}function ao(e,i,o,r,a,n){var s=e.context,l=s.gl,c=i.fbo;if(c){var u=e.useProgram("hillshade");s.activeTexture.set(l.TEXTURE0),l.bindTexture(l.TEXTURE_2D,c.colorAttachment.get());var h=function(e,i,o){var r=o.paint.get("hillshade-shadow-color"),a=o.paint.get("hillshade-highlight-color"),n=o.paint.get("hillshade-accent-color"),s=o.paint.get("hillshade-illumination-direction")*(Math.PI/180);"viewport"===o.paint.get("hillshade-illumination-anchor")&&(s-=e.transform.angle);var l,c,u,h=!e.options.moving;return{u_matrix:e.transform.calculatePosMatrix(i.tileID.toUnwrapped(),h),u_image:0,u_latrange:(l=i.tileID,c=Math.pow(2,l.canonical.z),u=l.canonical.y,[new t.MercatorCoordinate(0,u/c).toLngLat().lat,new t.MercatorCoordinate(0,(u+1)/c).toLngLat().lat]),u_light:[o.paint.get("hillshade-exaggeration"),s],u_shadow:r,u_highlight:a,u_accent:n}}(e,i,o);u.draw(s,l.TRIANGLES,r,a,n,Ct.disabled,h,o.id,e.rasterBoundsBuffer,e.quadTriangleIndexBuffer,e.rasterBoundsSegments)}}function no(e,i,o,r,a,n){var s=e.context,l=s.gl,c=i.dem;if(c&&c.data){var u=c.dim,h=c.stride,p=c.getPixels();if(s.activeTexture.set(l.TEXTURE1),s.pixelStoreUnpackPremultiplyAlpha.set(!1),i.demTexture=i.demTexture||e.getTileTexture(h),i.demTexture){var d=i.demTexture;d.update(p,{premultiply:!1}),d.bind(l.NEAREST,l.CLAMP_TO_EDGE)}else i.demTexture=new t.Texture(s,p,l.RGBA,{premultiply:!1}),i.demTexture.bind(l.NEAREST,l.CLAMP_TO_EDGE);s.activeTexture.set(l.TEXTURE0);var _=i.fbo;if(!_){var f=new t.Texture(s,{width:u,height:u,data:null},l.RGBA);f.bind(l.LINEAR,l.CLAMP_TO_EDGE),(_=i.fbo=s.createFramebuffer(u,u,!0)).colorAttachment.set(f.texture)}s.bindFramebuffer.set(_.framebuffer),s.viewport.set([0,0,u,u]),e.useProgram("hillshadePrepare").draw(s,l.TRIANGLES,r,a,n,Ct.disabled,function(e,i){var o=i.stride,r=t.create();return t.ortho(r,0,t.EXTENT,-t.EXTENT,0,0,1),t.translate(r,r,[0,-t.EXTENT,0]),{u_matrix:r,u_image:1,u_dimension:[o,o],u_zoom:e.overscaledZ,u_unpack:i.getUnpackVector()}}(i.tileID,c),o.id,e.rasterBoundsBuffer,e.quadTriangleIndexBuffer,e.rasterBoundsSegments),i.needsHillshadePrepare=!1}}function so(e,i,o,r,a){var n=r.paint.get("raster-fade-duration");if(n>0){var s=t.browser.now(),l=(s-e.timeAdded)/n,c=i?(s-i.timeAdded)/n:-1,u=o.getSource(),h=a.coveringZoomLevel({tileSize:u.tileSize,roundZoom:u.roundZoom}),p=!i||Math.abs(i.tileID.overscaledZ-h)>Math.abs(e.tileID.overscaledZ-h),d=p&&e.refreshedUponExpiration?1:t.clamp(p?l:1-c,0,1);return e.refreshedUponExpiration&&l>=1&&(e.refreshedUponExpiration=!1),i?{opacity:1,mix:1-d}:{opacity:d,mix:0}}return{opacity:1,mix:0}}var lo=new t.Color(1,0,0,1),co=new t.Color(0,1,0,1),uo=new t.Color(0,0,1,1),ho=new t.Color(1,0,1,1),po=new t.Color(0,1,1,1);function _o(t,e,i,o){mo(t,0,e+i/2,t.transform.width,i,o)}function fo(t,e,i,o){mo(t,e-i/2,0,i,t.transform.height,o)}function mo(e,i,o,r,a,n){var s=e.context,l=s.gl;l.enable(l.SCISSOR_TEST),l.scissor(i*t.browser.devicePixelRatio,o*t.browser.devicePixelRatio,r*t.browser.devicePixelRatio,a*t.browser.devicePixelRatio),s.clear({color:n}),l.disable(l.SCISSOR_TEST)}function go(e,i,o){var r=e.context,a=r.gl,n=o.posMatrix,s=e.useProgram("debug"),l=It.disabled,c=Pt.disabled,u=e.colorModeForRenderPass();r.activeTexture.set(a.TEXTURE0),e.emptyTexture.bind(a.LINEAR,a.CLAMP_TO_EDGE),s.draw(r,a.LINE_STRIP,l,c,u,Ct.disabled,Mi(n,t.Color.red),"$debug",e.debugBuffer,e.tileBorderIndexBuffer,e.debugSegments);var h=i.getTileByID(o.key).latestRawTileData,p=Math.floor((h&&h.byteLength||0)/1024),d=i.getTile(o).tileSize,_=512/Math.min(d,512)*(o.overscaledZ/e.transform.zoom)*.5,f=o.canonical.toString();o.overscaledZ!==o.canonical.z&&(f+=" => "+o.overscaledZ),function(t,e){t.initDebugOverlayCanvas();var i=t.debugOverlayCanvas,o=t.context.gl,r=t.debugOverlayCanvas.getContext("2d");r.clearRect(0,0,i.width,i.height),r.shadowColor="white",r.shadowBlur=2,r.lineWidth=1.5,r.strokeStyle="white",r.textBaseline="top",r.font="bold 36px Open Sans, sans-serif",r.fillText(e,5,5),r.strokeText(e,5,5),t.debugOverlayTexture.update(i),t.debugOverlayTexture.bind(o.LINEAR,o.CLAMP_TO_EDGE)}(e,f+" "+p+"kb"),s.draw(r,a.TRIANGLES,l,c,St.alphaBlended,Ct.disabled,Mi(n,t.Color.transparent,_),"$debug",e.debugBuffer,e.quadTriangleIndexBuffer,e.debugSegments)}var vo={symbol:function(e,i,o,r,a){if("translucent"===e.renderPass){var n=Pt.disabled,s=e.colorModeForRenderPass();o.layout.get("text-variable-anchor")&&function(e,i,o,r,a,n,s){for(var l=i.transform,c="map"===a,u="map"===n,h=0,p=e;h<p.length;h+=1){var d=p[h],_=r.getTile(d),f=_.getBucket(o);if(f&&f.text&&f.text.segments.get().length){var m=t.evaluateSizeForZoom(f.textSizeData,l.zoom),g=pe(_,1,i.transform.zoom),v=Jt(d.posMatrix,u,c,i.transform,g),y="none"!==o.layout.get("icon-text-fit")&&f.hasIconData();if(m){var x=Math.pow(2,l.zoom-_.tileID.overscaledZ);$i(f,c,u,s,t.symbolSize,l,v,d.posMatrix,x,m,y)}}}}(r,e,o,i,o.layout.get("text-rotation-alignment"),o.layout.get("text-pitch-alignment"),a),0!==o.paint.get("icon-opacity").constantOr(1)&&eo(e,i,o,r,!1,o.paint.get("icon-translate"),o.paint.get("icon-translate-anchor"),o.layout.get("icon-rotation-alignment"),o.layout.get("icon-pitch-alignment"),o.layout.get("icon-keep-upright"),n,s),0!==o.paint.get("text-opacity").constantOr(1)&&eo(e,i,o,r,!0,o.paint.get("text-translate"),o.paint.get("text-translate-anchor"),o.layout.get("text-rotation-alignment"),o.layout.get("text-pitch-alignment"),o.layout.get("text-keep-upright"),n,s),i.map.showCollisionBoxes&&(Yi(e,i,o,r,o.paint.get("text-translate"),o.paint.get("text-translate-anchor"),!0),Yi(e,i,o,r,o.paint.get("icon-translate"),o.paint.get("icon-translate-anchor"),!1))}},circle:function(e,i,o,r){if("translucent"===e.renderPass){var a=o.paint.get("circle-opacity"),n=o.paint.get("circle-stroke-width"),s=o.paint.get("circle-stroke-opacity"),l=void 0!==o.layout.get("circle-sort-key").constantOr(1);if(0!==a.constantOr(1)||0!==n.constantOr(1)&&0!==s.constantOr(1)){for(var c=e.context,u=c.gl,h=e.depthModeForSublayer(0,It.ReadOnly),p=Pt.disabled,d=e.colorModeForRenderPass(),_=[],f=0;f<r.length;f++){var m=r[f],g=i.getTile(m),v=g.getBucket(o);if(v){var y=v.programConfigurations.get(o.id),x={programConfiguration:y,program:e.useProgram("circle",y),layoutVertexBuffer:v.layoutVertexBuffer,indexBuffer:v.indexBuffer,uniformValues:zi(e,m,g,o)};if(l)for(var b=0,w=v.segments.get();b<w.length;b+=1){var T=w[b];_.push({segments:new t.SegmentVector([T]),sortKey:T.sortKey,state:x})}else _.push({segments:v.segments,sortKey:0,state:x})}}l&&_.sort((function(t,e){return t.sortKey-e.sortKey}));for(var E=0,I=_;E<I.length;E+=1){var P=I[E],S=P.state;S.program.draw(c,u.TRIANGLES,h,p,d,Ct.disabled,S.uniformValues,o.id,S.layoutVertexBuffer,S.indexBuffer,P.segments,o.paint,e.transform.zoom,S.programConfiguration)}}}},heatmap:function(e,i,o,r){if(0!==o.paint.get("heatmap-opacity"))if("offscreen"===e.renderPass){var a=e.context,n=a.gl,s=Pt.disabled,l=new St([n.ONE,n.ONE],t.Color.transparent,[!0,!0,!0,!0]);!function(t,e,i){var o=t.gl;t.activeTexture.set(o.TEXTURE1),t.viewport.set([0,0,e.width/4,e.height/4]);var r=i.heatmapFbo;if(r)o.bindTexture(o.TEXTURE_2D,r.colorAttachment.get()),t.bindFramebuffer.set(r.framebuffer);else{var a=o.createTexture();o.bindTexture(o.TEXTURE_2D,a),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_S,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_WRAP_T,o.CLAMP_TO_EDGE),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MIN_FILTER,o.LINEAR),o.texParameteri(o.TEXTURE_2D,o.TEXTURE_MAG_FILTER,o.LINEAR),r=i.heatmapFbo=t.createFramebuffer(e.width/4,e.height/4,!1),function(t,e,i,o){var r=t.gl;r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e.width/4,e.height/4,0,r.RGBA,t.extRenderToTextureHalfFloat?t.extTextureHalfFloat.HALF_FLOAT_OES:r.UNSIGNED_BYTE,null),o.colorAttachment.set(i)}(t,e,a,r)}}(a,e,o),a.clear({color:t.Color.transparent});for(var c=0;c<r.length;c++){var u=r[c];if(!i.hasRenderableParent(u)){var h=i.getTile(u),p=h.getBucket(o);if(p){var d=p.programConfigurations.get(o.id);e.useProgram("heatmap",d).draw(a,n.TRIANGLES,It.disabled,s,l,Ct.disabled,Ri(u.posMatrix,h,e.transform.zoom,o.paint.get("heatmap-intensity")),o.id,p.layoutVertexBuffer,p.indexBuffer,p.segments,o.paint,e.transform.zoom,d)}}}a.viewport.set([0,0,e.width,e.height])}else"translucent"===e.renderPass&&(e.context.setColorMode(e.colorModeForRenderPass()),function(e,i){var o=e.context,r=o.gl,a=i.heatmapFbo;if(a){o.activeTexture.set(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,a.colorAttachment.get()),o.activeTexture.set(r.TEXTURE1);var n=i.colorRampTexture;n||(n=i.colorRampTexture=new t.Texture(o,i.colorRamp,r.RGBA)),n.bind(r.LINEAR,r.CLAMP_TO_EDGE),e.useProgram("heatmapTexture").draw(o,r.TRIANGLES,It.disabled,Pt.disabled,e.colorModeForRenderPass(),Ct.disabled,function(e,i,o,r){var a=t.create();t.ortho(a,0,e.width,e.height,0,0,1);var n=e.context.gl;return{u_matrix:a,u_world:[n.drawingBufferWidth,n.drawingBufferHeight],u_image:0,u_color_ramp:1,u_opacity:i.paint.get("heatmap-opacity")}}(e,i),i.id,e.viewportBuffer,e.quadTriangleIndexBuffer,e.viewportSegments,i.paint,e.transform.zoom)}}(e,o))},line:function(e,i,o,r){if("translucent"===e.renderPass){var a=o.paint.get("line-opacity"),n=o.paint.get("line-width");if(0!==a.constantOr(1)&&0!==n.constantOr(1))for(var s=e.depthModeForSublayer(0,It.ReadOnly),l=e.colorModeForRenderPass(),c=o.paint.get("line-dasharray"),u=o.paint.get("line-pattern"),h=u.constantOr(1),p=o.paint.get("line-gradient"),d=o.getCrossfadeParameters(),_=h?"linePattern":c?"lineSDF":p?"lineGradient":"line",f=e.context,m=f.gl,g=!0,v=0,y=r;v<y.length;v+=1){var x=y[v],b=i.getTile(x);if(!h||b.patternsLoaded()){var w=b.getBucket(o);if(w){var T=w.programConfigurations.get(o.id),E=e.context.program.get(),I=e.useProgram(_,T),P=g||I.program!==E,S=u.constantOr(null);if(S&&b.imageAtlas){var C=b.imageAtlas,z=C.patternPositions[S.to.toString()],D=C.patternPositions[S.from.toString()];z&&D&&T.setConstantPatternPositions(z,D)}var A=h?Bi(e,b,o,d):c?Fi(e,b,o,c,d):p?Oi(e,b,o,w.lineClipsArray.length):ki(e,b,o);if(h)f.activeTexture.set(m.TEXTURE0),b.imageAtlasTexture.bind(m.LINEAR,m.CLAMP_TO_EDGE),T.updatePaintBuffers(d);else if(c&&(P||e.lineAtlas.dirty))f.activeTexture.set(m.TEXTURE0),e.lineAtlas.bind(f);else if(p){var M=w.gradients[o.id],L=M.texture;if(o.gradientVersion!==M.version){var R=256;if(o.stepInterpolant){var k=i.getSource().maxzoom,O=x.canonical.z===k?Math.ceil(1<<e.transform.maxZoom-x.canonical.z):1;R=t.clamp(t.nextPowerOfTwo(w.maxLineLength/t.EXTENT*1024*O),256,f.maxTextureSize)}M.gradient=t.renderColorRamp({expression:o.gradientExpression(),evaluationKey:"lineProgress",resolution:R,image:M.gradient||void 0,clips:w.lineClipsArray}),M.texture?M.texture.update(M.gradient):M.texture=new t.Texture(f,M.gradient,m.RGBA),M.version=o.gradientVersion,L=M.texture}f.activeTexture.set(m.TEXTURE0),L.bind(o.stepInterpolant?m.NEAREST:m.LINEAR,m.CLAMP_TO_EDGE)}I.draw(f,m.TRIANGLES,s,e.stencilModeForClipping(x),l,Ct.disabled,A,o.id,w.layoutVertexBuffer,w.indexBuffer,w.segments,o.paint,e.transform.zoom,T,w.layoutVertexBuffer2),g=!1}}}}},fill:function(e,i,o,r){var a=o.paint.get("fill-color"),n=o.paint.get("fill-opacity");if(0!==n.constantOr(1)){var s=e.colorModeForRenderPass(),l=o.paint.get("fill-pattern"),c=e.opaquePassEnabledForLayer()&&!l.constantOr(1)&&1===a.constantOr(t.Color.transparent).a&&1===n.constantOr(0)?"opaque":"translucent";if(e.renderPass===c){var u=e.depthModeForSublayer(1,"opaque"===e.renderPass?It.ReadWrite:It.ReadOnly);oo(e,i,o,r,u,s,!1)}if("translucent"===e.renderPass&&o.paint.get("fill-antialias")){var h=e.depthModeForSublayer(o.getPaintProperty("fill-outline-color")?2:0,It.ReadOnly);oo(e,i,o,r,h,s,!0)}}},"fill-extrusion":function(t,e,i,o){var r=i.paint.get("fill-extrusion-opacity");if(0!==r&&"translucent"===t.renderPass){var a=new It(t.context.gl.LEQUAL,It.ReadWrite,t.depthRangeFor3D);if(1!==r||i.paint.get("fill-extrusion-pattern").constantOr(1))ro(t,e,i,o,a,Pt.disabled,St.disabled),ro(t,e,i,o,a,t.stencilModeFor3D(),t.colorModeForRenderPass());else{var n=t.colorModeForRenderPass();ro(t,e,i,o,a,Pt.disabled,n)}}},hillshade:function(t,e,i,o){if("offscreen"===t.renderPass||"translucent"===t.renderPass){for(var r=t.context,a=t.depthModeForSublayer(0,It.ReadOnly),n=t.colorModeForRenderPass(),s="translucent"===t.renderPass?t.stencilConfigForOverlap(o):[{},o],l=s[0],c=0,u=s[1];c<u.length;c+=1){var h=u[c],p=e.getTile(h);p.needsHillshadePrepare&&"offscreen"===t.renderPass?no(t,p,i,a,Pt.disabled,n):"translucent"===t.renderPass&&ao(t,p,i,a,l[h.overscaledZ],n)}r.viewport.set([0,0,t.width,t.height])}},raster:function(t,e,i,o){if("translucent"===t.renderPass&&0!==i.paint.get("raster-opacity")&&o.length)for(var r=t.context,a=r.gl,n=e.getSource(),s=t.useProgram("raster"),l=t.colorModeForRenderPass(),c=n instanceof M?[{},o]:t.stencilConfigForOverlap(o),u=c[0],h=c[1],p=h[h.length-1].overscaledZ,d=!t.options.moving,_=0,f=h;_<f.length;_+=1){var m=f[_],g=t.depthModeForSublayer(m.overscaledZ-p,1===i.paint.get("raster-opacity")?It.ReadWrite:It.ReadOnly,a.LESS),v=e.getTile(m),y=t.transform.calculatePosMatrix(m.toUnwrapped(),d);v.registerFadeDuration(i.paint.get("raster-fade-duration"));var x=e.findLoadedParent(m,0),b=so(v,x,e,i,t.transform),w=void 0,T=void 0,E="nearest"===i.paint.get("raster-resampling")?a.NEAREST:a.LINEAR;r.activeTexture.set(a.TEXTURE0),v.texture.bind(E,a.CLAMP_TO_EDGE,a.LINEAR_MIPMAP_NEAREST),r.activeTexture.set(a.TEXTURE1),x?(x.texture.bind(E,a.CLAMP_TO_EDGE,a.LINEAR_MIPMAP_NEAREST),w=Math.pow(2,x.tileID.overscaledZ-v.tileID.overscaledZ),T=[v.tileID.canonical.x*w%1,v.tileID.canonical.y*w%1]):v.texture.bind(E,a.CLAMP_TO_EDGE,a.LINEAR_MIPMAP_NEAREST);var I=Zi(y,T||[0,0],w||1,b,i);n instanceof M?s.draw(r,a.TRIANGLES,g,Pt.disabled,l,Ct.disabled,I,i.id,n.boundsBuffer,t.quadTriangleIndexBuffer,n.boundsSegments):s.draw(r,a.TRIANGLES,g,u[m.overscaledZ],l,Ct.disabled,I,i.id,t.rasterBoundsBuffer,t.quadTriangleIndexBuffer,t.rasterBoundsSegments)}},background:function(t,e,i){var o=i.paint.get("background-color"),r=i.paint.get("background-opacity");if(0!==r){var a=t.context,n=a.gl,s=t.transform,l=s.tileSize,c=i.paint.get("background-pattern");if(!t.isPatternMissing(c)){var u=!c&&1===o.a&&1===r&&t.opaquePassEnabledForLayer()?"opaque":"translucent";if(t.renderPass===u){var h=Pt.disabled,p=t.depthModeForSublayer(0,"opaque"===u?It.ReadWrite:It.ReadOnly),d=t.colorModeForRenderPass(),_=t.useProgram(c?"backgroundPattern":"background"),f=s.coveringTiles({tileSize:l});c&&(a.activeTexture.set(n.TEXTURE0),t.imageManager.bind(t.context));for(var m=i.getCrossfadeParameters(),g=0,v=f;g<v.length;g+=1){var y=v[g],x=t.transform.calculatePosMatrix(y.toUnwrapped()),b=c?Hi(x,r,t,c,{tileID:y,tileSize:l},m):Xi(x,r,o);_.draw(a,n.TRIANGLES,p,h,d,Ct.disabled,b,i.id,t.tileExtentBuffer,t.quadTriangleIndexBuffer,t.tileExtentSegments)}}}}},debug:function(t,e,i){for(var o=0;o<i.length;o++)go(t,e,i[o])},custom:function(t,e,i){var o=t.context,r=i.implementation;if("offscreen"===t.renderPass){var a=r.prerender;a&&(t.setCustomLayerDefaults(),o.setColorMode(t.colorModeForRenderPass()),a.call(r,o.gl,t.transform.customLayerMatrix()),o.setDirty(),t.setBaseState())}else if("translucent"===t.renderPass){t.setCustomLayerDefaults(),o.setColorMode(t.colorModeForRenderPass()),o.setStencilMode(Pt.disabled);var n="3d"===r.renderingMode?new It(t.context.gl.LEQUAL,It.ReadWrite,t.depthRangeFor3D):t.depthModeForSublayer(0,It.ReadOnly);o.setDepthMode(n),r.render(o.gl,t.transform.customLayerMatrix()),o.setDirty(),t.setBaseState(),o.bindFramebuffer.set(null)}}},yo=function(t,e){this.context=new zt(t),this.transform=e,this._tileTextures={},this.setup(),this.numSublayers=Dt.maxUnderzooming+Dt.maxOverzooming+1,this.depthEpsilon=1/Math.pow(2,16),this.crossTileSymbolIndex=new Fe,this.gpuTimers={}};yo.prototype.resize=function(e,i){if(this.width=e*t.browser.devicePixelRatio,this.height=i*t.browser.devicePixelRatio,this.context.viewport.set([0,0,this.width,this.height]),this.style)for(var o=0,r=this.style._order;o<r.length;o+=1)this.style._layers[r[o]].resize()},yo.prototype.setup=function(){var e=this.context,i=new t.StructArrayLayout2i4;i.emplaceBack(0,0),i.emplaceBack(t.EXTENT,0),i.emplaceBack(0,t.EXTENT),i.emplaceBack(t.EXTENT,t.EXTENT),this.tileExtentBuffer=e.createVertexBuffer(i,Ve.members),this.tileExtentSegments=t.SegmentVector.simpleSegment(0,0,4,2);var o=new t.StructArrayLayout2i4;o.emplaceBack(0,0),o.emplaceBack(t.EXTENT,0),o.emplaceBack(0,t.EXTENT),o.emplaceBack(t.EXTENT,t.EXTENT),this.debugBuffer=e.createVertexBuffer(o,Ve.members),this.debugSegments=t.SegmentVector.simpleSegment(0,0,4,5);var r=new t.StructArrayLayout4i8;r.emplaceBack(0,0,0,0),r.emplaceBack(t.EXTENT,0,t.EXTENT,0),r.emplaceBack(0,t.EXTENT,0,t.EXTENT),r.emplaceBack(t.EXTENT,t.EXTENT,t.EXTENT,t.EXTENT),this.rasterBoundsBuffer=e.createVertexBuffer(r,A.members),this.rasterBoundsSegments=t.SegmentVector.simpleSegment(0,0,4,2);var a=new t.StructArrayLayout2i4;a.emplaceBack(0,0),a.emplaceBack(1,0),a.emplaceBack(0,1),a.emplaceBack(1,1),this.viewportBuffer=e.createVertexBuffer(a,Ve.members),this.viewportSegments=t.SegmentVector.simpleSegment(0,0,4,2);var n=new t.StructArrayLayout1ui2;n.emplaceBack(0),n.emplaceBack(1),n.emplaceBack(3),n.emplaceBack(2),n.emplaceBack(0),this.tileBorderIndexBuffer=e.createIndexBuffer(n);var s=new t.StructArrayLayout3ui6;s.emplaceBack(0,1,2),s.emplaceBack(2,1,3),this.quadTriangleIndexBuffer=e.createIndexBuffer(s),this.emptyTexture=new t.Texture(e,{width:1,height:1,data:new Uint8Array([0,0,0,0])},e.gl.RGBA);var l=this.context.gl;this.stencilClearMode=new Pt({func:l.ALWAYS,mask:0},0,255,l.ZERO,l.ZERO,l.ZERO)},yo.prototype.clearStencil=function(){var e=this.context,i=e.gl;this.nextStencilID=1,this.currentStencilSource=void 0;var o=t.create();t.ortho(o,0,this.width,this.height,0,0,1),t.scale(o,o,[i.drawingBufferWidth,i.drawingBufferHeight,0]),this.useProgram("clippingMask").draw(e,i.TRIANGLES,It.disabled,this.stencilClearMode,St.disabled,Ct.disabled,Li(o),"$clipping",this.viewportBuffer,this.quadTriangleIndexBuffer,this.viewportSegments)},yo.prototype._renderTileClippingMasks=function(t,e){if(this.currentStencilSource!==t.source&&t.isTileClipped()&&e&&e.length){this.currentStencilSource=t.source;var i=this.context,o=i.gl;this.nextStencilID+e.length>256&&this.clearStencil(),i.setColorMode(St.disabled),i.setDepthMode(It.disabled);var r=this.useProgram("clippingMask");this._tileClippingMaskIDs={};for(var a=0,n=e;a<n.length;a+=1){var s=n[a],l=this._tileClippingMaskIDs[s.key]=this.nextStencilID++;r.draw(i,o.TRIANGLES,It.disabled,new Pt({func:o.ALWAYS,mask:0},l,255,o.KEEP,o.KEEP,o.REPLACE),St.disabled,Ct.disabled,Li(s.posMatrix),"$clipping",this.tileExtentBuffer,this.quadTriangleIndexBuffer,this.tileExtentSegments)}}},yo.prototype.stencilModeFor3D=function(){this.currentStencilSource=void 0,this.nextStencilID+1>256&&this.clearStencil();var t=this.nextStencilID++,e=this.context.gl;return new Pt({func:e.NOTEQUAL,mask:255},t,255,e.KEEP,e.KEEP,e.REPLACE)},yo.prototype.stencilModeForClipping=function(t){var e=this.context.gl;return new Pt({func:e.EQUAL,mask:255},this._tileClippingMaskIDs[t.key],0,e.KEEP,e.KEEP,e.REPLACE)},yo.prototype.stencilConfigForOverlap=function(t){var e,i=this.context.gl,o=t.sort((function(t,e){return e.overscaledZ-t.overscaledZ})),r=o[o.length-1].overscaledZ,a=o[0].overscaledZ-r+1;if(a>1){this.currentStencilSource=void 0,this.nextStencilID+a>256&&this.clearStencil();for(var n={},s=0;s<a;s++)n[s+r]=new Pt({func:i.GEQUAL,mask:255},s+this.nextStencilID,255,i.KEEP,i.KEEP,i.REPLACE);return this.nextStencilID+=a,[n,o]}return[(e={},e[r]=Pt.disabled,e),o]},yo.prototype.colorModeForRenderPass=function(){var e=this.context.gl;return this._showOverdrawInspector?new St([e.CONSTANT_COLOR,e.ONE],new t.Color(1/8,1/8,1/8,0),[!0,!0,!0,!0]):"opaque"===this.renderPass?St.unblended:St.alphaBlended},yo.prototype.depthModeForSublayer=function(t,e,i){if(!this.opaquePassEnabledForLayer())return It.disabled;var o=1-((1+this.currentLayer)*this.numSublayers+t)*this.depthEpsilon;return new It(i||this.context.gl.LEQUAL,e,[o,o])},yo.prototype.opaquePassEnabledForLayer=function(){return this.currentLayer<this.opaquePassCutoff},yo.prototype.render=function(e,i){var o=this;this.style=e,this.options=i,this.lineAtlas=e.lineAtlas,this.imageManager=e.imageManager,this.glyphManager=e.glyphManager,this.symbolFadeChange=e.placement.symbolFadeChange(t.browser.now()),this.imageManager.beginFrame();var r=this.style._order,a=this.style.sourceCaches;for(var n in a){var s=a[n];s.used&&s.prepare(this.context)}var l,c,u={},h={},p={};for(var d in a){var _=a[d];u[d]=_.getVisibleCoordinates(),h[d]=u[d].slice().reverse(),p[d]=_.getVisibleCoordinates(!0).reverse()}this.opaquePassCutoff=1/0;for(var f=0;f<r.length;f++)if(this.style._layers[r[f]].is3D()){this.opaquePassCutoff=f;break}this.renderPass="offscreen";for(var m=0,g=r;m<g.length;m+=1){var v=this.style._layers[g[m]];if(v.hasOffscreenPass()&&!v.isHidden(this.transform.zoom)){var y=h[v.source];("custom"===v.type||y.length)&&this.renderLayer(this,a[v.source],v,y)}}for(this.context.bindFramebuffer.set(null),this.context.clear({color:i.showOverdrawInspector?t.Color.black:t.Color.transparent,depth:1}),this.clearStencil(),this._showOverdrawInspector=i.showOverdrawInspector,this.depthRangeFor3D=[0,1-(e._order.length+2)*this.numSublayers*this.depthEpsilon],this.renderPass="opaque",this.currentLayer=r.length-1;this.currentLayer>=0;this.currentLayer--){var x=this.style._layers[r[this.currentLayer]],b=a[x.source],w=u[x.source];this._renderTileClippingMasks(x,w),this.renderLayer(this,b,x,w)}for(this.renderPass="translucent",this.currentLayer=0;this.currentLayer<r.length;this.currentLayer++){var T=this.style._layers[r[this.currentLayer]],E=a[T.source],I=("symbol"===T.type?p:h)[T.source];this._renderTileClippingMasks(T,u[T.source]),this.renderLayer(this,E,T,I)}this.options.showTileBoundaries&&(t.values(this.style._layers).forEach((function(t){t.source&&!t.isHidden(o.transform.zoom)&&(t.source!==(c&&c.id)&&(c=o.style.sourceCaches[t.source]),(!l||l.getSource().maxzoom<c.getSource().maxzoom)&&(l=c))})),l&&vo.debug(this,l,l.getVisibleCoordinates())),this.options.showPadding&&function(t){var e=t.transform.padding;_o(t,t.transform.height-(e.top||0),3,lo),_o(t,e.bottom||0,3,co),fo(t,e.left||0,3,uo),fo(t,t.transform.width-(e.right||0),3,ho);var i=t.transform.centerPoint;!function(t,e,i,o){mo(t,e-1,i-10,2,20,o),mo(t,e-10,i-1,20,2,o)}(t,i.x,t.transform.height-i.y,po)}(this),this.context.setDefault()},yo.prototype.renderLayer=function(t,e,i,o){i.isHidden(this.transform.zoom)||("background"===i.type||"custom"===i.type||o.length)&&(this.id=i.id,this.gpuTimingStart(i),vo[i.type](t,e,i,o,this.style.placement.variableOffsets),this.gpuTimingEnd())},yo.prototype.gpuTimingStart=function(t){if(this.options.gpuTiming){var e=this.context.extTimerQuery,i=this.gpuTimers[t.id];i||(i=this.gpuTimers[t.id]={calls:0,cpuTime:0,query:e.createQueryEXT()}),i.calls++,e.beginQueryEXT(e.TIME_ELAPSED_EXT,i.query)}},yo.prototype.gpuTimingEnd=function(){if(this.options.gpuTiming){var t=this.context.extTimerQuery;t.endQueryEXT(t.TIME_ELAPSED_EXT)}},yo.prototype.collectGpuTimers=function(){var t=this.gpuTimers;return this.gpuTimers={},t},yo.prototype.queryGpuTimers=function(t){var e={};for(var i in t){var o=t[i],r=this.context.extTimerQuery,a=r.getQueryObjectEXT(o.query,r.QUERY_RESULT_EXT)/1e6;r.deleteQueryEXT(o.query),e[i]=a}return e},yo.prototype.translatePosMatrix=function(e,i,o,r,a){if(!o[0]&&!o[1])return e;var n=a?"map"===r?this.transform.angle:0:"viewport"===r?-this.transform.angle:0;if(n){var s=Math.sin(n),l=Math.cos(n);o=[o[0]*l-o[1]*s,o[0]*s+o[1]*l]}var c=[a?o[0]:pe(i,o[0],this.transform.zoom),a?o[1]:pe(i,o[1],this.transform.zoom),0],u=new Float32Array(16);return t.translate(u,e,c),u},yo.prototype.saveTileTexture=function(t){var e=this._tileTextures[t.size[0]];e?e.push(t):this._tileTextures[t.size[0]]=[t]},yo.prototype.getTileTexture=function(t){var e=this._tileTextures[t];return e&&e.length>0?e.pop():null},yo.prototype.isPatternMissing=function(t){if(!t)return!1;if(!t.from||!t.to)return!0;var e=this.imageManager.getPattern(t.from.toString()),i=this.imageManager.getPattern(t.to.toString());return!e||!i},yo.prototype.useProgram=function(t,e){this.cache=this.cache||{};var i=""+t+(e?e.cacheKey:"")+(this._showOverdrawInspector?"/overdraw":"");return this.cache[i]||(this.cache[i]=new bi(this.context,t,vi[t],e,Ki[t],this._showOverdrawInspector)),this.cache[i]},yo.prototype.setCustomLayerDefaults=function(){this.context.unbindVAO(),this.context.cullFace.setDefault(),this.context.activeTexture.setDefault(),this.context.pixelStoreUnpack.setDefault(),this.context.pixelStoreUnpackPremultiplyAlpha.setDefault(),this.context.pixelStoreUnpackFlipY.setDefault()},yo.prototype.setBaseState=function(){var t=this.context.gl;this.context.cullFace.set(!1),this.context.viewport.set([0,0,this.width,this.height]),this.context.blendEquation.set(t.FUNC_ADD)},yo.prototype.initDebugOverlayCanvas=function(){null==this.debugOverlayCanvas&&(this.debugOverlayCanvas=t.window.document.createElement("canvas"),this.debugOverlayCanvas.width=512,this.debugOverlayCanvas.height=512,this.debugOverlayTexture=new t.Texture(this.context,this.debugOverlayCanvas,this.context.gl.RGBA))},yo.prototype.destroy=function(){this.emptyTexture.destroy(),this.debugOverlayTexture&&this.debugOverlayTexture.destroy()};var xo=function(t,e){this.points=t,this.planes=e};xo.fromInvProjectionMatrix=function(e,i,o){var r=Math.pow(2,o),a=[[-1,1,-1,1],[1,1,-1,1],[1,-1,-1,1],[-1,-1,-1,1],[-1,1,1,1],[1,1,1,1],[1,-1,1,1],[-1,-1,1,1]].map((function(i){return t.transformMat4([],i,e)})).map((function(e){return t.scale$1([],e,1/e[3]/i*r)})),n=[[0,1,2],[6,5,4],[0,3,7],[2,1,5],[3,2,6],[0,4,5]].map((function(e){var i=t.sub([],a[e[0]],a[e[1]]),o=t.sub([],a[e[2]],a[e[1]]),r=t.normalize([],t.cross([],i,o)),n=-t.dot(r,a[e[1]]);return r.concat(n)}));return new xo(a,n)};var bo=function(e,i){this.min=e,this.max=i,this.center=t.scale$2([],t.add([],this.min,this.max),.5)};bo.prototype.quadrant=function(e){for(var i=[e%2==0,e<2],o=t.clone$2(this.min),r=t.clone$2(this.max),a=0;a<i.length;a++)o[a]=i[a]?this.min[a]:this.center[a],r[a]=i[a]?this.center[a]:this.max[a];return r[2]=this.max[2],new bo(o,r)},bo.prototype.distanceX=function(t){return Math.max(Math.min(this.max[0],t[0]),this.min[0])-t[0]},bo.prototype.distanceY=function(t){return Math.max(Math.min(this.max[1],t[1]),this.min[1])-t[1]},bo.prototype.intersects=function(e){for(var i=[[this.min[0],this.min[1],0,1],[this.max[0],this.min[1],0,1],[this.max[0],this.max[1],0,1],[this.min[0],this.max[1],0,1]],o=!0,r=0;r<e.planes.length;r++){for(var a=e.planes[r],n=0,s=0;s<i.length;s++)n+=t.dot$1(a,i[s])>=0;if(0===n)return 0;n!==i.length&&(o=!1)}if(o)return 2;for(var l=0;l<3;l++){for(var c=Number.MAX_VALUE,u=-Number.MAX_VALUE,h=0;h<e.points.length;h++){var p=e.points[h][l]-this.min[l];c=Math.min(c,p),u=Math.max(u,p)}if(u<0||c>this.max[l]-this.min[l])return 0}return 1};var wo=function(t,e,i,o){if(void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===o&&(o=0),isNaN(t)||t<0||isNaN(e)||e<0||isNaN(i)||i<0||isNaN(o)||o<0)throw new Error("Invalid value for edge-insets, top, bottom, left and right must all be numbers");this.top=t,this.bottom=e,this.left=i,this.right=o};wo.prototype.interpolate=function(e,i,o){return null!=i.top&&null!=e.top&&(this.top=t.number(e.top,i.top,o)),null!=i.bottom&&null!=e.bottom&&(this.bottom=t.number(e.bottom,i.bottom,o)),null!=i.left&&null!=e.left&&(this.left=t.number(e.left,i.left,o)),null!=i.right&&null!=e.right&&(this.right=t.number(e.right,i.right,o)),this},wo.prototype.getCenter=function(e,i){var o=t.clamp((this.left+e-this.right)/2,0,e),r=t.clamp((this.top+i-this.bottom)/2,0,i);return new t.Point(o,r)},wo.prototype.equals=function(t){return this.top===t.top&&this.bottom===t.bottom&&this.left===t.left&&this.right===t.right},wo.prototype.clone=function(){return new wo(this.top,this.bottom,this.left,this.right)},wo.prototype.toJSON=function(){return{top:this.top,bottom:this.bottom,left:this.left,right:this.right}};var To=function(e,i,o,r,a){this.tileSize=512,this.maxValidLatitude=85.051129,this._renderWorldCopies=void 0===a||a,this._minZoom=e||0,this._maxZoom=i||22,this._minPitch=null==o?0:o,this._maxPitch=null==r?60:r,this.setMaxBounds(),this.width=0,this.height=0,this._center=new t.LngLat(0,0),this.zoom=0,this.angle=0,this._fov=.6435011087932844,this._pitch=0,this._unmodified=!0,this._edgeInsets=new wo,this._posMatrixCache={},this._alignedPosMatrixCache={}},Eo={minZoom:{configurable:!0},maxZoom:{configurable:!0},minPitch:{configurable:!0},maxPitch:{configurable:!0},renderWorldCopies:{configurable:!0},worldSize:{configurable:!0},centerOffset:{configurable:!0},size:{configurable:!0},bearing:{configurable:!0},pitch:{configurable:!0},fov:{configurable:!0},zoom:{configurable:!0},center:{configurable:!0},padding:{configurable:!0},centerPoint:{configurable:!0},unmodified:{configurable:!0},point:{configurable:!0}};To.prototype.clone=function(){var t=new To(this._minZoom,this._maxZoom,this._minPitch,this.maxPitch,this._renderWorldCopies);return t.tileSize=this.tileSize,t.latRange=this.latRange,t.width=this.width,t.height=this.height,t._center=this._center,t.zoom=this.zoom,t.angle=this.angle,t._fov=this._fov,t._pitch=this._pitch,t._unmodified=this._unmodified,t._edgeInsets=this._edgeInsets.clone(),t._calcMatrices(),t},Eo.minZoom.get=function(){return this._minZoom},Eo.minZoom.set=function(t){this._minZoom!==t&&(this._minZoom=t,this.zoom=Math.max(this.zoom,t))},Eo.maxZoom.get=function(){return this._maxZoom},Eo.maxZoom.set=function(t){this._maxZoom!==t&&(this._maxZoom=t,this.zoom=Math.min(this.zoom,t))},Eo.minPitch.get=function(){return this._minPitch},Eo.minPitch.set=function(t){this._minPitch!==t&&(this._minPitch=t,this.pitch=Math.max(this.pitch,t))},Eo.maxPitch.get=function(){return this._maxPitch},Eo.maxPitch.set=function(t){this._maxPitch!==t&&(this._maxPitch=t,this.pitch=Math.min(this.pitch,t))},Eo.renderWorldCopies.get=function(){return this._renderWorldCopies},Eo.renderWorldCopies.set=function(t){void 0===t?t=!0:null===t&&(t=!1),this._renderWorldCopies=t},Eo.worldSize.get=function(){return this.tileSize*this.scale},Eo.centerOffset.get=function(){return this.centerPoint._sub(this.size._div(2))},Eo.size.get=function(){return new t.Point(this.width,this.height)},Eo.bearing.get=function(){return-this.angle/Math.PI*180},Eo.bearing.set=function(e){var i=-t.wrap(e,-180,180)*Math.PI/180;this.angle!==i&&(this._unmodified=!1,this.angle=i,this._calcMatrices(),this.rotationMatrix=t.create$2(),t.rotate(this.rotationMatrix,this.rotationMatrix,this.angle))},Eo.pitch.get=function(){return this._pitch/Math.PI*180},Eo.pitch.set=function(e){var i=t.clamp(e,this.minPitch,this.maxPitch)/180*Math.PI;this._pitch!==i&&(this._unmodified=!1,this._pitch=i,this._calcMatrices())},Eo.fov.get=function(){return this._fov/Math.PI*180},Eo.fov.set=function(t){t=Math.max(.01,Math.min(60,t)),this._fov!==t&&(this._unmodified=!1,this._fov=t/180*Math.PI,this._calcMatrices())},Eo.zoom.get=function(){return this._zoom},Eo.zoom.set=function(t){var e=Math.min(Math.max(t,this.minZoom),this.maxZoom);this._zoom!==e&&(this._unmodified=!1,this._zoom=e,this.scale=this.zoomScale(e),this.tileZoom=Math.floor(e),this.zoomFraction=e-this.tileZoom,this._constrain(),this._calcMatrices())},Eo.center.get=function(){return this._center},Eo.center.set=function(t){t.lat===this._center.lat&&t.lng===this._center.lng||(this._unmodified=!1,this._center=t,this._constrain(),this._calcMatrices())},Eo.padding.get=function(){return this._edgeInsets.toJSON()},Eo.padding.set=function(t){this._edgeInsets.equals(t)||(this._unmodified=!1,this._edgeInsets.interpolate(this._edgeInsets,t,1),this._calcMatrices())},Eo.centerPoint.get=function(){return this._edgeInsets.getCenter(this.width,this.height)},To.prototype.isPaddingEqual=function(t){return this._edgeInsets.equals(t)},To.prototype.interpolatePadding=function(t,e,i){this._unmodified=!1,this._edgeInsets.interpolate(t,e,i),this._constrain(),this._calcMatrices()},To.prototype.coveringZoomLevel=function(t){var e=(t.roundZoom?Math.round:Math.floor)(this.zoom+this.scaleZoom(this.tileSize/t.tileSize));return Math.max(0,e)},To.prototype.getVisibleUnwrappedCoordinates=function(e){var i=[new t.UnwrappedTileID(0,e)];if(this._renderWorldCopies)for(var o=this.pointCoordinate(new t.Point(0,0)),r=this.pointCoordinate(new t.Point(this.width,0)),a=this.pointCoordinate(new t.Point(this.width,this.height)),n=this.pointCoordinate(new t.Point(0,this.height)),s=Math.floor(Math.min(o.x,r.x,a.x,n.x)),l=Math.floor(Math.max(o.x,r.x,a.x,n.x)),c=s-1;c<=l+1;c++)0!==c&&i.push(new t.UnwrappedTileID(c,e));return i},To.prototype.coveringTiles=function(e){var i=this.coveringZoomLevel(e),o=i;if(void 0!==e.minzoom&&i<e.minzoom)return[];void 0!==e.maxzoom&&i>e.maxzoom&&(i=e.maxzoom);var r=t.MercatorCoordinate.fromLngLat(this.center),a=Math.pow(2,i),n=[a*r.x,a*r.y,0],s=xo.fromInvProjectionMatrix(this.invProjMatrix,this.worldSize,i),l=e.minzoom||0;this.pitch<=60&&this._edgeInsets.top<.1&&(l=i);var c=function(t){return{aabb:new bo([t*a,0,0],[(t+1)*a,a,0]),zoom:0,x:0,y:0,wrap:t,fullyVisible:!1}},u=[],h=[],p=i,d=e.reparseOverscaled?o:i;if(this._renderWorldCopies)for(var _=1;_<=3;_++)u.push(c(-_)),u.push(c(_));for(u.push(c(0));u.length>0;){var f=u.pop(),m=f.x,g=f.y,v=f.fullyVisible;if(!v){var y=f.aabb.intersects(s);if(0===y)continue;v=2===y}var x=f.aabb.distanceX(n),b=f.aabb.distanceY(n),w=Math.max(Math.abs(x),Math.abs(b));if(f.zoom===p||w>3+(1<<p-f.zoom)-2&&f.zoom>=l)h.push({tileID:new t.OverscaledTileID(f.zoom===p?d:f.zoom,f.wrap,f.zoom,m,g),distanceSq:t.sqrLen([n[0]-.5-m,n[1]-.5-g])});else for(var T=0;T<4;T++){var E=(m<<1)+T%2,I=(g<<1)+(T>>1);u.push({aabb:f.aabb.quadrant(T),zoom:f.zoom+1,x:E,y:I,wrap:f.wrap,fullyVisible:v})}}return h.sort((function(t,e){return t.distanceSq-e.distanceSq})).map((function(t){return t.tileID}))},To.prototype.resize=function(t,e){this.width=t,this.height=e,this.pixelsToGLUnits=[2/t,-2/e],this._constrain(),this._calcMatrices()},Eo.unmodified.get=function(){return this._unmodified},To.prototype.zoomScale=function(t){return Math.pow(2,t)},To.prototype.scaleZoom=function(t){return Math.log(t)/Math.LN2},To.prototype.project=function(e){var i=t.clamp(e.lat,-this.maxValidLatitude,this.maxValidLatitude);return new t.Point(t.mercatorXfromLng(e.lng)*this.worldSize,t.mercatorYfromLat(i)*this.worldSize)},To.prototype.unproject=function(e){return new t.MercatorCoordinate(e.x/this.worldSize,e.y/this.worldSize).toLngLat()},Eo.point.get=function(){return this.project(this.center)},To.prototype.setLocationAtPoint=function(e,i){var o=this.pointCoordinate(i),r=this.pointCoordinate(this.centerPoint),a=this.locationCoordinate(e),n=new t.MercatorCoordinate(a.x-(o.x-r.x),a.y-(o.y-r.y));this.center=this.coordinateLocation(n),this._renderWorldCopies&&(this.center=this.center.wrap())},To.prototype.locationPoint=function(t){return this.coordinatePoint(this.locationCoordinate(t))},To.prototype.pointLocation=function(t){return this.coordinateLocation(this.pointCoordinate(t))},To.prototype.locationCoordinate=function(e){return t.MercatorCoordinate.fromLngLat(e)},To.prototype.coordinateLocation=function(t){return t.toLngLat()},To.prototype.pointCoordinate=function(e){var i=[e.x,e.y,0,1],o=[e.x,e.y,1,1];t.transformMat4(i,i,this.pixelMatrixInverse),t.transformMat4(o,o,this.pixelMatrixInverse);var r=i[3],a=o[3],n=i[1]/r,s=o[1]/a,l=i[2]/r,c=o[2]/a,u=l===c?0:(0-l)/(c-l);return new t.MercatorCoordinate(t.number(i[0]/r,o[0]/a,u)/this.worldSize,t.number(n,s,u)/this.worldSize)},To.prototype.coordinatePoint=function(e){var i=[e.x*this.worldSize,e.y*this.worldSize,0,1];return t.transformMat4(i,i,this.pixelMatrix),new t.Point(i[0]/i[3],i[1]/i[3])},To.prototype.getBounds=function(){return(new t.LngLatBounds).extend(this.pointLocation(new t.Point(0,0))).extend(this.pointLocation(new t.Point(this.width,0))).extend(this.pointLocation(new t.Point(this.width,this.height))).extend(this.pointLocation(new t.Point(0,this.height)))},To.prototype.getMaxBounds=function(){return this.latRange&&2===this.latRange.length&&this.lngRange&&2===this.lngRange.length?new t.LngLatBounds([this.lngRange[0],this.latRange[0]],[this.lngRange[1],this.latRange[1]]):null},To.prototype.setMaxBounds=function(t){t?(this.lngRange=[t.getWest(),t.getEast()],this.latRange=[t.getSouth(),t.getNorth()],this._constrain()):(this.lngRange=null,this.latRange=[-this.maxValidLatitude,this.maxValidLatitude])},To.prototype.calculatePosMatrix=function(e,i){void 0===i&&(i=!1);var o=e.key,r=i?this._alignedPosMatrixCache:this._posMatrixCache;if(r[o])return r[o];var a=e.canonical,n=this.worldSize/this.zoomScale(a.z),s=a.x+Math.pow(2,a.z)*e.wrap,l=t.identity(new Float64Array(16));return t.translate(l,l,[s*n,a.y*n,0]),t.scale(l,l,[n/t.EXTENT,n/t.EXTENT,1]),t.multiply(l,i?this.alignedProjMatrix:this.projMatrix,l),r[o]=new Float32Array(l),r[o]},To.prototype.customLayerMatrix=function(){return this.mercatorMatrix.slice()},To.prototype._constrain=function(){if(this.center&&this.width&&this.height&&!this._constraining){this._constraining=!0;var e,i,o,r,a=-90,n=90,s=-180,l=180,c=this.size,u=this._unmodified;if(this.latRange){var h=this.latRange;a=t.mercatorYfromLat(h[1])*this.worldSize,e=(n=t.mercatorYfromLat(h[0])*this.worldSize)-a<c.y?c.y/(n-a):0}if(this.lngRange){var p=this.lngRange;s=t.mercatorXfromLng(p[0])*this.worldSize,i=(l=t.mercatorXfromLng(p[1])*this.worldSize)-s<c.x?c.x/(l-s):0}var d=this.point,_=Math.max(i||0,e||0);if(_)return this.center=this.unproject(new t.Point(i?(l+s)/2:d.x,e?(n+a)/2:d.y)),this.zoom+=this.scaleZoom(_),this._unmodified=u,void(this._constraining=!1);if(this.latRange){var f=d.y,m=c.y/2;f-m<a&&(r=a+m),f+m>n&&(r=n-m)}if(this.lngRange){var g=d.x,v=c.x/2;g-v<s&&(o=s+v),g+v>l&&(o=l-v)}void 0===o&&void 0===r||(this.center=this.unproject(new t.Point(void 0!==o?o:d.x,void 0!==r?r:d.y))),this._unmodified=u,this._constraining=!1}},To.prototype._calcMatrices=function(){if(this.height){var e=this.centerOffset;this.cameraToCenterDistance=.5/Math.tan(this._fov/2)*this.height;var i=Math.PI/2+this._pitch,o=this._fov*(.5+e.y/this.height),r=Math.sin(o)*this.cameraToCenterDistance/Math.sin(t.clamp(Math.PI-i-o,.01,Math.PI-.01)),a=this.point,n=a.x,s=a.y,l=1.01*(Math.cos(Math.PI/2-this._pitch)*r+this.cameraToCenterDistance),c=this.height/50,u=new Float64Array(16);t.perspective(u,this._fov,this.width/this.height,c,l),u[8]=2*-e.x/this.width,u[9]=2*e.y/this.height,t.scale(u,u,[1,-1,1]),t.translate(u,u,[0,0,-this.cameraToCenterDistance]),t.rotateX(u,u,this._pitch),t.rotateZ(u,u,this.angle),t.translate(u,u,[-n,-s,0]),this.mercatorMatrix=t.scale([],u,[this.worldSize,this.worldSize,this.worldSize]),t.scale(u,u,[1,1,t.mercatorZfromAltitude(1,this.center.lat)*this.worldSize,1]),this.projMatrix=u,this.invProjMatrix=t.invert([],this.projMatrix);var h=this.width%2/2,p=this.height%2/2,d=Math.cos(this.angle),_=Math.sin(this.angle),f=n-Math.round(n)+d*h+_*p,m=s-Math.round(s)+d*p+_*h,g=new Float64Array(u);if(t.translate(g,g,[f>.5?f-1:f,m>.5?m-1:m,0]),this.alignedProjMatrix=g,u=t.create(),t.scale(u,u,[this.width/2,-this.height/2,1]),t.translate(u,u,[1,-1,0]),this.labelPlaneMatrix=u,u=t.create(),t.scale(u,u,[1,-1,1]),t.translate(u,u,[-1,-1,0]),t.scale(u,u,[2/this.width,2/this.height,1]),this.glCoordMatrix=u,this.pixelMatrix=t.multiply(new Float64Array(16),this.labelPlaneMatrix,this.projMatrix),!(u=t.invert(new Float64Array(16),this.pixelMatrix)))throw new Error("failed to invert matrix");this.pixelMatrixInverse=u,this._posMatrixCache={},this._alignedPosMatrixCache={}}},To.prototype.maxPitchScaleFactor=function(){if(!this.pixelMatrixInverse)return 1;var e=this.pointCoordinate(new t.Point(0,0)),i=[e.x*this.worldSize,e.y*this.worldSize,0,1];return t.transformMat4(i,i,this.pixelMatrix)[3]/this.cameraToCenterDistance},To.prototype.getCameraPoint=function(){var e=Math.tan(this._pitch)*(this.cameraToCenterDistance||1);return this.centerPoint.add(new t.Point(0,e))},To.prototype.getCameraQueryGeometry=function(e){var i=this.getCameraPoint();if(1===e.length)return[e[0],i];for(var o=i.x,r=i.y,a=i.x,n=i.y,s=0,l=e;s<l.length;s+=1){var c=l[s];o=Math.min(o,c.x),r=Math.min(r,c.y),a=Math.max(a,c.x),n=Math.max(n,c.y)}return[new t.Point(o,r),new t.Point(a,r),new t.Point(a,n),new t.Point(o,n),new t.Point(o,r)]},Object.defineProperties(To.prototype,Eo);var Io=function(e){var i,o,r,a;this._hashName=e&&encodeURIComponent(e),t.bindAll(["_getCurrentHash","_onHashChange","_updateHash"],this),this._updateHash=(i=this._updateHashUnthrottled.bind(this),o=!1,r=null,a=function(){r=null,o&&(i(),r=setTimeout(a,300),o=!1)},function(){return o=!0,r||a(),r})};Io.prototype.addTo=function(e){return this._map=e,t.window.addEventListener("hashchange",this._onHashChange,!1),this._map.on("moveend",this._updateHash),this},Io.prototype.remove=function(){return t.window.removeEventListener("hashchange",this._onHashChange,!1),this._map.off("moveend",this._updateHash),clearTimeout(this._updateHash()),delete this._map,this},Io.prototype.getHashString=function(e){var i=this._map.getCenter(),o=Math.round(100*this._map.getZoom())/100,r=Math.ceil((o*Math.LN2+Math.log(512/360/.5))/Math.LN10),a=Math.pow(10,r),n=Math.round(i.lng*a)/a,s=Math.round(i.lat*a)/a,l=this._map.getBearing(),c=this._map.getPitch(),u="";if(u+=e?"/"+n+"/"+s+"/"+o:o+"/"+s+"/"+n,(l||c)&&(u+="/"+Math.round(10*l)/10),c&&(u+="/"+Math.round(c)),this._hashName){var h=this._hashName,p=!1,d=t.window.location.hash.slice(1).split("&").map((function(t){var e=t.split("=")[0];return e===h?(p=!0,e+"="+u):t})).filter((function(t){return t}));return p||d.push(h+"="+u),"#"+d.join("&")}return"#"+u},Io.prototype._getCurrentHash=function(){var e,i=this,o=t.window.location.hash.replace("#","");return this._hashName?(o.split("&").map((function(t){return t.split("=")})).forEach((function(t){t[0]===i._hashName&&(e=t)})),(e&&e[1]||"").split("/")):o.split("/")},Io.prototype._onHashChange=function(){var t=this._getCurrentHash();if(t.length>=3&&!t.some((function(t){return isNaN(t)}))){var e=this._map.dragRotate.isEnabled()&&this._map.touchZoomRotate.isEnabled()?+(t[3]||0):this._map.getBearing();return this._map.jumpTo({center:[+t[2],+t[1]],zoom:+t[0],bearing:e,pitch:+(t[4]||0)}),!0}return!1},Io.prototype._updateHashUnthrottled=function(){var e=t.window.location.href.replace(/(#.+)?$/,this.getHashString());try{t.window.history.replaceState(t.window.history.state,null,e)}catch(t){}};var Po={linearity:.3,easing:t.bezier(0,0,.3,1)},So=t.extend({deceleration:2500,maxSpeed:1400},Po),Co=t.extend({deceleration:20,maxSpeed:1400},Po),zo=t.extend({deceleration:1e3,maxSpeed:360},Po),Do=t.extend({deceleration:1e3,maxSpeed:90},Po),Ao=function(t){this._map=t,this.clear()};function Mo(t,e){(!t.duration||t.duration<e.duration)&&(t.duration=e.duration,t.easing=e.easing)}function Lo(e,i,o){var r=o.maxSpeed,a=o.linearity,n=o.deceleration,s=t.clamp(e*a/(i/1e3),-r,r),l=Math.abs(s)/(n*a);return{easing:o.easing,duration:1e3*l,amount:s*(l/2)}}Ao.prototype.clear=function(){this._inertiaBuffer=[]},Ao.prototype.record=function(e){this._drainInertiaBuffer(),this._inertiaBuffer.push({time:t.browser.now(),settings:e})},Ao.prototype._drainInertiaBuffer=function(){for(var e=this._inertiaBuffer,i=t.browser.now();e.length>0&&i-e[0].time>160;)e.shift()},Ao.prototype._onMoveEnd=function(e){if(this._drainInertiaBuffer(),!(this._inertiaBuffer.length<2)){for(var i={zoom:0,bearing:0,pitch:0,pan:new t.Point(0,0),pinchAround:void 0,around:void 0},o=0,r=this._inertiaBuffer;o<r.length;o+=1){var a=r[o].settings;i.zoom+=a.zoomDelta||0,i.bearing+=a.bearingDelta||0,i.pitch+=a.pitchDelta||0,a.panDelta&&i.pan._add(a.panDelta),a.around&&(i.around=a.around),a.pinchAround&&(i.pinchAround=a.pinchAround)}var n=this._inertiaBuffer[this._inertiaBuffer.length-1].time-this._inertiaBuffer[0].time,s={};if(i.pan.mag()){var l=Lo(i.pan.mag(),n,t.extend({},So,e||{}));s.offset=i.pan.mult(l.amount/i.pan.mag()),s.center=this._map.transform.center,Mo(s,l)}if(i.zoom){var c=Lo(i.zoom,n,Co);s.zoom=this._map.transform.zoom+c.amount,Mo(s,c)}if(i.bearing){var u=Lo(i.bearing,n,zo);s.bearing=this._map.transform.bearing+t.clamp(u.amount,-179,179),Mo(s,u)}if(i.pitch){var h=Lo(i.pitch,n,Do);s.pitch=this._map.transform.pitch+h.amount,Mo(s,h)}if(s.zoom||s.bearing){var p=void 0===i.pinchAround?i.around:i.pinchAround;s.around=p?this._map.unproject(p):this._map.getCenter()}return this.clear(),t.extend(s,{noMoveStart:!0})}};var Ro=function(e){function o(o,r,a,n){void 0===n&&(n={});var s=i.mousePos(r.getCanvasContainer(),a),l=r.unproject(s);e.call(this,o,t.extend({point:s,lngLat:l,originalEvent:a},n)),this._defaultPrevented=!1,this.target=r}e&&(o.__proto__=e),(o.prototype=Object.create(e&&e.prototype)).constructor=o;var r={defaultPrevented:{configurable:!0}};return o.prototype.preventDefault=function(){this._defaultPrevented=!0},r.defaultPrevented.get=function(){return this._defaultPrevented},Object.defineProperties(o.prototype,r),o}(t.Event),ko=function(e){function o(o,r,a){var n="touchend"===o?a.changedTouches:a.touches,s=i.touchPos(r.getCanvasContainer(),n),l=s.map((function(t){return r.unproject(t)})),c=s.reduce((function(t,e,i,o){return t.add(e.div(o.length))}),new t.Point(0,0)),u=r.unproject(c);e.call(this,o,{points:s,point:c,lngLats:l,lngLat:u,originalEvent:a}),this._defaultPrevented=!1}e&&(o.__proto__=e),(o.prototype=Object.create(e&&e.prototype)).constructor=o;var r={defaultPrevented:{configurable:!0}};return o.prototype.preventDefault=function(){this._defaultPrevented=!0},r.defaultPrevented.get=function(){return this._defaultPrevented},Object.defineProperties(o.prototype,r),o}(t.Event),Oo=function(t){function e(e,i,o){t.call(this,e,{originalEvent:o}),this._defaultPrevented=!1}t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e;var i={defaultPrevented:{configurable:!0}};return e.prototype.preventDefault=function(){this._defaultPrevented=!0},i.defaultPrevented.get=function(){return this._defaultPrevented},Object.defineProperties(e.prototype,i),e}(t.Event),Bo=function(t,e){this._map=t,this._clickTolerance=e.clickTolerance};Bo.prototype.reset=function(){delete this._mousedownPos},Bo.prototype.wheel=function(t){return this._firePreventable(new Oo(t.type,this._map,t))},Bo.prototype.mousedown=function(t,e){return this._mousedownPos=e,this._firePreventable(new Ro(t.type,this._map,t))},Bo.prototype.mouseup=function(t){this._map.fire(new Ro(t.type,this._map,t))},Bo.prototype.click=function(t,e){this._mousedownPos&&this._mousedownPos.dist(e)>=this._clickTolerance||this._map.fire(new Ro(t.type,this._map,t))},Bo.prototype.dblclick=function(t){return this._firePreventable(new Ro(t.type,this._map,t))},Bo.prototype.mouseover=function(t){this._map.fire(new Ro(t.type,this._map,t))},Bo.prototype.mouseout=function(t){this._map.fire(new Ro(t.type,this._map,t))},Bo.prototype.touchstart=function(t){return this._firePreventable(new ko(t.type,this._map,t))},Bo.prototype.touchmove=function(t){this._map.fire(new ko(t.type,this._map,t))},Bo.prototype.touchend=function(t){this._map.fire(new ko(t.type,this._map,t))},Bo.prototype.touchcancel=function(t){this._map.fire(new ko(t.type,this._map,t))},Bo.prototype._firePreventable=function(t){if(this._map.fire(t),t.defaultPrevented)return{}},Bo.prototype.isEnabled=function(){return!0},Bo.prototype.isActive=function(){return!1},Bo.prototype.enable=function(){},Bo.prototype.disable=function(){};var Fo=function(t){this._map=t};Fo.prototype.reset=function(){this._delayContextMenu=!1,delete this._contextMenuEvent},Fo.prototype.mousemove=function(t){this._map.fire(new Ro(t.type,this._map,t))},Fo.prototype.mousedown=function(){this._delayContextMenu=!0},Fo.prototype.mouseup=function(){this._delayContextMenu=!1,this._contextMenuEvent&&(this._map.fire(new Ro("contextmenu",this._map,this._contextMenuEvent)),delete this._contextMenuEvent)},Fo.prototype.contextmenu=function(t){this._delayContextMenu?this._contextMenuEvent=t:this._map.fire(new Ro(t.type,this._map,t)),this._map.listens("contextmenu")&&t.preventDefault()},Fo.prototype.isEnabled=function(){return!0},Fo.prototype.isActive=function(){return!1},Fo.prototype.enable=function(){},Fo.prototype.disable=function(){};var Uo=function(t,e){this._map=t,this._el=t.getCanvasContainer(),this._container=t.getContainer(),this._clickTolerance=e.clickTolerance||1};function No(t,e){for(var i={},o=0;o<t.length;o++)i[t[o].identifier]=e[o];return i}Uo.prototype.isEnabled=function(){return!!this._enabled},Uo.prototype.isActive=function(){return!!this._active},Uo.prototype.enable=function(){this.isEnabled()||(this._enabled=!0)},Uo.prototype.disable=function(){this.isEnabled()&&(this._enabled=!1)},Uo.prototype.mousedown=function(t,e){this.isEnabled()&&t.shiftKey&&0===t.button&&(i.disableDrag(),this._startPos=this._lastPos=e,this._active=!0)},Uo.prototype.mousemoveWindow=function(t,e){if(this._active){var o=e;if(!(this._lastPos.equals(o)||!this._box&&o.dist(this._startPos)<this._clickTolerance)){var r=this._startPos;this._lastPos=o,this._box||(this._box=i.create("div","mapboxgl-boxzoom",this._container),this._container.classList.add("mapboxgl-crosshair"),this._fireEvent("boxzoomstart",t));var a=Math.min(r.x,o.x),n=Math.max(r.x,o.x),s=Math.min(r.y,o.y),l=Math.max(r.y,o.y);i.setTransform(this._box,"translate("+a+"px,"+s+"px)"),this._box.style.width=n-a+"px",this._box.style.height=l-s+"px"}}},Uo.prototype.mouseupWindow=function(e,o){var r=this;if(this._active&&0===e.button){var a=this._startPos,n=o;if(this.reset(),i.suppressClick(),a.x!==n.x||a.y!==n.y)return this._map.fire(new t.Event("boxzoomend",{originalEvent:e})),{cameraAnimation:function(t){return t.fitScreenCoordinates(a,n,r._map.getBearing(),{linear:!0})}};this._fireEvent("boxzoomcancel",e)}},Uo.prototype.keydown=function(t){this._active&&27===t.keyCode&&(this.reset(),this._fireEvent("boxzoomcancel",t))},Uo.prototype.reset=function(){this._active=!1,this._container.classList.remove("mapboxgl-crosshair"),this._box&&(i.remove(this._box),this._box=null),i.enableDrag(),delete this._startPos,delete this._lastPos},Uo.prototype._fireEvent=function(e,i){return this._map.fire(new t.Event(e,{originalEvent:i}))};var Zo=function(t){this.reset(),this.numTouches=t.numTouches};Zo.prototype.reset=function(){delete this.centroid,delete this.startTime,delete this.touches,this.aborted=!1},Zo.prototype.touchstart=function(e,i,o){(this.centroid||o.length>this.numTouches)&&(this.aborted=!0),this.aborted||(void 0===this.startTime&&(this.startTime=e.timeStamp),o.length===this.numTouches&&(this.centroid=function(e){for(var i=new t.Point(0,0),o=0,r=e;o<r.length;o+=1)i._add(r[o]);return i.div(e.length)}(i),this.touches=No(o,i)))},Zo.prototype.touchmove=function(t,e,i){if(!this.aborted&&this.centroid){var o=No(i,e);for(var r in this.touches){var a=o[r];(!a||a.dist(this.touches[r])>30)&&(this.aborted=!0)}}},Zo.prototype.touchend=function(t,e,i){if((!this.centroid||t.timeStamp-this.startTime>500)&&(this.aborted=!0),0===i.length){var o=!this.aborted&&this.centroid;if(this.reset(),o)return o}};var qo=function(t){this.singleTap=new Zo(t),this.numTaps=t.numTaps,this.reset()};qo.prototype.reset=function(){this.lastTime=1/0,delete this.lastTap,this.count=0,this.singleTap.reset()},qo.prototype.touchstart=function(t,e,i){this.singleTap.touchstart(t,e,i)},qo.prototype.touchmove=function(t,e,i){this.singleTap.touchmove(t,e,i)},qo.prototype.touchend=function(t,e,i){var o=this.singleTap.touchend(t,e,i);if(o){var r=t.timeStamp-this.lastTime<500,a=!this.lastTap||this.lastTap.dist(o)<30;if(r&&a||this.reset(),this.count++,this.lastTime=t.timeStamp,this.lastTap=o,this.count===this.numTaps)return this.reset(),o}};var jo=function(){this._zoomIn=new qo({numTouches:1,numTaps:2}),this._zoomOut=new qo({numTouches:2,numTaps:1}),this.reset()};jo.prototype.reset=function(){this._active=!1,this._zoomIn.reset(),this._zoomOut.reset()},jo.prototype.touchstart=function(t,e,i){this._zoomIn.touchstart(t,e,i),this._zoomOut.touchstart(t,e,i)},jo.prototype.touchmove=function(t,e,i){this._zoomIn.touchmove(t,e,i),this._zoomOut.touchmove(t,e,i)},jo.prototype.touchend=function(t,e,i){var o=this,r=this._zoomIn.touchend(t,e,i),a=this._zoomOut.touchend(t,e,i);return r?(this._active=!0,t.preventDefault(),setTimeout((function(){return o.reset()}),0),{cameraAnimation:function(e){return e.easeTo({duration:300,zoom:e.getZoom()+1,around:e.unproject(r)},{originalEvent:t})}}):a?(this._active=!0,t.preventDefault(),setTimeout((function(){return o.reset()}),0),{cameraAnimation:function(e){return e.easeTo({duration:300,zoom:e.getZoom()-1,around:e.unproject(a)},{originalEvent:t})}}):void 0},jo.prototype.touchcancel=function(){this.reset()},jo.prototype.enable=function(){this._enabled=!0},jo.prototype.disable=function(){this._enabled=!1,this.reset()},jo.prototype.isEnabled=function(){return this._enabled},jo.prototype.isActive=function(){return this._active};var Vo={0:1,2:2},Go=function(t){this.reset(),this._clickTolerance=t.clickTolerance||1};Go.prototype.reset=function(){this._active=!1,this._moved=!1,delete this._lastPoint,delete this._eventButton},Go.prototype._correctButton=function(t,e){return!1},Go.prototype._move=function(t,e){return{}},Go.prototype.mousedown=function(t,e){if(!this._lastPoint){var o=i.mouseButton(t);this._correctButton(t,o)&&(this._lastPoint=e,this._eventButton=o)}},Go.prototype.mousemoveWindow=function(t,e){var i=this._lastPoint;if(i)if(t.preventDefault(),function(t,e){var i=Vo[e];return void 0===t.buttons||(t.buttons&i)!==i}(t,this._eventButton))this.reset();else if(this._moved||!(e.dist(i)<this._clickTolerance))return this._moved=!0,this._lastPoint=e,this._move(i,e)},Go.prototype.mouseupWindow=function(t){this._lastPoint&&i.mouseButton(t)===this._eventButton&&(this._moved&&i.suppressClick(),this.reset())},Go.prototype.enable=function(){this._enabled=!0},Go.prototype.disable=function(){this._enabled=!1,this.reset()},Go.prototype.isEnabled=function(){return this._enabled},Go.prototype.isActive=function(){return this._active};var Wo=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.mousedown=function(e,i){t.prototype.mousedown.call(this,e,i),this._lastPoint&&(this._active=!0)},e.prototype._correctButton=function(t,e){return 0===e&&!t.ctrlKey},e.prototype._move=function(t,e){return{around:e,panDelta:e.sub(t)}},e}(Go),Xo=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype._correctButton=function(t,e){return 0===e&&t.ctrlKey||2===e},e.prototype._move=function(t,e){var i=.8*(e.x-t.x);if(i)return this._active=!0,{bearingDelta:i}},e.prototype.contextmenu=function(t){t.preventDefault()},e}(Go),Ho=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype._correctButton=function(t,e){return 0===e&&t.ctrlKey||2===e},e.prototype._move=function(t,e){var i=-.5*(e.y-t.y);if(i)return this._active=!0,{pitchDelta:i}},e.prototype.contextmenu=function(t){t.preventDefault()},e}(Go),Ko=function(t){this._minTouches=1,this._clickTolerance=t.clickTolerance||1,this.reset()};Ko.prototype.reset=function(){this._active=!1,this._touches={},this._sum=new t.Point(0,0)},Ko.prototype.touchstart=function(t,e,i){return this._calculateTransform(t,e,i)},Ko.prototype.touchmove=function(t,e,i){if(this._active&&!(i.length<this._minTouches))return t.preventDefault(),this._calculateTransform(t,e,i)},Ko.prototype.touchend=function(t,e,i){this._calculateTransform(t,e,i),this._active&&i.length<this._minTouches&&this.reset()},Ko.prototype.touchcancel=function(){this.reset()},Ko.prototype._calculateTransform=function(e,i,o){o.length>0&&(this._active=!0);var r=No(o,i),a=new t.Point(0,0),n=new t.Point(0,0),s=0;for(var l in r){var c=r[l],u=this._touches[l];u&&(a._add(c),n._add(c.sub(u)),s++,r[l]=c)}if(this._touches=r,!(s<this._minTouches)&&n.mag()){var h=n.div(s);if(this._sum._add(h),!(this._sum.mag()<this._clickTolerance))return{around:a.div(s),panDelta:h}}},Ko.prototype.enable=function(){this._enabled=!0},Ko.prototype.disable=function(){this._enabled=!1,this.reset()},Ko.prototype.isEnabled=function(){return this._enabled},Ko.prototype.isActive=function(){return this._active};var Yo=function(){this.reset()};function Jo(t,e,i){for(var o=0;o<t.length;o++)if(t[o].identifier===i)return e[o]}function Qo(t,e){return Math.log(t/e)/Math.LN2}Yo.prototype.reset=function(){this._active=!1,delete this._firstTwoTouches},Yo.prototype._start=function(t){},Yo.prototype._move=function(t,e,i){return{}},Yo.prototype.touchstart=function(t,e,i){this._firstTwoTouches||i.length<2||(this._firstTwoTouches=[i[0].identifier,i[1].identifier],this._start([e[0],e[1]]))},Yo.prototype.touchmove=function(t,e,i){if(this._firstTwoTouches){t.preventDefault();var o=this._firstTwoTouches,r=o[1],a=Jo(i,e,o[0]),n=Jo(i,e,r);if(a&&n){var s=this._aroundCenter?null:a.add(n).div(2);return this._move([a,n],s,t)}}},Yo.prototype.touchend=function(t,e,o){if(this._firstTwoTouches){var r=this._firstTwoTouches,a=r[1],n=Jo(o,e,r[0]),s=Jo(o,e,a);n&&s||(this._active&&i.suppressClick(),this.reset())}},Yo.prototype.touchcancel=function(){this.reset()},Yo.prototype.enable=function(t){this._enabled=!0,this._aroundCenter=!!t&&"center"===t.around},Yo.prototype.disable=function(){this._enabled=!1,this.reset()},Yo.prototype.isEnabled=function(){return this._enabled},Yo.prototype.isActive=function(){return this._active};var $o=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.reset=function(){t.prototype.reset.call(this),delete this._distance,delete this._startDistance},e.prototype._start=function(t){this._startDistance=this._distance=t[0].dist(t[1])},e.prototype._move=function(t,e){var i=this._distance;if(this._distance=t[0].dist(t[1]),this._active||!(Math.abs(Qo(this._distance,this._startDistance))<.1))return this._active=!0,{zoomDelta:Qo(this._distance,i),pinchAround:e}},e}(Yo);function tr(t,e){return 180*t.angleWith(e)/Math.PI}var er=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.reset=function(){t.prototype.reset.call(this),delete this._minDiameter,delete this._startVector,delete this._vector},e.prototype._start=function(t){this._startVector=this._vector=t[0].sub(t[1]),this._minDiameter=t[0].dist(t[1])},e.prototype._move=function(t,e){var i=this._vector;if(this._vector=t[0].sub(t[1]),this._active||!this._isBelowThreshold(this._vector))return this._active=!0,{bearingDelta:tr(this._vector,i),pinchAround:e}},e.prototype._isBelowThreshold=function(t){this._minDiameter=Math.min(this._minDiameter,t.mag());var e=25/(Math.PI*this._minDiameter)*360,i=tr(t,this._startVector);return Math.abs(i)<e},e}(Yo);function ir(t){return Math.abs(t.y)>Math.abs(t.x)}var or=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e.prototype.reset=function(){t.prototype.reset.call(this),this._valid=void 0,delete this._firstMove,delete this._lastPoints},e.prototype._start=function(t){this._lastPoints=t,ir(t[0].sub(t[1]))&&(this._valid=!1)},e.prototype._move=function(t,e,i){var o=t[0].sub(this._lastPoints[0]),r=t[1].sub(this._lastPoints[1]);if(this._valid=this.gestureBeginsVertically(o,r,i.timeStamp),this._valid)return this._lastPoints=t,this._active=!0,{pitchDelta:(o.y+r.y)/2*-.5}},e.prototype.gestureBeginsVertically=function(t,e,i){if(void 0!==this._valid)return this._valid;var o=t.mag()>=2,r=e.mag()>=2;if(o||r){if(!o||!r)return void 0===this._firstMove&&(this._firstMove=i),i-this._firstMove<100&&void 0;var a=t.y>0==e.y>0;return ir(t)&&ir(e)&&a}},e}(Yo),rr={panStep:100,bearingStep:15,pitchStep:10},ar=function(){var t=rr;this._panStep=t.panStep,this._bearingStep=t.bearingStep,this._pitchStep=t.pitchStep,this._rotationDisabled=!1};function nr(t){return t*(2-t)}ar.prototype.reset=function(){this._active=!1},ar.prototype.keydown=function(t){var e=this;if(!(t.altKey||t.ctrlKey||t.metaKey)){var i=0,o=0,r=0,a=0,n=0;switch(t.keyCode){case 61:case 107:case 171:case 187:i=1;break;case 189:case 109:case 173:i=-1;break;case 37:t.shiftKey?o=-1:(t.preventDefault(),a=-1);break;case 39:t.shiftKey?o=1:(t.preventDefault(),a=1);break;case 38:t.shiftKey?r=1:(t.preventDefault(),n=-1);break;case 40:t.shiftKey?r=-1:(t.preventDefault(),n=1);break;default:return}return this._rotationDisabled&&(o=0,r=0),{cameraAnimation:function(s){var l=s.getZoom();s.easeTo({duration:300,easeId:"keyboardHandler",easing:nr,zoom:i?Math.round(l)+i*(t.shiftKey?2:1):l,bearing:s.getBearing()+o*e._bearingStep,pitch:s.getPitch()+r*e._pitchStep,offset:[-a*e._panStep,-n*e._panStep],center:s.getCenter()},{originalEvent:t})}}}},ar.prototype.enable=function(){this._enabled=!0},ar.prototype.disable=function(){this._enabled=!1,this.reset()},ar.prototype.isEnabled=function(){return this._enabled},ar.prototype.isActive=function(){return this._active},ar.prototype.disableRotation=function(){this._rotationDisabled=!0},ar.prototype.enableRotation=function(){this._rotationDisabled=!1};var sr=function(e,i){this._map=e,this._el=e.getCanvasContainer(),this._handler=i,this._delta=0,this._defaultZoomRate=.01,this._wheelZoomRate=1/450,t.bindAll(["_onTimeout"],this)};sr.prototype.setZoomRate=function(t){this._defaultZoomRate=t},sr.prototype.setWheelZoomRate=function(t){this._wheelZoomRate=t},sr.prototype.isEnabled=function(){return!!this._enabled},sr.prototype.isActive=function(){return!!this._active||void 0!==this._finishTimeout},sr.prototype.isZooming=function(){return!!this._zooming},sr.prototype.enable=function(t){this.isEnabled()||(this._enabled=!0,this._aroundCenter=t&&"center"===t.around)},sr.prototype.disable=function(){this.isEnabled()&&(this._enabled=!1)},sr.prototype.wheel=function(e){if(this.isEnabled()){var i=e.deltaMode===t.window.WheelEvent.DOM_DELTA_LINE?40*e.deltaY:e.deltaY,o=t.browser.now(),r=o-(this._lastWheelEventTime||0);this._lastWheelEventTime=o,0!==i&&i%4.000244140625==0?this._type="wheel":0!==i&&Math.abs(i)<4?this._type="trackpad":r>400?(this._type=null,this._lastValue=i,this._timeout=setTimeout(this._onTimeout,40,e)):this._type||(this._type=Math.abs(r*i)<200?"trackpad":"wheel",this._timeout&&(clearTimeout(this._timeout),this._timeout=null,i+=this._lastValue)),e.shiftKey&&i&&(i/=4),this._type&&(this._lastWheelEvent=e,this._delta-=i,this._active||this._start(e)),e.preventDefault()}},sr.prototype._onTimeout=function(t){this._type="wheel",this._delta-=this._lastValue,this._active||this._start(t)},sr.prototype._start=function(e){if(this._delta){this._frameId&&(this._frameId=null),this._active=!0,this.isZooming()||(this._zooming=!0),this._finishTimeout&&(clearTimeout(this._finishTimeout),delete this._finishTimeout);var o=i.mousePos(this._el,e);this._around=t.LngLat.convert(this._aroundCenter?this._map.getCenter():this._map.unproject(o)),this._aroundPoint=this._map.transform.locationPoint(this._around),this._frameId||(this._frameId=!0,this._handler._triggerRenderFrame())}},sr.prototype.renderFrame=function(){var e=this;if(this._frameId&&(this._frameId=null,this.isActive())){var i=this._map.transform;if(0!==this._delta){var o="wheel"===this._type&&Math.abs(this._delta)>4.000244140625?this._wheelZoomRate:this._defaultZoomRate,r=2/(1+Math.exp(-Math.abs(this._delta*o)));this._delta<0&&0!==r&&(r=1/r);var a="number"==typeof this._targetZoom?i.zoomScale(this._targetZoom):i.scale;this._targetZoom=Math.min(i.maxZoom,Math.max(i.minZoom,i.scaleZoom(a*r))),"wheel"===this._type&&(this._startZoom=i.zoom,this._easing=this._smoothOutEasing(200)),this._delta=0}var n,s="number"==typeof this._targetZoom?this._targetZoom:i.zoom,l=this._startZoom,c=this._easing,u=!1;if("wheel"===this._type&&l&&c){var h=Math.min((t.browser.now()-this._lastWheelEventTime)/200,1),p=c(h);n=t.number(l,s,p),h<1?this._frameId||(this._frameId=!0):u=!0}else n=s,u=!0;return this._active=!0,u&&(this._active=!1,this._finishTimeout=setTimeout((function(){e._zooming=!1,e._handler._triggerRenderFrame(),delete e._targetZoom,delete e._finishTimeout}),200)),{noInertia:!0,needsRenderFrame:!u,zoomDelta:n-i.zoom,around:this._aroundPoint,originalEvent:this._lastWheelEvent}}},sr.prototype._smoothOutEasing=function(e){var i=t.ease;if(this._prevEase){var o=this._prevEase,r=(t.browser.now()-o.start)/o.duration,a=o.easing(r+.01)-o.easing(r),n=.27/Math.sqrt(a*a+1e-4)*.01,s=Math.sqrt(.0729-n*n);i=t.bezier(n,s,.25,1)}return this._prevEase={start:t.browser.now(),duration:e,easing:i},i},sr.prototype.reset=function(){this._active=!1};var lr=function(t,e){this._clickZoom=t,this._tapZoom=e};lr.prototype.enable=function(){this._clickZoom.enable(),this._tapZoom.enable()},lr.prototype.disable=function(){this._clickZoom.disable(),this._tapZoom.disable()},lr.prototype.isEnabled=function(){return this._clickZoom.isEnabled()&&this._tapZoom.isEnabled()},lr.prototype.isActive=function(){return this._clickZoom.isActive()||this._tapZoom.isActive()};var cr=function(){this.reset()};cr.prototype.reset=function(){this._active=!1},cr.prototype.dblclick=function(t,e){return t.preventDefault(),{cameraAnimation:function(i){i.easeTo({duration:300,zoom:i.getZoom()+(t.shiftKey?-1:1),around:i.unproject(e)},{originalEvent:t})}}},cr.prototype.enable=function(){this._enabled=!0},cr.prototype.disable=function(){this._enabled=!1,this.reset()},cr.prototype.isEnabled=function(){return this._enabled},cr.prototype.isActive=function(){return this._active};var ur=function(){this._tap=new qo({numTouches:1,numTaps:1}),this.reset()};ur.prototype.reset=function(){this._active=!1,delete this._swipePoint,delete this._swipeTouch,delete this._tapTime,this._tap.reset()},ur.prototype.touchstart=function(t,e,i){this._swipePoint||(this._tapTime&&t.timeStamp-this._tapTime>500&&this.reset(),this._tapTime?i.length>0&&(this._swipePoint=e[0],this._swipeTouch=i[0].identifier):this._tap.touchstart(t,e,i))},ur.prototype.touchmove=function(t,e,i){if(this._tapTime){if(this._swipePoint){if(i[0].identifier!==this._swipeTouch)return;var o=e[0],r=o.y-this._swipePoint.y;return this._swipePoint=o,t.preventDefault(),this._active=!0,{zoomDelta:r/128}}}else this._tap.touchmove(t,e,i)},ur.prototype.touchend=function(t,e,i){this._tapTime?this._swipePoint&&0===i.length&&this.reset():this._tap.touchend(t,e,i)&&(this._tapTime=t.timeStamp)},ur.prototype.touchcancel=function(){this.reset()},ur.prototype.enable=function(){this._enabled=!0},ur.prototype.disable=function(){this._enabled=!1,this.reset()},ur.prototype.isEnabled=function(){return this._enabled},ur.prototype.isActive=function(){return this._active};var hr=function(t,e,i){this._el=t,this._mousePan=e,this._touchPan=i};hr.prototype.enable=function(t){this._inertiaOptions=t||{},this._mousePan.enable(),this._touchPan.enable(),this._el.classList.add("mapboxgl-touch-drag-pan")},hr.prototype.disable=function(){this._mousePan.disable(),this._touchPan.disable(),this._el.classList.remove("mapboxgl-touch-drag-pan")},hr.prototype.isEnabled=function(){return this._mousePan.isEnabled()&&this._touchPan.isEnabled()},hr.prototype.isActive=function(){return this._mousePan.isActive()||this._touchPan.isActive()};var pr=function(t,e,i){this._pitchWithRotate=t.pitchWithRotate,this._mouseRotate=e,this._mousePitch=i};pr.prototype.enable=function(){this._mouseRotate.enable(),this._pitchWithRotate&&this._mousePitch.enable()},pr.prototype.disable=function(){this._mouseRotate.disable(),this._mousePitch.disable()},pr.prototype.isEnabled=function(){return this._mouseRotate.isEnabled()&&(!this._pitchWithRotate||this._mousePitch.isEnabled())},pr.prototype.isActive=function(){return this._mouseRotate.isActive()||this._mousePitch.isActive()};var dr=function(t,e,i,o){this._el=t,this._touchZoom=e,this._touchRotate=i,this._tapDragZoom=o,this._rotationDisabled=!1,this._enabled=!0};dr.prototype.enable=function(t){this._touchZoom.enable(t),this._rotationDisabled||this._touchRotate.enable(t),this._tapDragZoom.enable(),this._el.classList.add("mapboxgl-touch-zoom-rotate")},dr.prototype.disable=function(){this._touchZoom.disable(),this._touchRotate.disable(),this._tapDragZoom.disable(),this._el.classList.remove("mapboxgl-touch-zoom-rotate")},dr.prototype.isEnabled=function(){return this._touchZoom.isEnabled()&&(this._rotationDisabled||this._touchRotate.isEnabled())&&this._tapDragZoom.isEnabled()},dr.prototype.isActive=function(){return this._touchZoom.isActive()||this._touchRotate.isActive()||this._tapDragZoom.isActive()},dr.prototype.disableRotation=function(){this._rotationDisabled=!0,this._touchRotate.disable()},dr.prototype.enableRotation=function(){this._rotationDisabled=!1,this._touchZoom.isEnabled()&&this._touchRotate.enable()};var _r=function(t){return t.zoom||t.drag||t.pitch||t.rotate},fr=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),(e.prototype=Object.create(t&&t.prototype)).constructor=e,e}(t.Event);function mr(t){return t.panDelta&&t.panDelta.mag()||t.zoomDelta||t.bearingDelta||t.pitchDelta}var gr=function(e,o){this._map=e,this._el=this._map.getCanvasContainer(),this._handlers=[],this._handlersById={},this._changes=[],this._inertia=new Ao(e),this._bearingSnap=o.bearingSnap,this._previousActiveHandlers={},this._eventsInProgress={},this._addDefaultHandlers(o),t.bindAll(["handleEvent","handleWindowEvent"],this);var r=this._el;this._listeners=[[r,"touchstart",{passive:!0}],[r,"touchmove",{passive:!1}],[r,"touchend",void 0],[r,"touchcancel",void 0],[r,"mousedown",void 0],[r,"mousemove",void 0],[r,"mouseup",void 0],[t.window.document,"mousemove",{capture:!0}],[t.window.document,"mouseup",void 0],[r,"mouseover",void 0],[r,"mouseout",void 0],[r,"dblclick",void 0],[r,"click",void 0],[r,"keydown",{capture:!1}],[r,"keyup",void 0],[r,"wheel",{passive:!1}],[r,"contextmenu",void 0],[t.window,"blur",void 0]];for(var a=0,n=this._listeners;a<n.length;a+=1){var s=n[a],l=s[0];i.addEventListener(l,s[1],l===t.window.document?this.handleWindowEvent:this.handleEvent,s[2])}};gr.prototype.destroy=function(){for(var e=0,o=this._listeners;e<o.length;e+=1){var r=o[e],a=r[0];i.removeEventListener(a,r[1],a===t.window.document?this.handleWindowEvent:this.handleEvent,r[2])}},gr.prototype._addDefaultHandlers=function(t){var e=this._map,i=e.getCanvasContainer();this._add("mapEvent",new Bo(e,t));var o=e.boxZoom=new Uo(e,t);this._add("boxZoom",o);var r=new jo,a=new cr;e.doubleClickZoom=new lr(a,r),this._add("tapZoom",r),this._add("clickZoom",a);var n=new ur;this._add("tapDragZoom",n);var s=e.touchPitch=new or;this._add("touchPitch",s);var l=new Xo(t),c=new Ho(t);e.dragRotate=new pr(t,l,c),this._add("mouseRotate",l,["mousePitch"]),this._add("mousePitch",c,["mouseRotate"]);var u=new Wo(t),h=new Ko(t);e.dragPan=new hr(i,u,h),this._add("mousePan",u),this._add("touchPan",h,["touchZoom","touchRotate"]);var p=new er,d=new $o;e.touchZoomRotate=new dr(i,d,p,n),this._add("touchRotate",p,["touchPan","touchZoom"]),this._add("touchZoom",d,["touchPan","touchRotate"]);var _=e.scrollZoom=new sr(e,this);this._add("scrollZoom",_,["mousePan"]);var f=e.keyboard=new ar;this._add("keyboard",f),this._add("blockableMapEvent",new Fo(e));for(var m=0,g=["boxZoom","doubleClickZoom","tapDragZoom","touchPitch","dragRotate","dragPan","touchZoomRotate","scrollZoom","keyboard"];m<g.length;m+=1){var v=g[m];t.interactive&&t[v]&&e[v].enable(t[v])}},gr.prototype._add=function(t,e,i){this._handlers.push({handlerName:t,handler:e,allowed:i}),this._handlersById[t]=e},gr.prototype.stop=function(t){if(!this._updatingCamera){for(var e=0,i=this._handlers;e<i.length;e+=1)i[e].handler.reset();this._inertia.clear(),this._fireEvents({},{},t),this._changes=[]}},gr.prototype.isActive=function(){for(var t=0,e=this._handlers;t<e.length;t+=1)if(e[t].handler.isActive())return!0;return!1},gr.prototype.isZooming=function(){return!!this._eventsInProgress.zoom||this._map.scrollZoom.isZooming()},gr.prototype.isRotating=function(){return!!this._eventsInProgress.rotate},gr.prototype.isMoving=function(){return Boolean(_r(this._eventsInProgress))||this.isZooming()},gr.prototype._blockedByActive=function(t,e,i){for(var o in t)if(o!==i&&(!e||e.indexOf(o)<0))return!0;return!1},gr.prototype.handleWindowEvent=function(t){this.handleEvent(t,t.type+"Window")},gr.prototype._getMapTouches=function(t){for(var e=[],i=0,o=t;i<o.length;i+=1){var r=o[i];this._el.contains(r.target)&&e.push(r)}return e},gr.prototype.handleEvent=function(t,e){if("blur"!==t.type){this._updatingCamera=!0;for(var o="renderFrame"===t.type?void 0:t,r={needsRenderFrame:!1},a={},n={},s=t.touches?this._getMapTouches(t.touches):void 0,l=s?i.touchPos(this._el,s):i.mousePos(this._el,t),c=0,u=this._handlers;c<u.length;c+=1){var h=u[c],p=h.handlerName,d=h.handler,_=h.allowed;if(d.isEnabled()){var f=void 0;this._blockedByActive(n,_,p)?d.reset():d[e||t.type]&&(f=d[e||t.type](t,l,s),this.mergeHandlerResult(r,a,f,p,o),f&&f.needsRenderFrame&&this._triggerRenderFrame()),(f||d.isActive())&&(n[p]=d)}}var m={};for(var g in this._previousActiveHandlers)n[g]||(m[g]=o);this._previousActiveHandlers=n,(Object.keys(m).length||mr(r))&&(this._changes.push([r,a,m]),this._triggerRenderFrame()),(Object.keys(n).length||mr(r))&&this._map._stop(!0),this._updatingCamera=!1;var v=r.cameraAnimation;v&&(this._inertia.clear(),this._fireEvents({},{},!0),this._changes=[],v(this._map))}else this.stop(!0)},gr.prototype.mergeHandlerResult=function(e,i,o,r,a){if(o){t.extend(e,o);var n={handlerName:r,originalEvent:o.originalEvent||a};void 0!==o.zoomDelta&&(i.zoom=n),void 0!==o.panDelta&&(i.drag=n),void 0!==o.pitchDelta&&(i.pitch=n),void 0!==o.bearingDelta&&(i.rotate=n)}},gr.prototype._applyChanges=function(){for(var e={},i={},o={},r=0,a=this._changes;r<a.length;r+=1){var n=a[r],s=n[0],l=n[1],c=n[2];s.panDelta&&(e.panDelta=(e.panDelta||new t.Point(0,0))._add(s.panDelta)),s.zoomDelta&&(e.zoomDelta=(e.zoomDelta||0)+s.zoomDelta),s.bearingDelta&&(e.bearingDelta=(e.bearingDelta||0)+s.bearingDelta),s.pitchDelta&&(e.pitchDelta=(e.pitchDelta||0)+s.pitchDelta),void 0!==s.around&&(e.around=s.around),void 0!==s.pinchAround&&(e.pinchAround=s.pinchAround),s.noInertia&&(e.noInertia=s.noInertia),t.extend(i,l),t.extend(o,c)}this._updateMapTransform(e,i,o),this._changes=[]},gr.prototype._updateMapTransform=function(t,e,i){var o=this._map,r=o.transform;if(!mr(t))return this._fireEvents(e,i,!0);var a=t.panDelta,n=t.zoomDelta,s=t.bearingDelta,l=t.pitchDelta,c=t.around,u=t.pinchAround;void 0!==u&&(c=u),o._stop(!0),c=c||o.transform.centerPoint;var h=r.pointLocation(a?c.sub(a):c);s&&(r.bearing+=s),l&&(r.pitch+=l),n&&(r.zoom+=n),r.setLocationAtPoint(h,c),this._map._update(),t.noInertia||this._inertia.record(t),this._fireEvents(e,i,!0)},gr.prototype._fireEvents=function(e,i,o){var r=this,a=_r(this._eventsInProgress),n=_r(e),s={};for(var l in e)this._eventsInProgress[l]||(s[l+"start"]=e[l].originalEvent),this._eventsInProgress[l]=e[l];for(var c in!a&&n&&this._fireEvent("movestart",n.originalEvent),s)this._fireEvent(c,s[c]);for(var u in n&&this._fireEvent("move",n.originalEvent),e)this._fireEvent(u,e[u].originalEvent);var h,p={};for(var d in this._eventsInProgress){var _=this._eventsInProgress[d],f=_.handlerName,m=_.originalEvent;this._handlersById[f].isActive()||(delete this._eventsInProgress[d],p[d+"end"]=h=i[f]||m)}for(var g in p)this._fireEvent(g,p[g]);var v=_r(this._eventsInProgress);if(o&&(a||n)&&!v){this._updatingCamera=!0;var y=this._inertia._onMoveEnd(this._map.dragPan._inertiaOptions),x=function(t){return 0!==t&&-r._bearingSnap<t&&t<r._bearingSnap};y?(x(y.bearing||this._map.getBearing())&&(y.bearing=0),this._map.easeTo(y,{originalEvent:h})):(this._map.fire(new t.Event("moveend",{originalEvent:h})),x(this._map.getBearing())&&this._map.resetNorth()),this._updatingCamera=!1}},gr.prototype._fireEvent=function(e,i){this._map.fire(new t.Event(e,i?{originalEvent:i}:{}))},gr.prototype._requestFrame=function(){var t=this;return this._map.triggerRepaint(),this._map._renderTaskQueue.add((function(e){delete t._frameId,t.handleEvent(new fr("renderFrame",{timeStamp:e})),t._applyChanges()}))},gr.prototype._triggerRenderFrame=function(){void 0===this._frameId&&(this._frameId=this._requestFrame())};var vr=function(e){function i(i,o){e.call(this),this._moving=!1,this._zooming=!1,this.transform=i,this._bearingSnap=o.bearingSnap,t.bindAll(["_renderFrameCallback"],this)}return e&&(i.__proto__=e),(i.prototype=Object.create(e&&e.prototype)).constructor=i,i.prototype.getCenter=function(){return new t.LngLat(this.transform.center.lng,this.transform.center.lat)},i.prototype.setCenter=function(t,e){return this.jumpTo({center:t},e)},i.prototype.panBy=function(e,i,o){return e=t.Point.convert(e).mult(-1),this.panTo(this.transform.center,t.extend({offset:e},i),o)},i.prototype.panTo=function(e,i,o){return this.easeTo(t.extend({center:e},i),o)},i.prototype.getZoom=function(){return this.transform.zoom},i.prototype.setZoom=function(t,e){return this.jumpTo({zoom:t},e),this},i.prototype.zoomTo=function(e,i,o){return this.easeTo(t.extend({zoom:e},i),o)},i.prototype.zoomIn=function(t,e){return this.zoomTo(this.getZoom()+1,t,e),this},i.prototype.zoomOut=function(t,e){return this.zoomTo(this.getZoom()-1,t,e),this},i.prototype.getBearing=function(){return this.transform.bearing},i.prototype.setBearing=function(t,e){return this.jumpTo({bearing:t},e),this},i.prototype.getPadding=function(){return this.transform.padding},i.prototype.setPadding=function(t,e){return this.jumpTo({padding:t},e),this},i.prototype.rotateTo=function(e,i,o){return this.easeTo(t.extend({bearing:e},i),o)},i.prototype.resetNorth=function(e,i){return this.rotateTo(0,t.extend({duration:1e3},e),i),this},i.prototype.resetNorthPitch=function(e,i){return this.easeTo(t.extend({bearing:0,pitch:0,duration:1e3},e),i),this},i.prototype.snapToNorth=function(t,e){return Math.abs(this.getBearing())<this._bearingSnap?this.resetNorth(t,e):this},i.prototype.getPitch=function(){return this.transform.pitch},i.prototype.setPitch=function(t,e){return this.jumpTo({pitch:t},e),this},i.prototype.cameraForBounds=function(e,i){e=t.LngLatBounds.convert(e);var o=i&&i.bearing||0;return this._cameraForBoxAndBearing(e.getNorthWest(),e.getSouthEast(),o,i)},i.prototype._cameraForBoxAndBearing=function(e,i,o,r){var a={top:0,bottom:0,right:0,left:0};if("number"==typeof(r=t.extend({padding:a,offset:[0,0],maxZoom:this.transform.maxZoom},r)).padding){var n=r.padding;r.padding={top:n,bottom:n,right:n,left:n}}r.padding=t.extend(a,r.padding);var s=this.transform,l=s.padding,c=s.project(t.LngLat.convert(e)),u=s.project(t.LngLat.convert(i)),h=c.rotate(-o*Math.PI/180),p=u.rotate(-o*Math.PI/180),d=new t.Point(Math.max(h.x,p.x),Math.max(h.y,p.y)),_=new t.Point(Math.min(h.x,p.x),Math.min(h.y,p.y)),f=d.sub(_),m=(s.width-(l.left+l.right+r.padding.left+r.padding.right))/f.x,g=(s.height-(l.top+l.bottom+r.padding.top+r.padding.bottom))/f.y;if(!(g<0||m<0)){var v=Math.min(s.scaleZoom(s.scale*Math.min(m,g)),r.maxZoom),y="number"==typeof r.offset.x?new t.Point(r.offset.x,r.offset.y):t.Point.convert(r.offset),x=new t.Point((r.padding.left-r.padding.right)/2,(r.padding.top-r.padding.bottom)/2).rotate(o*Math.PI/180),b=y.add(x).mult(s.scale/s.zoomScale(v));return{center:s.unproject(c.add(u).div(2).sub(b)),zoom:v,bearing:o}}t.warnOnce("Map cannot fit within canvas with the given bounds, padding, and/or offset.")},i.prototype.fitBounds=function(t,e,i){return this._fitInternal(this.cameraForBounds(t,e),e,i)},i.prototype.fitScreenCoordinates=function(e,i,o,r,a){return this._fitInternal(this._cameraForBoxAndBearing(this.transform.pointLocation(t.Point.convert(e)),this.transform.pointLocation(t.Point.convert(i)),o,r),r,a)},i.prototype._fitInternal=function(e,i,o){return e?(delete(i=t.extend(e,i)).padding,i.linear?this.easeTo(i,o):this.flyTo(i,o)):this},i.prototype.jumpTo=function(e,i){this.stop();var o=this.transform,r=!1,a=!1,n=!1;return"zoom"in e&&o.zoom!==+e.zoom&&(r=!0,o.zoom=+e.zoom),void 0!==e.center&&(o.center=t.LngLat.convert(e.center)),"bearing"in e&&o.bearing!==+e.bearing&&(a=!0,o.bearing=+e.bearing),"pitch"in e&&o.pitch!==+e.pitch&&(n=!0,o.pitch=+e.pitch),null==e.padding||o.isPaddingEqual(e.padding)||(o.padding=e.padding),this.fire(new t.Event("movestart",i)).fire(new t.Event("move",i)),r&&this.fire(new t.Event("zoomstart",i)).fire(new t.Event("zoom",i)).fire(new t.Event("zoomend",i)),a&&this.fire(new t.Event("rotatestart",i)).fire(new t.Event("rotate",i)).fire(new t.Event("rotateend",i)),n&&this.fire(new t.Event("pitchstart",i)).fire(new t.Event("pitch",i)).fire(new t.Event("pitchend",i)),this.fire(new t.Event("moveend",i))},i.prototype.easeTo=function(e,i){var o=this;this._stop(!1,e.easeId),(!1===(e=t.extend({offset:[0,0],duration:500,easing:t.ease},e)).animate||!e.essential&&t.browser.prefersReducedMotion)&&(e.duration=0);var r=this.transform,a=this.getZoom(),n=this.getBearing(),s=this.getPitch(),l=this.getPadding(),c="zoom"in e?+e.zoom:a,u="bearing"in e?this._normalizeBearing(e.bearing,n):n,h="pitch"in e?+e.pitch:s,p="padding"in e?e.padding:r.padding,d=t.Point.convert(e.offset),_=r.centerPoint.add(d),f=r.pointLocation(_),m=t.LngLat.convert(e.center||f);this._normalizeCenter(m);var g,v,y=r.project(f),x=r.project(m).sub(y),b=r.zoomScale(c-a);e.around&&(g=t.LngLat.convert(e.around),v=r.locationPoint(g));var w={moving:this._moving,zooming:this._zooming,rotating:this._rotating,pitching:this._pitching};return this._zooming=this._zooming||c!==a,this._rotating=this._rotating||n!==u,this._pitching=this._pitching||h!==s,this._padding=!r.isPaddingEqual(p),this._easeId=e.easeId,this._prepareEase(i,e.noMoveStart,w),this._ease((function(e){if(o._zooming&&(r.zoom=t.number(a,c,e)),o._rotating&&(r.bearing=t.number(n,u,e)),o._pitching&&(r.pitch=t.number(s,h,e)),o._padding&&(r.interpolatePadding(l,p,e),_=r.centerPoint.add(d)),g)r.setLocationAtPoint(g,v);else{var f=r.zoomScale(r.zoom-a),m=c>a?Math.min(2,b):Math.max(.5,b),w=Math.pow(m,1-e),T=r.unproject(y.add(x.mult(e*w)).mult(f));r.setLocationAtPoint(r.renderWorldCopies?T.wrap():T,_)}o._fireMoveEvents(i)}),(function(t){o._afterEase(i,t)}),e),this},i.prototype._prepareEase=function(e,i,o){void 0===o&&(o={}),this._moving=!0,i||o.moving||this.fire(new t.Event("movestart",e)),this._zooming&&!o.zooming&&this.fire(new t.Event("zoomstart",e)),this._rotating&&!o.rotating&&this.fire(new t.Event("rotatestart",e)),this._pitching&&!o.pitching&&this.fire(new t.Event("pitchstart",e))},i.prototype._fireMoveEvents=function(e){this.fire(new t.Event("move",e)),this._zooming&&this.fire(new t.Event("zoom",e)),this._rotating&&this.fire(new t.Event("rotate",e)),this._pitching&&this.fire(new t.Event("pitch",e))},i.prototype._afterEase=function(e,i){if(!this._easeId||!i||this._easeId!==i){delete this._easeId;var o=this._zooming,r=this._rotating,a=this._pitching;this._moving=!1,this._zooming=!1,this._rotating=!1,this._pitching=!1,this._padding=!1,o&&this.fire(new t.Event("zoomend",e)),r&&this.fire(new t.Event("rotateend",e)),a&&this.fire(new t.Event("pitchend",e)),this.fire(new t.Event("moveend",e))}},i.prototype.flyTo=function(e,i){var o=this;if(!e.essential&&t.browser.prefersReducedMotion){var r=t.pick(e,["center","zoom","bearing","pitch","around"]);return this.jumpTo(r,i)}this.stop(),e=t.extend({offset:[0,0],speed:1.2,curve:1.42,easing:t.ease},e);var a=this.transform,n=this.getZoom(),s=this.getBearing(),l=this.getPitch(),c=this.getPadding(),u="zoom"in e?t.clamp(+e.zoom,a.minZoom,a.maxZoom):n,h="bearing"in e?this._normalizeBearing(e.bearing,s):s,p="pitch"in e?+e.pitch:l,d="padding"in e?e.padding:a.padding,_=a.zoomScale(u-n),f=t.Point.convert(e.offset),m=a.centerPoint.add(f),g=a.pointLocation(m),v=t.LngLat.convert(e.center||g);this._normalizeCenter(v);var y=a.project(g),x=a.project(v).sub(y),b=e.curve,w=Math.max(a.width,a.height),T=w/_,E=x.mag();if("minZoom"in e){var I=t.clamp(Math.min(e.minZoom,n,u),a.minZoom,a.maxZoom),P=w/a.zoomScale(I-n);b=Math.sqrt(P/E*2)}var S=b*b;function C(t){var e=(T*T-w*w+(t?-1:1)*S*S*E*E)/(2*(t?T:w)*S*E);return Math.log(Math.sqrt(e*e+1)-e)}function z(t){return(Math.exp(t)-Math.exp(-t))/2}function D(t){return(Math.exp(t)+Math.exp(-t))/2}var A=C(0),M=function(t){return D(A)/D(A+b*t)},L=function(t){return w*((D(A)*(z(e=A+b*t)/D(e))-z(A))/S)/E;var e},R=(C(1)-A)/b;if(Math.abs(E)<1e-6||!isFinite(R)){if(Math.abs(w-T)<1e-6)return this.easeTo(e,i);var k=T<w?-1:1;R=Math.abs(Math.log(T/w))/b,L=function(){return 0},M=function(t){return Math.exp(k*b*t)}}return e.duration="duration"in e?+e.duration:1e3*R/("screenSpeed"in e?+e.screenSpeed/b:+e.speed),e.maxDuration&&e.duration>e.maxDuration&&(e.duration=0),this._zooming=!0,this._rotating=s!==h,this._pitching=p!==l,this._padding=!a.isPaddingEqual(d),this._prepareEase(i,!1),this._ease((function(e){var r=e*R,_=1/M(r);a.zoom=1===e?u:n+a.scaleZoom(_),o._rotating&&(a.bearing=t.number(s,h,e)),o._pitching&&(a.pitch=t.number(l,p,e)),o._padding&&(a.interpolatePadding(c,d,e),m=a.centerPoint.add(f));var g=1===e?v:a.unproject(y.add(x.mult(L(r))).mult(_));a.setLocationAtPoint(a.renderWorldCopies?g.wrap():g,m),o._fireMoveEvents(i)}),(function(){return o._afterEase(i)}),e),this},i.prototype.isEasing=function(){return!!this._easeFrameId},i.prototype.stop=function(){return this._stop()},i.prototype._stop=function(t,e){if(this._easeFrameId&&(this._cancelRenderFrame(this._easeFrameId),delete this._easeFrameId,delete this._onEaseFrame),this._onEaseEnd){var i=this._onEaseEnd;delete this._onEaseEnd,i.call(this,e)}if(!t){var o=this.handlers;o&&o.stop(!1)}return this},i.prototype._ease=function(e,i,o){!1===o.animate||0===o.duration?(e(1),i()):(this._easeStart=t.browser.now(),this._easeOptions=o,this._onEaseFrame=e,this._onEaseEnd=i,this._easeFrameId=this._requestRenderFrame(this._renderFrameCallback))},i.prototype._renderFrameCallback=function(){var e=Math.min((t.browser.now()-this._easeStart)/this._easeOptions.duration,1);this._onEaseFrame(this._easeOptions.easing(e)),e<1?this._easeFrameId=this._requestRenderFrame(this._renderFrameCallback):this.stop()},i.prototype._normalizeBearing=function(e,i){e=t.wrap(e,-180,180);var o=Math.abs(e-i);return Math.abs(e-360-i)<o&&(e-=360),Math.abs(e+360-i)<o&&(e+=360),e},i.prototype._normalizeCenter=function(t){var e=this.transform;if(e.renderWorldCopies&&!e.lngRange){var i=t.lng-e.center.lng;t.lng+=i>180?-360:i<-180?360:0}},i}(t.Evented),yr=function(e){void 0===e&&(e={}),this.options=e,t.bindAll(["_toggleAttribution","_updateEditLink","_updateData","_updateCompact"],this)};yr.prototype.getDefaultPosition=function(){return"bottom-right"},yr.prototype.onAdd=function(t){var e=this.options&&this.options.compact;return this._map=t,this._container=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-attrib"),this._compactButton=i.create("button","mapboxgl-ctrl-attrib-button",this._container),this._compactButton.addEventListener("click",this._toggleAttribution),this._setElementTitle(this._compactButton,"ToggleAttribution"),this._innerContainer=i.create("div","mapboxgl-ctrl-attrib-inner",this._container),this._innerContainer.setAttribute("role","list"),e&&this._container.classList.add("mapboxgl-compact"),this._updateAttributions(),this._updateEditLink(),this._map.on("styledata",this._updateData),this._map.on("sourcedata",this._updateData),this._map.on("moveend",this._updateEditLink),void 0===e&&(this._map.on("resize",this._updateCompact),this._updateCompact()),this._container},yr.prototype.onRemove=function(){i.remove(this._container),this._map.off("styledata",this._updateData),this._map.off("sourcedata",this._updateData),this._map.off("moveend",this._updateEditLink),this._map.off("resize",this._updateCompact),this._map=void 0,this._attribHTML=void 0},yr.prototype._setElementTitle=function(t,e){var i=this._map._getUIString("AttributionControl."+e);t.title=i,t.setAttribute("aria-label",i)},yr.prototype._toggleAttribution=function(){this._container.classList.contains("mapboxgl-compact-show")?(this._container.classList.remove("mapboxgl-compact-show"),this._compactButton.setAttribute("aria-pressed","false")):(this._container.classList.add("mapboxgl-compact-show"),this._compactButton.setAttribute("aria-pressed","true"))},yr.prototype._updateEditLink=function(){var e=this._editLink;e||(e=this._editLink=this._container.querySelector(".mapbox-improve-map"));var i=[{key:"owner",value:this.styleOwner},{key:"id",value:this.styleId},{key:"access_token",value:this._map._requestManager._customAccessToken||t.config.ACCESS_TOKEN}];if(e){var o=i.reduce((function(t,e,o){return e.value&&(t+=e.key+"="+e.value+(o<i.length-1?"&":"")),t}),"?");e.href=t.config.FEEDBACK_URL+"/"+o+(this._map._hash?this._map._hash.getHashString(!0):""),e.rel="noopener nofollow",this._setElementTitle(e,"MapFeedback")}},yr.prototype._updateData=function(t){!t||"metadata"!==t.sourceDataType&&"visibility"!==t.sourceDataType&&"style"!==t.dataType||(this._updateAttributions(),this._updateEditLink())},yr.prototype._updateAttributions=function(){if(this._map.style){var t=[];if(this.options.customAttribution&&(Array.isArray(this.options.customAttribution)?t=t.concat(this.options.customAttribution.map((function(t){return"string"!=typeof t?"":t}))):"string"==typeof this.options.customAttribution&&t.push(this.options.customAttribution)),this._map.style.stylesheet){var e=this._map.style.stylesheet;this.styleOwner=e.owner,this.styleId=e.id}var i=this._map.style.sourceCaches;for(var o in i){var r=i[o];if(r.used){var a=r.getSource();a.attribution&&t.indexOf(a.attribution)<0&&t.push(a.attribution)}}t.sort((function(t,e){return t.length-e.length}));var n=(t=t.filter((function(e,i){for(var o=i+1;o<t.length;o++)if(t[o].indexOf(e)>=0)return!1;return!0}))).join(" | ");n!==this._attribHTML&&(this._attribHTML=n,t.length?(this._innerContainer.innerHTML=n,this._container.classList.remove("mapboxgl-attrib-empty")):this._container.classList.add("mapboxgl-attrib-empty"),this._editLink=null)}},yr.prototype._updateCompact=function(){this._map.getCanvasContainer().offsetWidth<=640?this._container.classList.add("mapboxgl-compact"):this._container.classList.remove("mapboxgl-compact","mapboxgl-compact-show")};var xr=function(){t.bindAll(["_updateLogo"],this),t.bindAll(["_updateCompact"],this)};xr.prototype.onAdd=function(t){this._map=t,this._container=i.create("div","mapboxgl-ctrl");var e=i.create("a","mapboxgl-ctrl-logo");return e.target="_blank",e.rel="noopener nofollow",e.href="https://www.mapbox.com/",e.setAttribute("aria-label",this._map._getUIString("LogoControl.Title")),e.setAttribute("rel","noopener nofollow"),this._container.appendChild(e),this._container.style.display="none",this._map.on("sourcedata",this._updateLogo),this._updateLogo(),this._map.on("resize",this._updateCompact),this._updateCompact(),this._container},xr.prototype.onRemove=function(){i.remove(this._container),this._map.off("sourcedata",this._updateLogo),this._map.off("resize",this._updateCompact)},xr.prototype.getDefaultPosition=function(){return"bottom-left"},xr.prototype._updateLogo=function(t){t&&"metadata"!==t.sourceDataType||(this._container.style.display=this._logoRequired()?"block":"none")},xr.prototype._logoRequired=function(){if(this._map.style){var t=this._map.style.sourceCaches;for(var e in t)if(t[e].getSource().mapbox_logo)return!0;return!1}},xr.prototype._updateCompact=function(){var t=this._container.children;if(t.length){var e=t[0];this._map.getCanvasContainer().offsetWidth<250?e.classList.add("mapboxgl-compact"):e.classList.remove("mapboxgl-compact")}};var br=function(){this._queue=[],this._id=0,this._cleared=!1,this._currentlyRunning=!1};br.prototype.add=function(t){var e=++this._id;return this._queue.push({callback:t,id:e,cancelled:!1}),e},br.prototype.remove=function(t){for(var e=this._currentlyRunning,i=0,o=e?this._queue.concat(e):this._queue;i<o.length;i+=1){var r=o[i];if(r.id===t)return void(r.cancelled=!0)}},br.prototype.run=function(t){void 0===t&&(t=0);var e=this._currentlyRunning=this._queue;this._queue=[];for(var i=0,o=e;i<o.length;i+=1){var r=o[i];if(!r.cancelled&&(r.callback(t),this._cleared))break}this._cleared=!1,this._currentlyRunning=!1},br.prototype.clear=function(){this._currentlyRunning&&(this._cleared=!0),this._queue=[]};var wr={"AttributionControl.ToggleAttribution":"Toggle attribution","AttributionControl.MapFeedback":"Map feedback","FullscreenControl.Enter":"Enter fullscreen","FullscreenControl.Exit":"Exit fullscreen","GeolocateControl.FindMyLocation":"Find my location","GeolocateControl.LocationNotAvailable":"Location not available","LogoControl.Title":"Mapbox logo","NavigationControl.ResetBearing":"Reset bearing to north","NavigationControl.ZoomIn":"Zoom in","NavigationControl.ZoomOut":"Zoom out","ScaleControl.Feet":"ft","ScaleControl.Meters":"m","ScaleControl.Kilometers":"km","ScaleControl.Miles":"mi","ScaleControl.NauticalMiles":"nm"},Tr=t.window.HTMLImageElement,Er=t.window.HTMLElement,Ir=t.window.ImageBitmap,Pr={center:[0,0],zoom:0,bearing:0,pitch:0,minZoom:-2,maxZoom:22,minPitch:0,maxPitch:60,interactive:!0,scrollZoom:!0,boxZoom:!0,dragRotate:!0,dragPan:!0,keyboard:!0,doubleClickZoom:!0,touchZoomRotate:!0,touchPitch:!0,bearingSnap:7,clickTolerance:3,pitchWithRotate:!0,hash:!1,attributionControl:!0,failIfMajorPerformanceCaveat:!1,preserveDrawingBuffer:!1,trackResize:!0,renderWorldCopies:!0,refreshExpiredTiles:!0,maxTileCacheSize:null,localIdeographFontFamily:"sans-serif",transformRequest:null,accessToken:null,fadeDuration:300,crossSourceCollisions:!0},Sr=function(o){function r(e){var i=this;if(null!=(e=t.extend({},Pr,e)).minZoom&&null!=e.maxZoom&&e.minZoom>e.maxZoom)throw new Error("maxZoom must be greater than or equal to minZoom");if(null!=e.minPitch&&null!=e.maxPitch&&e.minPitch>e.maxPitch)throw new Error("maxPitch must be greater than or equal to minPitch");if(null!=e.minPitch&&e.minPitch<0)throw new Error("minPitch must be greater than or equal to 0");if(null!=e.maxPitch&&e.maxPitch>60)throw new Error("maxPitch must be less than or equal to 60");var r=new To(e.minZoom,e.maxZoom,e.minPitch,e.maxPitch,e.renderWorldCopies);if(o.call(this,r,e),this._interactive=e.interactive,this._maxTileCacheSize=e.maxTileCacheSize,this._failIfMajorPerformanceCaveat=e.failIfMajorPerformanceCaveat,this._preserveDrawingBuffer=e.preserveDrawingBuffer,this._antialias=e.antialias,this._trackResize=e.trackResize,this._bearingSnap=e.bearingSnap,this._refreshExpiredTiles=e.refreshExpiredTiles,this._fadeDuration=e.fadeDuration,this._crossSourceCollisions=e.crossSourceCollisions,this._crossFadingFactor=1,this._collectResourceTiming=e.collectResourceTiming,this._renderTaskQueue=new br,this._controls=[],this._mapId=t.uniqueId(),this._locale=t.extend({},wr,e.locale),this._clickTolerance=e.clickTolerance,this._requestManager=new t.RequestManager(e.transformRequest,e.accessToken),"string"==typeof e.container){if(this._container=t.window.document.getElementById(e.container),!this._container)throw new Error("Container '"+e.container+"' not found.")}else{if(!(e.container instanceof Er))throw new Error("Invalid type: 'container' must be a String or HTMLElement.");this._container=e.container}if(e.maxBounds&&this.setMaxBounds(e.maxBounds),t.bindAll(["_onWindowOnline","_onWindowResize","_onMapScroll","_contextLost","_contextRestored"],this),this._setupContainer(),this._setupPainter(),void 0===this.painter)throw new Error("Failed to initialize WebGL.");this.on("move",(function(){return i._update(!1)})),this.on("moveend",(function(){return i._update(!1)})),this.on("zoom",(function(){return i._update(!0)})),void 0!==t.window&&(t.window.addEventListener("online",this._onWindowOnline,!1),t.window.addEventListener("resize",this._onWindowResize,!1),t.window.addEventListener("orientationchange",this._onWindowResize,!1)),this.handlers=new gr(this,e),this._hash=e.hash&&new Io("string"==typeof e.hash&&e.hash||void 0).addTo(this),this._hash&&this._hash._onHashChange()||(this.jumpTo({center:e.center,zoom:e.zoom,bearing:e.bearing,pitch:e.pitch}),e.bounds&&(this.resize(),this.fitBounds(e.bounds,t.extend({},e.fitBoundsOptions,{duration:0})))),this.resize(),this._localIdeographFontFamily=e.localIdeographFontFamily,e.style&&this.setStyle(e.style,{localIdeographFontFamily:e.localIdeographFontFamily}),e.attributionControl&&this.addControl(new yr({customAttribution:e.customAttribution})),this.addControl(new xr,e.logoPosition),this.on("style.load",(function(){i.transform.unmodified&&i.jumpTo(i.style.stylesheet)})),this.on("data",(function(e){i._update("style"===e.dataType),i.fire(new t.Event(e.dataType+"data",e))})),this.on("dataloading",(function(e){i.fire(new t.Event(e.dataType+"dataloading",e))}))}o&&(r.__proto__=o),(r.prototype=Object.create(o&&o.prototype)).constructor=r;var a={showTileBoundaries:{configurable:!0},showPadding:{configurable:!0},showCollisionBoxes:{configurable:!0},showOverdrawInspector:{configurable:!0},repaint:{configurable:!0},vertices:{configurable:!0},version:{configurable:!0}};return r.prototype._getMapId=function(){return this._mapId},r.prototype.addControl=function(e,i){if(void 0===i&&(i=e.getDefaultPosition?e.getDefaultPosition():"top-right"),!e||!e.onAdd)return this.fire(new t.ErrorEvent(new Error("Invalid argument to map.addControl(). Argument must be a control with onAdd and onRemove methods.")));var o=e.onAdd(this);this._controls.push(e);var r=this._controlPositions[i];return-1!==i.indexOf("bottom")?r.insertBefore(o,r.firstChild):r.appendChild(o),this},r.prototype.removeControl=function(e){if(!e||!e.onRemove)return this.fire(new t.ErrorEvent(new Error("Invalid argument to map.removeControl(). Argument must be a control with onAdd and onRemove methods.")));var i=this._controls.indexOf(e);return i>-1&&this._controls.splice(i,1),e.onRemove(this),this},r.prototype.hasControl=function(t){return this._controls.indexOf(t)>-1},r.prototype.resize=function(e){var i=this._containerDimensions(),o=i[0],r=i[1];this._resizeCanvas(o,r),this.transform.resize(o,r),this.painter.resize(o,r);var a=!this._moving;return a&&(this.stop(),this.fire(new t.Event("movestart",e)).fire(new t.Event("move",e))),this.fire(new t.Event("resize",e)),a&&this.fire(new t.Event("moveend",e)),this},r.prototype.getBounds=function(){return this.transform.getBounds()},r.prototype.getMaxBounds=function(){return this.transform.getMaxBounds()},r.prototype.setMaxBounds=function(e){return this.transform.setMaxBounds(t.LngLatBounds.convert(e)),this._update()},r.prototype.setMinZoom=function(t){if((t=null==t?-2:t)>=-2&&t<=this.transform.maxZoom)return this.transform.minZoom=t,this._update(),this.getZoom()<t&&this.setZoom(t),this;throw new Error("minZoom must be between -2 and the current maxZoom, inclusive")},r.prototype.getMinZoom=function(){return this.transform.minZoom},r.prototype.setMaxZoom=function(t){if((t=null==t?22:t)>=this.transform.minZoom)return this.transform.maxZoom=t,this._update(),this.getZoom()>t&&this.setZoom(t),this;throw new Error("maxZoom must be greater than the current minZoom")},r.prototype.getMaxZoom=function(){return this.transform.maxZoom},r.prototype.setMinPitch=function(t){if((t=null==t?0:t)<0)throw new Error("minPitch must be greater than or equal to 0");if(t>=0&&t<=this.transform.maxPitch)return this.transform.minPitch=t,this._update(),this.getPitch()<t&&this.setPitch(t),this;throw new Error("minPitch must be between 0 and the current maxPitch, inclusive")},r.prototype.getMinPitch=function(){return this.transform.minPitch},r.prototype.setMaxPitch=function(t){if((t=null==t?60:t)>60)throw new Error("maxPitch must be less than or equal to 60");if(t>=this.transform.minPitch)return this.transform.maxPitch=t,this._update(),this.getPitch()>t&&this.setPitch(t),this;throw new Error("maxPitch must be greater than the current minPitch")},r.prototype.getMaxPitch=function(){return this.transform.maxPitch},r.prototype.getRenderWorldCopies=function(){return this.transform.renderWorldCopies},r.prototype.setRenderWorldCopies=function(t){return this.transform.renderWorldCopies=t,this._update()},r.prototype.project=function(e){return this.transform.locationPoint(t.LngLat.convert(e))},r.prototype.unproject=function(e){return this.transform.pointLocation(t.Point.convert(e))},r.prototype.isMoving=function(){return this._moving||this.handlers.isMoving()},r.prototype.isZooming=function(){return this._zooming||this.handlers.isZooming()},r.prototype.isRotating=function(){return this._rotating||this.handlers.isRotating()},r.prototype._createDelegatedListener=function(t,e,i){var o,r=this;if("mouseenter"===t||"mouseover"===t){var a=!1;return{layer:e,listener:i,delegates:{mousemove:function(o){var n=r.getLayer(e)?r.queryRenderedFeatures(o.point,{layers:[e]}):[];n.length?a||(a=!0,i.call(r,new Ro(t,r,o.originalEvent,{features:n}))):a=!1},mouseout:function(){a=!1}}}}if("mouseleave"===t||"mouseout"===t){var n=!1;return{layer:e,listener:i,delegates:{mousemove:function(o){(r.getLayer(e)?r.queryRenderedFeatures(o.point,{layers:[e]}):[]).length?n=!0:n&&(n=!1,i.call(r,new Ro(t,r,o.originalEvent)))},mouseout:function(e){n&&(n=!1,i.call(r,new Ro(t,r,e.originalEvent)))}}}}return{layer:e,listener:i,delegates:(o={},o[t]=function(t){var o=r.getLayer(e)?r.queryRenderedFeatures(t.point,{layers:[e]}):[];o.length&&(t.features=o,i.call(r,t),delete t.features)},o)}},r.prototype.on=function(t,e,i){if(void 0===i)return o.prototype.on.call(this,t,e);var r=this._createDelegatedListener(t,e,i);for(var a in this._delegatedListeners=this._delegatedListeners||{},this._delegatedListeners[t]=this._delegatedListeners[t]||[],this._delegatedListeners[t].push(r),r.delegates)this.on(a,r.delegates[a]);return this},r.prototype.once=function(t,e,i){if(void 0===i)return o.prototype.once.call(this,t,e);var r=this._createDelegatedListener(t,e,i);for(var a in r.delegates)this.once(a,r.delegates[a]);return this},r.prototype.off=function(t,e,i){var r=this;return void 0===i?o.prototype.off.call(this,t,e):(this._delegatedListeners&&this._delegatedListeners[t]&&function(o){for(var a=o[t],n=0;n<a.length;n++){var s=a[n];if(s.layer===e&&s.listener===i){for(var l in s.delegates)r.off(l,s.delegates[l]);return a.splice(n,1),r}}}(this._delegatedListeners),this)},r.prototype.queryRenderedFeatures=function(e,i){if(!this.style)return[];var o;if(void 0!==i||void 0===e||e instanceof t.Point||Array.isArray(e)||(i=e,e=void 0),i=i||{},(e=e||[[0,0],[this.transform.width,this.transform.height]])instanceof t.Point||"number"==typeof e[0])o=[t.Point.convert(e)];else{var r=t.Point.convert(e[0]),a=t.Point.convert(e[1]);o=[r,new t.Point(a.x,r.y),a,new t.Point(r.x,a.y),r]}return this.style.queryRenderedFeatures(o,i,this.transform)},r.prototype.querySourceFeatures=function(t,e){return this.style.querySourceFeatures(t,e)},r.prototype.setStyle=function(e,i){return!1!==(i=t.extend({},{localIdeographFontFamily:this._localIdeographFontFamily},i)).diff&&i.localIdeographFontFamily===this._localIdeographFontFamily&&this.style&&e?(this._diffStyle(e,i),this):(this._localIdeographFontFamily=i.localIdeographFontFamily,this._updateStyle(e,i))},r.prototype._getUIString=function(t){var e=this._locale[t];if(null==e)throw new Error("Missing UI string '"+t+"'");return e},r.prototype._updateStyle=function(t,e){return this.style&&(this.style.setEventedParent(null),this.style._remove()),t?(this.style=new je(this,e||{}),this.style.setEventedParent(this,{style:this.style}),"string"==typeof t?this.style.loadURL(t):this.style.loadJSON(t),this):(delete this.style,this)},r.prototype._lazyInitEmptyStyle=function(){this.style||(this.style=new je(this,{}),this.style.setEventedParent(this,{style:this.style}),this.style.loadEmpty())},r.prototype._diffStyle=function(e,i){var o=this;if("string"==typeof e){var r=this._requestManager.normalizeStyleURL(e),a=this._requestManager.transformRequest(r,t.ResourceType.Style);t.getJSON(a,(function(e,r){e?o.fire(new t.ErrorEvent(e)):r&&o._updateDiff(r,i)}))}else"object"==typeof e&&this._updateDiff(e,i)},r.prototype._updateDiff=function(e,i){try{this.style.setState(e)&&this._update(!0)}catch(o){t.warnOnce("Unable to perform style diff: "+(o.message||o.error||o)+".  Rebuilding the style from scratch."),this._updateStyle(e,i)}},r.prototype.getStyle=function(){if(this.style)return this.style.serialize()},r.prototype.isStyleLoaded=function(){return this.style?this.style.loaded():t.warnOnce("There is no style added to the map.")},r.prototype.addSource=function(t,e){return this._lazyInitEmptyStyle(),this.style.addSource(t,e),this._update(!0)},r.prototype.isSourceLoaded=function(e){var i=this.style&&this.style.sourceCaches[e];if(void 0!==i)return i.loaded();this.fire(new t.ErrorEvent(new Error("There is no source with ID '"+e+"'")))},r.prototype.areTilesLoaded=function(){var t=this.style&&this.style.sourceCaches;for(var e in t){var i=t[e]._tiles;for(var o in i){var r=i[o];if("loaded"!==r.state&&"errored"!==r.state)return!1}}return!0},r.prototype.addSourceType=function(t,e,i){return this._lazyInitEmptyStyle(),this.style.addSourceType(t,e,i)},r.prototype.removeSource=function(t){return this.style.removeSource(t),this._update(!0)},r.prototype.getSource=function(t){return this.style.getSource(t)},r.prototype.addImage=function(e,i,o){void 0===o&&(o={});var r=o.pixelRatio;void 0===r&&(r=1);var a=o.sdf;void 0===a&&(a=!1);var n=o.stretchX,s=o.stretchY,l=o.content;if(this._lazyInitEmptyStyle(),i instanceof Tr||Ir&&i instanceof Ir){var c=t.browser.getImageData(i);this.style.addImage(e,{data:new t.RGBAImage({width:c.width,height:c.height},c.data),pixelRatio:r,stretchX:n,stretchY:s,content:l,sdf:a,version:0})}else{if(void 0===i.width||void 0===i.height)return this.fire(new t.ErrorEvent(new Error("Invalid arguments to map.addImage(). The second argument must be an `HTMLImageElement`, `ImageData`, `ImageBitmap`, or object with `width`, `height`, and `data` properties with the same format as `ImageData`")));var u=i;this.style.addImage(e,{data:new t.RGBAImage({width:i.width,height:i.height},new Uint8Array(i.data)),pixelRatio:r,stretchX:n,stretchY:s,content:l,sdf:a,version:0,userImage:u}),u.onAdd&&u.onAdd(this,e)}},r.prototype.updateImage=function(e,i){var o=this.style.getImage(e);if(!o)return this.fire(new t.ErrorEvent(new Error("The map has no image with that id. If you are adding a new image use `map.addImage(...)` instead.")));var r=i instanceof Tr||Ir&&i instanceof Ir?t.browser.getImageData(i):i,a=r.width,n=r.height,s=r.data;return void 0===a||void 0===n?this.fire(new t.ErrorEvent(new Error("Invalid arguments to map.updateImage(). The second argument must be an `HTMLImageElement`, `ImageData`, `ImageBitmap`, or object with `width`, `height`, and `data` properties with the same format as `ImageData`"))):a!==o.data.width||n!==o.data.height?this.fire(new t.ErrorEvent(new Error("The width and height of the updated image must be that same as the previous version of the image"))):(o.data.replace(s,!(i instanceof Tr||Ir&&i instanceof Ir)),void this.style.updateImage(e,o))},r.prototype.hasImage=function(e){return e?!!this.style.getImage(e):(this.fire(new t.ErrorEvent(new Error("Missing required image id"))),!1)},r.prototype.removeImage=function(t){this.style.removeImage(t)},r.prototype.loadImage=function(e,i){t.getImage(this._requestManager.transformRequest(e,t.ResourceType.Image),i)},r.prototype.listImages=function(){return this.style.listImages()},r.prototype.addLayer=function(t,e){return this._lazyInitEmptyStyle(),this.style.addLayer(t,e),this._update(!0)},r.prototype.moveLayer=function(t,e){return this.style.moveLayer(t,e),this._update(!0)},r.prototype.removeLayer=function(t){return this.style.removeLayer(t),this._update(!0)},r.prototype.getLayer=function(t){return this.style.getLayer(t)},r.prototype.setLayerZoomRange=function(t,e,i){return this.style.setLayerZoomRange(t,e,i),this._update(!0)},r.prototype.setFilter=function(t,e,i){return void 0===i&&(i={}),this.style.setFilter(t,e,i),this._update(!0)},r.prototype.getFilter=function(t){return this.style.getFilter(t)},r.prototype.setPaintProperty=function(t,e,i,o){return void 0===o&&(o={}),this.style.setPaintProperty(t,e,i,o),this._update(!0)},r.prototype.getPaintProperty=function(t,e){return this.style.getPaintProperty(t,e)},r.prototype.setLayoutProperty=function(t,e,i,o){return void 0===o&&(o={}),this.style.setLayoutProperty(t,e,i,o),this._update(!0)},r.prototype.getLayoutProperty=function(t,e){return this.style.getLayoutProperty(t,e)},r.prototype.setLight=function(t,e){return void 0===e&&(e={}),this._lazyInitEmptyStyle(),this.style.setLight(t,e),this._update(!0)},r.prototype.getLight=function(){return this.style.getLight()},r.prototype.setFeatureState=function(t,e){return this.style.setFeatureState(t,e),this._update()},r.prototype.removeFeatureState=function(t,e){return this.style.removeFeatureState(t,e),this._update()},r.prototype.getFeatureState=function(t){return this.style.getFeatureState(t)},r.prototype.getContainer=function(){return this._container},r.prototype.getCanvasContainer=function(){return this._canvasContainer},r.prototype.getCanvas=function(){return this._canvas},r.prototype._containerDimensions=function(){var t=0,e=0;return this._container&&(t=this._container.clientWidth||400,e=this._container.clientHeight||300),[t,e]},r.prototype._detectMissingCSS=function(){"rgb(250, 128, 114)"!==t.window.getComputedStyle(this._missingCSSCanary).getPropertyValue("background-color")&&t.warnOnce("This page appears to be missing CSS declarations for Mapbox GL JS, which may cause the map to display incorrectly. Please ensure your page includes mapbox-gl.css, as described in https://www.mapbox.com/mapbox-gl-js/api/.")},r.prototype._setupContainer=function(){var t=this._container;t.classList.add("mapboxgl-map"),(this._missingCSSCanary=i.create("div","mapboxgl-canary",t)).style.visibility="hidden",this._detectMissingCSS();var e=this._canvasContainer=i.create("div","mapboxgl-canvas-container",t);this._interactive&&e.classList.add("mapboxgl-interactive"),this._canvas=i.create("canvas","mapboxgl-canvas",e),this._canvas.addEventListener("webglcontextlost",this._contextLost,!1),this._canvas.addEventListener("webglcontextrestored",this._contextRestored,!1),this._canvas.setAttribute("tabindex","0"),this._canvas.setAttribute("aria-label","Map"),this._canvas.setAttribute("role","region");var o=this._containerDimensions();this._resizeCanvas(o[0],o[1]);var r=this._controlContainer=i.create("div","mapboxgl-control-container",t),a=this._controlPositions={};["top-left","top-right","bottom-left","bottom-right"].forEach((function(t){a[t]=i.create("div","mapboxgl-ctrl-"+t,r)})),this._container.addEventListener("scroll",this._onMapScroll,!1)},r.prototype._resizeCanvas=function(e,i){var o=t.browser.devicePixelRatio||1;this._canvas.width=o*e,this._canvas.height=o*i,this._canvas.style.width=e+"px",this._canvas.style.height=i+"px"},r.prototype._setupPainter=function(){var i=t.extend({},e.webGLContextAttributes,{failIfMajorPerformanceCaveat:this._failIfMajorPerformanceCaveat,preserveDrawingBuffer:this._preserveDrawingBuffer,antialias:this._antialias||!1}),o=this._canvas.getContext("webgl",i)||this._canvas.getContext("experimental-webgl",i);o?(this.painter=new yo(o,this.transform),t.webpSupported.testSupport(o)):this.fire(new t.ErrorEvent(new Error("Failed to initialize WebGL")))},r.prototype._contextLost=function(e){e.preventDefault(),this._frame&&(this._frame.cancel(),this._frame=null),this.fire(new t.Event("webglcontextlost",{originalEvent:e}))},r.prototype._contextRestored=function(e){this._setupPainter(),this.resize(),this._update(),this.fire(new t.Event("webglcontextrestored",{originalEvent:e}))},r.prototype._onMapScroll=function(t){if(t.target===this._container)return this._container.scrollTop=0,this._container.scrollLeft=0,!1},r.prototype.loaded=function(){return!this._styleDirty&&!this._sourcesDirty&&!!this.style&&this.style.loaded()},r.prototype._update=function(t){return this.style?(this._styleDirty=this._styleDirty||t,this._sourcesDirty=!0,this.triggerRepaint(),this):this},r.prototype._requestRenderFrame=function(t){return this._update(),this._renderTaskQueue.add(t)},r.prototype._cancelRenderFrame=function(t){this._renderTaskQueue.remove(t)},r.prototype._render=function(e){var i,o=this,r=0,a=this.painter.context.extTimerQuery;if(this.listens("gpu-timing-frame")&&(i=a.createQueryEXT(),a.beginQueryEXT(a.TIME_ELAPSED_EXT,i),r=t.browser.now()),this.painter.context.setDirty(),this.painter.setBaseState(),this._renderTaskQueue.run(e),!this._removed){var n=!1;if(this.style&&this._styleDirty){this._styleDirty=!1;var s=this.transform.zoom,l=t.browser.now();this.style.zoomHistory.update(s,l);var c=new t.EvaluationParameters(s,{now:l,fadeDuration:this._fadeDuration,zoomHistory:this.style.zoomHistory,transition:this.style.getTransition()}),u=c.crossFadingFactor();1===u&&u===this._crossFadingFactor||(n=!0,this._crossFadingFactor=u),this.style.update(c)}if(this.style&&this._sourcesDirty&&(this._sourcesDirty=!1,this.style._updateSources(this.transform)),this._placementDirty=this.style&&this.style._updatePlacement(this.painter.transform,this.showCollisionBoxes,this._fadeDuration,this._crossSourceCollisions),this.painter.render(this.style,{showTileBoundaries:this.showTileBoundaries,showOverdrawInspector:this._showOverdrawInspector,rotating:this.isRotating(),zooming:this.isZooming(),moving:this.isMoving(),fadeDuration:this._fadeDuration,showPadding:this.showPadding,gpuTiming:!!this.listens("gpu-timing-layer")}),this.fire(new t.Event("render")),this.loaded()&&!this._loaded&&(this._loaded=!0,this.fire(new t.Event("load"))),this.style&&(this.style.hasTransitions()||n)&&(this._styleDirty=!0),this.style&&!this._placementDirty&&this.style._releaseSymbolFadeTiles(),this.listens("gpu-timing-frame")){var h=t.browser.now()-r;a.endQueryEXT(a.TIME_ELAPSED_EXT,i),setTimeout((function(){var e=a.getQueryObjectEXT(i,a.QUERY_RESULT_EXT)/1e6;a.deleteQueryEXT(i),o.fire(new t.Event("gpu-timing-frame",{cpuTime:h,gpuTime:e}))}),50)}if(this.listens("gpu-timing-layer")){var p=this.painter.collectGpuTimers();setTimeout((function(){var e=o.painter.queryGpuTimers(p);o.fire(new t.Event("gpu-timing-layer",{layerTimes:e}))}),50)}var d=this._sourcesDirty||this._styleDirty||this._placementDirty;return d||this._repaint?this.triggerRepaint():!this.isMoving()&&this.loaded()&&this.fire(new t.Event("idle")),!this._loaded||this._fullyLoaded||d||(this._fullyLoaded=!0),this}},r.prototype.remove=function(){this._hash&&this._hash.remove();for(var e=0,i=this._controls;e<i.length;e+=1)i[e].onRemove(this);this._controls=[],this._frame&&(this._frame.cancel(),this._frame=null),this._renderTaskQueue.clear(),this.painter.destroy(),this.handlers.destroy(),delete this.handlers,this.setStyle(null),void 0!==t.window&&(t.window.removeEventListener("resize",this._onWindowResize,!1),t.window.removeEventListener("orientationchange",this._onWindowResize,!1),t.window.removeEventListener("online",this._onWindowOnline,!1));var o=this.painter.context.gl.getExtension("WEBGL_lose_context");o&&o.loseContext(),Cr(this._canvasContainer),Cr(this._controlContainer),Cr(this._missingCSSCanary),this._container.classList.remove("mapboxgl-map"),this._removed=!0,this.fire(new t.Event("remove"))},r.prototype.triggerRepaint=function(){var e=this;this.style&&!this._frame&&(this._frame=t.browser.frame((function(t){e._frame=null,e._render(t)})))},r.prototype._onWindowOnline=function(){this._update()},r.prototype._onWindowResize=function(t){this._trackResize&&this.resize({originalEvent:t})._update()},a.showTileBoundaries.get=function(){return!!this._showTileBoundaries},a.showTileBoundaries.set=function(t){this._showTileBoundaries!==t&&(this._showTileBoundaries=t,this._update())},a.showPadding.get=function(){return!!this._showPadding},a.showPadding.set=function(t){this._showPadding!==t&&(this._showPadding=t,this._update())},a.showCollisionBoxes.get=function(){return!!this._showCollisionBoxes},a.showCollisionBoxes.set=function(t){this._showCollisionBoxes!==t&&(this._showCollisionBoxes=t,t?this.style._generateCollisionBoxes():this._update())},a.showOverdrawInspector.get=function(){return!!this._showOverdrawInspector},a.showOverdrawInspector.set=function(t){this._showOverdrawInspector!==t&&(this._showOverdrawInspector=t,this._update())},a.repaint.get=function(){return!!this._repaint},a.repaint.set=function(t){this._repaint!==t&&(this._repaint=t,this.triggerRepaint())},a.vertices.get=function(){return!!this._vertices},a.vertices.set=function(t){this._vertices=t,this._update()},r.prototype._setCacheLimits=function(e,i){t.setCacheLimits(e,i)},a.version.get=function(){return t.version},Object.defineProperties(r.prototype,a),r}(vr);function Cr(t){t.parentNode&&t.parentNode.removeChild(t)}var zr={showCompass:!0,showZoom:!0,visualizePitch:!1},Dr=function(e){var o=this;this.options=t.extend({},zr,e),this._container=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-group"),this._container.addEventListener("contextmenu",(function(t){return t.preventDefault()})),this.options.showZoom&&(t.bindAll(["_setButtonTitle","_updateZoomButtons"],this),this._zoomInButton=this._createButton("mapboxgl-ctrl-zoom-in",(function(t){return o._map.zoomIn({},{originalEvent:t})})),i.create("span","mapboxgl-ctrl-icon",this._zoomInButton).setAttribute("aria-hidden",!0),this._zoomOutButton=this._createButton("mapboxgl-ctrl-zoom-out",(function(t){return o._map.zoomOut({},{originalEvent:t})})),i.create("span","mapboxgl-ctrl-icon",this._zoomOutButton).setAttribute("aria-hidden",!0)),this.options.showCompass&&(t.bindAll(["_rotateCompassArrow"],this),this._compass=this._createButton("mapboxgl-ctrl-compass",(function(t){o.options.visualizePitch?o._map.resetNorthPitch({},{originalEvent:t}):o._map.resetNorth({},{originalEvent:t})})),this._compassIcon=i.create("span","mapboxgl-ctrl-icon",this._compass),this._compassIcon.setAttribute("aria-hidden",!0))};Dr.prototype._updateZoomButtons=function(){var t=this._map.getZoom(),e=t===this._map.getMaxZoom(),i=t===this._map.getMinZoom();this._zoomInButton.disabled=e,this._zoomOutButton.disabled=i,this._zoomInButton.setAttribute("aria-disabled",e.toString()),this._zoomOutButton.setAttribute("aria-disabled",i.toString())},Dr.prototype._rotateCompassArrow=function(){var t=this.options.visualizePitch?"scale("+1/Math.pow(Math.cos(this._map.transform.pitch*(Math.PI/180)),.5)+") rotateX("+this._map.transform.pitch+"deg) rotateZ("+this._map.transform.angle*(180/Math.PI)+"deg)":"rotate("+this._map.transform.angle*(180/Math.PI)+"deg)";this._compassIcon.style.transform=t},Dr.prototype.onAdd=function(t){return this._map=t,this.options.showZoom&&(this._setButtonTitle(this._zoomInButton,"ZoomIn"),this._setButtonTitle(this._zoomOutButton,"ZoomOut"),this._map.on("zoom",this._updateZoomButtons),this._updateZoomButtons()),this.options.showCompass&&(this._setButtonTitle(this._compass,"ResetBearing"),this.options.visualizePitch&&this._map.on("pitch",this._rotateCompassArrow),this._map.on("rotate",this._rotateCompassArrow),this._rotateCompassArrow(),this._handler=new Ar(this._map,this._compass,this.options.visualizePitch)),this._container},Dr.prototype.onRemove=function(){i.remove(this._container),this.options.showZoom&&this._map.off("zoom",this._updateZoomButtons),this.options.showCompass&&(this.options.visualizePitch&&this._map.off("pitch",this._rotateCompassArrow),this._map.off("rotate",this._rotateCompassArrow),this._handler.off(),delete this._handler),delete this._map},Dr.prototype._createButton=function(t,e){var o=i.create("button",t,this._container);return o.type="button",o.addEventListener("click",e),o},Dr.prototype._setButtonTitle=function(t,e){var i=this._map._getUIString("NavigationControl."+e);t.title=i,t.setAttribute("aria-label",i)};var Ar=function(e,o,r){void 0===r&&(r=!1),this._clickTolerance=10,this.element=o,this.mouseRotate=new Xo({clickTolerance:e.dragRotate._mouseRotate._clickTolerance}),this.map=e,r&&(this.mousePitch=new Ho({clickTolerance:e.dragRotate._mousePitch._clickTolerance})),t.bindAll(["mousedown","mousemove","mouseup","touchstart","touchmove","touchend","reset"],this),i.addEventListener(o,"mousedown",this.mousedown),i.addEventListener(o,"touchstart",this.touchstart,{passive:!1}),i.addEventListener(o,"touchmove",this.touchmove),i.addEventListener(o,"touchend",this.touchend),i.addEventListener(o,"touchcancel",this.reset)};function Mr(e,i,o){if(e=new t.LngLat(e.lng,e.lat),i){var r=new t.LngLat(e.lng-360,e.lat),a=new t.LngLat(e.lng+360,e.lat),n=o.locationPoint(e).distSqr(i);o.locationPoint(r).distSqr(i)<n?e=r:o.locationPoint(a).distSqr(i)<n&&(e=a)}for(;Math.abs(e.lng-o.center.lng)>180;){var s=o.locationPoint(e);if(s.x>=0&&s.y>=0&&s.x<=o.width&&s.y<=o.height)break;e.lng>o.center.lng?e.lng-=360:e.lng+=360}return e}Ar.prototype.down=function(t,e){this.mouseRotate.mousedown(t,e),this.mousePitch&&this.mousePitch.mousedown(t,e),i.disableDrag()},Ar.prototype.move=function(t,e){var i=this.map,o=this.mouseRotate.mousemoveWindow(t,e);if(o&&o.bearingDelta&&i.setBearing(i.getBearing()+o.bearingDelta),this.mousePitch){var r=this.mousePitch.mousemoveWindow(t,e);r&&r.pitchDelta&&i.setPitch(i.getPitch()+r.pitchDelta)}},Ar.prototype.off=function(){var t=this.element;i.removeEventListener(t,"mousedown",this.mousedown),i.removeEventListener(t,"touchstart",this.touchstart,{passive:!1}),i.removeEventListener(t,"touchmove",this.touchmove),i.removeEventListener(t,"touchend",this.touchend),i.removeEventListener(t,"touchcancel",this.reset),this.offTemp()},Ar.prototype.offTemp=function(){i.enableDrag(),i.removeEventListener(t.window,"mousemove",this.mousemove),i.removeEventListener(t.window,"mouseup",this.mouseup)},Ar.prototype.mousedown=function(e){this.down(t.extend({},e,{ctrlKey:!0,preventDefault:function(){return e.preventDefault()}}),i.mousePos(this.element,e)),i.addEventListener(t.window,"mousemove",this.mousemove),i.addEventListener(t.window,"mouseup",this.mouseup)},Ar.prototype.mousemove=function(t){this.move(t,i.mousePos(this.element,t))},Ar.prototype.mouseup=function(t){this.mouseRotate.mouseupWindow(t),this.mousePitch&&this.mousePitch.mouseupWindow(t),this.offTemp()},Ar.prototype.touchstart=function(t){1!==t.targetTouches.length?this.reset():(this._startPos=this._lastPos=i.touchPos(this.element,t.targetTouches)[0],this.down({type:"mousedown",button:0,ctrlKey:!0,preventDefault:function(){return t.preventDefault()}},this._startPos))},Ar.prototype.touchmove=function(t){1!==t.targetTouches.length?this.reset():(this._lastPos=i.touchPos(this.element,t.targetTouches)[0],this.move({preventDefault:function(){return t.preventDefault()}},this._lastPos))},Ar.prototype.touchend=function(t){0===t.targetTouches.length&&this._startPos&&this._lastPos&&this._startPos.dist(this._lastPos)<this._clickTolerance&&this.element.click(),this.reset()},Ar.prototype.reset=function(){this.mouseRotate.reset(),this.mousePitch&&this.mousePitch.reset(),delete this._startPos,delete this._lastPos,this.offTemp()};var Lr={center:"translate(-50%,-50%)",top:"translate(-50%,0)","top-left":"translate(0,0)","top-right":"translate(-100%,0)",bottom:"translate(-50%,-100%)","bottom-left":"translate(0,-100%)","bottom-right":"translate(-100%,-100%)",left:"translate(0,-50%)",right:"translate(-100%,-50%)"};function Rr(t,e,i){var o=t.classList;for(var r in Lr)o.remove("mapboxgl-"+i+"-anchor-"+r);o.add("mapboxgl-"+i+"-anchor-"+e)}var kr=function(e){function o(o,r){if(e.call(this),(o instanceof t.window.HTMLElement||r)&&(o=t.extend({element:o},r)),t.bindAll(["_update","_onMove","_onUp","_addDragHandler","_onMapClick","_onKeyPress"],this),this._anchor=o&&o.anchor||"center",this._color=o&&o.color||"#3FB1CE",this._scale=o&&o.scale||1,this._draggable=o&&o.draggable||!1,this._clickTolerance=o&&o.clickTolerance||0,this._isDragging=!1,this._state="inactive",this._rotation=o&&o.rotation||0,this._rotationAlignment=o&&o.rotationAlignment||"auto",this._pitchAlignment=o&&o.pitchAlignment&&"auto"!==o.pitchAlignment?o.pitchAlignment:this._rotationAlignment,o&&o.element)this._element=o.element,this._offset=t.Point.convert(o&&o.offset||[0,0]);else{this._defaultMarker=!0,this._element=i.create("div"),this._element.setAttribute("aria-label","Map marker");var a=i.createNS("http://www.w3.org/2000/svg","svg");a.setAttributeNS(null,"display","block"),a.setAttributeNS(null,"height","41px"),a.setAttributeNS(null,"width","27px"),a.setAttributeNS(null,"viewBox","0 0 27 41");var n=i.createNS("http://www.w3.org/2000/svg","g");n.setAttributeNS(null,"stroke","none"),n.setAttributeNS(null,"stroke-width","1"),n.setAttributeNS(null,"fill","none"),n.setAttributeNS(null,"fill-rule","evenodd");var s=i.createNS("http://www.w3.org/2000/svg","g");s.setAttributeNS(null,"fill-rule","nonzero");var l=i.createNS("http://www.w3.org/2000/svg","g");l.setAttributeNS(null,"transform","translate(3.0, 29.0)"),l.setAttributeNS(null,"fill","#000000");for(var c=0,u=[{rx:"10.5",ry:"5.25002273"},{rx:"10.5",ry:"5.25002273"},{rx:"9.5",ry:"4.77275007"},{rx:"8.5",ry:"4.29549936"},{rx:"7.5",ry:"3.81822308"},{rx:"6.5",ry:"3.34094679"},{rx:"5.5",ry:"2.86367051"},{rx:"4.5",ry:"2.38636864"}];c<u.length;c+=1){var h=u[c],p=i.createNS("http://www.w3.org/2000/svg","ellipse");p.setAttributeNS(null,"opacity","0.04"),p.setAttributeNS(null,"cx","10.5"),p.setAttributeNS(null,"cy","5.80029008"),p.setAttributeNS(null,"rx",h.rx),p.setAttributeNS(null,"ry",h.ry),l.appendChild(p)}var d=i.createNS("http://www.w3.org/2000/svg","g");d.setAttributeNS(null,"fill",this._color);var _=i.createNS("http://www.w3.org/2000/svg","path");_.setAttributeNS(null,"d","M27,13.5 C27,19.074644 20.250001,27.000002 14.75,34.500002 C14.016665,35.500004 12.983335,35.500004 12.25,34.500002 C6.7499993,27.000002 0,19.222562 0,13.5 C0,6.0441559 6.0441559,0 13.5,0 C20.955844,0 27,6.0441559 27,13.5 Z"),d.appendChild(_);var f=i.createNS("http://www.w3.org/2000/svg","g");f.setAttributeNS(null,"opacity","0.25"),f.setAttributeNS(null,"fill","#000000");var m=i.createNS("http://www.w3.org/2000/svg","path");m.setAttributeNS(null,"d","M13.5,0 C6.0441559,0 0,6.0441559 0,13.5 C0,19.222562 6.7499993,27 12.25,34.5 C13,35.522727 14.016664,35.500004 14.75,34.5 C20.250001,27 27,19.074644 27,13.5 C27,6.0441559 20.955844,0 13.5,0 Z M13.5,1 C20.415404,1 26,6.584596 26,13.5 C26,15.898657 24.495584,19.181431 22.220703,22.738281 C19.945823,26.295132 16.705119,30.142167 13.943359,33.908203 C13.743445,34.180814 13.612715,34.322738 13.5,34.441406 C13.387285,34.322738 13.256555,34.180814 13.056641,33.908203 C10.284481,30.127985 7.4148684,26.314159 5.015625,22.773438 C2.6163816,19.232715 1,15.953538 1,13.5 C1,6.584596 6.584596,1 13.5,1 Z"),f.appendChild(m);var g=i.createNS("http://www.w3.org/2000/svg","g");g.setAttributeNS(null,"transform","translate(6.0, 7.0)"),g.setAttributeNS(null,"fill","#FFFFFF");var v=i.createNS("http://www.w3.org/2000/svg","g");v.setAttributeNS(null,"transform","translate(8.0, 8.0)");var y=i.createNS("http://www.w3.org/2000/svg","circle");y.setAttributeNS(null,"fill","#000000"),y.setAttributeNS(null,"opacity","0.25"),y.setAttributeNS(null,"cx","5.5"),y.setAttributeNS(null,"cy","5.5"),y.setAttributeNS(null,"r","5.4999962");var x=i.createNS("http://www.w3.org/2000/svg","circle");x.setAttributeNS(null,"fill","#FFFFFF"),x.setAttributeNS(null,"cx","5.5"),x.setAttributeNS(null,"cy","5.5"),x.setAttributeNS(null,"r","5.4999962"),v.appendChild(y),v.appendChild(x),s.appendChild(l),s.appendChild(d),s.appendChild(f),s.appendChild(g),s.appendChild(v),a.appendChild(s),a.setAttributeNS(null,"height",41*this._scale+"px"),a.setAttributeNS(null,"width",27*this._scale+"px"),this._element.appendChild(a),this._offset=t.Point.convert(o&&o.offset||[0,-14])}this._element.classList.add("mapboxgl-marker"),this._element.addEventListener("dragstart",(function(t){t.preventDefault()})),this._element.addEventListener("mousedown",(function(t){t.preventDefault()})),Rr(this._element,this._anchor,"marker"),this._popup=null}return e&&(o.__proto__=e),(o.prototype=Object.create(e&&e.prototype)).constructor=o,o.prototype.addTo=function(t){return this.remove(),this._map=t,t.getCanvasContainer().appendChild(this._element),t.on("move",this._update),t.on("moveend",this._update),this.setDraggable(this._draggable),this._update(),this._map.on("click",this._onMapClick),this},o.prototype.remove=function(){return this._map&&(this._map.off("click",this._onMapClick),this._map.off("move",this._update),this._map.off("moveend",this._update),this._map.off("mousedown",this._addDragHandler),this._map.off("touchstart",this._addDragHandler),this._map.off("mouseup",this._onUp),this._map.off("touchend",this._onUp),this._map.off("mousemove",this._onMove),this._map.off("touchmove",this._onMove),delete this._map),i.remove(this._element),this._popup&&this._popup.remove(),this},o.prototype.getLngLat=function(){return this._lngLat},o.prototype.setLngLat=function(e){return this._lngLat=t.LngLat.convert(e),this._pos=null,this._popup&&this._popup.setLngLat(this._lngLat),this._update(),this},o.prototype.getElement=function(){return this._element},o.prototype.setPopup=function(t){if(this._popup&&(this._popup.remove(),this._popup=null,this._element.removeEventListener("keypress",this._onKeyPress),this._originalTabIndex||this._element.removeAttribute("tabindex")),t){if(!("offset"in t.options)){var e=Math.sqrt(Math.pow(13.5,2)/2);t.options.offset=this._defaultMarker?{top:[0,0],"top-left":[0,0],"top-right":[0,0],bottom:[0,-38.1],"bottom-left":[e,-1*(24.6+e)],"bottom-right":[-e,-1*(24.6+e)],left:[13.5,-24.6],right:[-13.5,-24.6]}:this._offset}this._popup=t,this._lngLat&&this._popup.setLngLat(this._lngLat),this._originalTabIndex=this._element.getAttribute("tabindex"),this._originalTabIndex||this._element.setAttribute("tabindex","0"),this._element.addEventListener("keypress",this._onKeyPress)}return this},o.prototype._onKeyPress=function(t){var e=t.code,i=t.charCode||t.keyCode;"Space"!==e&&"Enter"!==e&&32!==i&&13!==i||this.togglePopup()},o.prototype._onMapClick=function(t){var e=t.originalEvent.target,i=this._element;this._popup&&(e===i||i.contains(e))&&this.togglePopup()},o.prototype.getPopup=function(){return this._popup},o.prototype.togglePopup=function(){var t=this._popup;return t?(t.isOpen()?t.remove():t.addTo(this._map),this):this},o.prototype._update=function(t){if(this._map){this._map.transform.renderWorldCopies&&(this._lngLat=Mr(this._lngLat,this._pos,this._map.transform)),this._pos=this._map.project(this._lngLat)._add(this._offset);var e="";"viewport"===this._rotationAlignment||"auto"===this._rotationAlignment?e="rotateZ("+this._rotation+"deg)":"map"===this._rotationAlignment&&(e="rotateZ("+(this._rotation-this._map.getBearing())+"deg)");var o="";"viewport"===this._pitchAlignment||"auto"===this._pitchAlignment?o="rotateX(0deg)":"map"===this._pitchAlignment&&(o="rotateX("+this._map.getPitch()+"deg)"),t&&"moveend"!==t.type||(this._pos=this._pos.round()),i.setTransform(this._element,Lr[this._anchor]+" translate("+this._pos.x+"px, "+this._pos.y+"px) "+o+" "+e)}},o.prototype.getOffset=function(){return this._offset},o.prototype.setOffset=function(e){return this._offset=t.Point.convert(e),this._update(),this},o.prototype._onMove=function(e){if(!this._isDragging){var i=this._clickTolerance||this._map._clickTolerance;this._isDragging=e.point.dist(this._pointerdownPos)>=i}this._isDragging&&(this._pos=e.point.sub(this._positionDelta),this._lngLat=this._map.unproject(this._pos),this.setLngLat(this._lngLat),this._element.style.pointerEvents="none","pending"===this._state&&(this._state="active",this.fire(new t.Event("dragstart"))),this.fire(new t.Event("drag")))},o.prototype._onUp=function(){this._element.style.pointerEvents="auto",this._positionDelta=null,this._pointerdownPos=null,this._isDragging=!1,this._map.off("mousemove",this._onMove),this._map.off("touchmove",this._onMove),"active"===this._state&&this.fire(new t.Event("dragend")),this._state="inactive"},o.prototype._addDragHandler=function(t){this._element.contains(t.originalEvent.target)&&(t.preventDefault(),this._positionDelta=t.point.sub(this._pos).add(this._offset),this._pointerdownPos=t.point,this._state="pending",this._map.on("mousemove",this._onMove),this._map.on("touchmove",this._onMove),this._map.once("mouseup",this._onUp),this._map.once("touchend",this._onUp))},o.prototype.setDraggable=function(t){return this._draggable=!!t,this._map&&(t?(this._map.on("mousedown",this._addDragHandler),this._map.on("touchstart",this._addDragHandler)):(this._map.off("mousedown",this._addDragHandler),this._map.off("touchstart",this._addDragHandler))),this},o.prototype.isDraggable=function(){return this._draggable},o.prototype.setRotation=function(t){return this._rotation=t||0,this._update(),this},o.prototype.getRotation=function(){return this._rotation},o.prototype.setRotationAlignment=function(t){return this._rotationAlignment=t||"auto",this._update(),this},o.prototype.getRotationAlignment=function(){return this._rotationAlignment},o.prototype.setPitchAlignment=function(t){return this._pitchAlignment=t&&"auto"!==t?t:this._rotationAlignment,this._update(),this},o.prototype.getPitchAlignment=function(){return this._pitchAlignment},o}(t.Evented),Or={positionOptions:{enableHighAccuracy:!1,maximumAge:0,timeout:6e3},fitBoundsOptions:{maxZoom:15},trackUserLocation:!1,showAccuracyCircle:!0,showUserLocation:!0},Br=function(e){function o(i){e.call(this),this.options=t.extend({geolocation:t.window.navigator.geolocation},Or,i),t.bindAll(["_onSuccess","_onError","_onZoom","_finish","_setupUI","_updateCamera","_updateMarker"],this),this._numberOfWatches=0}return e&&(o.__proto__=e),(o.prototype=Object.create(e&&e.prototype)).constructor=o,o.prototype.onAdd=function(t){return this._map=t,this._container=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-group"),this._checkGeolocationSupport(this._setupUI),this._container},o.prototype.onRemove=function(){void 0!==this._geolocationWatchID&&(t.window.navigator.geolocation.clearWatch(this._geolocationWatchID),this._geolocationWatchID=void 0),this.options.showUserLocation&&this._userLocationDotMarker&&this._userLocationDotMarker.remove(),this.options.showAccuracyCircle&&this._accuracyCircleMarker&&this._accuracyCircleMarker.remove(),i.remove(this._container),this._map.off("zoom",this._onZoom),this._map=void 0,this._numberOfWatches=0,this._noTimeout=!1},o.prototype._checkGeolocationSupport=function(t){var e=this,i=function(i){void 0===i&&(i=!!e.options.geolocation),e._supportsGeolocation=i,t(i)};void 0!==this._supportsGeolocation?t(this._supportsGeolocation):void 0!==navigator.permissions?navigator.permissions.query({name:"geolocation"}).then((function(t){return i("denied"!==t.state)})).catch((function(){return i()})):i()},o.prototype._isOutOfMapMaxBounds=function(t){var e=this._map.getMaxBounds(),i=t.coords;return e&&(i.longitude<e.getWest()||i.longitude>e.getEast()||i.latitude<e.getSouth()||i.latitude>e.getNorth())},o.prototype._setErrorState=function(){switch(this._watchState){case"WAITING_ACTIVE":this._watchState="ACTIVE_ERROR",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active-error");break;case"ACTIVE_LOCK":this._watchState="ACTIVE_ERROR",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting");break;case"BACKGROUND":this._watchState="BACKGROUND_ERROR",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background-error"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting")}},o.prototype._onSuccess=function(e){if(this._map){if(this._isOutOfMapMaxBounds(e))return this._setErrorState(),this.fire(new t.Event("outofmaxbounds",e)),this._updateMarker(),void this._finish();if(this.options.trackUserLocation)switch(this._lastKnownPosition=e,this._watchState){case"WAITING_ACTIVE":case"ACTIVE_LOCK":case"ACTIVE_ERROR":this._watchState="ACTIVE_LOCK",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active");break;case"BACKGROUND":case"BACKGROUND_ERROR":this._watchState="BACKGROUND",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background-error"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background")}this.options.showUserLocation&&"OFF"!==this._watchState&&this._updateMarker(e),this.options.trackUserLocation&&"ACTIVE_LOCK"!==this._watchState||this._updateCamera(e),this.options.showUserLocation&&this._dotElement.classList.remove("mapboxgl-user-location-dot-stale"),this.fire(new t.Event("geolocate",e)),this._finish()}},o.prototype._updateCamera=function(e){var i=new t.LngLat(e.coords.longitude,e.coords.latitude),o=e.coords.accuracy,r=this._map.getBearing(),a=t.extend({bearing:r},this.options.fitBoundsOptions);this._map.fitBounds(i.toBounds(o),a,{geolocateSource:!0})},o.prototype._updateMarker=function(e){if(e){var i=new t.LngLat(e.coords.longitude,e.coords.latitude);this._accuracyCircleMarker.setLngLat(i).addTo(this._map),this._userLocationDotMarker.setLngLat(i).addTo(this._map),this._accuracy=e.coords.accuracy,this.options.showUserLocation&&this.options.showAccuracyCircle&&this._updateCircleRadius()}else this._userLocationDotMarker.remove(),this._accuracyCircleMarker.remove()},o.prototype._updateCircleRadius=function(){var t=this._map._container.clientHeight/2,e=this._map.unproject([0,t]),i=this._map.unproject([1,t]),o=e.distanceTo(i),r=Math.ceil(2*this._accuracy/o);this._circleElement.style.width=r+"px",this._circleElement.style.height=r+"px"},o.prototype._onZoom=function(){this.options.showUserLocation&&this.options.showAccuracyCircle&&this._updateCircleRadius()},o.prototype._onError=function(e){if(this._map){if(this.options.trackUserLocation)if(1===e.code){this._watchState="OFF",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background-error"),this._geolocateButton.disabled=!0;var i=this._map._getUIString("GeolocateControl.LocationNotAvailable");this._geolocateButton.title=i,this._geolocateButton.setAttribute("aria-label",i),void 0!==this._geolocationWatchID&&this._clearWatch()}else{if(3===e.code&&this._noTimeout)return;this._setErrorState()}"OFF"!==this._watchState&&this.options.showUserLocation&&this._dotElement.classList.add("mapboxgl-user-location-dot-stale"),this.fire(new t.Event("error",e)),this._finish()}},o.prototype._finish=function(){this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=void 0},o.prototype._setupUI=function(e){var o=this;if(this._container.addEventListener("contextmenu",(function(t){return t.preventDefault()})),this._geolocateButton=i.create("button","mapboxgl-ctrl-geolocate",this._container),i.create("span","mapboxgl-ctrl-icon",this._geolocateButton).setAttribute("aria-hidden",!0),this._geolocateButton.type="button",!1===e){t.warnOnce("Geolocation support is not available so the GeolocateControl will be disabled.");var r=this._map&&this._map._getUIString?this._map._getUIString("GeolocateControl.LocationNotAvailable"):"Location Not Available";this._geolocateButton.disabled=!0,this._geolocateButton.title=r,this._geolocateButton.setAttribute("aria-label",r)}else{var a=this._map&&this._map._getUIString?this._map._getUIString("GeolocateControl.FindMyLocation"):"Find My Location";this._geolocateButton.title=a,this._geolocateButton.setAttribute("aria-label",a)}this.options.trackUserLocation&&(this._geolocateButton.setAttribute("aria-pressed","false"),this._watchState="OFF"),this.options.showUserLocation&&(this._dotElement=i.create("div","mapboxgl-user-location-dot"),this._userLocationDotMarker=new kr(this._dotElement),this._circleElement=i.create("div","mapboxgl-user-location-accuracy-circle"),this._accuracyCircleMarker=new kr({element:this._circleElement,pitchAlignment:"map"}),this.options.trackUserLocation&&(this._watchState="OFF"),this._map.on("zoom",this._onZoom)),this._geolocateButton.addEventListener("click",this.trigger.bind(this)),this._setup=!0,this.options.trackUserLocation&&this._map.on("movestart",(function(e){e.geolocateSource||"ACTIVE_LOCK"!==o._watchState||e.originalEvent&&"resize"===e.originalEvent.type||(o._watchState="BACKGROUND",o._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background"),o._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),o.fire(new t.Event("trackuserlocationend")))}))},o.prototype.trigger=function(){if(!this._setup)return t.warnOnce("Geolocate control triggered before added to a map"),!1;if(this.options.trackUserLocation){switch(this._watchState){case"OFF":this._watchState="WAITING_ACTIVE",this.fire(new t.Event("trackuserlocationstart"));break;case"WAITING_ACTIVE":case"ACTIVE_LOCK":case"ACTIVE_ERROR":case"BACKGROUND_ERROR":this._numberOfWatches--,this._noTimeout=!1,this._watchState="OFF",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background-error"),this.fire(new t.Event("trackuserlocationend"));break;case"BACKGROUND":this._watchState="ACTIVE_LOCK",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background"),this._lastKnownPosition&&this._updateCamera(this._lastKnownPosition),this.fire(new t.Event("trackuserlocationstart"))}switch(this._watchState){case"WAITING_ACTIVE":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active");break;case"ACTIVE_LOCK":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active");break;case"ACTIVE_ERROR":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active-error");break;case"BACKGROUND":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background");break;case"BACKGROUND_ERROR":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background-error")}if("OFF"===this._watchState&&void 0!==this._geolocationWatchID)this._clearWatch();else if(void 0===this._geolocationWatchID){var e;this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.setAttribute("aria-pressed","true"),this._numberOfWatches++,this._numberOfWatches>1?(e={maximumAge:6e5,timeout:0},this._noTimeout=!0):(e=this.options.positionOptions,this._noTimeout=!1),this._geolocationWatchID=t.window.navigator.geolocation.watchPosition(this._onSuccess,this._onError,e)}}else t.window.navigator.geolocation.getCurrentPosition(this._onSuccess,this._onError,this.options.positionOptions),this._timeoutId=setTimeout(this._finish,1e4);return!0},o.prototype._clearWatch=function(){t.window.navigator.geolocation.clearWatch(this._geolocationWatchID),this._geolocationWatchID=void 0,this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.setAttribute("aria-pressed","false"),this.options.showUserLocation&&this._updateMarker(null)},o}(t.Evented),Fr={maxWidth:100,unit:"metric"},Ur=function(e){this.options=t.extend({},Fr,e),t.bindAll(["_onMove","setUnit"],this)};function Nr(t,e,i){var o=i&&i.maxWidth||100,r=t._container.clientHeight/2,a=t.unproject([0,r]),n=t.unproject([o,r]),s=a.distanceTo(n);if(i&&"imperial"===i.unit){var l=3.2808*s;l>5280?Zr(e,o,l/5280,t._getUIString("ScaleControl.Miles")):Zr(e,o,l,t._getUIString("ScaleControl.Feet"))}else i&&"nautical"===i.unit?Zr(e,o,s/1852,t._getUIString("ScaleControl.NauticalMiles")):s>=1e3?Zr(e,o,s/1e3,t._getUIString("ScaleControl.Kilometers")):Zr(e,o,s,t._getUIString("ScaleControl.Meters"))}function Zr(t,e,i,o){var r,a,n,s=(r=i,(a=Math.pow(10,(""+Math.floor(r)).length-1))*(n=(n=r/a)>=10?10:n>=5?5:n>=3?3:n>=2?2:n>=1?1:function(t){var e=Math.pow(10,Math.ceil(-Math.log(t)/Math.LN10));return Math.round(t*e)/e}(n)));t.style.width=e*(s/i)+"px",t.innerHTML=s+"&nbsp;"+o}Ur.prototype.getDefaultPosition=function(){return"bottom-left"},Ur.prototype._onMove=function(){Nr(this._map,this._container,this.options)},Ur.prototype.onAdd=function(t){return this._map=t,this._container=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-scale",t.getContainer()),this._map.on("move",this._onMove),this._onMove(),this._container},Ur.prototype.onRemove=function(){i.remove(this._container),this._map.off("move",this._onMove),this._map=void 0},Ur.prototype.setUnit=function(t){this.options.unit=t,Nr(this._map,this._container,this.options)};var qr=function(e){this._fullscreen=!1,e&&e.container&&(e.container instanceof t.window.HTMLElement?this._container=e.container:t.warnOnce("Full screen control 'container' must be a DOM element.")),t.bindAll(["_onClickFullscreen","_changeIcon"],this),"onfullscreenchange"in t.window.document?this._fullscreenchange="fullscreenchange":"onmozfullscreenchange"in t.window.document?this._fullscreenchange="mozfullscreenchange":"onwebkitfullscreenchange"in t.window.document?this._fullscreenchange="webkitfullscreenchange":"onmsfullscreenchange"in t.window.document&&(this._fullscreenchange="MSFullscreenChange")};qr.prototype.onAdd=function(e){return this._map=e,this._container||(this._container=this._map.getContainer()),this._controlContainer=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-group"),this._checkFullscreenSupport()?this._setupUI():(this._controlContainer.style.display="none",t.warnOnce("This device does not support fullscreen mode.")),this._controlContainer},qr.prototype.onRemove=function(){i.remove(this._controlContainer),this._map=null,t.window.document.removeEventListener(this._fullscreenchange,this._changeIcon)},qr.prototype._checkFullscreenSupport=function(){return!!(t.window.document.fullscreenEnabled||t.window.document.mozFullScreenEnabled||t.window.document.msFullscreenEnabled||t.window.document.webkitFullscreenEnabled)},qr.prototype._setupUI=function(){var e=this._fullscreenButton=i.create("button","mapboxgl-ctrl-fullscreen",this._controlContainer);i.create("span","mapboxgl-ctrl-icon",e).setAttribute("aria-hidden",!0),e.type="button",this._updateTitle(),this._fullscreenButton.addEventListener("click",this._onClickFullscreen),t.window.document.addEventListener(this._fullscreenchange,this._changeIcon)},qr.prototype._updateTitle=function(){var t=this._getTitle();this._fullscreenButton.setAttribute("aria-label",t),this._fullscreenButton.title=t},qr.prototype._getTitle=function(){return this._map._getUIString(this._isFullscreen()?"FullscreenControl.Exit":"FullscreenControl.Enter")},qr.prototype._isFullscreen=function(){return this._fullscreen},qr.prototype._changeIcon=function(){(t.window.document.fullscreenElement||t.window.document.mozFullScreenElement||t.window.document.webkitFullscreenElement||t.window.document.msFullscreenElement)===this._container!==this._fullscreen&&(this._fullscreen=!this._fullscreen,this._fullscreenButton.classList.toggle("mapboxgl-ctrl-shrink"),this._fullscreenButton.classList.toggle("mapboxgl-ctrl-fullscreen"),this._updateTitle())},qr.prototype._onClickFullscreen=function(){this._isFullscreen()?t.window.document.exitFullscreen?t.window.document.exitFullscreen():t.window.document.mozCancelFullScreen?t.window.document.mozCancelFullScreen():t.window.document.msExitFullscreen?t.window.document.msExitFullscreen():t.window.document.webkitCancelFullScreen&&t.window.document.webkitCancelFullScreen():this._container.requestFullscreen?this._container.requestFullscreen():this._container.mozRequestFullScreen?this._container.mozRequestFullScreen():this._container.msRequestFullscreen?this._container.msRequestFullscreen():this._container.webkitRequestFullscreen&&this._container.webkitRequestFullscreen()};var jr={closeButton:!0,closeOnClick:!0,focusAfterOpen:!0,className:"",maxWidth:"240px"},Vr=["a[href]","[tabindex]:not([tabindex='-1'])","[contenteditable]:not([contenteditable='false'])","button:not([disabled])","input:not([disabled])","select:not([disabled])","textarea:not([disabled])"].join(", "),Gr=function(e){function o(i){e.call(this),this.options=t.extend(Object.create(jr),i),t.bindAll(["_update","_onClose","remove","_onMouseMove","_onMouseUp","_onDrag"],this)}return e&&(o.__proto__=e),(o.prototype=Object.create(e&&e.prototype)).constructor=o,o.prototype.addTo=function(e){return this._map&&this.remove(),this._map=e,this.options.closeOnClick&&this._map.on("click",this._onClose),this.options.closeOnMove&&this._map.on("move",this._onClose),this._map.on("remove",this.remove),this._update(),this._focusFirstElement(),this._trackPointer?(this._map.on("mousemove",this._onMouseMove),this._map.on("mouseup",this._onMouseUp),this._container&&this._container.classList.add("mapboxgl-popup-track-pointer"),this._map._canvasContainer.classList.add("mapboxgl-track-pointer")):this._map.on("move",this._update),this.fire(new t.Event("open")),this},o.prototype.isOpen=function(){return!!this._map},o.prototype.remove=function(){return this._content&&i.remove(this._content),this._container&&(i.remove(this._container),delete this._container),this._map&&(this._map.off("move",this._update),this._map.off("move",this._onClose),this._map.off("click",this._onClose),this._map.off("remove",this.remove),this._map.off("mousemove",this._onMouseMove),this._map.off("mouseup",this._onMouseUp),this._map.off("drag",this._onDrag),delete this._map),this.fire(new t.Event("close")),this},o.prototype.getLngLat=function(){return this._lngLat},o.prototype.setLngLat=function(e){return this._lngLat=t.LngLat.convert(e),this._pos=null,this._trackPointer=!1,this._update(),this._map&&(this._map.on("move",this._update),this._map.off("mousemove",this._onMouseMove),this._container&&this._container.classList.remove("mapboxgl-popup-track-pointer"),this._map._canvasContainer.classList.remove("mapboxgl-track-pointer")),this},o.prototype.trackPointer=function(){return this._trackPointer=!0,this._pos=null,this._update(),this._map&&(this._map.off("move",this._update),this._map.on("mousemove",this._onMouseMove),this._map.on("drag",this._onDrag),this._container&&this._container.classList.add("mapboxgl-popup-track-pointer"),this._map._canvasContainer.classList.add("mapboxgl-track-pointer")),this},o.prototype.getElement=function(){return this._container},o.prototype.setText=function(e){return this.setDOMContent(t.window.document.createTextNode(e))},o.prototype.setHTML=function(e){var i,o=t.window.document.createDocumentFragment(),r=t.window.document.createElement("body");for(r.innerHTML=e;i=r.firstChild;)o.appendChild(i);return this.setDOMContent(o)},o.prototype.getMaxWidth=function(){return this._container&&this._container.style.maxWidth},o.prototype.setMaxWidth=function(t){return this.options.maxWidth=t,this._update(),this},o.prototype.setDOMContent=function(t){if(this._content)for(;this._content.hasChildNodes();)this._content.firstChild&&this._content.removeChild(this._content.firstChild);else this._content=i.create("div","mapboxgl-popup-content",this._container);return this._content.appendChild(t),this._createCloseButton(),this._update(),this._focusFirstElement(),this},o.prototype.addClassName=function(t){this._container&&this._container.classList.add(t)},o.prototype.removeClassName=function(t){this._container&&this._container.classList.remove(t)},o.prototype.setOffset=function(t){return this.options.offset=t,this._update(),this},o.prototype.toggleClassName=function(t){if(this._container)return this._container.classList.toggle(t)},o.prototype._createCloseButton=function(){this.options.closeButton&&(this._closeButton=i.create("button","mapboxgl-popup-close-button",this._content),this._closeButton.type="button",this._closeButton.setAttribute("aria-label","Close popup"),this._closeButton.innerHTML="&#215;",this._closeButton.addEventListener("click",this._onClose))},o.prototype._onMouseUp=function(t){this._update(t.point)},o.prototype._onMouseMove=function(t){this._update(t.point)},o.prototype._onDrag=function(t){this._update(t.point)},o.prototype._update=function(e){var o=this;if(this._map&&(this._lngLat||this._trackPointer)&&this._content&&(this._container||(this._container=i.create("div","mapboxgl-popup",this._map.getContainer()),this._tip=i.create("div","mapboxgl-popup-tip",this._container),this._container.appendChild(this._content),this.options.className&&this.options.className.split(" ").forEach((function(t){return o._container.classList.add(t)})),this._trackPointer&&this._container.classList.add("mapboxgl-popup-track-pointer")),this.options.maxWidth&&this._container.style.maxWidth!==this.options.maxWidth&&(this._container.style.maxWidth=this.options.maxWidth),this._map.transform.renderWorldCopies&&!this._trackPointer&&(this._lngLat=Mr(this._lngLat,this._pos,this._map.transform)),!this._trackPointer||e)){var r=this._pos=this._trackPointer&&e?e:this._map.project(this._lngLat),a=this.options.anchor,n=function e(i){if(i){if("number"==typeof i){var o=Math.round(Math.sqrt(.5*Math.pow(i,2)));return{center:new t.Point(0,0),top:new t.Point(0,i),"top-left":new t.Point(o,o),"top-right":new t.Point(-o,o),bottom:new t.Point(0,-i),"bottom-left":new t.Point(o,-o),"bottom-right":new t.Point(-o,-o),left:new t.Point(i,0),right:new t.Point(-i,0)}}if(i instanceof t.Point||Array.isArray(i)){var r=t.Point.convert(i);return{center:r,top:r,"top-left":r,"top-right":r,bottom:r,"bottom-left":r,"bottom-right":r,left:r,right:r}}return{center:t.Point.convert(i.center||[0,0]),top:t.Point.convert(i.top||[0,0]),"top-left":t.Point.convert(i["top-left"]||[0,0]),"top-right":t.Point.convert(i["top-right"]||[0,0]),bottom:t.Point.convert(i.bottom||[0,0]),"bottom-left":t.Point.convert(i["bottom-left"]||[0,0]),"bottom-right":t.Point.convert(i["bottom-right"]||[0,0]),left:t.Point.convert(i.left||[0,0]),right:t.Point.convert(i.right||[0,0])}}return e(new t.Point(0,0))}(this.options.offset);if(!a){var s,l=this._container.offsetWidth,c=this._container.offsetHeight;s=r.y+n.bottom.y<c?["top"]:r.y>this._map.transform.height-c?["bottom"]:[],r.x<l/2?s.push("left"):r.x>this._map.transform.width-l/2&&s.push("right"),a=0===s.length?"bottom":s.join("-")}var u=r.add(n[a]).round();i.setTransform(this._container,Lr[a]+" translate("+u.x+"px,"+u.y+"px)"),Rr(this._container,a,"popup")}},o.prototype._focusFirstElement=function(){if(this.options.focusAfterOpen&&this._container){var t=this._container.querySelector(Vr);t&&t.focus()}},o.prototype._onClose=function(){this.remove()},o}(t.Evented),Wr={version:t.version,supported:e,setRTLTextPlugin:t.setRTLTextPlugin,getRTLTextPluginStatus:t.getRTLTextPluginStatus,Map:Sr,NavigationControl:Dr,GeolocateControl:Br,AttributionControl:yr,ScaleControl:Ur,FullscreenControl:qr,Popup:Gr,Marker:kr,Style:je,LngLat:t.LngLat,LngLatBounds:t.LngLatBounds,Point:t.Point,MercatorCoordinate:t.MercatorCoordinate,Evented:t.Evented,config:t.config,prewarm:function(){Ft().acquire(Rt)},clearPrewarmedResources:function(){var t=Ot;t&&(t.isPreloaded()&&1===t.numActive()?(t.release(Rt),Ot=null):console.warn("Could not clear WebWorkers since there are active Map instances that still reference it. The pre-warmed WebWorker pool can only be cleared when all map instances have been removed with map.remove()"))},get accessToken(){return t.config.ACCESS_TOKEN},set accessToken(e){t.config.ACCESS_TOKEN=e},get baseApiUrl(){return t.config.API_URL},set baseApiUrl(e){t.config.API_URL=e},get workerCount(){return kt.workerCount},set workerCount(t){kt.workerCount=t},get maxParallelImageRequests(){return t.config.MAX_PARALLEL_IMAGE_REQUESTS},set maxParallelImageRequests(e){t.config.MAX_PARALLEL_IMAGE_REQUESTS=e},clearStorage:function(e){t.clearTileCache(e)},workerUrl:""};return Wr}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1zdXBwb3J0ZWQvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvdXRpbC9kb20uanMiLCIuLi8uLi8uLi9zcmMvc3R5bGUvc3R5bGVfaW1hZ2UuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2ltYWdlX21hbmFnZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hcGJveC90aW55LXNkZi9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZ2x5cGhfbWFuYWdlci5qcyIsIi4uLy4uLy4uL3NyYy9zdHlsZS9sb2FkX2dseXBoX3JhbmdlLmpzIiwiLi4vLi4vLi4vc3JjL3N0eWxlL2xpZ2h0LmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9saW5lX2F0bGFzLmpzIiwiLi4vLi4vLi4vc3JjL3V0aWwvZGlzcGF0Y2hlci5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvbG9hZF90aWxlanNvbi5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvdGlsZV9ib3VuZHMuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL3ZlY3Rvcl90aWxlX3NvdXJjZS5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvcmFzdGVyX3RpbGVfc291cmNlLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS9yYXN0ZXJfZGVtX3RpbGVfc291cmNlLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS9nZW9qc29uX3NvdXJjZS5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvaW1hZ2Vfc291cmNlLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS92aWRlb19zb3VyY2UuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL2NhbnZhc19zb3VyY2UuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL3NvdXJjZS5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvcXVlcnlfZmVhdHVyZXMuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL3RpbGVfY2FjaGUuanMiLCIuLi8uLi8uLi9zcmMvZ2wvaW5kZXhfYnVmZmVyLmpzIiwiLi4vLi4vLi4vc3JjL2dsL3ZlcnRleF9idWZmZXIuanMiLCIuLi8uLi8uLi9zcmMvZ2wvdmFsdWUuanMiLCIuLi8uLi8uLi9zcmMvZ2wvZnJhbWVidWZmZXIuanMiLCIuLi8uLi8uLi9zcmMvZ2wvZGVwdGhfbW9kZS5qcyIsIi4uLy4uLy4uL3NyYy9nbC9zdGVuY2lsX21vZGUuanMiLCIuLi8uLi8uLi9zcmMvZ2wvY29sb3JfbW9kZS5qcyIsIi4uLy4uLy4uL3NyYy9nbC9jdWxsX2ZhY2VfbW9kZS5qcyIsIi4uLy4uLy4uL3NyYy9nbC9jb250ZXh0LmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS9zb3VyY2VfY2FjaGUuanMiLCIuLi8uLi8uLi9zcmMvdXRpbC9icm93c2VyL3dlYl93b3JrZXIuanMiLCIuLi8uLi8uLi9zcmMvdXRpbC93b3JrZXJfcG9vbC5qcyIsIi4uLy4uLy4uL3NyYy91dGlsL2dsb2JhbF93b3JrZXJfcG9vbC5qcyIsIi4uLy4uLy4uL3NyYy9zdHlsZS1zcGVjL2RlcmVmLmpzIiwiLi4vLi4vLi4vc3JjL3N0eWxlLXNwZWMvZGlmZi5qcyIsIi4uLy4uLy4uL3NyYy9zeW1ib2wvcGF0aF9pbnRlcnBvbGF0b3IuanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL2dyaWRfaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL3Byb2plY3Rpb24uanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL2NvbGxpc2lvbl9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvcGl4ZWxzX3RvX3RpbGVfdW5pdHMuanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL3BsYWNlbWVudC5qcyIsIi4uLy4uLy4uL3NyYy9zdHlsZS9wYXVzZWFibGVfcGxhY2VtZW50LmpzIiwiLi4vLi4vLi4vc3JjL3N5bWJvbC9jcm9zc190aWxlX3N5bWJvbF9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9zdHlsZS9zdHlsZS5qcyIsIi4uLy4uLy4uL3NyYy9zdHlsZS1zcGVjL2VtcHR5LmpzIiwiLi4vLi4vLi4vc3JjL3N0eWxlL2xvYWRfc3ByaXRlLmpzIiwiLi4vLi4vLi4vc3JjL2RhdGEvcG9zX2F0dHJpYnV0ZXMuanMiLCIuLi8uLi8uLi9zcmMvc2hhZGVycy9zaGFkZXJzLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci92ZXJ0ZXhfYXJyYXlfb2JqZWN0LmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL3BhdHRlcm4uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vZmlsbF9leHRydXNpb25fcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9maWxsX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vY2lyY2xlX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vY29sbGlzaW9uX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vZGVidWdfcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9jbGlwcGluZ19tYXNrX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vaGVhdG1hcF9wcm9ncmFtLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL2xpbmVfcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9yYXN0ZXJfcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9zeW1ib2xfcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19jb2xsaXNpb25fZGVidWcuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vYmFja2dyb3VuZF9wcm9ncmFtLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL3Byb2dyYW1fdW5pZm9ybXMuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vaGlsbHNoYWRlX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfc3ltYm9sLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2ZpbGwuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfZmlsbF9leHRydXNpb24uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfaGlsbHNoYWRlLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X3Jhc3Rlci5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19kZWJ1Zy5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcGFpbnRlci5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19jaXJjbGUuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfaGVhdG1hcC5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19saW5lLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2JhY2tncm91bmQuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfY3VzdG9tLmpzIiwiLi4vLi4vLi4vc3JjL3V0aWwvcHJpbWl0aXZlcy5qcyIsIi4uLy4uLy4uL3NyYy9nZW8vZWRnZV9pbnNldHMuanMiLCIuLi8uLi8uLi9zcmMvZ2VvL3RyYW5zZm9ybS5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYXNoLmpzIiwiLi4vLi4vLi4vc3JjL3V0aWwvdGhyb3R0bGUuanMiLCIuLi8uLi8uLi9zcmMvdWkvaGFuZGxlcl9pbmVydGlhLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2V2ZW50cy5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL21hcF9ldmVudC5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL2JveF96b29tLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvaGFuZGxlcl91dGlsLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvdGFwX3JlY29nbml6ZXIuanMiLCIuLi8uLi8uLi9zcmMvdWkvaGFuZGxlci90YXBfem9vbS5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL21vdXNlLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvdG91Y2hfcGFuLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvdG91Y2hfem9vbV9yb3RhdGUuanMiLCIuLi8uLi8uLi9zcmMvdWkvaGFuZGxlci9rZXlib2FyZC5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL3Njcm9sbF96b29tLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvc2hpbS9kYmxjbGlja196b29tLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvY2xpY2tfem9vbS5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL3RhcF9kcmFnX3pvb20uanMiLCIuLi8uLi8uLi9zcmMvdWkvaGFuZGxlci9zaGltL2RyYWdfcGFuLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvc2hpbS9kcmFnX3JvdGF0ZS5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL3NoaW0vdG91Y2hfem9vbV9yb3RhdGUuanMiLCIuLi8uLi8uLi9zcmMvdWkvaGFuZGxlcl9tYW5hZ2VyLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2NhbWVyYS5qcyIsIi4uLy4uLy4uL3NyYy91aS9jb250cm9sL2F0dHJpYnV0aW9uX2NvbnRyb2wuanMiLCIuLi8uLi8uLi9zcmMvdWkvY29udHJvbC9sb2dvX2NvbnRyb2wuanMiLCIuLi8uLi8uLi9zcmMvdXRpbC90YXNrX3F1ZXVlLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2RlZmF1bHRfbG9jYWxlLmpzIiwiLi4vLi4vLi4vc3JjL3VpL21hcC5qcyIsIi4uLy4uLy4uL3NyYy91aS9jb250cm9sL25hdmlnYXRpb25fY29udHJvbC5qcyIsIi4uLy4uLy4uL3NyYy91dGlsL3NtYXJ0X3dyYXAuanMiLCIuLi8uLi8uLi9zcmMvdWkvYW5jaG9yLmpzIiwiLi4vLi4vLi4vc3JjL3VpL21hcmtlci5qcyIsIi4uLy4uLy4uL3NyYy91aS9jb250cm9sL2dlb2xvY2F0ZV9jb250cm9sLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2NvbnRyb2wvc2NhbGVfY29udHJvbC5qcyIsIi4uLy4uLy4uL3NyYy91aS9jb250cm9sL2Z1bGxzY3JlZW5fY29udHJvbC5qcyIsIi4uLy4uLy4uL3NyYy91aS9wb3B1cC5qcyIsIi4uLy4uLy4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gaXNTdXBwb3J0ZWQ7XG59IGVsc2UgaWYgKHdpbmRvdykge1xuICAgIHdpbmRvdy5tYXBib3hnbCA9IHdpbmRvdy5tYXBib3hnbCB8fCB7fTtcbiAgICB3aW5kb3cubWFwYm94Z2wuc3VwcG9ydGVkID0gaXNTdXBwb3J0ZWQ7XG4gICAgd2luZG93Lm1hcGJveGdsLm5vdFN1cHBvcnRlZFJlYXNvbiA9IG5vdFN1cHBvcnRlZFJlYXNvbjtcbn1cblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgYnJvd3NlciBzdXBwb3J0cyBNYXBib3ggR0wgSlNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ9ZmFsc2VdIFJldHVybiBgZmFsc2VgXG4gKiAgIGlmIHRoZSBwZXJmb3JtYW5jZSBvZiBNYXBib3ggR0wgSlMgd291bGQgYmUgZHJhbWF0aWNhbGx5IHdvcnNlIHRoYW5cbiAqICAgZXhwZWN0ZWQgKGkuZS4gYSBzb2Z0d2FyZSByZW5kZXJlciBpcyB3b3VsZCBiZSB1c2VkKVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTdXBwb3J0ZWQob3B0aW9ucykge1xuICAgIHJldHVybiAhbm90U3VwcG9ydGVkUmVhc29uKG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBub3RTdXBwb3J0ZWRSZWFzb24ob3B0aW9ucykge1xuICAgIGlmICghaXNCcm93c2VyKCkpIHJldHVybiAnbm90IGEgYnJvd3Nlcic7XG4gICAgaWYgKCFpc0FycmF5U3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNlbnQgQXJyYXkgc3VwcG9ydCc7XG4gICAgaWYgKCFpc0Z1bmN0aW9uU3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IEZ1bmN0aW9uIHN1cHBvcnQnO1xuICAgIGlmICghaXNPYmplY3RTdXBwb3J0ZWQoKSkgcmV0dXJuICdpbnN1ZmZpY2llbnQgT2JqZWN0IHN1cHBvcnQnO1xuICAgIGlmICghaXNKU09OU3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IEpTT04gc3VwcG9ydCc7XG4gICAgaWYgKCFpc1dvcmtlclN1cHBvcnRlZCgpKSByZXR1cm4gJ2luc3VmZmljaWVudCB3b3JrZXIgc3VwcG9ydCc7XG4gICAgaWYgKCFpc1VpbnQ4Q2xhbXBlZEFycmF5U3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IFVpbnQ4Q2xhbXBlZEFycmF5IHN1cHBvcnQnO1xuICAgIGlmICghaXNBcnJheUJ1ZmZlclN1cHBvcnRlZCgpKSByZXR1cm4gJ2luc3VmZmljaWVudCBBcnJheUJ1ZmZlciBzdXBwb3J0JztcbiAgICBpZiAoIWlzQ2FudmFzR2V0SW1hZ2VEYXRhU3VwcG9ydGVkKCkpIHJldHVybiAnaW5zdWZmaWNpZW50IENhbnZhcy9nZXRJbWFnZURhdGEgc3VwcG9ydCc7XG4gICAgaWYgKCFpc1dlYkdMU3VwcG9ydGVkQ2FjaGVkKG9wdGlvbnMgJiYgb3B0aW9ucy5mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0KSkgcmV0dXJuICdpbnN1ZmZpY2llbnQgV2ViR0wgc3VwcG9ydCc7XG59XG5cbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbn1cblxuZnVuY3Rpb24gaXNBcnJheVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBBcnJheS5wcm90b3R5cGUgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmV2ZXJ5ICYmXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2ggJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mICYmXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5tYXAgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnJlZHVjZSAmJlxuICAgICAgICBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb25TdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZSAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgT2JqZWN0LmtleXMgJiZcbiAgICAgICAgT2JqZWN0LmNyZWF0ZSAmJlxuICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiZcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgJiZcbiAgICAgICAgT2JqZWN0LmlzU2VhbGVkICYmXG4gICAgICAgIE9iamVjdC5pc0Zyb3plbiAmJlxuICAgICAgICBPYmplY3QuaXNFeHRlbnNpYmxlICYmXG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiZcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzICYmXG4gICAgICAgIE9iamVjdC5zZWFsICYmXG4gICAgICAgIE9iamVjdC5mcmVlemUgJiZcbiAgICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gaXNKU09OU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAnSlNPTicgaW4gd2luZG93ICYmICdwYXJzZScgaW4gSlNPTiAmJiAnc3RyaW5naWZ5JyBpbiBKU09OO1xufVxuXG5mdW5jdGlvbiBpc1dvcmtlclN1cHBvcnRlZCgpIHtcbiAgICBpZiAoISgnV29ya2VyJyBpbiB3aW5kb3cgJiYgJ0Jsb2InIGluIHdpbmRvdyAmJiAnVVJMJyBpbiB3aW5kb3cpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFsnJ10sIHsgdHlwZTogJ3RleHQvamF2YXNjcmlwdCcgfSk7XG4gICAgdmFyIHdvcmtlclVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgdmFyIHN1cHBvcnRlZDtcbiAgICB2YXIgd29ya2VyO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJVUkwpO1xuICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHdvcmtlcikge1xuICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgfVxuICAgIFVSTC5yZXZva2VPYmplY3RVUkwod29ya2VyVVJMKTtcblxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5cbi8vIElFMTEgb25seSBzdXBwb3J0cyBgVWludDhDbGFtcGVkQXJyYXlgIGFzIG9mIHZlcnNpb25cbi8vIFtLQjI5Mjk0MzddKGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2VuLXVzL2tiLzI5Mjk0MzcpXG5mdW5jdGlvbiBpc1VpbnQ4Q2xhbXBlZEFycmF5U3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAnVWludDhDbGFtcGVkQXJyYXknIGluIHdpbmRvdztcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtc3VwcG9ydGVkL2lzc3Vlcy8xOVxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3O1xufVxuXG4vLyBTb21lIGJyb3dzZXJzIG9yIGJyb3dzZXIgZXh0ZW5zaW9ucyBibG9jayBhY2Nlc3MgdG8gY2FudmFzIGRhdGEgdG8gcHJldmVudCBmaW5nZXJwcmludGluZy5cbi8vIE1hcGJveCBHTCB1c2VzIHRoaXMgQVBJIHRvIGxvYWQgc3ByaXRlcyBhbmQgaW1hZ2VzIGluIGdlbmVyYWwuXG5mdW5jdGlvbiBpc0NhbnZhc0dldEltYWdlRGF0YVN1cHBvcnRlZCgpIHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaW1hZ2VEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSk7XG4gICAgcmV0dXJuIGltYWdlRGF0YSAmJiBpbWFnZURhdGEud2lkdGggPT09IGNhbnZhcy53aWR0aDtcbn1cblxudmFyIGlzV2ViR0xTdXBwb3J0ZWRDYWNoZSA9IHt9O1xuZnVuY3Rpb24gaXNXZWJHTFN1cHBvcnRlZENhY2hlZChmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0KSB7XG5cbiAgICBpZiAoaXNXZWJHTFN1cHBvcnRlZENhY2hlW2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaXNXZWJHTFN1cHBvcnRlZENhY2hlW2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXRdID0gaXNXZWJHTFN1cHBvcnRlZChmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNXZWJHTFN1cHBvcnRlZENhY2hlW2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXRdO1xufVxuXG5pc1N1cHBvcnRlZC53ZWJHTENvbnRleHRBdHRyaWJ1dGVzID0ge1xuICAgIGFudGlhbGlhczogZmFsc2UsXG4gICAgYWxwaGE6IHRydWUsXG4gICAgc3RlbmNpbDogdHJ1ZSxcbiAgICBkZXB0aDogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZ2V0V2ViR0xDb250ZXh0KGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQpIHtcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cbiAgICB2YXIgYXR0cmlidXRlcyA9IE9iamVjdC5jcmVhdGUoaXNTdXBwb3J0ZWQud2ViR0xDb250ZXh0QXR0cmlidXRlcyk7XG4gICAgYXR0cmlidXRlcy5mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0ID0gZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdDtcblxuICAgIGlmIChjYW52YXMucHJvYmFibHlTdXBwb3J0c0NvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGNhbnZhcy5wcm9iYWJseVN1cHBvcnRzQ29udGV4dCgnd2ViZ2wnLCBhdHRyaWJ1dGVzKSB8fFxuICAgICAgICAgICAgY2FudmFzLnByb2JhYmx5U3VwcG9ydHNDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBhdHRyaWJ1dGVzKVxuICAgICAgICApO1xuXG4gICAgfSBlbHNlIGlmIChjYW52YXMuc3VwcG9ydHNDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBjYW52YXMuc3VwcG9ydHNDb250ZXh0KCd3ZWJnbCcsIGF0dHJpYnV0ZXMpIHx8XG4gICAgICAgICAgICBjYW52YXMuc3VwcG9ydHNDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBhdHRyaWJ1dGVzKVxuICAgICAgICApO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIGF0dHJpYnV0ZXMpIHx8XG4gICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJywgYXR0cmlidXRlcylcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzV2ViR0xTdXBwb3J0ZWQoZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCkge1xuICAgIGNvbnN0IGdsID0gZ2V0V2ViR0xDb250ZXh0KGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQpO1xuICAgIGlmICghZ2wpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRyeSBjb21waWxpbmcgYSBzaGFkZXIgYW5kIGdldCBpdHMgY29tcGlsZSBzdGF0dXMuIFNvbWUgYnJvd3NlcnMgbGlrZSBCcmF2ZSBibG9jayB0aGlzIEFQSVxuICAgIC8vIHRvIHByZXZlbnQgZmluZ2VycHJpbnRpbmcuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBtZWFucyB0aGF0IE1hcGJveCBHTCB3b24ndCB3b3JrLlxuICAgIGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICBpZiAoIXNoYWRlciB8fCBnbC5pc0NvbnRleHRMb3N0KCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCAndm9pZCBtYWluKCkge30nKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG4gICAgcmV0dXJuIGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSA9PT0gdHJ1ZTtcbn1cbiIsIi8vIEBmbG93IHN0cmljdFxuXG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5cbmltcG9ydCB3aW5kb3cgZnJvbSAnLi93aW5kb3cnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5jb25zdCBET00gPSB7fTtcbmV4cG9ydCBkZWZhdWx0IERPTTtcblxuRE9NLmNyZWF0ZSA9IGZ1bmN0aW9uICh0YWdOYW1lOiBzdHJpbmcsIGNsYXNzTmFtZTogP3N0cmluZywgY29udGFpbmVyPzogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBlbCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICAgIGlmIChjbGFzc05hbWUgIT09IHVuZGVmaW5lZCkgZWwuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgIGlmIChjb250YWluZXIpIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbCk7XG4gICAgcmV0dXJuIGVsO1xufTtcblxuRE9NLmNyZWF0ZU5TID0gZnVuY3Rpb24gKG5hbWVzcGFjZVVSSTogc3RyaW5nLCB0YWdOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBlbCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCB0YWdOYW1lKTtcbiAgICByZXR1cm4gZWw7XG59O1xuXG5jb25zdCBkb2NTdHlsZSA9IHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuXG5mdW5jdGlvbiB0ZXN0UHJvcChwcm9wcykge1xuICAgIGlmICghZG9jU3R5bGUpIHJldHVybiBwcm9wc1swXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9wc1tpXSBpbiBkb2NTdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wc1swXTtcbn1cblxuY29uc3Qgc2VsZWN0UHJvcCA9IHRlc3RQcm9wKFsndXNlclNlbGVjdCcsICdNb3pVc2VyU2VsZWN0JywgJ1dlYmtpdFVzZXJTZWxlY3QnLCAnbXNVc2VyU2VsZWN0J10pO1xubGV0IHVzZXJTZWxlY3Q7XG5cbkRPTS5kaXNhYmxlRHJhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZG9jU3R5bGUgJiYgc2VsZWN0UHJvcCkge1xuICAgICAgICB1c2VyU2VsZWN0ID0gZG9jU3R5bGVbc2VsZWN0UHJvcF07XG4gICAgICAgIGRvY1N0eWxlW3NlbGVjdFByb3BdID0gJ25vbmUnO1xuICAgIH1cbn07XG5cbkRPTS5lbmFibGVEcmFnID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChkb2NTdHlsZSAmJiBzZWxlY3RQcm9wKSB7XG4gICAgICAgIGRvY1N0eWxlW3NlbGVjdFByb3BdID0gdXNlclNlbGVjdDtcbiAgICB9XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1Qcm9wID0gdGVzdFByb3AoWyd0cmFuc2Zvcm0nLCAnV2Via2l0VHJhbnNmb3JtJ10pO1xuXG5ET00uc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24oZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzc3NTRcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgZWwuc3R5bGVbdHJhbnNmb3JtUHJvcF0gPSB2YWx1ZTtcbn07XG5cbi8vIEZlYXR1cmUgZGV0ZWN0aW9uIGZvciB7cGFzc2l2ZTogZmFsc2V9IHN1cHBvcnQgaW4gYWRkL3JlbW92ZUV2ZW50TGlzdGVuZXIuXG5sZXQgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuXG50cnkge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJwYXNzaXZlXCIsIHtcbiAgICAgICAgZ2V0KCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICBwYXNzaXZlU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG59IGNhdGNoIChlcnIpIHtcbiAgICBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG59XG5cbkRPTS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odGFyZ2V0OiAqLCB0eXBlOiAqLCBjYWxsYmFjazogKiwgb3B0aW9uczoge3Bhc3NpdmU/OiBib29sZWFuLCBjYXB0dXJlPzogYm9vbGVhbn0gPSB7fSkge1xuICAgIGlmICgncGFzc2l2ZScgaW4gb3B0aW9ucyAmJiBwYXNzaXZlU3VwcG9ydGVkKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaywgb3B0aW9ucy5jYXB0dXJlKTtcbiAgICB9XG59O1xuXG5ET00ucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHRhcmdldDogKiwgdHlwZTogKiwgY2FsbGJhY2s6ICosIG9wdGlvbnM6IHtwYXNzaXZlPzogYm9vbGVhbiwgY2FwdHVyZT86IGJvb2xlYW59ID0ge30pIHtcbiAgICBpZiAoJ3Bhc3NpdmUnIGluIG9wdGlvbnMgJiYgcGFzc2l2ZVN1cHBvcnRlZCkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2ssIG9wdGlvbnMuY2FwdHVyZSk7XG4gICAgfVxufTtcblxuLy8gU3VwcHJlc3MgdGhlIG5leHQgY2xpY2ssIGJ1dCBvbmx5IGlmIGl0J3MgaW1tZWRpYXRlLlxuY29uc3Qgc3VwcHJlc3NDbGljazogTW91c2VFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdXBwcmVzc0NsaWNrLCB0cnVlKTtcbn07XG5cbkRPTS5zdXBwcmVzc0NsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3VwcHJlc3NDbGljaywgdHJ1ZSk7XG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdXBwcmVzc0NsaWNrLCB0cnVlKTtcbiAgICB9LCAwKTtcbn07XG5cbkRPTS5tb3VzZVBvcyA9IGZ1bmN0aW9uIChlbDogSFRNTEVsZW1lbnQsIGU6IE1vdXNlRXZlbnQgfCB3aW5kb3cuVG91Y2hFdmVudCB8IFRvdWNoKSB7XG4gICAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBuZXcgUG9pbnQoXG4gICAgICAgIGUuY2xpZW50WCAtIHJlY3QubGVmdCAtIGVsLmNsaWVudExlZnQsXG4gICAgICAgIGUuY2xpZW50WSAtIHJlY3QudG9wIC0gZWwuY2xpZW50VG9wXG4gICAgKTtcbn07XG5cbkRPTS50b3VjaFBvcyA9IGZ1bmN0aW9uIChlbDogSFRNTEVsZW1lbnQsIHRvdWNoZXM6IFRvdWNoTGlzdCkge1xuICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgcG9pbnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBvaW50cy5wdXNoKG5ldyBQb2ludChcbiAgICAgICAgICAgIHRvdWNoZXNbaV0uY2xpZW50WCAtIHJlY3QubGVmdCAtIGVsLmNsaWVudExlZnQsXG4gICAgICAgICAgICB0b3VjaGVzW2ldLmNsaWVudFkgLSByZWN0LnRvcCAtIGVsLmNsaWVudFRvcFxuICAgICAgICApKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50cztcbn07XG5cbkRPTS5tb3VzZUJ1dHRvbiA9IGZ1bmN0aW9uIChlOiBNb3VzZUV2ZW50KSB7XG4gICAgYXNzZXJ0KGUudHlwZSA9PT0gJ21vdXNlZG93bicgfHwgZS50eXBlID09PSAnbW91c2V1cCcpO1xuICAgIGlmICh0eXBlb2Ygd2luZG93Lkluc3RhbGxUcmlnZ2VyICE9PSAndW5kZWZpbmVkJyAmJiBlLmJ1dHRvbiA9PT0gMiAmJiBlLmN0cmxLZXkgJiZcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybS50b1VwcGVyQ2FzZSgpLmluZGV4T2YoJ01BQycpID49IDApIHtcbiAgICAgICAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvMzEzMTpcbiAgICAgICAgLy8gRmlyZWZveCAoZGV0ZWN0ZWQgYnkgSW5zdGFsbFRyaWdnZXIpIG9uIE1hYyBkZXRlcm1pbmVzIGUuYnV0dG9uID0gMiB3aGVuXG4gICAgICAgIC8vIHVzaW5nIENvbnRyb2wgKyBsZWZ0IGNsaWNrXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gZS5idXR0b247XG59O1xuXG5ET00ucmVtb3ZlID0gZnVuY3Rpb24obm9kZTogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICB9XG59O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtSR0JBSW1hZ2V9IGZyb20gJy4uL3V0aWwvaW1hZ2UnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vdWkvbWFwJztcblxuZXhwb3J0IHR5cGUgU3R5bGVJbWFnZURhdGEgPSB7XG4gICAgZGF0YTogUkdCQUltYWdlLFxuICAgIHZlcnNpb246IG51bWJlcixcbiAgICBoYXNSZW5kZXJDYWxsYmFjaz86IGJvb2xlYW4sXG4gICAgdXNlckltYWdlPzogU3R5bGVJbWFnZUludGVyZmFjZVxufTtcblxuZXhwb3J0IHR5cGUgU3R5bGVJbWFnZU1ldGFkYXRhID0ge1xuICAgIHBpeGVsUmF0aW86IG51bWJlcixcbiAgICBzZGY6IGJvb2xlYW4sXG4gICAgc3RyZXRjaFg/OiBBcnJheTxbbnVtYmVyLCBudW1iZXJdPixcbiAgICBzdHJldGNoWT86IEFycmF5PFtudW1iZXIsIG51bWJlcl0+LFxuICAgIGNvbnRlbnQ/OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXVxufTtcblxuZXhwb3J0IHR5cGUgU3R5bGVJbWFnZSA9IFN0eWxlSW1hZ2VEYXRhICYgU3R5bGVJbWFnZU1ldGFkYXRhO1xuXG5leHBvcnQgdHlwZSBTdHlsZUltYWdlSW50ZXJmYWNlID0ge1xuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgZGF0YTogVWludDhBcnJheSB8IFVpbnQ4Q2xhbXBlZEFycmF5LFxuICAgIHJlbmRlcj86ICgpID0+IGJvb2xlYW4sXG4gICAgb25BZGQ/OiAobWFwOiBNYXAsIGlkOiBzdHJpbmcpID0+IHZvaWQsXG4gICAgb25SZW1vdmU/OiAoKSA9PiB2b2lkXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3R5bGVJbWFnZShpbWFnZTogU3R5bGVJbWFnZSkge1xuICAgIGNvbnN0IHt1c2VySW1hZ2V9ID0gaW1hZ2U7XG4gICAgaWYgKHVzZXJJbWFnZSAmJiB1c2VySW1hZ2UucmVuZGVyKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSB1c2VySW1hZ2UucmVuZGVyKCk7XG4gICAgICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICAgICAgICBpbWFnZS5kYXRhLnJlcGxhY2UobmV3IFVpbnQ4QXJyYXkodXNlckltYWdlLmRhdGEuYnVmZmVyKSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBkeW5hbWljYWxseSBnZW5lcmF0ZWQgc3R5bGUgaW1hZ2VzLiBUaGlzIGlzIGEgc3BlY2lmaWNhdGlvbiBmb3JcbiAqIGltcGxlbWVudGVycyB0byBtb2RlbDogaXQgaXMgbm90IGFuIGV4cG9ydGVkIG1ldGhvZCBvciBjbGFzcy5cbiAqXG4gKiBJbWFnZXMgaW1wbGVtZW50aW5nIHRoaXMgaW50ZXJmYWNlIGNhbiBiZSByZWRyYXduIGZvciBldmVyeSBmcmFtZS4gVGhleSBjYW4gYmUgdXNlZCB0byBhbmltYXRlXG4gKiBpY29ucyBhbmQgcGF0dGVybnMgb3IgbWFrZSB0aGVtIHJlc3BvbmQgdG8gdXNlciBpbnB1dC4gU3R5bGUgaW1hZ2VzIGNhbiBpbXBsZW1lbnQgYVxuICoge0BsaW5rIFN0eWxlSW1hZ2VJbnRlcmZhY2UjcmVuZGVyfSBtZXRob2QuIFRoZSBtZXRob2QgaXMgY2FsbGVkIGV2ZXJ5IGZyYW1lIGFuZFxuICogY2FuIGJlIHVzZWQgdG8gdXBkYXRlIHRoZSBpbWFnZS5cbiAqXG4gKiBAaW50ZXJmYWNlIFN0eWxlSW1hZ2VJbnRlcmZhY2VcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB3aWR0aFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGhlaWdodFxuICogQHByb3BlcnR5IHtVaW50OEFycmF5IHwgVWludDhDbGFtcGVkQXJyYXl9IGRhdGFcbiAqXG4gKiBAc2VlIFtBZGQgYW4gYW5pbWF0ZWQgaWNvbiB0byB0aGUgbWFwLl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYWRkLWltYWdlLWFuaW1hdGVkLylcbiAqXG4gKiBAZXhhbXBsZVxuICogdmFyIGZsYXNoaW5nU3F1YXJlID0ge1xuICogICAgIHdpZHRoOiA2NCxcbiAqICAgICBoZWlnaHQ6IDY0LFxuICogICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KDY0ICogNjQgKiA0KSxcbiAqXG4gKiAgICAgb25BZGQ6IGZ1bmN0aW9uKG1hcCkge1xuICogICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAqICAgICB9LFxuICpcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAvLyBrZWVwIHJlcGFpbnRpbmcgd2hpbGUgdGhlIGljb24gaXMgb24gdGhlIG1hcFxuICogICAgICAgICB0aGlzLm1hcC50cmlnZ2VyUmVwYWludCgpO1xuICpcbiAqICAgICAgICAgLy8gYWx0ZXJuYXRlIGJldHdlZW4gYmxhY2sgYW5kIHdoaXRlIGJhc2VkIG9uIHRoZSB0aW1lXG4gKiAgICAgICAgIHZhciB2YWx1ZSA9IE1hdGgucm91bmQoRGF0ZS5ub3coKSAvIDEwMDApICUgMiA9PT0gMCAgPyAyNTUgOiAwO1xuICpcbiAqICAgICAgICAgLy8gY2hlY2sgaWYgaW1hZ2UgbmVlZHMgdG8gYmUgY2hhbmdlZFxuICogICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMucHJldmlvdXNWYWx1ZSkge1xuICogICAgICAgICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlID0gdmFsdWU7XG4gKlxuICogICAgICAgICAgICAgdmFyIGJ5dGVzUGVyUGl4ZWwgPSA0O1xuICogICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAqICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAqICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9ICh5ICogdGhpcy53aWR0aCArIHgpICogYnl0ZXNQZXJQaXhlbDtcbiAqICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhW29mZnNldCArIDBdID0gdmFsdWU7XG4gKiAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVtvZmZzZXQgKyAxXSA9IHZhbHVlO1xuICogICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFbb2Zmc2V0ICsgMl0gPSB2YWx1ZTtcbiAqICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhW29mZnNldCArIDNdID0gMjU1O1xuICogICAgICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgIH1cbiAqXG4gKiAgICAgICAgICAgICAvLyByZXR1cm4gdHJ1ZSB0byBpbmRpY2F0ZSB0aGF0IHRoZSBpbWFnZSBjaGFuZ2VkXG4gKiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqICB9XG4gKlxuICogIG1hcC5hZGRJbWFnZSgnZmxhc2hpbmdfc3F1YXJlJywgZmxhc2hpbmdTcXVhcmUpO1xuICovXG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uY2UgYmVmb3JlIGV2ZXJ5IGZyYW1lIHdoZXJlIHRoZSBpY29uIHdpbGwgYmUgdXNlZC5cbiAqIFRoZSBtZXRob2QgY2FuIG9wdGlvbmFsbHkgdXBkYXRlIHRoZSBpbWFnZSdzIGBkYXRhYCBtZW1iZXIgd2l0aCBhIG5ldyBpbWFnZS5cbiAqXG4gKiBJZiB0aGUgbWV0aG9kIHVwZGF0ZXMgdGhlIGltYWdlIGl0IG11c3QgcmV0dXJuIGB0cnVlYCB0byBjb21taXQgdGhlIGNoYW5nZS5cbiAqIElmIHRoZSBtZXRob2QgcmV0dXJucyBgZmFsc2VgIG9yIG5vdGhpbmcgdGhlIGltYWdlIGlzIGFzc3VtZWQgdG8gbm90IGhhdmUgY2hhbmdlZC5cbiAqXG4gKiBJZiB1cGRhdGVzIGFyZSBpbmZyZXF1ZW50IGl0IG1heWJlIGVhc2llciB0byB1c2Uge0BsaW5rIE1hcCN1cGRhdGVJbWFnZX0gdG8gdXBkYXRlXG4gKiB0aGUgaW1hZ2UgaW5zdGVhZCBvZiBpbXBsZW1lbnRpbmcgdGhpcyBtZXRob2QuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgU3R5bGVJbWFnZUludGVyZmFjZVxuICogQGluc3RhbmNlXG4gKiBAbmFtZSByZW5kZXJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGlzIG1ldGhvZCB1cGRhdGVkIHRoZSBpbWFnZS4gYGZhbHNlYCBpZiB0aGUgaW1hZ2Ugd2FzIG5vdCBjaGFuZ2VkLlxuICovXG5cbi8qKlxuICogT3B0aW9uYWwgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBsYXllciBoYXMgYmVlbiBhZGRlZCB0byB0aGUgTWFwIHdpdGgge0BsaW5rIE1hcCNhZGRJbWFnZX0uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgU3R5bGVJbWFnZUludGVyZmFjZVxuICogQGluc3RhbmNlXG4gKiBAbmFtZSBvbkFkZFxuICogQHBhcmFtIHtNYXB9IG1hcCBUaGUgTWFwIHRoaXMgY3VzdG9tIGxheWVyIHdhcyBqdXN0IGFkZGVkIHRvLlxuICovXG5cbi8qKlxuICogT3B0aW9uYWwgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBpY29uIGlzIHJlbW92ZWQgZnJvbSB0aGUgbWFwIHdpdGgge0BsaW5rIE1hcCNyZW1vdmVJbWFnZX0uXG4gKiBUaGlzIGdpdmVzIHRoZSBpbWFnZSBhIGNoYW5jZSB0byBjbGVhbiB1cCByZXNvdXJjZXMgYW5kIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBTdHlsZUltYWdlSW50ZXJmYWNlXG4gKiBAaW5zdGFuY2VcbiAqIEBuYW1lIG9uUmVtb3ZlXG4gKi9cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBwb3RwYWNrIGZyb20gJ3BvdHBhY2snO1xuXG5pbXBvcnQge0V2ZW50LCBFcnJvckV2ZW50LCBFdmVudGVkfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IHtSR0JBSW1hZ2V9IGZyb20gJy4uL3V0aWwvaW1hZ2UnO1xuaW1wb3J0IHtJbWFnZVBvc2l0aW9ufSBmcm9tICcuL2ltYWdlX2F0bGFzJztcbmltcG9ydCBUZXh0dXJlIGZyb20gJy4vdGV4dHVyZSc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQge3JlbmRlclN0eWxlSW1hZ2V9IGZyb20gJy4uL3N0eWxlL3N0eWxlX2ltYWdlJztcbmltcG9ydCB7d2Fybk9uY2V9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB0eXBlIHtTdHlsZUltYWdlfSBmcm9tICcuLi9zdHlsZS9zdHlsZV9pbWFnZSc7XG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUge0Jpbn0gZnJvbSAncG90cGFjayc7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcblxudHlwZSBQYXR0ZXJuID0ge1xuICAgIGJpbjogQmluLFxuICAgIHBvc2l0aW9uOiBJbWFnZVBvc2l0aW9uXG59O1xuXG4vLyBXaGVuIGNvcGllZCBpbnRvIHRoZSBhdGxhcyB0ZXh0dXJlLCBpbWFnZSBkYXRhIGlzIHBhZGRlZCBieSBvbmUgcGl4ZWwgb24gZWFjaCBzaWRlLiBJY29uXG4vLyBpbWFnZXMgYXJlIHBhZGRlZCB3aXRoIGZ1bGx5IHRyYW5zcGFyZW50IHBpeGVscywgd2hpbGUgcGF0dGVybiBpbWFnZXMgYXJlIHBhZGRlZCB3aXRoIGFcbi8vIGNvcHkgb2YgdGhlIGltYWdlIGRhdGEgd3JhcHBlZCBmcm9tIHRoZSBvcHBvc2l0ZSBzaWRlLiBJbiBib3RoIGNhc2VzLCB0aGlzIGVuc3VyZXMgdGhlXG4vLyBjb3JyZWN0IGJlaGF2aW9yIG9mIEdMX0xJTkVBUiB0ZXh0dXJlIHNhbXBsaW5nIG1vZGUuXG5jb25zdCBwYWRkaW5nID0gMTtcblxuLypcbiAgICBJbWFnZU1hbmFnZXIgZG9lcyB0aHJlZSB0aGluZ3M6XG5cbiAgICAgICAgMS4gVHJhY2tzIHJlcXVlc3RzIGZvciBpY29uIGltYWdlcyBmcm9tIHRpbGUgd29ya2VycyBhbmQgc2VuZHMgcmVzcG9uc2VzIHdoZW4gdGhlIHJlcXVlc3RzIGFyZSBmdWxmaWxsZWQuXG4gICAgICAgIDIuIEJ1aWxkcyBhIHRleHR1cmUgYXRsYXMgZm9yIHBhdHRlcm4gaW1hZ2VzLlxuICAgICAgICAzLiBSZXJlbmRlcnMgcmVuZGVyYWJsZSBpbWFnZXMgb25jZSBwZXIgZnJhbWVcblxuICAgIFRoZXNlIGFyZSBkaXNwYXJhdGUgcmVzcG9uc2liaWxpdGllcyBhbmQgc2hvdWxkIGV2ZW50dWFsbHkgYmUgaGFuZGxlZCBieSBkaWZmZXJlbnQgY2xhc3Nlcy4gV2hlbiB3ZSBpbXBsZW1lbnRcbiAgICBkYXRhLWRyaXZlbiBzdXBwb3J0IGZvciBgKi1wYXR0ZXJuYCwgd2UnbGwgbGlrZWx5IHVzZSBwZXItYnVja2V0IHBhdHRlcm4gYXRsYXNlcywgYW5kIHRoYXQgd291bGQgYmUgYSBnb29kIHRpbWVcbiAgICB0byByZWZhY3RvciB0aGlzLlxuKi9cbmNsYXNzIEltYWdlTWFuYWdlciBleHRlbmRzIEV2ZW50ZWQge1xuICAgIGltYWdlczoge1tfOiBzdHJpbmddOiBTdHlsZUltYWdlfTtcbiAgICB1cGRhdGVkSW1hZ2VzOiB7W186IHN0cmluZ106IGJvb2xlYW59O1xuICAgIGNhbGxiYWNrRGlzcGF0Y2hlZFRoaXNGcmFtZToge1tfOiBzdHJpbmddOiBib29sZWFufTtcbiAgICBsb2FkZWQ6IGJvb2xlYW47XG4gICAgcmVxdWVzdG9yczogQXJyYXk8e2lkczogQXJyYXk8c3RyaW5nPiwgY2FsbGJhY2s6IENhbGxiYWNrPHtbXzogc3RyaW5nXTogU3R5bGVJbWFnZX0+fT47XG5cbiAgICBwYXR0ZXJuczoge1tfOiBzdHJpbmddOiBQYXR0ZXJufTtcbiAgICBhdGxhc0ltYWdlOiBSR0JBSW1hZ2U7XG4gICAgYXRsYXNUZXh0dXJlOiA/VGV4dHVyZTtcbiAgICBkaXJ0eTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmltYWdlcyA9IHt9O1xuICAgICAgICB0aGlzLnVwZGF0ZWRJbWFnZXMgPSB7fTtcbiAgICAgICAgdGhpcy5jYWxsYmFja0Rpc3BhdGNoZWRUaGlzRnJhbWUgPSB7fTtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0b3JzID0gW107XG5cbiAgICAgICAgdGhpcy5wYXR0ZXJucyA9IHt9O1xuICAgICAgICB0aGlzLmF0bGFzSW1hZ2UgPSBuZXcgUkdCQUltYWdlKHt3aWR0aDogMSwgaGVpZ2h0OiAxfSk7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgIH1cblxuICAgIGlzTG9hZGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkZWQ7XG4gICAgfVxuXG4gICAgc2V0TG9hZGVkKGxvYWRlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5sb2FkZWQgPT09IGxvYWRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sb2FkZWQgPSBsb2FkZWQ7XG5cbiAgICAgICAgaWYgKGxvYWRlZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB7aWRzLCBjYWxsYmFja30gb2YgdGhpcy5yZXF1ZXN0b3JzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGlkcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0b3JzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRJbWFnZShpZDogc3RyaW5nKTogP1N0eWxlSW1hZ2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZXNbaWRdO1xuICAgIH1cblxuICAgIGFkZEltYWdlKGlkOiBzdHJpbmcsIGltYWdlOiBTdHlsZUltYWdlKSB7XG4gICAgICAgIGFzc2VydCghdGhpcy5pbWFnZXNbaWRdKTtcbiAgICAgICAgaWYgKHRoaXMuX3ZhbGlkYXRlKGlkLCBpbWFnZSkpIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzW2lkXSA9IGltYWdlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlKGlkOiBzdHJpbmcsIGltYWdlOiBTdHlsZUltYWdlKSB7XG4gICAgICAgIGxldCB2YWxpZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5fdmFsaWRhdGVTdHJldGNoKGltYWdlLnN0cmV0Y2hYLCBpbWFnZS5kYXRhICYmIGltYWdlLmRhdGEud2lkdGgpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBJbWFnZSBcIiR7aWR9XCIgaGFzIGludmFsaWQgXCJzdHJldGNoWFwiIHZhbHVlYCkpKTtcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl92YWxpZGF0ZVN0cmV0Y2goaW1hZ2Uuc3RyZXRjaFksIGltYWdlLmRhdGEgJiYgaW1hZ2UuZGF0YS5oZWlnaHQpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBJbWFnZSBcIiR7aWR9XCIgaGFzIGludmFsaWQgXCJzdHJldGNoWVwiIHZhbHVlYCkpKTtcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl92YWxpZGF0ZUNvbnRlbnQoaW1hZ2UuY29udGVudCwgaW1hZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBJbWFnZSBcIiR7aWR9XCIgaGFzIGludmFsaWQgXCJjb250ZW50XCIgdmFsdWVgKSkpO1xuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlU3RyZXRjaChzdHJldGNoOiA/QXJyYXk8W251bWJlciwgbnVtYmVyXT4gfCB2b2lkLCBzaXplOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCFzdHJldGNoKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgbGV0IGxhc3QgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2Ygc3RyZXRjaCkge1xuICAgICAgICAgICAgaWYgKHBhcnRbMF0gPCBsYXN0IHx8IHBhcnRbMV0gPCBwYXJ0WzBdIHx8IHNpemUgPCBwYXJ0WzFdKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBsYXN0ID0gcGFydFsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBfdmFsaWRhdGVDb250ZW50KGNvbnRlbnQ6ID9bbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSB8IHZvaWQsIGltYWdlOiBTdHlsZUltYWdlKSB7XG4gICAgICAgIGlmICghY29udGVudCkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChjb250ZW50Lmxlbmd0aCAhPT0gNCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoY29udGVudFswXSA8IDAgfHwgaW1hZ2UuZGF0YS53aWR0aCA8IGNvbnRlbnRbMF0pIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGNvbnRlbnRbMV0gPCAwIHx8IGltYWdlLmRhdGEuaGVpZ2h0IDwgY29udGVudFsxXSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoY29udGVudFsyXSA8IDAgfHwgaW1hZ2UuZGF0YS53aWR0aCA8IGNvbnRlbnRbMl0pIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGNvbnRlbnRbM10gPCAwIHx8IGltYWdlLmRhdGEuaGVpZ2h0IDwgY29udGVudFszXSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoY29udGVudFsyXSA8IGNvbnRlbnRbMF0pIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGNvbnRlbnRbM10gPCBjb250ZW50WzFdKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHVwZGF0ZUltYWdlKGlkOiBzdHJpbmcsIGltYWdlOiBTdHlsZUltYWdlKSB7XG4gICAgICAgIGNvbnN0IG9sZEltYWdlID0gdGhpcy5pbWFnZXNbaWRdO1xuICAgICAgICBhc3NlcnQob2xkSW1hZ2UpO1xuICAgICAgICBhc3NlcnQob2xkSW1hZ2UuZGF0YS53aWR0aCA9PT0gaW1hZ2UuZGF0YS53aWR0aCk7XG4gICAgICAgIGFzc2VydChvbGRJbWFnZS5kYXRhLmhlaWdodCA9PT0gaW1hZ2UuZGF0YS5oZWlnaHQpO1xuICAgICAgICBpbWFnZS52ZXJzaW9uID0gb2xkSW1hZ2UudmVyc2lvbiArIDE7XG4gICAgICAgIHRoaXMuaW1hZ2VzW2lkXSA9IGltYWdlO1xuICAgICAgICB0aGlzLnVwZGF0ZWRJbWFnZXNbaWRdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZW1vdmVJbWFnZShpZDogc3RyaW5nKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLmltYWdlc1tpZF0pO1xuICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuaW1hZ2VzW2lkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW1hZ2VzW2lkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMucGF0dGVybnNbaWRdO1xuXG4gICAgICAgIGlmIChpbWFnZS51c2VySW1hZ2UgJiYgaW1hZ2UudXNlckltYWdlLm9uUmVtb3ZlKSB7XG4gICAgICAgICAgICBpbWFnZS51c2VySW1hZ2Uub25SZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxpc3RJbWFnZXMoKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmltYWdlcyk7XG4gICAgfVxuXG4gICAgZ2V0SW1hZ2VzKGlkczogQXJyYXk8c3RyaW5nPiwgY2FsbGJhY2s6IENhbGxiYWNrPHtbXzogc3RyaW5nXTogU3R5bGVJbWFnZX0+KSB7XG4gICAgICAgIC8vIElmIHRoZSBzcHJpdGUgaGFzIGJlZW4gbG9hZGVkLCBvciBpZiBhbGwgdGhlIGljb24gZGVwZW5kZW5jaWVzIGFyZSBhbHJlYWR5IHByZXNlbnRcbiAgICAgICAgLy8gKGkuZS4gaWYgdGhleSd2ZSBiZWVuIGFkZGVkIHZpYSBydW50aW1lIHN0eWxpbmcpLCB0aGVuIG5vdGlmeSB0aGUgcmVxdWVzdG9yIGltbWVkaWF0ZWx5LlxuICAgICAgICAvLyBPdGhlcndpc2UsIGRlbGF5IG5vdGlmaWNhdGlvbiB1bnRpbCB0aGUgc3ByaXRlIGlzIGxvYWRlZC4gQXQgdGhhdCBwb2ludCwgaWYgYW55IG9mIHRoZVxuICAgICAgICAvLyBkZXBlbmRlbmNpZXMgYXJlIHN0aWxsIHVuYXZhaWxhYmxlLCB3ZSdsbCBqdXN0IGFzc3VtZSB0aGV5IGFyZSBwZXJtYW5lbnRseSBtaXNzaW5nLlxuICAgICAgICBsZXQgaGFzQWxsRGVwZW5kZW5jaWVzID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9hZGVkKCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgb2YgaWRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmltYWdlc1tpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzQWxsRGVwZW5kZW5jaWVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzTG9hZGVkKCkgfHwgaGFzQWxsRGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoaWRzLCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RvcnMucHVzaCh7aWRzLCBjYWxsYmFja30pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX25vdGlmeShpZHM6IEFycmF5PHN0cmluZz4sIGNhbGxiYWNrOiBDYWxsYmFjazx7W186IHN0cmluZ106IFN0eWxlSW1hZ2V9Pikge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHt9O1xuXG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgaWRzKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaW1hZ2VzW2lkXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3N0eWxlaW1hZ2VtaXNzaW5nJywge2lkfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSB0aGlzLmltYWdlc1tpZF07XG4gICAgICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAvLyBDbG9uZSB0aGUgaW1hZ2Ugc28gdGhhdCBvdXIgb3duIGNvcHkgb2YgaXRzIEFycmF5QnVmZmVyIGRvZXNuJ3QgZ2V0IHRyYW5zZmVycmVkLlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlW2lkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogaW1hZ2UuZGF0YS5jbG9uZSgpLFxuICAgICAgICAgICAgICAgICAgICBwaXhlbFJhdGlvOiBpbWFnZS5waXhlbFJhdGlvLFxuICAgICAgICAgICAgICAgICAgICBzZGY6IGltYWdlLnNkZixcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogaW1hZ2UudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgc3RyZXRjaFg6IGltYWdlLnN0cmV0Y2hYLFxuICAgICAgICAgICAgICAgICAgICBzdHJldGNoWTogaW1hZ2Uuc3RyZXRjaFksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGltYWdlLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGhhc1JlbmRlckNhbGxiYWNrOiBCb29sZWFuKGltYWdlLnVzZXJJbWFnZSAmJiBpbWFnZS51c2VySW1hZ2UucmVuZGVyKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdhcm5PbmNlKGBJbWFnZSBcIiR7aWR9XCIgY291bGQgbm90IGJlIGxvYWRlZC4gUGxlYXNlIG1ha2Ugc3VyZSB5b3UgaGF2ZSBhZGRlZCB0aGUgaW1hZ2Ugd2l0aCBtYXAuYWRkSW1hZ2UoKSBvciBhIFwic3ByaXRlXCIgcHJvcGVydHkgaW4geW91ciBzdHlsZS4gWW91IGNhbiBwcm92aWRlIG1pc3NpbmcgaW1hZ2VzIGJ5IGxpc3RlbmluZyBmb3IgdGhlIFwic3R5bGVpbWFnZW1pc3NpbmdcIiBtYXAgZXZlbnQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgfVxuXG4gICAgLy8gUGF0dGVybiBzdHVmZlxuXG4gICAgZ2V0UGl4ZWxTaXplKCkge1xuICAgICAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSB0aGlzLmF0bGFzSW1hZ2U7XG4gICAgICAgIHJldHVybiB7d2lkdGgsIGhlaWdodH07XG4gICAgfVxuXG4gICAgZ2V0UGF0dGVybihpZDogc3RyaW5nKTogP0ltYWdlUG9zaXRpb24ge1xuICAgICAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5wYXR0ZXJuc1tpZF07XG5cbiAgICAgICAgY29uc3QgaW1hZ2UgPSB0aGlzLmdldEltYWdlKGlkKTtcbiAgICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF0dGVybiAmJiBwYXR0ZXJuLnBvc2l0aW9uLnZlcnNpb24gPT09IGltYWdlLnZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXR0ZXJuLnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXR0ZXJuKSB7XG4gICAgICAgICAgICBjb25zdCB3ID0gaW1hZ2UuZGF0YS53aWR0aCArIHBhZGRpbmcgKiAyO1xuICAgICAgICAgICAgY29uc3QgaCA9IGltYWdlLmRhdGEuaGVpZ2h0ICsgcGFkZGluZyAqIDI7XG4gICAgICAgICAgICBjb25zdCBiaW4gPSB7dywgaCwgeDogMCwgeTogMH07XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBJbWFnZVBvc2l0aW9uKGJpbiwgaW1hZ2UpO1xuICAgICAgICAgICAgdGhpcy5wYXR0ZXJuc1tpZF0gPSB7YmluLCBwb3NpdGlvbn07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXR0ZXJuLnBvc2l0aW9uLnZlcnNpb24gPSBpbWFnZS52ZXJzaW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlUGF0dGVybkF0bGFzKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGF0dGVybnNbaWRdLnBvc2l0aW9uO1xuICAgIH1cblxuICAgIGJpbmQoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgICAgIGlmICghdGhpcy5hdGxhc1RleHR1cmUpIHtcbiAgICAgICAgICAgIHRoaXMuYXRsYXNUZXh0dXJlID0gbmV3IFRleHR1cmUoY29udGV4dCwgdGhpcy5hdGxhc0ltYWdlLCBnbC5SR0JBKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLmF0bGFzVGV4dHVyZS51cGRhdGUodGhpcy5hdGxhc0ltYWdlKTtcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXRsYXNUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICB9XG5cbiAgICBfdXBkYXRlUGF0dGVybkF0bGFzKCkge1xuICAgICAgICBjb25zdCBiaW5zID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5wYXR0ZXJucykge1xuICAgICAgICAgICAgYmlucy5wdXNoKHRoaXMucGF0dGVybnNbaWRdLmJpbik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7dywgaH0gPSBwb3RwYWNrKGJpbnMpO1xuXG4gICAgICAgIGNvbnN0IGRzdCA9IHRoaXMuYXRsYXNJbWFnZTtcbiAgICAgICAgZHN0LnJlc2l6ZSh7d2lkdGg6IHcgfHwgMSwgaGVpZ2h0OiBoIHx8IDF9KTtcblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMucGF0dGVybnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHtiaW59ID0gdGhpcy5wYXR0ZXJuc1tpZF07XG4gICAgICAgICAgICBjb25zdCB4ID0gYmluLnggKyBwYWRkaW5nO1xuICAgICAgICAgICAgY29uc3QgeSA9IGJpbi55ICsgcGFkZGluZztcbiAgICAgICAgICAgIGNvbnN0IHNyYyA9IHRoaXMuaW1hZ2VzW2lkXS5kYXRhO1xuICAgICAgICAgICAgY29uc3QgdyA9IHNyYy53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGggPSBzcmMuaGVpZ2h0O1xuXG4gICAgICAgICAgICBSR0JBSW1hZ2UuY29weShzcmMsIGRzdCwge3g6IDAsIHk6IDB9LCB7eCwgeX0sIHt3aWR0aDogdywgaGVpZ2h0OiBofSk7XG5cbiAgICAgICAgICAgIC8vIEFkZCAxIHBpeGVsIHdyYXBwZWQgcGFkZGluZyBvbiBlYWNoIHNpZGUgb2YgdGhlIGltYWdlLlxuICAgICAgICAgICAgUkdCQUltYWdlLmNvcHkoc3JjLCBkc3QsIHt4OiAwLCB5OiBoIC0gMX0sIHt4LCB5OiB5IC0gMX0sIHt3aWR0aDogdywgaGVpZ2h0OiAxfSk7IC8vIFRcbiAgICAgICAgICAgIFJHQkFJbWFnZS5jb3B5KHNyYywgZHN0LCB7eDogMCwgeTogICAgIDB9LCB7eCwgeTogeSArIGh9LCB7d2lkdGg6IHcsIGhlaWdodDogMX0pOyAvLyBCXG4gICAgICAgICAgICBSR0JBSW1hZ2UuY29weShzcmMsIGRzdCwge3g6IHcgLSAxLCB5OiAwfSwge3g6IHggLSAxLCB5fSwge3dpZHRoOiAxLCBoZWlnaHQ6IGh9KTsgLy8gTFxuICAgICAgICAgICAgUkdCQUltYWdlLmNvcHkoc3JjLCBkc3QsIHt4OiAwLCAgICAgeTogMH0sIHt4OiB4ICsgdywgeX0sIHt3aWR0aDogMSwgaGVpZ2h0OiBofSk7IC8vIFJcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgIH1cblxuICAgIGJlZ2luRnJhbWUoKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tEaXNwYXRjaGVkVGhpc0ZyYW1lID0ge307XG4gICAgfVxuXG4gICAgZGlzcGF0Y2hSZW5kZXJDYWxsYmFja3MoaWRzOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgaWRzKSB7XG5cbiAgICAgICAgICAgIC8vIHRoZSBjYWxsYmFjayBmb3IgdGhlIGltYWdlIHdhcyBhbHJlYWR5IGRpc3BhdGNoZWQgZm9yIGEgZGlmZmVyZW50IGZyYW1lXG4gICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFja0Rpc3BhdGNoZWRUaGlzRnJhbWVbaWRdKSBjb250aW51ZTtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tEaXNwYXRjaGVkVGhpc0ZyYW1lW2lkXSA9IHRydWU7XG5cbiAgICAgICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5pbWFnZXNbaWRdO1xuICAgICAgICAgICAgYXNzZXJ0KGltYWdlKTtcblxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZCA9IHJlbmRlclN0eWxlSW1hZ2UoaW1hZ2UpO1xuICAgICAgICAgICAgaWYgKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUltYWdlKGlkLCBpbWFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUaW55U0RGO1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IFRpbnlTREY7XG5cbnZhciBJTkYgPSAxZTIwO1xuXG5mdW5jdGlvbiBUaW55U0RGKGZvbnRTaXplLCBidWZmZXIsIHJhZGl1cywgY3V0b2ZmLCBmb250RmFtaWx5LCBmb250V2VpZ2h0KSB7XG4gICAgdGhpcy5mb250U2l6ZSA9IGZvbnRTaXplIHx8IDI0O1xuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyID09PSB1bmRlZmluZWQgPyAzIDogYnVmZmVyO1xuICAgIHRoaXMuY3V0b2ZmID0gY3V0b2ZmIHx8IDAuMjU7XG4gICAgdGhpcy5mb250RmFtaWx5ID0gZm9udEZhbWlseSB8fCAnc2Fucy1zZXJpZic7XG4gICAgdGhpcy5mb250V2VpZ2h0ID0gZm9udFdlaWdodCB8fCAnbm9ybWFsJztcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cyB8fCA4O1xuICAgIHZhciBzaXplID0gdGhpcy5zaXplID0gdGhpcy5mb250U2l6ZSArIHRoaXMuYnVmZmVyICogMjtcblxuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLmNhbnZhcy5oZWlnaHQgPSBzaXplO1xuXG4gICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMuY3R4LmZvbnQgPSB0aGlzLmZvbnRXZWlnaHQgKyAnICcgKyB0aGlzLmZvbnRTaXplICsgJ3B4ICcgKyB0aGlzLmZvbnRGYW1pbHk7XG4gICAgdGhpcy5jdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcblxuICAgIC8vIHRlbXBvcmFyeSBhcnJheXMgZm9yIHRoZSBkaXN0YW5jZSB0cmFuc2Zvcm1cbiAgICB0aGlzLmdyaWRPdXRlciA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSAqIHNpemUpO1xuICAgIHRoaXMuZ3JpZElubmVyID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogc2l6ZSk7XG4gICAgdGhpcy5mID0gbmV3IEZsb2F0NjRBcnJheShzaXplKTtcbiAgICB0aGlzLmQgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUpO1xuICAgIHRoaXMueiA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSArIDEpO1xuICAgIHRoaXMudiA9IG5ldyBJbnQxNkFycmF5KHNpemUpO1xuXG4gICAgLy8gaGFjayBhcm91bmQgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzM3ODUyXG4gICAgdGhpcy5taWRkbGUgPSBNYXRoLnJvdW5kKChzaXplIC8gMikgKiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdHZWNrby8nKSA+PSAwID8gMS4yIDogMSkpO1xufVxuXG5UaW55U0RGLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKGNoYXIpIHtcbiAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5zaXplLCB0aGlzLnNpemUpO1xuICAgIHRoaXMuY3R4LmZpbGxUZXh0KGNoYXIsIHRoaXMuYnVmZmVyLCB0aGlzLm1pZGRsZSk7XG5cbiAgICB2YXIgaW1nRGF0YSA9IHRoaXMuY3R4LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLnNpemUsIHRoaXMuc2l6ZSk7XG4gICAgdmFyIGFscGhhQ2hhbm5lbCA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh0aGlzLnNpemUgKiB0aGlzLnNpemUpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnNpemUgKiB0aGlzLnNpemU7IGkrKykge1xuICAgICAgICB2YXIgYSA9IGltZ0RhdGEuZGF0YVtpICogNCArIDNdIC8gMjU1OyAvLyBhbHBoYSB2YWx1ZVxuICAgICAgICB0aGlzLmdyaWRPdXRlcltpXSA9IGEgPT09IDEgPyAwIDogYSA9PT0gMCA/IElORiA6IE1hdGgucG93KE1hdGgubWF4KDAsIDAuNSAtIGEpLCAyKTtcbiAgICAgICAgdGhpcy5ncmlkSW5uZXJbaV0gPSBhID09PSAxID8gSU5GIDogYSA9PT0gMCA/IDAgOiBNYXRoLnBvdyhNYXRoLm1heCgwLCBhIC0gMC41KSwgMik7XG4gICAgfVxuXG4gICAgZWR0KHRoaXMuZ3JpZE91dGVyLCB0aGlzLnNpemUsIHRoaXMuc2l6ZSwgdGhpcy5mLCB0aGlzLmQsIHRoaXMudiwgdGhpcy56KTtcbiAgICBlZHQodGhpcy5ncmlkSW5uZXIsIHRoaXMuc2l6ZSwgdGhpcy5zaXplLCB0aGlzLmYsIHRoaXMuZCwgdGhpcy52LCB0aGlzLnopO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2l6ZSAqIHRoaXMuc2l6ZTsgaSsrKSB7XG4gICAgICAgIHZhciBkID0gdGhpcy5ncmlkT3V0ZXJbaV0gLSB0aGlzLmdyaWRJbm5lcltpXTtcbiAgICAgICAgYWxwaGFDaGFubmVsW2ldID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDI1NSAtIDI1NSAqIChkIC8gdGhpcy5yYWRpdXMgKyB0aGlzLmN1dG9mZikpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFscGhhQ2hhbm5lbDtcbn07XG5cbi8vIDJEIEV1Y2xpZGVhbiBkaXN0YW5jZSB0cmFuc2Zvcm0gYnkgRmVsemVuc3p3YWxiICYgSHV0dGVubG9jaGVyIGh0dHBzOi8vY3MuYnJvd24uZWR1L35wZmYvcGFwZXJzL2R0LWZpbmFsLnBkZlxuZnVuY3Rpb24gZWR0KGRhdGEsIHdpZHRoLCBoZWlnaHQsIGYsIGQsIHYsIHopIHtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgZlt5XSA9IGRhdGFbeSAqIHdpZHRoICsgeF07XG4gICAgICAgIH1cbiAgICAgICAgZWR0MWQoZiwgZCwgdiwgeiwgaGVpZ2h0KTtcbiAgICAgICAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICBkYXRhW3kgKiB3aWR0aCArIHhdID0gZFt5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgZm9yICh4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGZbeF0gPSBkYXRhW3kgKiB3aWR0aCArIHhdO1xuICAgICAgICB9XG4gICAgICAgIGVkdDFkKGYsIGQsIHYsIHosIHdpZHRoKTtcbiAgICAgICAgZm9yICh4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGRhdGFbeSAqIHdpZHRoICsgeF0gPSBNYXRoLnNxcnQoZFt4XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIDFEIHNxdWFyZWQgZGlzdGFuY2UgdHJhbnNmb3JtXG5mdW5jdGlvbiBlZHQxZChmLCBkLCB2LCB6LCBuKSB7XG4gICAgdlswXSA9IDA7XG4gICAgelswXSA9IC1JTkY7XG4gICAgelsxXSA9ICtJTkY7XG5cbiAgICBmb3IgKHZhciBxID0gMSwgayA9IDA7IHEgPCBuOyBxKyspIHtcbiAgICAgICAgdmFyIHMgPSAoKGZbcV0gKyBxICogcSkgLSAoZlt2W2tdXSArIHZba10gKiB2W2tdKSkgLyAoMiAqIHEgLSAyICogdltrXSk7XG4gICAgICAgIHdoaWxlIChzIDw9IHpba10pIHtcbiAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgIHMgPSAoKGZbcV0gKyBxICogcSkgLSAoZlt2W2tdXSArIHZba10gKiB2W2tdKSkgLyAoMiAqIHEgLSAyICogdltrXSk7XG4gICAgICAgIH1cbiAgICAgICAgaysrO1xuICAgICAgICB2W2tdID0gcTtcbiAgICAgICAgeltrXSA9IHM7XG4gICAgICAgIHpbayArIDFdID0gK0lORjtcbiAgICB9XG5cbiAgICBmb3IgKHEgPSAwLCBrID0gMDsgcSA8IG47IHErKykge1xuICAgICAgICB3aGlsZSAoeltrICsgMV0gPCBxKSBrKys7XG4gICAgICAgIGRbcV0gPSAocSAtIHZba10pICogKHEgLSB2W2tdKSArIGZbdltrXV07XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IGxvYWRHbHlwaFJhbmdlIGZyb20gJy4uL3N0eWxlL2xvYWRfZ2x5cGhfcmFuZ2UnO1xuXG5pbXBvcnQgVGlueVNERiBmcm9tICdAbWFwYm94L3Rpbnktc2RmJztcbmltcG9ydCBpc0NoYXIgZnJvbSAnLi4vdXRpbC9pc19jaGFyX2luX3VuaWNvZGVfYmxvY2snO1xuaW1wb3J0IHthc3luY0FsbH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7QWxwaGFJbWFnZX0gZnJvbSAnLi4vdXRpbC9pbWFnZSc7XG5cbmltcG9ydCB0eXBlIHtTdHlsZUdseXBofSBmcm9tICcuLi9zdHlsZS9zdHlsZV9nbHlwaCc7XG5pbXBvcnQgdHlwZSB7UmVxdWVzdE1hbmFnZXJ9IGZyb20gJy4uL3V0aWwvbWFwYm94JztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuXG50eXBlIEVudHJ5ID0ge1xuICAgIC8vIG51bGwgbWVhbnMgd2UndmUgcmVxdWVzdGVkIHRoZSByYW5nZSwgYnV0IHRoZSBnbHlwaCB3YXNuJ3QgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdC5cbiAgICBnbHlwaHM6IHtbaWQ6IG51bWJlcl06IFN0eWxlR2x5cGggfCBudWxsfSxcbiAgICByZXF1ZXN0czoge1tyYW5nZTogbnVtYmVyXTogQXJyYXk8Q2FsbGJhY2s8e1tfOiBudW1iZXJdOiBTdHlsZUdseXBoIHwgbnVsbH0+Pn0sXG4gICAgcmFuZ2VzOiB7W3JhbmdlOiBudW1iZXJdOiBib29sZWFuIHwgbnVsbH0sXG4gICAgdGlueVNERj86IFRpbnlTREZcbn07XG5cbmNsYXNzIEdseXBoTWFuYWdlciB7XG4gICAgcmVxdWVzdE1hbmFnZXI6IFJlcXVlc3RNYW5hZ2VyO1xuICAgIGxvY2FsSWRlb2dyYXBoRm9udEZhbWlseTogP3N0cmluZztcbiAgICBlbnRyaWVzOiB7W186IHN0cmluZ106IEVudHJ5fTtcbiAgICB1cmw6ID9zdHJpbmc7XG5cbiAgICAvLyBleHBvc2VkIGFzIHN0YXRpY3MgdG8gZW5hYmxlIHN0dWJiaW5nIGluIHVuaXQgdGVzdHNcbiAgICBzdGF0aWMgbG9hZEdseXBoUmFuZ2U6IHR5cGVvZiBsb2FkR2x5cGhSYW5nZTtcbiAgICBzdGF0aWMgVGlueVNERjogQ2xhc3M8VGlueVNERj47XG5cbiAgICBjb25zdHJ1Y3RvcihyZXF1ZXN0TWFuYWdlcjogUmVxdWVzdE1hbmFnZXIsIGxvY2FsSWRlb2dyYXBoRm9udEZhbWlseTogP3N0cmluZykge1xuICAgICAgICB0aGlzLnJlcXVlc3RNYW5hZ2VyID0gcmVxdWVzdE1hbmFnZXI7XG4gICAgICAgIHRoaXMubG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5ID0gbG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5O1xuICAgICAgICB0aGlzLmVudHJpZXMgPSB7fTtcbiAgICB9XG5cbiAgICBzZXRVUkwodXJsOiA/c3RyaW5nKSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgIH1cblxuICAgIGdldEdseXBocyhnbHlwaHM6IHtbc3RhY2s6IHN0cmluZ106IEFycmF5PG51bWJlcj59LCBjYWxsYmFjazogQ2FsbGJhY2s8e1tzdGFjazogc3RyaW5nXToge1tpZDogbnVtYmVyXTogP1N0eWxlR2x5cGh9fT4pIHtcbiAgICAgICAgY29uc3QgYWxsID0gW107XG5cbiAgICAgICAgZm9yIChjb25zdCBzdGFjayBpbiBnbHlwaHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgb2YgZ2x5cGhzW3N0YWNrXSkge1xuICAgICAgICAgICAgICAgIGFsbC5wdXNoKHtzdGFjaywgaWR9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jQWxsKGFsbCwgKHtzdGFjaywgaWR9LCBjYWxsYmFjazogQ2FsbGJhY2s8e3N0YWNrOiBzdHJpbmcsIGlkOiBudW1iZXIsIGdseXBoOiA/U3R5bGVHbHlwaH0+KSA9PiB7XG4gICAgICAgICAgICBsZXQgZW50cnkgPSB0aGlzLmVudHJpZXNbc3RhY2tdO1xuICAgICAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5lbnRyaWVzW3N0YWNrXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHM6IHt9LFxuICAgICAgICAgICAgICAgICAgICByYW5nZXM6IHt9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGdseXBoID0gZW50cnkuZ2x5cGhzW2lkXTtcbiAgICAgICAgICAgIGlmIChnbHlwaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwge3N0YWNrLCBpZCwgZ2x5cGh9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdseXBoID0gdGhpcy5fdGlueVNERihlbnRyeSwgc3RhY2ssIGlkKTtcbiAgICAgICAgICAgIGlmIChnbHlwaCkge1xuICAgICAgICAgICAgICAgIGVudHJ5LmdseXBoc1tpZF0gPSBnbHlwaDtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7c3RhY2ssIGlkLCBnbHlwaH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBNYXRoLmZsb29yKGlkIC8gMjU2KTtcbiAgICAgICAgICAgIGlmIChyYW5nZSAqIDI1NiA+IDY1NTM1KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCdnbHlwaHMgPiA2NTUzNSBub3Qgc3VwcG9ydGVkJykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVudHJ5LnJhbmdlc1tyYW5nZV0pIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7c3RhY2ssIGlkLCBnbHlwaH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJlcXVlc3RzID0gZW50cnkucmVxdWVzdHNbcmFuZ2VdO1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RzID0gZW50cnkucmVxdWVzdHNbcmFuZ2VdID0gW107XG4gICAgICAgICAgICAgICAgR2x5cGhNYW5hZ2VyLmxvYWRHbHlwaFJhbmdlKHN0YWNrLCByYW5nZSwgKHRoaXMudXJsOiBhbnkpLCB0aGlzLnJlcXVlc3RNYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgICAoZXJyLCByZXNwb25zZTogP3tbXzogbnVtYmVyXTogU3R5bGVHbHlwaCB8IG51bGx9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZG9lc0NoYXJTdXBwb3J0TG9jYWxHbHlwaCgraWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5nbHlwaHNbK2lkXSA9IHJlc3BvbnNlWytpZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucmFuZ2VzW3JhbmdlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNiIG9mIHJlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IoZXJyLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZW50cnkucmVxdWVzdHNbcmFuZ2VdO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVxdWVzdHMucHVzaCgoZXJyLCByZXN1bHQ6ID97W186IG51bWJlcl06IFN0eWxlR2x5cGggfCBudWxsfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7c3RhY2ssIGlkLCBnbHlwaDogcmVzdWx0W2lkXSB8fCBudWxsfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIChlcnIsIGdseXBoczogP0FycmF5PHtzdGFjazogc3RyaW5nLCBpZDogbnVtYmVyLCBnbHlwaDogP1N0eWxlR2x5cGh9PikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdseXBocykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7c3RhY2ssIGlkLCBnbHlwaH0gb2YgZ2x5cGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSBnbHlwaCBzbyB0aGF0IG91ciBvd24gY29weSBvZiBpdHMgQXJyYXlCdWZmZXIgZG9lc24ndCBnZXQgdHJhbnNmZXJyZWQuXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHRbc3RhY2tdIHx8IChyZXN1bHRbc3RhY2tdID0ge30pKVtpZF0gPSBnbHlwaCAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZ2x5cGguaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRtYXA6IGdseXBoLmJpdG1hcC5jbG9uZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0cmljczogZ2x5cGgubWV0cmljc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9kb2VzQ2hhclN1cHBvcnRMb2NhbEdseXBoKGlkOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbmV3LWNhcCAqL1xuICAgICAgICByZXR1cm4gISF0aGlzLmxvY2FsSWRlb2dyYXBoRm9udEZhbWlseSAmJlxuICAgICAgICAgICAgKGlzQ2hhclsnQ0pLIFVuaWZpZWQgSWRlb2dyYXBocyddKGlkKSB8fFxuICAgICAgICAgICAgICAgIGlzQ2hhclsnSGFuZ3VsIFN5bGxhYmxlcyddKGlkKSB8fFxuICAgICAgICAgICAgICAgIGlzQ2hhclsnSGlyYWdhbmEnXShpZCkgfHxcbiAgICAgICAgICAgICAgICBpc0NoYXJbJ0thdGFrYW5hJ10oaWQpKTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuZXctY2FwICovXG4gICAgfVxuXG4gICAgX3RpbnlTREYoZW50cnk6IEVudHJ5LCBzdGFjazogc3RyaW5nLCBpZDogbnVtYmVyKTogP1N0eWxlR2x5cGgge1xuICAgICAgICBjb25zdCBmYW1pbHkgPSB0aGlzLmxvY2FsSWRlb2dyYXBoRm9udEZhbWlseTtcbiAgICAgICAgaWYgKCFmYW1pbHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fZG9lc0NoYXJTdXBwb3J0TG9jYWxHbHlwaChpZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0aW55U0RGID0gZW50cnkudGlueVNERjtcbiAgICAgICAgaWYgKCF0aW55U0RGKSB7XG4gICAgICAgICAgICBsZXQgZm9udFdlaWdodCA9ICc0MDAnO1xuICAgICAgICAgICAgaWYgKC9ib2xkL2kudGVzdChzdGFjaykpIHtcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0ID0gJzkwMCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9tZWRpdW0vaS50ZXN0KHN0YWNrKSkge1xuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQgPSAnNTAwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL2xpZ2h0L2kudGVzdChzdGFjaykpIHtcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0ID0gJzIwMCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aW55U0RGID0gZW50cnkudGlueVNERiA9IG5ldyBHbHlwaE1hbmFnZXIuVGlueVNERigyNCwgMywgOCwgLjI1LCBmYW1pbHksIGZvbnRXZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgYml0bWFwOiBuZXcgQWxwaGFJbWFnZSh7d2lkdGg6IDMwLCBoZWlnaHQ6IDMwfSwgdGlueVNERi5kcmF3KFN0cmluZy5mcm9tQ2hhckNvZGUoaWQpKSksXG4gICAgICAgICAgICBtZXRyaWNzOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDI0LFxuICAgICAgICAgICAgICAgIGhlaWdodDogMjQsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3A6IC04LFxuICAgICAgICAgICAgICAgIGFkdmFuY2U6IDI0XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5HbHlwaE1hbmFnZXIubG9hZEdseXBoUmFuZ2UgPSBsb2FkR2x5cGhSYW5nZTtcbkdseXBoTWFuYWdlci5UaW55U0RGID0gVGlueVNERjtcblxuZXhwb3J0IGRlZmF1bHQgR2x5cGhNYW5hZ2VyO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtnZXRBcnJheUJ1ZmZlciwgUmVzb3VyY2VUeXBlfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuXG5pbXBvcnQgcGFyc2VHbHlwaFBCRiBmcm9tICcuL3BhcnNlX2dseXBoX3BiZic7XG5cbmltcG9ydCB0eXBlIHtTdHlsZUdseXBofSBmcm9tICcuL3N0eWxlX2dseXBoJztcbmltcG9ydCB0eXBlIHtSZXF1ZXN0TWFuYWdlcn0gZnJvbSAnLi4vdXRpbC9tYXBib3gnO1xuaW1wb3J0IHR5cGUge0NhbGxiYWNrfSBmcm9tICcuLi90eXBlcy9jYWxsYmFjayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChmb250c3RhY2s6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxUZW1wbGF0ZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXI6IFJlcXVlc3RNYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IENhbGxiYWNrPHtbXzogbnVtYmVyXTogU3R5bGVHbHlwaCB8IG51bGx9Pikge1xuICAgIGNvbnN0IGJlZ2luID0gcmFuZ2UgKiAyNTY7XG4gICAgY29uc3QgZW5kID0gYmVnaW4gKyAyNTU7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gcmVxdWVzdE1hbmFnZXIudHJhbnNmb3JtUmVxdWVzdChcbiAgICAgICAgcmVxdWVzdE1hbmFnZXIubm9ybWFsaXplR2x5cGhzVVJMKHVybFRlbXBsYXRlKVxuICAgICAgICAgICAgLnJlcGxhY2UoJ3tmb250c3RhY2t9JywgZm9udHN0YWNrKVxuICAgICAgICAgICAgLnJlcGxhY2UoJ3tyYW5nZX0nLCBgJHtiZWdpbn0tJHtlbmR9YCksXG4gICAgICAgIFJlc291cmNlVHlwZS5HbHlwaHMpO1xuXG4gICAgZ2V0QXJyYXlCdWZmZXIocmVxdWVzdCwgKGVycjogP0Vycm9yLCBkYXRhOiA/QXJyYXlCdWZmZXIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBnbHlwaHMgPSB7fTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBnbHlwaCBvZiBwYXJzZUdseXBoUEJGKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgZ2x5cGhzW2dseXBoLmlkXSA9IGdseXBoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBnbHlwaHMpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgc3R5bGVTcGVjIGZyb20gJy4uL3N0eWxlLXNwZWMvcmVmZXJlbmNlL2xhdGVzdCc7XG5cbmltcG9ydCB7ZW5kc1dpdGgsIGV4dGVuZCwgc3BoZXJpY2FsVG9DYXJ0ZXNpYW59IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQge0V2ZW50ZWR9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQge1xuICAgIHZhbGlkYXRlU3R5bGUsXG4gICAgdmFsaWRhdGVMaWdodCxcbiAgICBlbWl0VmFsaWRhdGlvbkVycm9yc1xufSBmcm9tICcuL3ZhbGlkYXRlX3N0eWxlJztcbmltcG9ydCBDb2xvciBmcm9tICcuLi9zdHlsZS1zcGVjL3V0aWwvY29sb3InO1xuaW1wb3J0IHtudW1iZXIgYXMgaW50ZXJwb2xhdGV9IGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9pbnRlcnBvbGF0ZSc7XG5cbmltcG9ydCB0eXBlIHtTdHlsZVByb3BlcnR5U3BlY2lmaWNhdGlvbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy9zdHlsZS1zcGVjJztcbmltcG9ydCB0eXBlIEV2YWx1YXRpb25QYXJhbWV0ZXJzIGZyb20gJy4vZXZhbHVhdGlvbl9wYXJhbWV0ZXJzJztcbmltcG9ydCB0eXBlIHtTdHlsZVNldHRlck9wdGlvbnN9IGZyb20gJy4uL3N0eWxlL3N0eWxlJztcbmltcG9ydCB7UHJvcGVydGllcywgVHJhbnNpdGlvbmFibGUsIFRyYW5zaXRpb25pbmcsIFBvc3NpYmx5RXZhbHVhdGVkLCBEYXRhQ29uc3RhbnRQcm9wZXJ0eX0gZnJvbSAnLi9wcm9wZXJ0aWVzJztcblxuaW1wb3J0IHR5cGUge1xuICAgIFByb3BlcnR5LFxuICAgIFByb3BlcnR5VmFsdWUsXG4gICAgVHJhbnNpdGlvblBhcmFtZXRlcnNcbn0gZnJvbSAnLi9wcm9wZXJ0aWVzJztcblxuaW1wb3J0IHR5cGUge0xpZ2h0U3BlY2lmaWNhdGlvbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5cbnR5cGUgTGlnaHRQb3NpdGlvbiA9IHtcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHo6IG51bWJlclxufTtcblxuY2xhc3MgTGlnaHRQb3NpdGlvblByb3BlcnR5IGltcGxlbWVudHMgUHJvcGVydHk8W251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBMaWdodFBvc2l0aW9uPiB7XG4gICAgc3BlY2lmaWNhdGlvbjogU3R5bGVQcm9wZXJ0eVNwZWNpZmljYXRpb247XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zcGVjaWZpY2F0aW9uID0gc3R5bGVTcGVjLmxpZ2h0LnBvc2l0aW9uO1xuICAgIH1cblxuICAgIHBvc3NpYmx5RXZhbHVhdGUodmFsdWU6IFByb3BlcnR5VmFsdWU8W251bWJlciwgbnVtYmVyLCBudW1iZXJdLCBMaWdodFBvc2l0aW9uPiwgcGFyYW1ldGVyczogRXZhbHVhdGlvblBhcmFtZXRlcnMpOiBMaWdodFBvc2l0aW9uIHtcbiAgICAgICAgcmV0dXJuIHNwaGVyaWNhbFRvQ2FydGVzaWFuKHZhbHVlLmV4cHJlc3Npb24uZXZhbHVhdGUocGFyYW1ldGVycykpO1xuICAgIH1cblxuICAgIGludGVycG9sYXRlKGE6IExpZ2h0UG9zaXRpb24sIGI6IExpZ2h0UG9zaXRpb24sIHQ6IG51bWJlcik6IExpZ2h0UG9zaXRpb24ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogaW50ZXJwb2xhdGUoYS54LCBiLngsIHQpLFxuICAgICAgICAgICAgeTogaW50ZXJwb2xhdGUoYS55LCBiLnksIHQpLFxuICAgICAgICAgICAgejogaW50ZXJwb2xhdGUoYS56LCBiLnosIHQpLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxudHlwZSBQcm9wcyA9IHt8XG4gICAgXCJhbmNob3JcIjogRGF0YUNvbnN0YW50UHJvcGVydHk8XCJtYXBcIiB8IFwidmlld3BvcnRcIj4sXG4gICAgXCJwb3NpdGlvblwiOiBMaWdodFBvc2l0aW9uUHJvcGVydHksXG4gICAgXCJjb2xvclwiOiBEYXRhQ29uc3RhbnRQcm9wZXJ0eTxDb2xvcj4sXG4gICAgXCJpbnRlbnNpdHlcIjogRGF0YUNvbnN0YW50UHJvcGVydHk8bnVtYmVyPixcbnx9O1xuXG5jb25zdCBwcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzPFByb3BzPiA9IG5ldyBQcm9wZXJ0aWVzKHtcbiAgICBcImFuY2hvclwiOiBuZXcgRGF0YUNvbnN0YW50UHJvcGVydHkoc3R5bGVTcGVjLmxpZ2h0LmFuY2hvciksXG4gICAgXCJwb3NpdGlvblwiOiBuZXcgTGlnaHRQb3NpdGlvblByb3BlcnR5KCksXG4gICAgXCJjb2xvclwiOiBuZXcgRGF0YUNvbnN0YW50UHJvcGVydHkoc3R5bGVTcGVjLmxpZ2h0LmNvbG9yKSxcbiAgICBcImludGVuc2l0eVwiOiBuZXcgRGF0YUNvbnN0YW50UHJvcGVydHkoc3R5bGVTcGVjLmxpZ2h0LmludGVuc2l0eSksXG59KTtcblxuY29uc3QgVFJBTlNJVElPTl9TVUZGSVggPSAnLXRyYW5zaXRpb24nO1xuXG4vKlxuICogUmVwcmVzZW50cyB0aGUgbGlnaHQgdXNlZCB0byBsaWdodCBleHRydWRlZCBmZWF0dXJlcy5cbiAqL1xuY2xhc3MgTGlnaHQgZXh0ZW5kcyBFdmVudGVkIHtcbiAgICBfdHJhbnNpdGlvbmFibGU6IFRyYW5zaXRpb25hYmxlPFByb3BzPjtcbiAgICBfdHJhbnNpdGlvbmluZzogVHJhbnNpdGlvbmluZzxQcm9wcz47XG4gICAgcHJvcGVydGllczogUG9zc2libHlFdmFsdWF0ZWQ8UHJvcHM+O1xuXG4gICAgY29uc3RydWN0b3IobGlnaHRPcHRpb25zPzogTGlnaHRTcGVjaWZpY2F0aW9uKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25hYmxlID0gbmV3IFRyYW5zaXRpb25hYmxlKHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLnNldExpZ2h0KGxpZ2h0T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25pbmcgPSB0aGlzLl90cmFuc2l0aW9uYWJsZS51bnRyYW5zaXRpb25lZCgpO1xuICAgIH1cblxuICAgIGdldExpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNpdGlvbmFibGUuc2VyaWFsaXplKCk7XG4gICAgfVxuXG4gICAgc2V0TGlnaHQobGlnaHQ/OiBMaWdodFNwZWNpZmljYXRpb24sIG9wdGlvbnM6IFN0eWxlU2V0dGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLl92YWxpZGF0ZSh2YWxpZGF0ZUxpZ2h0LCBsaWdodCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBsaWdodCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBsaWdodFtuYW1lXTtcbiAgICAgICAgICAgIGlmIChlbmRzV2l0aChuYW1lLCBUUkFOU0lUSU9OX1NVRkZJWCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uYWJsZS5zZXRUcmFuc2l0aW9uKG5hbWUuc2xpY2UoMCwgLVRSQU5TSVRJT05fU1VGRklYLmxlbmd0aCksIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmFibGUuc2V0VmFsdWUobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlVHJhbnNpdGlvbnMocGFyYW1ldGVyczogVHJhbnNpdGlvblBhcmFtZXRlcnMpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNpdGlvbmluZyA9IHRoaXMuX3RyYW5zaXRpb25hYmxlLnRyYW5zaXRpb25lZChwYXJhbWV0ZXJzLCB0aGlzLl90cmFuc2l0aW9uaW5nKTtcbiAgICB9XG5cbiAgICBoYXNUcmFuc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNpdGlvbmluZy5oYXNUcmFuc2l0aW9uKCk7XG4gICAgfVxuXG4gICAgcmVjYWxjdWxhdGUocGFyYW1ldGVyczogRXZhbHVhdGlvblBhcmFtZXRlcnMpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5fdHJhbnNpdGlvbmluZy5wb3NzaWJseUV2YWx1YXRlKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZSh2YWxpZGF0ZTogRnVuY3Rpb24sIHZhbHVlOiBtaXhlZCwgb3B0aW9ucz86IHt2YWxpZGF0ZT86IGJvb2xlYW59KSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudmFsaWRhdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW1pdFZhbGlkYXRpb25FcnJvcnModGhpcywgdmFsaWRhdGUuY2FsbCh2YWxpZGF0ZVN0eWxlLCBleHRlbmQoe1xuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvMjQwN1xuICAgICAgICAgICAgc3R5bGU6IHtnbHlwaHM6IHRydWUsIHNwcml0ZTogdHJ1ZX0sXG4gICAgICAgICAgICBzdHlsZVNwZWNcbiAgICAgICAgfSkpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpZ2h0O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHt3YXJuT25jZX0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi9nbC9jb250ZXh0JztcblxuLyoqXG4gKiBBIExpbmVBdGxhcyBsZXRzIHVzIHJldXNlIHJlbmRlcmVkIGRhc2hlZCBsaW5lc1xuICogYnkgd3JpdGluZyBtYW55IG9mIHRoZW0gdG8gYSB0ZXh0dXJlIGFuZCB0aGVuIGZldGNoaW5nIHRoZWlyIHBvc2l0aW9uc1xuICogdXNpbmcgLmdldERhc2guXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBMaW5lQXRsYXMge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgbmV4dFJvdzogbnVtYmVyO1xuICAgIGJ5dGVzOiBudW1iZXI7XG4gICAgZGF0YTogVWludDhBcnJheTtcbiAgICBkYXNoRW50cnk6IHtbXzogc3RyaW5nXTogYW55fTtcbiAgICBkaXJ0eTogYm9vbGVhbjtcbiAgICB0ZXh0dXJlOiBXZWJHTFRleHR1cmU7XG5cbiAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLm5leHRSb3cgPSAwO1xuXG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5kYXNoRW50cnkgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgb3IgY3JlYXRlIGEgZGFzaCBsaW5lIHBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGRhc2hhcnJheVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcm91bmQgd2hldGhlciB0byBhZGQgY2lyY2xlIGNhcHMgaW4gYmV0d2VlbiBkYXNoIHNlZ21lbnRzXG4gICAgICogQHJldHVybnMge09iamVjdH0gcG9zaXRpb24gb2YgZGFzaCB0ZXh0dXJlIGluIHsgeSwgaGVpZ2h0LCB3aWR0aCB9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXREYXNoKGRhc2hhcnJheTogQXJyYXk8bnVtYmVyPiwgcm91bmQ6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZGFzaGFycmF5LmpvaW4oXCIsXCIpICsgU3RyaW5nKHJvdW5kKTtcblxuICAgICAgICBpZiAoIXRoaXMuZGFzaEVudHJ5W2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuZGFzaEVudHJ5W2tleV0gPSB0aGlzLmFkZERhc2goZGFzaGFycmF5LCByb3VuZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGFzaEVudHJ5W2tleV07XG4gICAgfVxuXG4gICAgZ2V0RGFzaFJhbmdlcyhkYXNoYXJyYXk6IEFycmF5PG51bWJlcj4sIGxpbmVBdGxhc1dpZHRoOiBudW1iZXIsIHN0cmV0Y2g6IG51bWJlcikge1xuICAgICAgICAvLyBJZiBkYXNoYXJyYXkgaGFzIGFuIG9kZCBsZW5ndGgsIGJvdGggdGhlIGZpcnN0IGFuZCBsYXN0IHBhcnRzXG4gICAgICAgIC8vIGFyZSBkYXNoZXMgYW5kIHNob3VsZCBiZSBqb2luZWQgc2VhbWxlc3NseS5cbiAgICAgICAgY29uc3Qgb2RkRGFzaEFycmF5ID0gZGFzaGFycmF5Lmxlbmd0aCAlIDIgPT09IDE7XG5cbiAgICAgICAgY29uc3QgcmFuZ2VzID0gW107XG5cbiAgICAgICAgbGV0IGxlZnQgPSBvZGREYXNoQXJyYXkgPyAtZGFzaGFycmF5W2Rhc2hhcnJheS5sZW5ndGggLSAxXSAqIHN0cmV0Y2ggOiAwO1xuICAgICAgICBsZXQgcmlnaHQgPSBkYXNoYXJyYXlbMF0gKiBzdHJldGNoO1xuICAgICAgICBsZXQgaXNEYXNoID0gdHJ1ZTtcblxuICAgICAgICByYW5nZXMucHVzaCh7bGVmdCwgcmlnaHQsIGlzRGFzaCwgemVyb0xlbmd0aDogZGFzaGFycmF5WzBdID09PSAwfSk7XG5cbiAgICAgICAgbGV0IGN1cnJlbnREYXNoTGVuZ3RoID0gZGFzaGFycmF5WzBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGRhc2hhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaXNEYXNoID0gIWlzRGFzaDtcblxuICAgICAgICAgICAgY29uc3QgZGFzaExlbmd0aCA9IGRhc2hhcnJheVtpXTtcbiAgICAgICAgICAgIGxlZnQgPSBjdXJyZW50RGFzaExlbmd0aCAqIHN0cmV0Y2g7XG4gICAgICAgICAgICBjdXJyZW50RGFzaExlbmd0aCArPSBkYXNoTGVuZ3RoO1xuICAgICAgICAgICAgcmlnaHQgPSBjdXJyZW50RGFzaExlbmd0aCAqIHN0cmV0Y2g7XG5cbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKHtsZWZ0LCByaWdodCwgaXNEYXNoLCB6ZXJvTGVuZ3RoOiBkYXNoTGVuZ3RoID09PSAwfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgIH1cblxuICAgIGFkZFJvdW5kRGFzaChyYW5nZXM6IE9iamVjdCwgc3RyZXRjaDogbnVtYmVyLCBuOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaGFsZlN0cmV0Y2ggPSBzdHJldGNoIC8gMjtcblxuICAgICAgICBmb3IgKGxldCB5ID0gLW47IHkgPD0gbjsgeSsrKSB7XG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLm5leHRSb3cgKyBuICsgeTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy53aWR0aCAqIHJvdztcbiAgICAgICAgICAgIGxldCBjdXJySW5kZXggPSAwO1xuICAgICAgICAgICAgbGV0IHJhbmdlID0gcmFuZ2VzW2N1cnJJbmRleF07XG5cbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHggLyByYW5nZS5yaWdodCA+IDEpIHsgcmFuZ2UgPSByYW5nZXNbKytjdXJySW5kZXhdOyB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0TGVmdCA9IE1hdGguYWJzKHggLSByYW5nZS5sZWZ0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0UmlnaHQgPSBNYXRoLmFicyh4IC0gcmFuZ2UucmlnaHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbkRpc3QgPSBNYXRoLm1pbihkaXN0TGVmdCwgZGlzdFJpZ2h0KTtcbiAgICAgICAgICAgICAgICBsZXQgc2lnbmVkRGlzdGFuY2U7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0TWlkZGxlID0gIHkgLyBuICogKGhhbGZTdHJldGNoICsgMSk7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlLmlzRGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0RWRnZSA9IGhhbGZTdHJldGNoIC0gTWF0aC5hYnMoZGlzdE1pZGRsZSk7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25lZERpc3RhbmNlID0gTWF0aC5zcXJ0KG1pbkRpc3QgKiBtaW5EaXN0ICsgZGlzdEVkZ2UgKiBkaXN0RWRnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmVkRGlzdGFuY2UgPSBoYWxmU3RyZXRjaCAtIE1hdGguc3FydChtaW5EaXN0ICogbWluRGlzdCArIGRpc3RNaWRkbGUgKiBkaXN0TWlkZGxlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFbaW5kZXggKyB4XSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgc2lnbmVkRGlzdGFuY2UgKyAxMjgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZFJlZ3VsYXJEYXNoKHJhbmdlczogT2JqZWN0KSB7XG5cbiAgICAgICAgLy8gQ29sbGFwc2UgYW55IHplcm8tbGVuZ3RoIHJhbmdlXG4gICAgICAgIC8vIENvbGxhcHNlIG5laWdoYm91cmluZyBzYW1lLXR5cGUgcGFydHMgaW50byBhIHNpbmdsZSBwYXJ0XG4gICAgICAgIGZvciAobGV0IGkgPSByYW5nZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnQgPSByYW5nZXNbaV07XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gcmFuZ2VzW2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChwYXJ0Lnplcm9MZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByYW5nZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0ICYmIG5leHQuaXNEYXNoID09PSBwYXJ0LmlzRGFzaCkge1xuICAgICAgICAgICAgICAgIG5leHQubGVmdCA9IHBhcnQubGVmdDtcbiAgICAgICAgICAgICAgICByYW5nZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29tYmluZSB0aGUgZmlyc3QgYW5kIGxhc3QgcGFydHMgaWYgcG9zc2libGVcbiAgICAgICAgY29uc3QgZmlyc3QgPSByYW5nZXNbMF07XG4gICAgICAgIGNvbnN0IGxhc3QgPSByYW5nZXNbcmFuZ2VzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoZmlyc3QuaXNEYXNoID09PSBsYXN0LmlzRGFzaCkge1xuICAgICAgICAgICAgZmlyc3QubGVmdCA9IGxhc3QubGVmdCAtIHRoaXMud2lkdGg7XG4gICAgICAgICAgICBsYXN0LnJpZ2h0ID0gZmlyc3QucmlnaHQgKyB0aGlzLndpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLndpZHRoICogdGhpcy5uZXh0Um93O1xuICAgICAgICBsZXQgY3VyckluZGV4ID0gMDtcbiAgICAgICAgbGV0IHJhbmdlID0gcmFuZ2VzW2N1cnJJbmRleF07XG5cbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGlmICh4IC8gcmFuZ2UucmlnaHQgPiAxKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSByYW5nZXNbKytjdXJySW5kZXhdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkaXN0TGVmdCA9IE1hdGguYWJzKHggLSByYW5nZS5sZWZ0KTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RSaWdodCA9IE1hdGguYWJzKHggLSByYW5nZS5yaWdodCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1pbkRpc3QgPSBNYXRoLm1pbihkaXN0TGVmdCwgZGlzdFJpZ2h0KTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ25lZERpc3RhbmNlID0gcmFuZ2UuaXNEYXNoID8gbWluRGlzdCA6IC1taW5EaXN0O1xuXG4gICAgICAgICAgICB0aGlzLmRhdGFbaW5kZXggKyB4XSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgc2lnbmVkRGlzdGFuY2UgKyAxMjgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZERhc2goZGFzaGFycmF5OiBBcnJheTxudW1iZXI+LCByb3VuZDogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBuID0gcm91bmQgPyA3IDogMDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gMiAqIG4gKyAxO1xuXG4gICAgICAgIGlmICh0aGlzLm5leHRSb3cgKyBoZWlnaHQgPiB0aGlzLmhlaWdodCkge1xuICAgICAgICAgICAgd2Fybk9uY2UoJ0xpbmVBdGxhcyBvdXQgb2Ygc3BhY2UnKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGFzaGFycmF5Lmxlbmd0aDsgaSsrKSB7IGxlbmd0aCArPSBkYXNoYXJyYXlbaV07IH1cblxuICAgICAgICBpZiAobGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJldGNoID0gdGhpcy53aWR0aCAvIGxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlcyA9IHRoaXMuZ2V0RGFzaFJhbmdlcyhkYXNoYXJyYXksIHRoaXMud2lkdGgsIHN0cmV0Y2gpO1xuXG4gICAgICAgICAgICBpZiAocm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFJvdW5kRGFzaChyYW5nZXMsIHN0cmV0Y2gsIG4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFJlZ3VsYXJEYXNoKHJhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXNoRW50cnkgPSB7XG4gICAgICAgICAgICB5OiAodGhpcy5uZXh0Um93ICsgbiArIDAuNSkgLyB0aGlzLmhlaWdodCxcbiAgICAgICAgICAgIGhlaWdodDogMiAqIG4gLyB0aGlzLmhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiBsZW5ndGhcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm5leHRSb3cgKz0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZGFzaEVudHJ5O1xuICAgIH1cblxuICAgIGJpbmQoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgICAgIGlmICghdGhpcy50ZXh0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuUkVQRUFUKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLlJFUEVBVCk7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5BTFBIQSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIGdsLkFMUEhBLCBnbC5VTlNJR05FRF9CWVRFLCB0aGlzLmRhdGEpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBnbC5BTFBIQSwgZ2wuVU5TSUdORURfQllURSwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGluZUF0bGFzO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHt1bmlxdWVJZCwgYXN5bmNBbGx9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgQWN0b3IgZnJvbSAnLi9hY3Rvcic7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB0eXBlIFdvcmtlclBvb2wgZnJvbSAnLi93b3JrZXJfcG9vbCc7XG5cbi8qKlxuICogUmVzcG9uc2libGUgZm9yIHNlbmRpbmcgbWVzc2FnZXMgZnJvbSBhIHtAbGluayBTb3VyY2V9IHRvIGFuIGFzc29jaWF0ZWRcbiAqIHtAbGluayBXb3JrZXJTb3VyY2V9LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIERpc3BhdGNoZXIge1xuICAgIHdvcmtlclBvb2w6IFdvcmtlclBvb2w7XG4gICAgYWN0b3JzOiBBcnJheTxBY3Rvcj47XG4gICAgY3VycmVudEFjdG9yOiBudW1iZXI7XG4gICAgaWQ6IG51bWJlcjtcblxuICAgIC8vIGV4cG9zZWQgdG8gYWxsb3cgc3R1YmJpbmcgaW4gdW5pdCB0ZXN0c1xuICAgIHN0YXRpYyBBY3RvcjogQ2xhc3M8QWN0b3I+O1xuXG4gICAgY29uc3RydWN0b3Iod29ya2VyUG9vbDogV29ya2VyUG9vbCwgcGFyZW50OiBhbnkpIHtcbiAgICAgICAgdGhpcy53b3JrZXJQb29sID0gd29ya2VyUG9vbDtcbiAgICAgICAgdGhpcy5hY3RvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50QWN0b3IgPSAwO1xuICAgICAgICB0aGlzLmlkID0gdW5pcXVlSWQoKTtcbiAgICAgICAgY29uc3Qgd29ya2VycyA9IHRoaXMud29ya2VyUG9vbC5hY3F1aXJlKHRoaXMuaWQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmtlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmtlciA9IHdvcmtlcnNbaV07XG4gICAgICAgICAgICBjb25zdCBhY3RvciA9IG5ldyBEaXNwYXRjaGVyLkFjdG9yKHdvcmtlciwgcGFyZW50LCB0aGlzLmlkKTtcbiAgICAgICAgICAgIGFjdG9yLm5hbWUgPSBgV29ya2VyICR7aX1gO1xuICAgICAgICAgICAgdGhpcy5hY3RvcnMucHVzaChhY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KHRoaXMuYWN0b3JzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnJvYWRjYXN0IGEgbWVzc2FnZSB0byBhbGwgV29ya2Vycy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGJyb2FkY2FzdCh0eXBlOiBzdHJpbmcsIGRhdGE6IG1peGVkLCBjYj86IEZ1bmN0aW9uKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLmFjdG9ycy5sZW5ndGgpO1xuICAgICAgICBjYiA9IGNiIHx8IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICBhc3luY0FsbCh0aGlzLmFjdG9ycywgKGFjdG9yLCBkb25lKSA9PiB7XG4gICAgICAgICAgICBhY3Rvci5zZW5kKHR5cGUsIGRhdGEsIGRvbmUpO1xuICAgICAgICB9LCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWNxdWlyZXMgYW4gYWN0b3IgdG8gZGlzcGF0Y2ggbWVzc2FnZXMgdG8uIFRoZSBhY3RvcnMgYXJlIGRpc3RyaWJ1dGVkIGluIHJvdW5kLXJvYmluIGZhc2hpb24uXG4gICAgICogQHJldHVybnMgQW4gYWN0b3Igb2JqZWN0IGJhY2tlZCBieSBhIHdlYiB3b3JrZXIgZm9yIHByb2Nlc3NpbmcgbWVzc2FnZXMuXG4gICAgICovXG4gICAgZ2V0QWN0b3IoKTogQWN0b3Ige1xuICAgICAgICBhc3NlcnQodGhpcy5hY3RvcnMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50QWN0b3IgPSAodGhpcy5jdXJyZW50QWN0b3IgKyAxKSAlIHRoaXMuYWN0b3JzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0b3JzW3RoaXMuY3VycmVudEFjdG9yXTtcbiAgICB9XG5cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIHRoaXMuYWN0b3JzLmZvckVhY2goKGFjdG9yKSA9PiB7IGFjdG9yLnJlbW92ZSgpOyB9KTtcbiAgICAgICAgdGhpcy5hY3RvcnMgPSBbXTtcbiAgICAgICAgdGhpcy53b3JrZXJQb29sLnJlbGVhc2UodGhpcy5pZCk7XG4gICAgfVxufVxuXG5EaXNwYXRjaGVyLkFjdG9yID0gQWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IERpc3BhdGNoZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge3BpY2ssIGV4dGVuZH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHtnZXRKU09OLCBSZXNvdXJjZVR5cGV9IGZyb20gJy4uL3V0aWwvYWpheCc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuXG5pbXBvcnQgdHlwZSB7UmVxdWVzdE1hbmFnZXJ9IGZyb20gJy4uL3V0aWwvbWFwYm94JztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuaW1wb3J0IHR5cGUge1RpbGVKU09OfSBmcm9tICcuLi90eXBlcy90aWxlanNvbic7XG5pbXBvcnQgdHlwZSB7Q2FuY2VsYWJsZX0gZnJvbSAnLi4vdHlwZXMvY2FuY2VsYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9wdGlvbnM6IGFueSwgcmVxdWVzdE1hbmFnZXI6IFJlcXVlc3RNYW5hZ2VyLCBjYWxsYmFjazogQ2FsbGJhY2s8VGlsZUpTT04+KTogQ2FuY2VsYWJsZSB7XG4gICAgY29uc3QgbG9hZGVkID0gZnVuY3Rpb24oZXJyOiA/RXJyb3IsIHRpbGVKU09OOiA/T2JqZWN0KSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9IGVsc2UgaWYgKHRpbGVKU09OKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IGFueSA9IHBpY2soXG4gICAgICAgICAgICAgICAgLy8gZXhwbGljaXQgc291cmNlIG9wdGlvbnMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgVGlsZUpTT05cbiAgICAgICAgICAgICAgICBleHRlbmQodGlsZUpTT04sIG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgIFsndGlsZXMnLCAnbWluem9vbScsICdtYXh6b29tJywgJ2F0dHJpYnV0aW9uJywgJ21hcGJveF9sb2dvJywgJ2JvdW5kcycsICdzY2hlbWUnLCAndGlsZVNpemUnLCAnZW5jb2RpbmcnXVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHRpbGVKU09OLnZlY3Rvcl9sYXllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQudmVjdG9yTGF5ZXJzID0gdGlsZUpTT04udmVjdG9yX2xheWVycztcbiAgICAgICAgICAgICAgICByZXN1bHQudmVjdG9yTGF5ZXJJZHMgPSByZXN1bHQudmVjdG9yTGF5ZXJzLm1hcCgobGF5ZXIpID0+IHsgcmV0dXJuIGxheWVyLmlkOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0LnRpbGVzID0gcmVxdWVzdE1hbmFnZXIuY2Fub25pY2FsaXplVGlsZXNldChyZXN1bHQsIG9wdGlvbnMudXJsKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMudXJsKSB7XG4gICAgICAgIHJldHVybiBnZXRKU09OKHJlcXVlc3RNYW5hZ2VyLnRyYW5zZm9ybVJlcXVlc3QocmVxdWVzdE1hbmFnZXIubm9ybWFsaXplU291cmNlVVJMKG9wdGlvbnMudXJsKSwgUmVzb3VyY2VUeXBlLlNvdXJjZSksIGxvYWRlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXIuZnJhbWUoKCkgPT4gbG9hZGVkKG51bGwsIG9wdGlvbnMpKTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgTG5nTGF0Qm91bmRzIGZyb20gJy4uL2dlby9sbmdfbGF0X2JvdW5kcyc7XG5pbXBvcnQge21lcmNhdG9yWGZyb21MbmcsIG1lcmNhdG9yWWZyb21MYXR9IGZyb20gJy4uL2dlby9tZXJjYXRvcl9jb29yZGluYXRlJztcblxuaW1wb3J0IHR5cGUge0Nhbm9uaWNhbFRpbGVJRH0gZnJvbSAnLi90aWxlX2lkJztcblxuY2xhc3MgVGlsZUJvdW5kcyB7XG4gICAgYm91bmRzOiBMbmdMYXRCb3VuZHM7XG4gICAgbWluem9vbTogbnVtYmVyO1xuICAgIG1heHpvb206IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGJvdW5kczogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sIG1pbnpvb206ID9udW1iZXIsIG1heHpvb206ID9udW1iZXIpIHtcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBMbmdMYXRCb3VuZHMuY29udmVydCh0aGlzLnZhbGlkYXRlQm91bmRzKGJvdW5kcykpO1xuICAgICAgICB0aGlzLm1pbnpvb20gPSBtaW56b29tIHx8IDA7XG4gICAgICAgIHRoaXMubWF4em9vbSA9IG1heHpvb20gfHwgMjQ7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVCb3VuZHMoYm91bmRzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSkge1xuICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGJvdW5kcyBwcm9wZXJ0eSBjb250YWlucyB2YWxpZCBsb25naXR1ZGUgYW5kIGxhdGl0dWRlc1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYm91bmRzKSB8fCBib3VuZHMubGVuZ3RoICE9PSA0KSByZXR1cm4gWy0xODAsIC05MCwgMTgwLCA5MF07XG4gICAgICAgIHJldHVybiBbTWF0aC5tYXgoLTE4MCwgYm91bmRzWzBdKSwgTWF0aC5tYXgoLTkwLCBib3VuZHNbMV0pLCBNYXRoLm1pbigxODAsIGJvdW5kc1syXSksIE1hdGgubWluKDkwLCBib3VuZHNbM10pXTtcbiAgICB9XG5cbiAgICBjb250YWlucyh0aWxlSUQ6IENhbm9uaWNhbFRpbGVJRCkge1xuICAgICAgICBjb25zdCB3b3JsZFNpemUgPSBNYXRoLnBvdygyLCB0aWxlSUQueik7XG4gICAgICAgIGNvbnN0IGxldmVsID0ge1xuICAgICAgICAgICAgbWluWDogTWF0aC5mbG9vcihtZXJjYXRvclhmcm9tTG5nKHRoaXMuYm91bmRzLmdldFdlc3QoKSkgKiB3b3JsZFNpemUpLFxuICAgICAgICAgICAgbWluWTogTWF0aC5mbG9vcihtZXJjYXRvcllmcm9tTGF0KHRoaXMuYm91bmRzLmdldE5vcnRoKCkpICogd29ybGRTaXplKSxcbiAgICAgICAgICAgIG1heFg6IE1hdGguY2VpbChtZXJjYXRvclhmcm9tTG5nKHRoaXMuYm91bmRzLmdldEVhc3QoKSkgKiB3b3JsZFNpemUpLFxuICAgICAgICAgICAgbWF4WTogTWF0aC5jZWlsKG1lcmNhdG9yWWZyb21MYXQodGhpcy5ib3VuZHMuZ2V0U291dGgoKSkgKiB3b3JsZFNpemUpXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGhpdCA9IHRpbGVJRC54ID49IGxldmVsLm1pblggJiYgdGlsZUlELnggPCBsZXZlbC5tYXhYICYmIHRpbGVJRC55ID49IGxldmVsLm1pblkgJiYgdGlsZUlELnkgPCBsZXZlbC5tYXhZO1xuICAgICAgICByZXR1cm4gaGl0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGlsZUJvdW5kcztcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7RXZlbnQsIEVycm9yRXZlbnQsIEV2ZW50ZWR9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5cbmltcG9ydCB7ZXh0ZW5kLCBwaWNrfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IGxvYWRUaWxlSlNPTiBmcm9tICcuL2xvYWRfdGlsZWpzb24nO1xuaW1wb3J0IHtwb3N0VHVybnN0aWxlRXZlbnQsIHBvc3RNYXBMb2FkRXZlbnR9IGZyb20gJy4uL3V0aWwvbWFwYm94JztcbmltcG9ydCBUaWxlQm91bmRzIGZyb20gJy4vdGlsZV9ib3VuZHMnO1xuaW1wb3J0IHtSZXNvdXJjZVR5cGV9IGZyb20gJy4uL3V0aWwvYWpheCc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IHtjYWNoZUVudHJ5UG9zc2libHlBZGRlZH0gZnJvbSAnLi4vdXRpbC90aWxlX3JlcXVlc3RfY2FjaGUnO1xuXG5pbXBvcnQgdHlwZSB7U291cmNlfSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi90aWxlX2lkJztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi91aS9tYXAnO1xuaW1wb3J0IHR5cGUgRGlzcGF0Y2hlciBmcm9tICcuLi91dGlsL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuL3RpbGUnO1xuaW1wb3J0IHR5cGUge0NhbGxiYWNrfSBmcm9tICcuLi90eXBlcy9jYWxsYmFjayc7XG5pbXBvcnQgdHlwZSB7Q2FuY2VsYWJsZX0gZnJvbSAnLi4vdHlwZXMvY2FuY2VsYWJsZSc7XG5pbXBvcnQgdHlwZSB7VmVjdG9yU291cmNlU3BlY2lmaWNhdGlvbiwgUHJvbW90ZUlkU3BlY2lmaWNhdGlvbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5cbi8qKlxuICogQSBzb3VyY2UgY29udGFpbmluZyB2ZWN0b3IgdGlsZXMgaW4gW01hcGJveCBWZWN0b3IgVGlsZSBmb3JtYXRdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL3ZlY3Rvci10aWxlcy9yZWZlcmVuY2UvKS5cbiAqIChTZWUgdGhlIFtTdHlsZSBTcGVjaWZpY2F0aW9uXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy9zb3VyY2VzLyN2ZWN0b3IpIGZvciBkZXRhaWxlZCBkb2N1bWVudGF0aW9uIG9mIG9wdGlvbnMuKVxuICpcbiAqIEBleGFtcGxlXG4gKiBtYXAuYWRkU291cmNlKCdzb21lIGlkJywge1xuICogICAgIHR5cGU6ICd2ZWN0b3InLFxuICogICAgIHVybDogJ21hcGJveDovL21hcGJveC5tYXBib3gtc3RyZWV0cy12NidcbiAqIH0pO1xuICpcbiAqIEBleGFtcGxlXG4gKiBtYXAuYWRkU291cmNlKCdzb21lIGlkJywge1xuICogICAgIHR5cGU6ICd2ZWN0b3InLFxuICogICAgIHRpbGVzOiBbJ2h0dHBzOi8vZDI1dWFyaHh5d3psMWouY2xvdWRmcm9udC5uZXQvdjAuMS97en0ve3h9L3t5fS5tdnQnXSxcbiAqICAgICBtaW56b29tOiA2LFxuICogICAgIG1heHpvb206IDE0XG4gKiB9KTtcbiAqXG4gKiBAZXhhbXBsZVxuICogbWFwLmdldFNvdXJjZSgnc29tZSBpZCcpLnNldFVybChcIm1hcGJveDovL21hcGJveC5tYXBib3gtc3RyZWV0cy12NlwiKTtcbiAqXG4gKiBAZXhhbXBsZVxuICogbWFwLmdldFNvdXJjZSgnc29tZSBpZCcpLnNldFRpbGVzKFsnaHR0cHM6Ly9kMjV1YXJoeHl3emwxai5jbG91ZGZyb250Lm5ldC92MC4xL3t6fS97eH0ve3l9Lm12dCddKTtcbiAqIEBzZWUgW0FkZCBhIHZlY3RvciB0aWxlIHNvdXJjZV0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvdmVjdG9yLXNvdXJjZS8pXG4gKiBAc2VlIFtBZGQgYSB0aGlyZCBwYXJ0eSB2ZWN0b3IgdGlsZSBzb3VyY2VdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3RoaXJkLXBhcnR5LylcbiAqL1xuY2xhc3MgVmVjdG9yVGlsZVNvdXJjZSBleHRlbmRzIEV2ZW50ZWQgaW1wbGVtZW50cyBTb3VyY2Uge1xuICAgIHR5cGU6ICd2ZWN0b3InO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbWluem9vbTogbnVtYmVyO1xuICAgIG1heHpvb206IG51bWJlcjtcbiAgICB1cmw6IHN0cmluZztcbiAgICBzY2hlbWU6IHN0cmluZztcbiAgICB0aWxlU2l6ZTogbnVtYmVyO1xuICAgIHByb21vdGVJZDogP1Byb21vdGVJZFNwZWNpZmljYXRpb247XG5cbiAgICBfb3B0aW9uczogVmVjdG9yU291cmNlU3BlY2lmaWNhdGlvbjtcbiAgICBfY29sbGVjdFJlc291cmNlVGltaW5nOiBib29sZWFuO1xuICAgIGRpc3BhdGNoZXI6IERpc3BhdGNoZXI7XG4gICAgbWFwOiBNYXA7XG4gICAgYm91bmRzOiA/W251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgdGlsZXM6IEFycmF5PHN0cmluZz47XG4gICAgdGlsZUJvdW5kczogVGlsZUJvdW5kcztcbiAgICByZXBhcnNlT3ZlcnNjYWxlZDogYm9vbGVhbjtcbiAgICBpc1RpbGVDbGlwcGVkOiBib29sZWFuO1xuICAgIF90aWxlSlNPTlJlcXVlc3Q6ID9DYW5jZWxhYmxlO1xuICAgIF9sb2FkZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBvcHRpb25zOiBWZWN0b3JTb3VyY2VTcGVjaWZpY2F0aW9uICYge2NvbGxlY3RSZXNvdXJjZVRpbWluZzogYm9vbGVhbn0sIGRpc3BhdGNoZXI6IERpc3BhdGNoZXIsIGV2ZW50ZWRQYXJlbnQ6IEV2ZW50ZWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyO1xuXG4gICAgICAgIHRoaXMudHlwZSA9ICd2ZWN0b3InO1xuICAgICAgICB0aGlzLm1pbnpvb20gPSAwO1xuICAgICAgICB0aGlzLm1heHpvb20gPSAyMjtcbiAgICAgICAgdGhpcy5zY2hlbWUgPSAneHl6JztcbiAgICAgICAgdGhpcy50aWxlU2l6ZSA9IDUxMjtcbiAgICAgICAgdGhpcy5yZXBhcnNlT3ZlcnNjYWxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaXNUaWxlQ2xpcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGV4dGVuZCh0aGlzLCBwaWNrKG9wdGlvbnMsIFsndXJsJywgJ3NjaGVtZScsICd0aWxlU2l6ZScsICdwcm9tb3RlSWQnXSkpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gZXh0ZW5kKHt0eXBlOiAndmVjdG9yJ30sIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuX2NvbGxlY3RSZXNvdXJjZVRpbWluZyA9IG9wdGlvbnMuY29sbGVjdFJlc291cmNlVGltaW5nO1xuXG4gICAgICAgIGlmICh0aGlzLnRpbGVTaXplICE9PSA1MTIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndmVjdG9yIHRpbGUgc291cmNlcyBtdXN0IGhhdmUgYSB0aWxlU2l6ZSBvZiA1MTInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0RXZlbnRlZFBhcmVudChldmVudGVkUGFyZW50KTtcbiAgICB9XG5cbiAgICBsb2FkKCkge1xuICAgICAgICB0aGlzLl9sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnfSkpO1xuICAgICAgICB0aGlzLl90aWxlSlNPTlJlcXVlc3QgPSBsb2FkVGlsZUpTT04odGhpcy5fb3B0aW9ucywgdGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLCAoZXJyLCB0aWxlSlNPTikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KGVycikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aWxlSlNPTikge1xuICAgICAgICAgICAgICAgIGV4dGVuZCh0aGlzLCB0aWxlSlNPTik7XG4gICAgICAgICAgICAgICAgaWYgKHRpbGVKU09OLmJvdW5kcykgdGhpcy50aWxlQm91bmRzID0gbmV3IFRpbGVCb3VuZHModGlsZUpTT04uYm91bmRzLCB0aGlzLm1pbnpvb20sIHRoaXMubWF4em9vbSk7XG4gICAgICAgICAgICAgICAgcG9zdFR1cm5zdGlsZUV2ZW50KHRpbGVKU09OLnRpbGVzLCB0aGlzLm1hcC5fcmVxdWVzdE1hbmFnZXIuX2N1c3RvbUFjY2Vzc1Rva2VuKTtcbiAgICAgICAgICAgICAgICBwb3N0TWFwTG9hZEV2ZW50KHRpbGVKU09OLnRpbGVzLCB0aGlzLm1hcC5fZ2V0TWFwSWQoKSwgdGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLl9za3VUb2tlbiwgdGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLl9jdXN0b21BY2Nlc3NUb2tlbik7XG5cbiAgICAgICAgICAgICAgICAvLyBgY29udGVudGAgaXMgaW5jbHVkZWQgaGVyZSB0byBwcmV2ZW50IGEgcmFjZSBjb25kaXRpb24gd2hlcmUgYFN0eWxlI191cGRhdGVTb3VyY2VzYCBpcyBjYWxsZWRcbiAgICAgICAgICAgICAgICAvLyBiZWZvcmUgdGhlIFRpbGVKU09OIGFycml2ZXMuIHRoaXMgbWFrZXMgc3VyZSB0aGUgdGlsZXMgbmVlZGVkIGFyZSBsb2FkZWQgb25jZSBUaWxlSlNPTiBhcnJpdmVzXG4gICAgICAgICAgICAgICAgLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9wdWxsLzQzNDcjZGlzY3Vzc2lvbl9yMTA0NDE4MDg4XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTogJ3NvdXJjZScsIHNvdXJjZURhdGFUeXBlOiAnbWV0YWRhdGEnfSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnLCBzb3VyY2VEYXRhVHlwZTogJ2NvbnRlbnQnfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkZWQ7XG4gICAgfVxuXG4gICAgaGFzVGlsZSh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnRpbGVCb3VuZHMgfHwgdGhpcy50aWxlQm91bmRzLmNvbnRhaW5zKHRpbGVJRC5jYW5vbmljYWwpO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICB9XG5cbiAgICBzZXRTb3VyY2VQcm9wZXJ0eShjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbGVKU09OUmVxdWVzdCkge1xuICAgICAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2soKTtcblxuICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHRoaXMubWFwLnN0eWxlLnNvdXJjZUNhY2hlc1t0aGlzLmlkXTtcbiAgICAgICAgc291cmNlQ2FjaGUuY2xlYXJUaWxlcygpO1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzb3VyY2UgYHRpbGVzYCBwcm9wZXJ0eSBhbmQgcmUtcmVuZGVycyB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdGlsZXMgQW4gYXJyYXkgb2Ygb25lIG9yIG1vcmUgdGlsZSBzb3VyY2UgVVJMcywgYXMgaW4gdGhlIFRpbGVKU09OIHNwZWMuXG4gICAgICogQHJldHVybnMge1ZlY3RvclRpbGVTb3VyY2V9IHRoaXNcbiAgICAgKi9cbiAgICBzZXRUaWxlcyh0aWxlczogQXJyYXk8c3RyaW5nPikge1xuICAgICAgICB0aGlzLnNldFNvdXJjZVByb3BlcnR5KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudGlsZXMgPSB0aWxlcztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc291cmNlIGB1cmxgIHByb3BlcnR5IGFuZCByZS1yZW5kZXJzIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEEgVVJMIHRvIGEgVGlsZUpTT04gcmVzb3VyY2UuIFN1cHBvcnRlZCBwcm90b2NvbHMgYXJlIGBodHRwOmAsIGBodHRwczpgLCBhbmQgYG1hcGJveDovLzxUaWxlc2V0IElEPmAuXG4gICAgICogQHJldHVybnMge1ZlY3RvclRpbGVTb3VyY2V9IHRoaXNcbiAgICAgKi9cbiAgICBzZXRVcmwodXJsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZXRTb3VyY2VQcm9wZXJ0eSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMudXJsID0gdXJsO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbGVKU09OUmVxdWVzdCkge1xuICAgICAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgbG9hZFRpbGUodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMubWFwLl9yZXF1ZXN0TWFuYWdlci5ub3JtYWxpemVUaWxlVVJMKHRpbGUudGlsZUlELmNhbm9uaWNhbC51cmwodGhpcy50aWxlcywgdGhpcy5zY2hlbWUpKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgcmVxdWVzdDogdGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLnRyYW5zZm9ybVJlcXVlc3QodXJsLCBSZXNvdXJjZVR5cGUuVGlsZSksXG4gICAgICAgICAgICB1aWQ6IHRpbGUudWlkLFxuICAgICAgICAgICAgdGlsZUlEOiB0aWxlLnRpbGVJRCxcbiAgICAgICAgICAgIHpvb206IHRpbGUudGlsZUlELm92ZXJzY2FsZWRaLFxuICAgICAgICAgICAgdGlsZVNpemU6IHRoaXMudGlsZVNpemUgKiB0aWxlLnRpbGVJRC5vdmVyc2NhbGVGYWN0b3IoKSxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5pZCxcbiAgICAgICAgICAgIHBpeGVsUmF0aW86IGJyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICAgICAgICAgIHNob3dDb2xsaXNpb25Cb3hlczogdGhpcy5tYXAuc2hvd0NvbGxpc2lvbkJveGVzLFxuICAgICAgICAgICAgcHJvbW90ZUlkOiB0aGlzLnByb21vdGVJZFxuICAgICAgICB9O1xuICAgICAgICBwYXJhbXMucmVxdWVzdC5jb2xsZWN0UmVzb3VyY2VUaW1pbmcgPSB0aGlzLl9jb2xsZWN0UmVzb3VyY2VUaW1pbmc7XG5cbiAgICAgICAgaWYgKCF0aWxlLmFjdG9yIHx8IHRpbGUuc3RhdGUgPT09ICdleHBpcmVkJykge1xuICAgICAgICAgICAgdGlsZS5hY3RvciA9IHRoaXMuZGlzcGF0Y2hlci5nZXRBY3RvcigpO1xuICAgICAgICAgICAgdGlsZS5yZXF1ZXN0ID0gdGlsZS5hY3Rvci5zZW5kKCdsb2FkVGlsZScsIHBhcmFtcywgZG9uZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aWxlLnN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAgIC8vIHNjaGVkdWxlIHRpbGUgcmVsb2FkaW5nIGFmdGVyIGl0IGhhcyBiZWVuIGxvYWRlZFxuICAgICAgICAgICAgdGlsZS5yZWxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlsZS5yZXF1ZXN0ID0gdGlsZS5hY3Rvci5zZW5kKCdyZWxvYWRUaWxlJywgcGFyYW1zLCBkb25lLmJpbmQodGhpcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZG9uZShlcnIsIGRhdGEpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aWxlLnJlcXVlc3Q7XG5cbiAgICAgICAgICAgIGlmICh0aWxlLmFib3J0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuXG4gICAgICAgICAgICBpZiAoZXJyICYmIGVyci5zdGF0dXMgIT09IDQwNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnJlc291cmNlVGltaW5nKVxuICAgICAgICAgICAgICAgIHRpbGUucmVzb3VyY2VUaW1pbmcgPSBkYXRhLnJlc291cmNlVGltaW5nO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5tYXAuX3JlZnJlc2hFeHBpcmVkVGlsZXMgJiYgZGF0YSkgdGlsZS5zZXRFeHBpcnlEYXRhKGRhdGEpO1xuICAgICAgICAgICAgdGlsZS5sb2FkVmVjdG9yRGF0YShkYXRhLCB0aGlzLm1hcC5wYWludGVyKTtcblxuICAgICAgICAgICAgY2FjaGVFbnRyeVBvc3NpYmx5QWRkZWQodGhpcy5kaXNwYXRjaGVyKTtcblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG5cbiAgICAgICAgICAgIGlmICh0aWxlLnJlbG9hZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkVGlsZSh0aWxlLCB0aWxlLnJlbG9hZENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB0aWxlLnJlbG9hZENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFib3J0VGlsZSh0aWxlOiBUaWxlKSB7XG4gICAgICAgIGlmICh0aWxlLnJlcXVlc3QpIHtcbiAgICAgICAgICAgIHRpbGUucmVxdWVzdC5jYW5jZWwoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aWxlLnJlcXVlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbGUuYWN0b3IpIHtcbiAgICAgICAgICAgIHRpbGUuYWN0b3Iuc2VuZCgnYWJvcnRUaWxlJywge3VpZDogdGlsZS51aWQsIHR5cGU6IHRoaXMudHlwZSwgc291cmNlOiB0aGlzLmlkfSwgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVubG9hZFRpbGUodGlsZTogVGlsZSkge1xuICAgICAgICB0aWxlLnVubG9hZFZlY3RvckRhdGEoKTtcbiAgICAgICAgaWYgKHRpbGUuYWN0b3IpIHtcbiAgICAgICAgICAgIHRpbGUuYWN0b3Iuc2VuZCgncmVtb3ZlVGlsZScsIHt1aWQ6IHRpbGUudWlkLCB0eXBlOiB0aGlzLnR5cGUsIHNvdXJjZTogdGhpcy5pZH0sIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNUcmFuc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWZWN0b3JUaWxlU291cmNlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtleHRlbmQsIHBpY2t9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB7Z2V0SW1hZ2UsIFJlc291cmNlVHlwZX0gZnJvbSAnLi4vdXRpbC9hamF4JztcbmltcG9ydCB7RXZlbnQsIEVycm9yRXZlbnQsIEV2ZW50ZWR9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgbG9hZFRpbGVKU09OIGZyb20gJy4vbG9hZF90aWxlanNvbic7XG5pbXBvcnQge3Bvc3RUdXJuc3RpbGVFdmVudCwgcG9zdE1hcExvYWRFdmVudH0gZnJvbSAnLi4vdXRpbC9tYXBib3gnO1xuaW1wb3J0IFRpbGVCb3VuZHMgZnJvbSAnLi90aWxlX2JvdW5kcyc7XG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuLi9yZW5kZXIvdGV4dHVyZSc7XG5cbmltcG9ydCB7Y2FjaGVFbnRyeVBvc3NpYmx5QWRkZWR9IGZyb20gJy4uL3V0aWwvdGlsZV9yZXF1ZXN0X2NhY2hlJztcblxuaW1wb3J0IHR5cGUge1NvdXJjZX0gZnJvbSAnLi9zb3VyY2UnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4vdGlsZV9pZCc7XG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vdWkvbWFwJztcbmltcG9ydCB0eXBlIERpc3BhdGNoZXIgZnJvbSAnLi4vdXRpbC9kaXNwYXRjaGVyJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi90aWxlJztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuaW1wb3J0IHR5cGUge0NhbmNlbGFibGV9IGZyb20gJy4uL3R5cGVzL2NhbmNlbGFibGUnO1xuaW1wb3J0IHR5cGUge1xuICAgIFJhc3RlclNvdXJjZVNwZWNpZmljYXRpb24sXG4gICAgUmFzdGVyREVNU291cmNlU3BlY2lmaWNhdGlvblxufSBmcm9tICcuLi9zdHlsZS1zcGVjL3R5cGVzJztcblxuY2xhc3MgUmFzdGVyVGlsZVNvdXJjZSBleHRlbmRzIEV2ZW50ZWQgaW1wbGVtZW50cyBTb3VyY2Uge1xuICAgIHR5cGU6ICdyYXN0ZXInIHwgJ3Jhc3Rlci1kZW0nO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbWluem9vbTogbnVtYmVyO1xuICAgIG1heHpvb206IG51bWJlcjtcbiAgICB1cmw6IHN0cmluZztcbiAgICBzY2hlbWU6IHN0cmluZztcbiAgICB0aWxlU2l6ZTogbnVtYmVyO1xuXG4gICAgYm91bmRzOiA/W251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgdGlsZUJvdW5kczogVGlsZUJvdW5kcztcbiAgICByb3VuZFpvb206IGJvb2xlYW47XG4gICAgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlcjtcbiAgICBtYXA6IE1hcDtcbiAgICB0aWxlczogQXJyYXk8c3RyaW5nPjtcblxuICAgIF9sb2FkZWQ6IGJvb2xlYW47XG4gICAgX29wdGlvbnM6IFJhc3RlclNvdXJjZVNwZWNpZmljYXRpb24gfCBSYXN0ZXJERU1Tb3VyY2VTcGVjaWZpY2F0aW9uO1xuICAgIF90aWxlSlNPTlJlcXVlc3Q6ID9DYW5jZWxhYmxlO1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb3B0aW9uczogUmFzdGVyU291cmNlU3BlY2lmaWNhdGlvbiB8IFJhc3RlckRFTVNvdXJjZVNwZWNpZmljYXRpb24sIGRpc3BhdGNoZXI6IERpc3BhdGNoZXIsIGV2ZW50ZWRQYXJlbnQ6IEV2ZW50ZWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyO1xuICAgICAgICB0aGlzLnNldEV2ZW50ZWRQYXJlbnQoZXZlbnRlZFBhcmVudCk7XG5cbiAgICAgICAgdGhpcy50eXBlID0gJ3Jhc3Rlcic7XG4gICAgICAgIHRoaXMubWluem9vbSA9IDA7XG4gICAgICAgIHRoaXMubWF4em9vbSA9IDIyO1xuICAgICAgICB0aGlzLnJvdW5kWm9vbSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NoZW1lID0gJ3h5eic7XG4gICAgICAgIHRoaXMudGlsZVNpemUgPSA1MTI7XG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBleHRlbmQoe3R5cGU6ICdyYXN0ZXInfSwgb3B0aW9ucyk7XG4gICAgICAgIGV4dGVuZCh0aGlzLCBwaWNrKG9wdGlvbnMsIFsndXJsJywgJ3NjaGVtZScsICd0aWxlU2l6ZSddKSk7XG4gICAgfVxuXG4gICAgbG9hZCgpIHtcbiAgICAgICAgdGhpcy5fbG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGFsb2FkaW5nJywge2RhdGFUeXBlOiAnc291cmNlJ30pKTtcbiAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0ID0gbG9hZFRpbGVKU09OKHRoaXMuX29wdGlvbnMsIHRoaXMubWFwLl9yZXF1ZXN0TWFuYWdlciwgKGVyciwgdGlsZUpTT04pID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3RpbGVKU09OUmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChlcnIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGlsZUpTT04pIHtcbiAgICAgICAgICAgICAgICBleHRlbmQodGhpcywgdGlsZUpTT04pO1xuICAgICAgICAgICAgICAgIGlmICh0aWxlSlNPTi5ib3VuZHMpIHRoaXMudGlsZUJvdW5kcyA9IG5ldyBUaWxlQm91bmRzKHRpbGVKU09OLmJvdW5kcywgdGhpcy5taW56b29tLCB0aGlzLm1heHpvb20pO1xuXG4gICAgICAgICAgICAgICAgcG9zdFR1cm5zdGlsZUV2ZW50KHRpbGVKU09OLnRpbGVzKTtcbiAgICAgICAgICAgICAgICBwb3N0TWFwTG9hZEV2ZW50KHRpbGVKU09OLnRpbGVzLCB0aGlzLm1hcC5fZ2V0TWFwSWQoKSwgdGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLl9za3VUb2tlbik7XG5cbiAgICAgICAgICAgICAgICAvLyBgY29udGVudGAgaXMgaW5jbHVkZWQgaGVyZSB0byBwcmV2ZW50IGEgcmFjZSBjb25kaXRpb24gd2hlcmUgYFN0eWxlI191cGRhdGVTb3VyY2VzYCBpcyBjYWxsZWRcbiAgICAgICAgICAgICAgICAvLyBiZWZvcmUgdGhlIFRpbGVKU09OIGFycml2ZXMuIHRoaXMgbWFrZXMgc3VyZSB0aGUgdGlsZXMgbmVlZGVkIGFyZSBsb2FkZWQgb25jZSBUaWxlSlNPTiBhcnJpdmVzXG4gICAgICAgICAgICAgICAgLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9wdWxsLzQzNDcjZGlzY3Vzc2lvbl9yMTA0NDE4MDg4XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTogJ3NvdXJjZScsIHNvdXJjZURhdGFUeXBlOiAnbWV0YWRhdGEnfSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnLCBzb3VyY2VEYXRhVHlwZTogJ2NvbnRlbnQnfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkZWQ7XG4gICAgfVxuXG4gICAgb25BZGQobWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMubG9hZCgpO1xuICAgIH1cblxuICAgIG9uUmVtb3ZlKCkge1xuICAgICAgICBpZiAodGhpcy5fdGlsZUpTT05SZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLl90aWxlSlNPTlJlcXVlc3QuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl90aWxlSlNPTlJlcXVlc3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zKTtcbiAgICB9XG5cbiAgICBoYXNUaWxlKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCkge1xuICAgICAgICByZXR1cm4gIXRoaXMudGlsZUJvdW5kcyB8fCB0aGlzLnRpbGVCb3VuZHMuY29udGFpbnModGlsZUlELmNhbm9uaWNhbCk7XG4gICAgfVxuXG4gICAgbG9hZFRpbGUodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMubWFwLl9yZXF1ZXN0TWFuYWdlci5ub3JtYWxpemVUaWxlVVJMKHRpbGUudGlsZUlELmNhbm9uaWNhbC51cmwodGhpcy50aWxlcywgdGhpcy5zY2hlbWUpLCB0aGlzLnRpbGVTaXplKTtcbiAgICAgICAgdGlsZS5yZXF1ZXN0ID0gZ2V0SW1hZ2UodGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLnRyYW5zZm9ybVJlcXVlc3QodXJsLCBSZXNvdXJjZVR5cGUuVGlsZSksIChlcnIsIGltZykgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHRpbGUucmVxdWVzdDtcblxuICAgICAgICAgICAgaWYgKHRpbGUuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAndW5sb2FkZWQnO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gJ2Vycm9yZWQnO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGltZykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcC5fcmVmcmVzaEV4cGlyZWRUaWxlcykgdGlsZS5zZXRFeHBpcnlEYXRhKGltZyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIChpbWc6IGFueSkuY2FjaGVDb250cm9sO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAoaW1nOiBhbnkpLmV4cGlyZXM7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5tYXAucGFpbnRlci5jb250ZXh0O1xuICAgICAgICAgICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICAgICAgICAgICAgICB0aWxlLnRleHR1cmUgPSB0aGlzLm1hcC5wYWludGVyLmdldFRpbGVUZXh0dXJlKGltZy53aWR0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHRpbGUudGV4dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWxlLnRleHR1cmUudXBkYXRlKGltZywge3VzZU1pcG1hcDogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbGUudGV4dHVyZSA9IG5ldyBUZXh0dXJlKGNvbnRleHQsIGltZywgZ2wuUkdCQSwge3VzZU1pcG1hcDogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgICB0aWxlLnRleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UsIGdsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJmKGdsLlRFWFRVUkVfMkQsIGNvbnRleHQuZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBjb250ZXh0LmV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpY01heCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gJ2xvYWRlZCc7XG5cbiAgICAgICAgICAgICAgICBjYWNoZUVudHJ5UG9zc2libHlBZGRlZCh0aGlzLmRpc3BhdGNoZXIpO1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFib3J0VGlsZSh0aWxlOiBUaWxlLCBjYWxsYmFjazogQ2FsbGJhY2s8dm9pZD4pIHtcbiAgICAgICAgaWYgKHRpbGUucmVxdWVzdCkge1xuICAgICAgICAgICAgdGlsZS5yZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICAgICAgZGVsZXRlIHRpbGUucmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHVubG9hZFRpbGUodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIGlmICh0aWxlLnRleHR1cmUpIHRoaXMubWFwLnBhaW50ZXIuc2F2ZVRpbGVUZXh0dXJlKHRpbGUudGV4dHVyZSk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgaGFzVHJhbnNpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFzdGVyVGlsZVNvdXJjZTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7Z2V0SW1hZ2UsIFJlc291cmNlVHlwZX0gZnJvbSAnLi4vdXRpbC9hamF4JztcbmltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHtFdmVudGVkfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi4vdXRpbC9icm93c2VyJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnLi4vdXRpbC93aW5kb3cnO1xuaW1wb3J0IG9mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCBmcm9tICcuLi91dGlsL29mZnNjcmVlbl9jYW52YXNfc3VwcG9ydGVkJztcbmltcG9ydCB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi90aWxlX2lkJztcbmltcG9ydCBSYXN0ZXJUaWxlU291cmNlIGZyb20gJy4vcmFzdGVyX3RpbGVfc291cmNlJztcbi8vIGVuc3VyZSBERU1EYXRhIGlzIHJlZ2lzdGVyZWQgZm9yIHdvcmtlciB0cmFuc2ZlciBvbiBtYWluIHRocmVhZDpcbmltcG9ydCAnLi4vZGF0YS9kZW1fZGF0YSc7XG5cbmltcG9ydCB0eXBlIHtTb3VyY2V9IGZyb20gJy4vc291cmNlJztcbmltcG9ydCB0eXBlIERpc3BhdGNoZXIgZnJvbSAnLi4vdXRpbC9kaXNwYXRjaGVyJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi90aWxlJztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuaW1wb3J0IHR5cGUge1Jhc3RlckRFTVNvdXJjZVNwZWNpZmljYXRpb259IGZyb20gJy4uL3N0eWxlLXNwZWMvdHlwZXMnO1xuXG5jbGFzcyBSYXN0ZXJERU1UaWxlU291cmNlIGV4dGVuZHMgUmFzdGVyVGlsZVNvdXJjZSBpbXBsZW1lbnRzIFNvdXJjZSB7XG4gICAgZW5jb2Rpbmc6IFwibWFwYm94XCIgfCBcInRlcnJhcml1bVwiO1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb3B0aW9uczogUmFzdGVyREVNU291cmNlU3BlY2lmaWNhdGlvbiwgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlciwgZXZlbnRlZFBhcmVudDogRXZlbnRlZCkge1xuICAgICAgICBzdXBlcihpZCwgb3B0aW9ucywgZGlzcGF0Y2hlciwgZXZlbnRlZFBhcmVudCk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdyYXN0ZXItZGVtJztcbiAgICAgICAgdGhpcy5tYXh6b29tID0gMjI7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBleHRlbmQoe3R5cGU6ICdyYXN0ZXItZGVtJ30sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZyB8fCBcIm1hcGJveFwiO1xuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdyYXN0ZXItZGVtJyxcbiAgICAgICAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICAgICAgICB0aWxlU2l6ZTogdGhpcy50aWxlU2l6ZSxcbiAgICAgICAgICAgIHRpbGVzOiB0aGlzLnRpbGVzLFxuICAgICAgICAgICAgYm91bmRzOiB0aGlzLmJvdW5kcyxcbiAgICAgICAgICAgIGVuY29kaW5nOiB0aGlzLmVuY29kaW5nXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbG9hZFRpbGUodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMubWFwLl9yZXF1ZXN0TWFuYWdlci5ub3JtYWxpemVUaWxlVVJMKHRpbGUudGlsZUlELmNhbm9uaWNhbC51cmwodGhpcy50aWxlcywgdGhpcy5zY2hlbWUpLCB0aGlzLnRpbGVTaXplKTtcbiAgICAgICAgdGlsZS5yZXF1ZXN0ID0gZ2V0SW1hZ2UodGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLnRyYW5zZm9ybVJlcXVlc3QodXJsLCBSZXNvdXJjZVR5cGUuVGlsZSksIGltYWdlTG9hZGVkLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRpbGUubmVpZ2hib3JpbmdUaWxlcyA9IHRoaXMuX2dldE5laWdoYm9yaW5nVGlsZXModGlsZS50aWxlSUQpO1xuICAgICAgICBmdW5jdGlvbiBpbWFnZUxvYWRlZChlcnIsIGltZykge1xuICAgICAgICAgICAgZGVsZXRlIHRpbGUucmVxdWVzdDtcbiAgICAgICAgICAgIGlmICh0aWxlLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gJ3VubG9hZGVkJztcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9ICdlcnJvcmVkJztcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbWcpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXAuX3JlZnJlc2hFeHBpcmVkVGlsZXMpIHRpbGUuc2V0RXhwaXJ5RGF0YShpbWcpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAoaW1nOiBhbnkpLmNhY2hlQ29udHJvbDtcbiAgICAgICAgICAgICAgICBkZWxldGUgKGltZzogYW55KS5leHBpcmVzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZmVyID0gd2luZG93LkltYWdlQml0bWFwICYmIGltZyBpbnN0YW5jZW9mIHdpbmRvdy5JbWFnZUJpdG1hcCAmJiBvZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByYXdJbWFnZURhdGEgPSB0cmFuc2ZlciA/IGltZyA6IGJyb3dzZXIuZ2V0SW1hZ2VEYXRhKGltZywgMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICB1aWQ6IHRpbGUudWlkLFxuICAgICAgICAgICAgICAgICAgICBjb29yZDogdGlsZS50aWxlSUQsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5pZCxcbiAgICAgICAgICAgICAgICAgICAgcmF3SW1hZ2VEYXRhLFxuICAgICAgICAgICAgICAgICAgICBlbmNvZGluZzogdGhpcy5lbmNvZGluZ1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRpbGUuYWN0b3IgfHwgdGlsZS5zdGF0ZSA9PT0gJ2V4cGlyZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbGUuYWN0b3IgPSB0aGlzLmRpc3BhdGNoZXIuZ2V0QWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS5hY3Rvci5zZW5kKCdsb2FkREVNVGlsZScsIHBhcmFtcywgZG9uZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkb25lKGVyciwgZGVtKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9ICdlcnJvcmVkJztcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVtKSB7XG4gICAgICAgICAgICAgICAgdGlsZS5kZW0gPSBkZW07XG4gICAgICAgICAgICAgICAgdGlsZS5uZWVkc0hpbGxzaGFkZVByZXBhcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAnbG9hZGVkJztcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXROZWlnaGJvcmluZ1RpbGVzKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCkge1xuICAgICAgICBjb25zdCBjYW5vbmljYWwgPSB0aWxlSUQuY2Fub25pY2FsO1xuICAgICAgICBjb25zdCBkaW0gPSBNYXRoLnBvdygyLCBjYW5vbmljYWwueik7XG5cbiAgICAgICAgY29uc3QgcHggPSAoY2Fub25pY2FsLnggLSAxICsgZGltKSAlIGRpbTtcbiAgICAgICAgY29uc3QgcHh3ID0gY2Fub25pY2FsLnggPT09IDAgPyB0aWxlSUQud3JhcCAtIDEgOiB0aWxlSUQud3JhcDtcbiAgICAgICAgY29uc3QgbnggPSAoY2Fub25pY2FsLnggKyAxICsgZGltKSAlIGRpbTtcbiAgICAgICAgY29uc3Qgbnh3ID0gY2Fub25pY2FsLnggKyAxID09PSBkaW0gPyB0aWxlSUQud3JhcCArIDEgOiB0aWxlSUQud3JhcDtcblxuICAgICAgICBjb25zdCBuZWlnaGJvcmluZ1RpbGVzID0ge307XG4gICAgICAgIC8vIGFkZCBhZGphY2VudCB0aWxlc1xuICAgICAgICBuZWlnaGJvcmluZ1RpbGVzW25ldyBPdmVyc2NhbGVkVGlsZUlEKHRpbGVJRC5vdmVyc2NhbGVkWiwgcHh3LCBjYW5vbmljYWwueiwgcHgsIGNhbm9uaWNhbC55KS5rZXldID0ge2JhY2tmaWxsZWQ6IGZhbHNlfTtcbiAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIG54dywgY2Fub25pY2FsLnosIG54LCBjYW5vbmljYWwueSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG5cbiAgICAgICAgLy8gQWRkIHVwcGVyIG5laWdoYm9yaW5nVGlsZXNcbiAgICAgICAgaWYgKGNhbm9uaWNhbC55ID4gMCkge1xuICAgICAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIHB4dywgY2Fub25pY2FsLnosIHB4LCBjYW5vbmljYWwueSAtIDEpLmtleV0gPSB7YmFja2ZpbGxlZDogZmFsc2V9O1xuICAgICAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIHRpbGVJRC53cmFwLCBjYW5vbmljYWwueiwgY2Fub25pY2FsLngsIGNhbm9uaWNhbC55IC0gMSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG4gICAgICAgICAgICBuZWlnaGJvcmluZ1RpbGVzW25ldyBPdmVyc2NhbGVkVGlsZUlEKHRpbGVJRC5vdmVyc2NhbGVkWiwgbnh3LCBjYW5vbmljYWwueiwgbngsIGNhbm9uaWNhbC55IC0gMSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGxvd2VyIG5laWdoYm9yaW5nVGlsZXNcbiAgICAgICAgaWYgKGNhbm9uaWNhbC55ICsgMSA8IGRpbSkge1xuICAgICAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIHB4dywgY2Fub25pY2FsLnosIHB4LCBjYW5vbmljYWwueSArIDEpLmtleV0gPSB7YmFja2ZpbGxlZDogZmFsc2V9O1xuICAgICAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIHRpbGVJRC53cmFwLCBjYW5vbmljYWwueiwgY2Fub25pY2FsLngsIGNhbm9uaWNhbC55ICsgMSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG4gICAgICAgICAgICBuZWlnaGJvcmluZ1RpbGVzW25ldyBPdmVyc2NhbGVkVGlsZUlEKHRpbGVJRC5vdmVyc2NhbGVkWiwgbnh3LCBjYW5vbmljYWwueiwgbngsIGNhbm9uaWNhbC55ICsgMSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVpZ2hib3JpbmdUaWxlcztcbiAgICB9XG5cbiAgICB1bmxvYWRUaWxlKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgaWYgKHRpbGUuZGVtVGV4dHVyZSkgdGhpcy5tYXAucGFpbnRlci5zYXZlVGlsZVRleHR1cmUodGlsZS5kZW1UZXh0dXJlKTtcbiAgICAgICAgaWYgKHRpbGUuZmJvKSB7XG4gICAgICAgICAgICB0aWxlLmZiby5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgdGlsZS5mYm87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbGUuZGVtKSBkZWxldGUgdGlsZS5kZW07XG4gICAgICAgIGRlbGV0ZSB0aWxlLm5laWdoYm9yaW5nVGlsZXM7XG5cbiAgICAgICAgdGlsZS5zdGF0ZSA9ICd1bmxvYWRlZCc7XG4gICAgICAgIGlmICh0aWxlLmFjdG9yKSB7XG4gICAgICAgICAgICB0aWxlLmFjdG9yLnNlbmQoJ3JlbW92ZURFTVRpbGUnLCB7dWlkOiB0aWxlLnVpZCwgc291cmNlOiB0aGlzLmlkfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFzdGVyREVNVGlsZVNvdXJjZTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7RXZlbnQsIEVycm9yRXZlbnQsIEV2ZW50ZWR9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5cbmltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IEVYVEVOVCBmcm9tICcuLi9kYXRhL2V4dGVudCc7XG5pbXBvcnQge1Jlc291cmNlVHlwZX0gZnJvbSAnLi4vdXRpbC9hamF4JztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5cbmltcG9ydCB0eXBlIHtTb3VyY2V9IGZyb20gJy4vc291cmNlJztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi91aS9tYXAnO1xuaW1wb3J0IHR5cGUgRGlzcGF0Y2hlciBmcm9tICcuLi91dGlsL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuL3RpbGUnO1xuaW1wb3J0IHR5cGUgQWN0b3IgZnJvbSAnLi4vdXRpbC9hY3Rvcic7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcbmltcG9ydCB0eXBlIHtHZW9KU09OLCBHZW9KU09ORmVhdHVyZX0gZnJvbSAnQG1hcGJveC9nZW9qc29uLXR5cGVzJztcbmltcG9ydCB0eXBlIHtHZW9KU09OU291cmNlU3BlY2lmaWNhdGlvbiwgUHJvbW90ZUlkU3BlY2lmaWNhdGlvbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5cbi8qKlxuICogQSBzb3VyY2UgY29udGFpbmluZyBHZW9KU09OLlxuICogKFNlZSB0aGUgW1N0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvI3NvdXJjZXMtZ2VvanNvbikgZm9yIGRldGFpbGVkIGRvY3VtZW50YXRpb24gb2Ygb3B0aW9ucy4pXG4gKlxuICogQGV4YW1wbGVcbiAqIG1hcC5hZGRTb3VyY2UoJ3NvbWUgaWQnLCB7XG4gKiAgICAgdHlwZTogJ2dlb2pzb24nLFxuICogICAgIGRhdGE6ICdodHRwczovL2QyYWQ2YjR1cjd5dnBxLmNsb3VkZnJvbnQubmV0L25hdHVyYWxlYXJ0aC0zLjMuMC9uZV8xMG1fcG9ydHMuZ2VvanNvbidcbiAqIH0pO1xuICpcbiAqIEBleGFtcGxlXG4gKiBtYXAuYWRkU291cmNlKCdzb21lIGlkJywge1xuICogICAgdHlwZTogJ2dlb2pzb24nLFxuICogICAgZGF0YToge1xuICogICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVDb2xsZWN0aW9uXCIsXG4gKiAgICAgICAgXCJmZWF0dXJlc1wiOiBbe1xuICogICAgICAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7fSxcbiAqICAgICAgICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICAgICAgICAgXCJjb29yZGluYXRlc1wiOiBbXG4gKiAgICAgICAgICAgICAgICAgICAgLTc2LjUzMDYzMjk3MjcxNzI5LFxuICogICAgICAgICAgICAgICAgICAgIDM5LjE4MTc0MDc3OTk0MTA4XG4gKiAgICAgICAgICAgICAgICBdXG4gKiAgICAgICAgICAgIH1cbiAqICAgICAgICB9XVxuICogICAgfVxuICogfSk7XG4gKlxuICogQGV4YW1wbGVcbiAqIG1hcC5nZXRTb3VyY2UoJ3NvbWUgaWQnKS5zZXREYXRhKHtcbiAqICAgXCJ0eXBlXCI6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIixcbiAqICAgXCJmZWF0dXJlc1wiOiBbe1xuICogICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZVwiLFxuICogICAgICAgXCJwcm9wZXJ0aWVzXCI6IHsgXCJuYW1lXCI6IFwiTnVsbCBJc2xhbmRcIiB9LFxuICogICAgICAgXCJnZW9tZXRyeVwiOiB7XG4gKiAgICAgICAgICAgXCJ0eXBlXCI6IFwiUG9pbnRcIixcbiAqICAgICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFsgMCwgMCBdXG4gKiAgICAgICB9XG4gKiAgIH1dXG4gKiB9KTtcbiAqIEBzZWUgW0RyYXcgR2VvSlNPTiBwb2ludHNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZ2VvanNvbi1tYXJrZXJzLylcbiAqIEBzZWUgW0FkZCBhIEdlb0pTT04gbGluZV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9nZW9qc29uLWxpbmUvKVxuICogQHNlZSBbQ3JlYXRlIGEgaGVhdG1hcCBmcm9tIHBvaW50c10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9oZWF0bWFwLylcbiAqIEBzZWUgW0NyZWF0ZSBhbmQgc3R5bGUgY2x1c3RlcnNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvY2x1c3Rlci8pXG4gKi9cbmNsYXNzIEdlb0pTT05Tb3VyY2UgZXh0ZW5kcyBFdmVudGVkIGltcGxlbWVudHMgU291cmNlIHtcbiAgICB0eXBlOiAnZ2VvanNvbic7XG4gICAgaWQ6IHN0cmluZztcbiAgICBtaW56b29tOiBudW1iZXI7XG4gICAgbWF4em9vbTogbnVtYmVyO1xuICAgIHRpbGVTaXplOiBudW1iZXI7XG4gICAgYXR0cmlidXRpb246IHN0cmluZztcbiAgICBwcm9tb3RlSWQ6ID9Qcm9tb3RlSWRTcGVjaWZpY2F0aW9uO1xuXG4gICAgaXNUaWxlQ2xpcHBlZDogYm9vbGVhbjtcbiAgICByZXBhcnNlT3ZlcnNjYWxlZDogYm9vbGVhbjtcbiAgICBfZGF0YTogR2VvSlNPTiB8IHN0cmluZztcbiAgICBfb3B0aW9uczogYW55O1xuICAgIHdvcmtlck9wdGlvbnM6IGFueTtcbiAgICBtYXA6IE1hcDtcbiAgICBhY3RvcjogQWN0b3I7XG4gICAgX2xvYWRlZDogYm9vbGVhbjtcbiAgICBfY29sbGVjdFJlc291cmNlVGltaW5nOiBib29sZWFuO1xuICAgIF9yZXNvdXJjZVRpbWluZzogQXJyYXk8UGVyZm9ybWFuY2VSZXNvdXJjZVRpbWluZz47XG4gICAgX3JlbW92ZWQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIG9wdGlvbnM6IEdlb0pTT05Tb3VyY2VTcGVjaWZpY2F0aW9uICYge3dvcmtlck9wdGlvbnM/OiBhbnksIGNvbGxlY3RSZXNvdXJjZVRpbWluZzogYm9vbGVhbn0sIGRpc3BhdGNoZXI6IERpc3BhdGNoZXIsIGV2ZW50ZWRQYXJlbnQ6IEV2ZW50ZWQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgLy8gYHR5cGVgIGlzIGEgcHJvcGVydHkgcmF0aGVyIHRoYW4gYSBjb25zdGFudCB0byBtYWtlIGl0IGVhc3kgZm9yIDNyZFxuICAgICAgICAvLyBwYXJ0aWVzIHRvIHVzZSBHZW9KU09OU291cmNlIHRvIGJ1aWxkIHRoZWlyIG93biBzb3VyY2UgdHlwZXMuXG4gICAgICAgIHRoaXMudHlwZSA9ICdnZW9qc29uJztcblxuICAgICAgICB0aGlzLm1pbnpvb20gPSAwO1xuICAgICAgICB0aGlzLm1heHpvb20gPSAxODtcbiAgICAgICAgdGhpcy50aWxlU2l6ZSA9IDUxMjtcbiAgICAgICAgdGhpcy5pc1RpbGVDbGlwcGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZXBhcnNlT3ZlcnNjYWxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbG9hZGVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5hY3RvciA9IGRpc3BhdGNoZXIuZ2V0QWN0b3IoKTtcbiAgICAgICAgdGhpcy5zZXRFdmVudGVkUGFyZW50KGV2ZW50ZWRQYXJlbnQpO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSAob3B0aW9ucy5kYXRhOiBhbnkpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLl9jb2xsZWN0UmVzb3VyY2VUaW1pbmcgPSBvcHRpb25zLmNvbGxlY3RSZXNvdXJjZVRpbWluZztcbiAgICAgICAgdGhpcy5fcmVzb3VyY2VUaW1pbmcgPSBbXTtcblxuICAgICAgICBpZiAob3B0aW9ucy5tYXh6b29tICE9PSB1bmRlZmluZWQpIHRoaXMubWF4em9vbSA9IG9wdGlvbnMubWF4em9vbTtcbiAgICAgICAgaWYgKG9wdGlvbnMudHlwZSkgdGhpcy50eXBlID0gb3B0aW9ucy50eXBlO1xuICAgICAgICBpZiAob3B0aW9ucy5hdHRyaWJ1dGlvbikgdGhpcy5hdHRyaWJ1dGlvbiA9IG9wdGlvbnMuYXR0cmlidXRpb247XG4gICAgICAgIHRoaXMucHJvbW90ZUlkID0gb3B0aW9ucy5wcm9tb3RlSWQ7XG5cbiAgICAgICAgY29uc3Qgc2NhbGUgPSBFWFRFTlQgLyB0aGlzLnRpbGVTaXplO1xuXG4gICAgICAgIC8vIHNlbnQgdG8gdGhlIHdvcmtlciwgYWxvbmcgd2l0aCBgdXJsOiAuLi5gIG9yIGBkYXRhOiBsaXRlcmFsIGdlb2pzb25gLFxuICAgICAgICAvLyBzbyB0aGF0IGl0IGNhbiBsb2FkL3BhcnNlL2luZGV4IHRoZSBnZW9qc29uIGRhdGFcbiAgICAgICAgLy8gZXh0ZW5kaW5nIHdpdGggYG9wdGlvbnMud29ya2VyT3B0aW9uc2AgaGVscHMgdG8gbWFrZSBpdCBlYXN5IGZvclxuICAgICAgICAvLyB0aGlyZC1wYXJ0eSBzb3VyY2VzIHRvIGhhY2svcmV1c2UgR2VvSlNPTlNvdXJjZS5cbiAgICAgICAgdGhpcy53b3JrZXJPcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5pZCxcbiAgICAgICAgICAgIGNsdXN0ZXI6IG9wdGlvbnMuY2x1c3RlciB8fCBmYWxzZSxcbiAgICAgICAgICAgIGdlb2pzb25WdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBidWZmZXI6IChvcHRpb25zLmJ1ZmZlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5idWZmZXIgOiAxMjgpICogc2NhbGUsXG4gICAgICAgICAgICAgICAgdG9sZXJhbmNlOiAob3B0aW9ucy50b2xlcmFuY2UgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudG9sZXJhbmNlIDogMC4zNzUpICogc2NhbGUsXG4gICAgICAgICAgICAgICAgZXh0ZW50OiBFWFRFTlQsXG4gICAgICAgICAgICAgICAgbWF4Wm9vbTogdGhpcy5tYXh6b29tLFxuICAgICAgICAgICAgICAgIGxpbmVNZXRyaWNzOiBvcHRpb25zLmxpbmVNZXRyaWNzIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlSWQ6IG9wdGlvbnMuZ2VuZXJhdGVJZCB8fCBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1cGVyY2x1c3Rlck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBtYXhab29tOiBvcHRpb25zLmNsdXN0ZXJNYXhab29tICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihvcHRpb25zLmNsdXN0ZXJNYXhab29tLCB0aGlzLm1heHpvb20gLSAxKSA6XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLm1heHpvb20gLSAxKSxcbiAgICAgICAgICAgICAgICBtaW5Qb2ludHM6IE1hdGgubWF4KDIsIG9wdGlvbnMuY2x1c3Rlck1pblBvaW50cyB8fCAyKSxcbiAgICAgICAgICAgICAgICBleHRlbnQ6IEVYVEVOVCxcbiAgICAgICAgICAgICAgICByYWRpdXM6IChvcHRpb25zLmNsdXN0ZXJSYWRpdXMgfHwgNTApICogc2NhbGUsXG4gICAgICAgICAgICAgICAgbG9nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUlkOiBvcHRpb25zLmdlbmVyYXRlSWQgfHwgZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbHVzdGVyUHJvcGVydGllczogb3B0aW9ucy5jbHVzdGVyUHJvcGVydGllcyxcbiAgICAgICAgICAgIGZpbHRlcjogb3B0aW9ucy5maWx0ZXJcbiAgICAgICAgfSwgb3B0aW9ucy53b3JrZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBsb2FkKCkge1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhbG9hZGluZycsIHtkYXRhVHlwZTogJ3NvdXJjZSd9KSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVdvcmtlckRhdGEoKGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChlcnIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGE6IE9iamVjdCA9IHtkYXRhVHlwZTogJ3NvdXJjZScsIHNvdXJjZURhdGFUeXBlOiAnbWV0YWRhdGEnfTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsZWN0UmVzb3VyY2VUaW1pbmcgJiYgdGhpcy5fcmVzb3VyY2VUaW1pbmcgJiYgKHRoaXMuX3Jlc291cmNlVGltaW5nLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5yZXNvdXJjZVRpbWluZyA9IHRoaXMuX3Jlc291cmNlVGltaW5nO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc291cmNlVGltaW5nID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFsdGhvdWdoIEdlb0pTT04gc291cmNlcyBjb250YWluIG5vIG1ldGFkYXRhLCB3ZSBmaXJlIHRoaXMgZXZlbnQgdG8gbGV0IHRoZSBTb3VyY2VDYWNoZVxuICAgICAgICAgICAgLy8ga25vdyBpdHMgb2sgdG8gc3RhcnQgcmVxdWVzdGluZyB0aWxlcy5cbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCBkYXRhKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBHZW9KU09OIGRhdGEgYW5kIHJlLXJlbmRlcnMgdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gZGF0YSBBIEdlb0pTT04gZGF0YSBvYmplY3Qgb3IgYSBVUkwgdG8gb25lLiBUaGUgbGF0dGVyIGlzIHByZWZlcmFibGUgaW4gdGhlIGNhc2Ugb2YgbGFyZ2UgR2VvSlNPTiBmaWxlcy5cbiAgICAgKiBAcmV0dXJucyB7R2VvSlNPTlNvdXJjZX0gdGhpc1xuICAgICAqL1xuICAgIHNldERhdGEoZGF0YTogR2VvSlNPTiB8IHN0cmluZykge1xuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnfSkpO1xuICAgICAgICB0aGlzLl91cGRhdGVXb3JrZXJEYXRhKChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQoZXJyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkYXRhOiBPYmplY3QgPSB7ZGF0YVR5cGU6ICdzb3VyY2UnLCBzb3VyY2VEYXRhVHlwZTogJ2NvbnRlbnQnfTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsZWN0UmVzb3VyY2VUaW1pbmcgJiYgdGhpcy5fcmVzb3VyY2VUaW1pbmcgJiYgKHRoaXMuX3Jlc291cmNlVGltaW5nLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5yZXNvdXJjZVRpbWluZyA9IHRoaXMuX3Jlc291cmNlVGltaW5nO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc291cmNlVGltaW5nID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhJywgZGF0YSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3IgY2x1c3RlcmVkIHNvdXJjZXMsIGZldGNoZXMgdGhlIHpvb20gYXQgd2hpY2ggdGhlIGdpdmVuIGNsdXN0ZXIgZXhwYW5kcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgVGhlIHZhbHVlIG9mIHRoZSBjbHVzdGVyJ3MgYGNsdXN0ZXJfaWRgIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSB6b29tIHZhbHVlIGlzIHJldHJpZXZlZCAoYChlcnJvciwgem9vbSkgPT4geyAuLi4gfWApLlxuICAgICAqIEByZXR1cm5zIHtHZW9KU09OU291cmNlfSB0aGlzXG4gICAgICovXG4gICAgZ2V0Q2x1c3RlckV4cGFuc2lvblpvb20oY2x1c3RlcklkOiBudW1iZXIsIGNhbGxiYWNrOiBDYWxsYmFjazxudW1iZXI+KSB7XG4gICAgICAgIHRoaXMuYWN0b3Iuc2VuZCgnZ2VvanNvbi5nZXRDbHVzdGVyRXhwYW5zaW9uWm9vbScsIHtjbHVzdGVySWQsIHNvdXJjZTogdGhpcy5pZH0sIGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yIGNsdXN0ZXJlZCBzb3VyY2VzLCBmZXRjaGVzIHRoZSBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gY2x1c3RlciBvbiB0aGUgbmV4dCB6b29tIGxldmVsIChhcyBhbiBhcnJheSBvZiBHZW9KU09OIGZlYXR1cmVzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgVGhlIHZhbHVlIG9mIHRoZSBjbHVzdGVyJ3MgYGNsdXN0ZXJfaWRgIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBmZWF0dXJlcyBhcmUgcmV0cmlldmVkIChgKGVycm9yLCBmZWF0dXJlcykgPT4geyAuLi4gfWApLlxuICAgICAqIEByZXR1cm5zIHtHZW9KU09OU291cmNlfSB0aGlzXG4gICAgICovXG4gICAgZ2V0Q2x1c3RlckNoaWxkcmVuKGNsdXN0ZXJJZDogbnVtYmVyLCBjYWxsYmFjazogQ2FsbGJhY2s8QXJyYXk8R2VvSlNPTkZlYXR1cmU+Pikge1xuICAgICAgICB0aGlzLmFjdG9yLnNlbmQoJ2dlb2pzb24uZ2V0Q2x1c3RlckNoaWxkcmVuJywge2NsdXN0ZXJJZCwgc291cmNlOiB0aGlzLmlkfSwgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3IgY2x1c3RlcmVkIHNvdXJjZXMsIGZldGNoZXMgdGhlIG9yaWdpbmFsIHBvaW50cyB0aGF0IGJlbG9uZyB0byB0aGUgY2x1c3RlciAoYXMgYW4gYXJyYXkgb2YgR2VvSlNPTiBmZWF0dXJlcykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2x1c3RlcklkIFRoZSB2YWx1ZSBvZiB0aGUgY2x1c3RlcidzIGBjbHVzdGVyX2lkYCBwcm9wZXJ0eS5cbiAgICAgKiBAcGFyYW0gbGltaXQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGZlYXR1cmVzIHRvIHJldHVybi5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSBudW1iZXIgb2YgZmVhdHVyZXMgdG8gc2tpcCAoZS5nLiBmb3IgcGFnaW5hdGlvbikuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGZlYXR1cmVzIGFyZSByZXRyaWV2ZWQgKGAoZXJyb3IsIGZlYXR1cmVzKSA9PiB7IC4uLiB9YCkuXG4gICAgICogQHJldHVybnMge0dlb0pTT05Tb3VyY2V9IHRoaXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFJldHJpZXZlIGNsdXN0ZXIgbGVhdmVzIG9uIGNsaWNrXG4gICAgICogbWFwLm9uKCdjbGljaycsICdjbHVzdGVycycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgKiAgIHZhciBmZWF0dXJlcyA9IG1hcC5xdWVyeVJlbmRlcmVkRmVhdHVyZXMoZS5wb2ludCwge1xuICAgICAqICAgICBsYXllcnM6IFsnY2x1c3RlcnMnXVxuICAgICAqICAgfSk7XG4gICAgICpcbiAgICAgKiAgIHZhciBjbHVzdGVySWQgPSBmZWF0dXJlc1swXS5wcm9wZXJ0aWVzLmNsdXN0ZXJfaWQ7XG4gICAgICogICB2YXIgcG9pbnRDb3VudCA9IGZlYXR1cmVzWzBdLnByb3BlcnRpZXMucG9pbnRfY291bnQ7XG4gICAgICogICB2YXIgY2x1c3RlclNvdXJjZSA9IG1hcC5nZXRTb3VyY2UoJ2NsdXN0ZXJzJyk7XG4gICAgICpcbiAgICAgKiAgIGNsdXN0ZXJTb3VyY2UuZ2V0Q2x1c3RlckxlYXZlcyhjbHVzdGVySWQsIHBvaW50Q291bnQsIDAsIGZ1bmN0aW9uKGVycm9yLCBmZWF0dXJlcykge1xuICAgICAqICAgICAvLyBQcmludCBjbHVzdGVyIGxlYXZlcyBpbiB0aGUgY29uc29sZVxuICAgICAqICAgICBjb25zb2xlLmxvZygnQ2x1c3RlciBsZWF2ZXM6JywgZXJyb3IsIGZlYXR1cmVzKTtcbiAgICAgKiAgIH0pXG4gICAgICogfSk7XG4gICAgICovXG4gICAgZ2V0Q2x1c3RlckxlYXZlcyhjbHVzdGVySWQ6IG51bWJlciwgbGltaXQ6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIsIGNhbGxiYWNrOiBDYWxsYmFjazxBcnJheTxHZW9KU09ORmVhdHVyZT4+KSB7XG4gICAgICAgIHRoaXMuYWN0b3Iuc2VuZCgnZ2VvanNvbi5nZXRDbHVzdGVyTGVhdmVzJywge1xuICAgICAgICAgICAgc291cmNlOiB0aGlzLmlkLFxuICAgICAgICAgICAgY2x1c3RlcklkLFxuICAgICAgICAgICAgbGltaXQsXG4gICAgICAgICAgICBvZmZzZXRcbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFJlc3BvbnNpYmxlIGZvciBpbnZva2luZyBXb3JrZXJTb3VyY2UncyBnZW9qc29uLmxvYWREYXRhIHRhcmdldCwgd2hpY2hcbiAgICAgKiBoYW5kbGVzIGxvYWRpbmcgdGhlIGdlb2pzb24gZGF0YSBhbmQgcHJlcGFyaW5nIHRvIHNlcnZlIGl0IHVwIGFzIHRpbGVzLFxuICAgICAqIHVzaW5nIGdlb2pzb24tdnQgb3Igc3VwZXJjbHVzdGVyIGFzIGFwcHJvcHJpYXRlLlxuICAgICAqL1xuICAgIF91cGRhdGVXb3JrZXJEYXRhKGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikge1xuICAgICAgICB0aGlzLl9sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGV4dGVuZCh7fSwgdGhpcy53b3JrZXJPcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVxdWVzdCA9IHRoaXMubWFwLl9yZXF1ZXN0TWFuYWdlci50cmFuc2Zvcm1SZXF1ZXN0KGJyb3dzZXIucmVzb2x2ZVVSTChkYXRhKSwgUmVzb3VyY2VUeXBlLlNvdXJjZSk7XG4gICAgICAgICAgICBvcHRpb25zLnJlcXVlc3QuY29sbGVjdFJlc291cmNlVGltaW5nID0gdGhpcy5fY29sbGVjdFJlc291cmNlVGltaW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5kYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0YXJnZXQge3RoaXMudHlwZX0ubG9hZERhdGEgcmF0aGVyIHRoYW4gbGl0ZXJhbGx5IGdlb2pzb24ubG9hZERhdGEsXG4gICAgICAgIC8vIHNvIHRoYXQgb3RoZXIgZ2VvanNvbi1saWtlIHNvdXJjZSB0eXBlcyBjYW4gZWFzaWx5IHJldXNlIHRoaXNcbiAgICAgICAgLy8gaW1wbGVtZW50YXRpb25cbiAgICAgICAgdGhpcy5hY3Rvci5zZW5kKGAke3RoaXMudHlwZX0ubG9hZERhdGFgLCBvcHRpb25zLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW1vdmVkIHx8IChyZXN1bHQgJiYgcmVzdWx0LmFiYW5kb25lZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2xvYWRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnJlc291cmNlVGltaW5nICYmIHJlc3VsdC5yZXNvdXJjZVRpbWluZ1t0aGlzLmlkXSlcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvdXJjZVRpbWluZyA9IHJlc3VsdC5yZXNvdXJjZVRpbWluZ1t0aGlzLmlkXS5zbGljZSgwKTtcbiAgICAgICAgICAgIC8vIEFueSBgbG9hZERhdGFgIGNhbGxzIHRoYXQgcGlsZWQgdXAgd2hpbGUgd2Ugd2VyZSBwcm9jZXNzaW5nXG4gICAgICAgICAgICAvLyB0aGlzIG9uZSB3aWxsIGdldCBjb2FsZXNjZWQgaW50byBhIHNpbmdsZSBjYWxsIHdoZW4gdGhpc1xuICAgICAgICAgICAgLy8gJ2NvYWxlc2NlJyBtZXNzYWdlIGlzIHByb2Nlc3NlZC5cbiAgICAgICAgICAgIC8vIFdlIHdvdWxkIHNlbGYtc2VuZCBmcm9tIHRoZSB3b3JrZXIgaWYgd2UgaGFkIGFjY2VzcyB0byBpdHNcbiAgICAgICAgICAgIC8vIG1lc3NhZ2UgcXVldWUuIFdhaXRpbmcgaW5zdGVhZCBmb3IgdGhlICdjb2FsZXNjZScgdG8gcm91bmQtdHJpcFxuICAgICAgICAgICAgLy8gdGhyb3VnaCB0aGUgZm9yZWdyb3VuZCBqdXN0IG1lYW5zIHdlJ3JlIHRocm90dGxpbmcgdGhlIHdvcmtlclxuICAgICAgICAgICAgLy8gdG8gcnVuIGF0IGEgbGl0dGxlIGxlc3MgdGhhbiBmdWxsLXRocm90dGxlLlxuICAgICAgICAgICAgdGhpcy5hY3Rvci5zZW5kKGAke3RoaXMudHlwZX0uY29hbGVzY2VgLCB7c291cmNlOiBvcHRpb25zLnNvdXJjZX0sIG51bGwpO1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbG9hZGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZGVkO1xuICAgIH1cblxuICAgIGxvYWRUaWxlKHRpbGU6IFRpbGUsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gIXRpbGUuYWN0b3IgPyAnbG9hZFRpbGUnIDogJ3JlbG9hZFRpbGUnO1xuICAgICAgICB0aWxlLmFjdG9yID0gdGhpcy5hY3RvcjtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgdWlkOiB0aWxlLnVpZCxcbiAgICAgICAgICAgIHRpbGVJRDogdGlsZS50aWxlSUQsXG4gICAgICAgICAgICB6b29tOiB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWixcbiAgICAgICAgICAgIG1heFpvb206IHRoaXMubWF4em9vbSxcbiAgICAgICAgICAgIHRpbGVTaXplOiB0aGlzLnRpbGVTaXplLFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLmlkLFxuICAgICAgICAgICAgcGl4ZWxSYXRpbzogYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvLFxuICAgICAgICAgICAgc2hvd0NvbGxpc2lvbkJveGVzOiB0aGlzLm1hcC5zaG93Q29sbGlzaW9uQm94ZXMsXG4gICAgICAgICAgICBwcm9tb3RlSWQ6IHRoaXMucHJvbW90ZUlkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGlsZS5yZXF1ZXN0ID0gdGhpcy5hY3Rvci5zZW5kKG1lc3NhZ2UsIHBhcmFtcywgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHRpbGUucmVxdWVzdDtcbiAgICAgICAgICAgIHRpbGUudW5sb2FkVmVjdG9yRGF0YSgpO1xuXG4gICAgICAgICAgICBpZiAodGlsZS5hYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRpbGUubG9hZFZlY3RvckRhdGEoZGF0YSwgdGhpcy5tYXAucGFpbnRlciwgbWVzc2FnZSA9PT0gJ3JlbG9hZFRpbGUnKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhYm9ydFRpbGUodGlsZTogVGlsZSkge1xuICAgICAgICBpZiAodGlsZS5yZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aWxlLnJlcXVlc3QuY2FuY2VsKCk7XG4gICAgICAgICAgICBkZWxldGUgdGlsZS5yZXF1ZXN0O1xuICAgICAgICB9XG4gICAgICAgIHRpbGUuYWJvcnRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgdW5sb2FkVGlsZSh0aWxlOiBUaWxlKSB7XG4gICAgICAgIHRpbGUudW5sb2FkVmVjdG9yRGF0YSgpO1xuICAgICAgICB0aGlzLmFjdG9yLnNlbmQoJ3JlbW92ZVRpbGUnLCB7dWlkOiB0aWxlLnVpZCwgdHlwZTogdGhpcy50eXBlLCBzb3VyY2U6IHRoaXMuaWR9KTtcbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYWN0b3Iuc2VuZCgncmVtb3ZlU291cmNlJywge3R5cGU6IHRoaXMudHlwZSwgc291cmNlOiB0aGlzLmlkfSk7XG4gICAgfVxuXG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zLCB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICBkYXRhOiB0aGlzLl9kYXRhXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhhc1RyYW5zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlb0pTT05Tb3VyY2U7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge0Nhbm9uaWNhbFRpbGVJRH0gZnJvbSAnLi90aWxlX2lkJztcbmltcG9ydCB7RXZlbnQsIEVycm9yRXZlbnQsIEV2ZW50ZWR9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQge2dldEltYWdlLCBSZXNvdXJjZVR5cGV9IGZyb20gJy4uL3V0aWwvYWpheCc7XG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcbmltcG9ydCB7UmFzdGVyQm91bmRzQXJyYXl9IGZyb20gJy4uL2RhdGEvYXJyYXlfdHlwZXMnO1xuaW1wb3J0IHJhc3RlckJvdW5kc0F0dHJpYnV0ZXMgZnJvbSAnLi4vZGF0YS9yYXN0ZXJfYm91bmRzX2F0dHJpYnV0ZXMnO1xuaW1wb3J0IFNlZ21lbnRWZWN0b3IgZnJvbSAnLi4vZGF0YS9zZWdtZW50JztcbmltcG9ydCBUZXh0dXJlIGZyb20gJy4uL3JlbmRlci90ZXh0dXJlJztcbmltcG9ydCBNZXJjYXRvckNvb3JkaW5hdGUgZnJvbSAnLi4vZ2VvL21lcmNhdG9yX2Nvb3JkaW5hdGUnO1xuXG5pbXBvcnQgdHlwZSB7U291cmNlfSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQgdHlwZSB7Q2FudmFzU291cmNlU3BlY2lmaWNhdGlvbn0gZnJvbSAnLi9jYW52YXNfc291cmNlJztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi91aS9tYXAnO1xuaW1wb3J0IHR5cGUgRGlzcGF0Y2hlciBmcm9tICcuLi91dGlsL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuL3RpbGUnO1xuaW1wb3J0IHR5cGUge0NhbGxiYWNrfSBmcm9tICcuLi90eXBlcy9jYWxsYmFjayc7XG5pbXBvcnQgdHlwZSBWZXJ0ZXhCdWZmZXIgZnJvbSAnLi4vZ2wvdmVydGV4X2J1ZmZlcic7XG5pbXBvcnQgdHlwZSB7XG4gICAgSW1hZ2VTb3VyY2VTcGVjaWZpY2F0aW9uLFxuICAgIFZpZGVvU291cmNlU3BlY2lmaWNhdGlvblxufSBmcm9tICcuLi9zdHlsZS1zcGVjL3R5cGVzJztcblxudHlwZSBDb29yZGluYXRlcyA9IFtbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdXTtcblxuLyoqXG4gKiBBIGRhdGEgc291cmNlIGNvbnRhaW5pbmcgYW4gaW1hZ2UuXG4gKiAoU2VlIHRoZSBbU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8jc291cmNlcy1pbWFnZSkgZm9yIGRldGFpbGVkIGRvY3VtZW50YXRpb24gb2Ygb3B0aW9ucy4pXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIGFkZCB0byBtYXBcbiAqIG1hcC5hZGRTb3VyY2UoJ3NvbWUgaWQnLCB7XG4gKiAgICB0eXBlOiAnaW1hZ2UnLFxuICogICAgdXJsOiAnaHR0cHM6Ly93d3cubWFwYm94LmNvbS9pbWFnZXMvZm9vLnBuZycsXG4gKiAgICBjb29yZGluYXRlczogW1xuICogICAgICAgIFstNzYuNTQsIDM5LjE4XSxcbiAqICAgICAgICBbLTc2LjUyLCAzOS4xOF0sXG4gKiAgICAgICAgWy03Ni41MiwgMzkuMTddLFxuICogICAgICAgIFstNzYuNTQsIDM5LjE3XVxuICogICAgXVxuICogfSk7XG4gKlxuICogLy8gdXBkYXRlIGNvb3JkaW5hdGVzXG4gKiB2YXIgbXlTb3VyY2UgPSBtYXAuZ2V0U291cmNlKCdzb21lIGlkJyk7XG4gKiBteVNvdXJjZS5zZXRDb29yZGluYXRlcyhbXG4gKiAgICAgWy03Ni41NDMzNTczNzIyODM5NCwgMzkuMTg1Nzk5MDcyMjk3NDhdLFxuICogICAgIFstNzYuNTI4MDM2NTk0MzkwODcsIDM5LjE4MzgzNjQ4NDc1ODddLFxuICogICAgIFstNzYuNTI5NTM4NjMxNDM5MiwgMzkuMTc2ODMzOTI1MDc2MDZdLFxuICogICAgIFstNzYuNTQ1MjAyNzMyMDg2MTgsIDM5LjE3ODc2MzQ0MTA2NjQyXVxuICogXSk7XG4gKlxuICogLy8gdXBkYXRlIHVybCBhbmQgY29vcmRpbmF0ZXMgc2ltdWx0YW5lb3VzbHlcbiAqIG15U291cmNlLnVwZGF0ZUltYWdlKHtcbiAqICAgIHVybDogJ2h0dHBzOi8vd3d3Lm1hcGJveC5jb20vaW1hZ2VzL2Jhci5wbmcnLFxuICogICAgY29vcmRpbmF0ZXM6IFtcbiAqICAgICAgICBbLTc2LjU0MzM1NzM3MjI4Mzk0LCAzOS4xODU3OTkwNzIyOTc0OF0sXG4gKiAgICAgICAgWy03Ni41MjgwMzY1OTQzOTA4NywgMzkuMTgzODM2NDg0NzU4N10sXG4gKiAgICAgICAgWy03Ni41Mjk1Mzg2MzE0MzkyLCAzOS4xNzY4MzM5MjUwNzYwNl0sXG4gKiAgICAgICAgWy03Ni41NDUyMDI3MzIwODYxOCwgMzkuMTc4NzYzNDQxMDY2NDJdXG4gKiAgICBdXG4gKiB9KVxuICpcbiAqIG1hcC5yZW1vdmVTb3VyY2UoJ3NvbWUgaWQnKTsgIC8vIHJlbW92ZVxuICogQHNlZSBbQWRkIGFuIGltYWdlXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2ltYWdlLW9uLWEtbWFwLylcbiAqL1xuY2xhc3MgSW1hZ2VTb3VyY2UgZXh0ZW5kcyBFdmVudGVkIGltcGxlbWVudHMgU291cmNlIHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZztcbiAgICBtaW56b29tOiBudW1iZXI7XG4gICAgbWF4em9vbTogbnVtYmVyO1xuICAgIHRpbGVTaXplOiBudW1iZXI7XG4gICAgdXJsOiBzdHJpbmc7XG5cbiAgICBjb29yZGluYXRlczogQ29vcmRpbmF0ZXM7XG4gICAgdGlsZXM6IHtbXzogc3RyaW5nXTogVGlsZX07XG4gICAgb3B0aW9uczogYW55O1xuICAgIGRpc3BhdGNoZXI6IERpc3BhdGNoZXI7XG4gICAgbWFwOiBNYXA7XG4gICAgdGV4dHVyZTogVGV4dHVyZSB8IG51bGw7XG4gICAgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgfCBJbWFnZUJpdG1hcDtcbiAgICB0aWxlSUQ6IENhbm9uaWNhbFRpbGVJRDtcbiAgICBfYm91bmRzQXJyYXk6IFJhc3RlckJvdW5kc0FycmF5O1xuICAgIGJvdW5kc0J1ZmZlcjogVmVydGV4QnVmZmVyO1xuICAgIGJvdW5kc1NlZ21lbnRzOiBTZWdtZW50VmVjdG9yO1xuICAgIF9sb2FkZWQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIG9wdGlvbnM6IEltYWdlU291cmNlU3BlY2lmaWNhdGlvbiB8IFZpZGVvU291cmNlU3BlY2lmaWNhdGlvbiB8IENhbnZhc1NvdXJjZVNwZWNpZmljYXRpb24sIGRpc3BhdGNoZXI6IERpc3BhdGNoZXIsIGV2ZW50ZWRQYXJlbnQ6IEV2ZW50ZWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyO1xuICAgICAgICB0aGlzLmNvb3JkaW5hdGVzID0gb3B0aW9ucy5jb29yZGluYXRlcztcblxuICAgICAgICB0aGlzLnR5cGUgPSAnaW1hZ2UnO1xuICAgICAgICB0aGlzLm1pbnpvb20gPSAwO1xuICAgICAgICB0aGlzLm1heHpvb20gPSAyMjtcbiAgICAgICAgdGhpcy50aWxlU2l6ZSA9IDUxMjtcbiAgICAgICAgdGhpcy50aWxlcyA9IHt9O1xuICAgICAgICB0aGlzLl9sb2FkZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnNldEV2ZW50ZWRQYXJlbnQoZXZlbnRlZFBhcmVudCk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBsb2FkKG5ld0Nvb3JkaW5hdGVzPzogQ29vcmRpbmF0ZXMsIHN1Y2Nlc3NDYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fbG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGFsb2FkaW5nJywge2RhdGFUeXBlOiAnc291cmNlJ30pKTtcblxuICAgICAgICB0aGlzLnVybCA9IHRoaXMub3B0aW9ucy51cmw7XG5cbiAgICAgICAgZ2V0SW1hZ2UodGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLnRyYW5zZm9ybVJlcXVlc3QodGhpcy51cmwsIFJlc291cmNlVHlwZS5JbWFnZSksIChlcnIsIGltYWdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChlcnIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0Nvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZXMgPSBuZXdDb29yZGluYXRlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluaXNoTG9hZGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgaW1hZ2UgVVJMIGFuZCwgb3B0aW9uYWxseSwgdGhlIGNvb3JkaW5hdGVzLiBUbyBhdm9pZCBoYXZpbmcgdGhlIGltYWdlIGZsYXNoIGFmdGVyIGNoYW5naW5nLFxuICAgICAqIHNldCB0aGUgYHJhc3Rlci1mYWRlLWR1cmF0aW9uYCBwYWludCBwcm9wZXJ0eSBvbiB0aGUgcmFzdGVyIGxheWVyIHRvIDAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudXJsXSBSZXF1aXJlZCBpbWFnZSBVUkwuXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gW29wdGlvbnMuY29vcmRpbmF0ZXNdIEZvdXIgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGVzLFxuICAgICAqICAgcmVwcmVzZW50ZWQgYXMgYXJyYXlzIG9mIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgbnVtYmVycywgd2hpY2ggZGVmaW5lIHRoZSBjb3JuZXJzIG9mIHRoZSBpbWFnZS5cbiAgICAgKiAgIFRoZSBjb29yZGluYXRlcyBzdGFydCBhdCB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBpbWFnZSBhbmQgcHJvY2VlZCBpbiBjbG9ja3dpc2Ugb3JkZXIuXG4gICAgICogICBUaGV5IGRvIG5vdCBoYXZlIHRvIHJlcHJlc2VudCBhIHJlY3RhbmdsZS5cbiAgICAgKiBAcmV0dXJucyB7SW1hZ2VTb3VyY2V9IHRoaXNcbiAgICAgKi9cbiAgICB1cGRhdGVJbWFnZShvcHRpb25zOiB7dXJsOiBzdHJpbmcsIGNvb3JkaW5hdGVzPzogQ29vcmRpbmF0ZXN9KSB7XG4gICAgICAgIGlmICghdGhpcy5pbWFnZSB8fCAhb3B0aW9ucy51cmwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy51cmwgPSBvcHRpb25zLnVybDtcbiAgICAgICAgdGhpcy5sb2FkKG9wdGlvbnMuY29vcmRpbmF0ZXMsICgpID0+IHsgdGhpcy50ZXh0dXJlID0gbnVsbDsgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9maW5pc2hMb2FkaW5nKCkge1xuICAgICAgICBpZiAodGhpcy5tYXApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29vcmRpbmF0ZXModGhpcy5jb29yZGluYXRlcyk7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhJywge2RhdGFUeXBlOiAnc291cmNlJywgc291cmNlRGF0YVR5cGU6ICdtZXRhZGF0YSd9KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW1hZ2UncyBjb29yZGluYXRlcyBhbmQgcmUtcmVuZGVycyB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZXMgRm91ciBnZW9ncmFwaGljYWwgY29vcmRpbmF0ZXMsXG4gICAgICogICByZXByZXNlbnRlZCBhcyBhcnJheXMgb2YgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBudW1iZXJzLCB3aGljaCBkZWZpbmUgdGhlIGNvcm5lcnMgb2YgdGhlIGltYWdlLlxuICAgICAqICAgVGhlIGNvb3JkaW5hdGVzIHN0YXJ0IGF0IHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIGltYWdlIGFuZCBwcm9jZWVkIGluIGNsb2Nrd2lzZSBvcmRlci5cbiAgICAgKiAgIFRoZXkgZG8gbm90IGhhdmUgdG8gcmVwcmVzZW50IGEgcmVjdGFuZ2xlLlxuICAgICAqIEByZXR1cm5zIHtJbWFnZVNvdXJjZX0gdGhpc1xuICAgICAqL1xuICAgIHNldENvb3JkaW5hdGVzKGNvb3JkaW5hdGVzOiBDb29yZGluYXRlcykge1xuICAgICAgICB0aGlzLmNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXM7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHdoaWNoIG1lcmNhdG9yIHRpbGUgaXMgc3VpdGFibGUgZm9yIHJlbmRlcmluZyB0aGUgdmlkZW8gaW5cbiAgICAgICAgLy8gYW5kIGNyZWF0ZSBhIGJ1ZmZlciB3aXRoIHRoZSBjb3JuZXIgY29vcmRpbmF0ZXMuIFRoZXNlIGNvb3JkaW5hdGVzXG4gICAgICAgIC8vIG1heSBiZSBvdXRzaWRlIHRoZSB0aWxlLCBiZWNhdXNlIHJhc3RlciB0aWxlcyBhcmVuJ3QgY2xpcHBlZCB3aGVuIHJlbmRlcmluZy5cblxuICAgICAgICAvLyB0cmFuc2Zvcm0gdGhlIGdlbyBjb29yZGluYXRlcyBpbnRvICh6b29tIDApIHRpbGUgc3BhY2UgY29vcmRpbmF0ZXNcbiAgICAgICAgY29uc3QgY29ybmVyQ29vcmRzID0gY29vcmRpbmF0ZXMubWFwKE1lcmNhdG9yQ29vcmRpbmF0ZS5mcm9tTG5nTGF0KTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgdGlsZSB3ZSdsbCB1c2UgdG8gaG9sZCB0aGlzIGltYWdlJ3NcbiAgICAgICAgLy8gcmVuZGVyIGRhdGFcbiAgICAgICAgdGhpcy50aWxlSUQgPSBnZXRDb29yZGluYXRlc0NlbnRlclRpbGVJRChjb3JuZXJDb29yZHMpO1xuXG4gICAgICAgIC8vIENvbnN0cmFpbiBtaW4vbWF4IHpvb20gdG8gb3VyIHRpbGUncyB6b29tIGxldmVsIGluIG9yZGVyIHRvIGZvcmNlXG4gICAgICAgIC8vIFNvdXJjZUNhY2hlIHRvIHJlcXVlc3QgdGhpcyB0aWxlIChubyBtYXR0ZXIgd2hhdCB0aGUgbWFwJ3Mgem9vbVxuICAgICAgICAvLyBsZXZlbClcbiAgICAgICAgdGhpcy5taW56b29tID0gdGhpcy5tYXh6b29tID0gdGhpcy50aWxlSUQuejtcblxuICAgICAgICAvLyBUcmFuc2Zvcm0gdGhlIGNvcm5lciBjb29yZGluYXRlcyBpbnRvIHRoZSBjb29yZGluYXRlIHNwYWNlIG9mIG91clxuICAgICAgICAvLyB0aWxlLlxuICAgICAgICBjb25zdCB0aWxlQ29vcmRzID0gY29ybmVyQ29vcmRzLm1hcCgoY29vcmQpID0+IHRoaXMudGlsZUlELmdldFRpbGVQb2ludChjb29yZCkuX3JvdW5kKCkpO1xuXG4gICAgICAgIHRoaXMuX2JvdW5kc0FycmF5ID0gbmV3IFJhc3RlckJvdW5kc0FycmF5KCk7XG4gICAgICAgIHRoaXMuX2JvdW5kc0FycmF5LmVtcGxhY2VCYWNrKHRpbGVDb29yZHNbMF0ueCwgdGlsZUNvb3Jkc1swXS55LCAwLCAwKTtcbiAgICAgICAgdGhpcy5fYm91bmRzQXJyYXkuZW1wbGFjZUJhY2sodGlsZUNvb3Jkc1sxXS54LCB0aWxlQ29vcmRzWzFdLnksIEVYVEVOVCwgMCk7XG4gICAgICAgIHRoaXMuX2JvdW5kc0FycmF5LmVtcGxhY2VCYWNrKHRpbGVDb29yZHNbM10ueCwgdGlsZUNvb3Jkc1szXS55LCAwLCBFWFRFTlQpO1xuICAgICAgICB0aGlzLl9ib3VuZHNBcnJheS5lbXBsYWNlQmFjayh0aWxlQ29vcmRzWzJdLngsIHRpbGVDb29yZHNbMl0ueSwgRVhURU5ULCBFWFRFTlQpO1xuXG4gICAgICAgIGlmICh0aGlzLmJvdW5kc0J1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHNCdWZmZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYm91bmRzQnVmZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTonc291cmNlJywgc291cmNlRGF0YVR5cGU6ICdjb250ZW50J30pKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHJlcGFyZSgpIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMudGlsZXMpLmxlbmd0aCA9PT0gMCB8fCAhdGhpcy5pbWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMubWFwLnBhaW50ZXIuY29udGV4dDtcbiAgICAgICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHNCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzQnVmZmVyID0gY29udGV4dC5jcmVhdGVWZXJ0ZXhCdWZmZXIodGhpcy5fYm91bmRzQXJyYXksIHJhc3RlckJvdW5kc0F0dHJpYnV0ZXMubWVtYmVycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzU2VnbWVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzU2VnbWVudHMgPSBTZWdtZW50VmVjdG9yLnNpbXBsZVNlZ21lbnQoMCwgMCwgNCwgMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMudGV4dHVyZSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gbmV3IFRleHR1cmUoY29udGV4dCwgdGhpcy5pbWFnZSwgZ2wuUkdCQSk7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCB3IGluIHRoaXMudGlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLnRpbGVzW3ddO1xuICAgICAgICAgICAgaWYgKHRpbGUuc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9ICdsb2FkZWQnO1xuICAgICAgICAgICAgICAgIHRpbGUudGV4dHVyZSA9IHRoaXMudGV4dHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRUaWxlKHRpbGU6IFRpbGUsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikge1xuICAgICAgICAvLyBXZSBoYXZlIGEgc2luZ2xlIHRpbGUgLS0gd2hvb3NlIGNvb3JkaW5hdGVzIGFyZSB0aGlzLnRpbGVJRCAtLSB0aGF0XG4gICAgICAgIC8vIGNvdmVycyB0aGUgaW1hZ2Ugd2Ugd2FudCB0byByZW5kZXIuICBJZiB0aGF0J3MgdGhlIG9uZSBiZWluZ1xuICAgICAgICAvLyByZXF1ZXN0ZWQsIHNldCBpdCB1cCB3aXRoIHRoZSBpbWFnZTsgb3RoZXJ3aXNlLCBtYXJrIHRoZSB0aWxlIGFzXG4gICAgICAgIC8vIGBlcnJvcmVkYCB0byBpbmRpY2F0ZSB0aGF0IHdlIGhhdmUgbm8gZGF0YSBmb3IgaXQuXG4gICAgICAgIC8vIElmIHRoZSB3b3JsZCB3cmFwcywgd2UgbWF5IGhhdmUgbXVsdGlwbGUgXCJ3cmFwcGVkXCIgY29waWVzIG9mIHRoZVxuICAgICAgICAvLyBzaW5nbGUgdGlsZS5cbiAgICAgICAgaWYgKHRoaXMudGlsZUlEICYmIHRoaXMudGlsZUlELmVxdWFscyh0aWxlLnRpbGVJRC5jYW5vbmljYWwpKSB7XG4gICAgICAgICAgICB0aGlzLnRpbGVzW1N0cmluZyh0aWxlLnRpbGVJRC53cmFwKV0gPSB0aWxlO1xuICAgICAgICAgICAgdGlsZS5idWNrZXRzID0ge307XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAnZXJyb3JlZCc7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpOiBPYmplY3Qge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcbiAgICAgICAgICAgIHVybDogdGhpcy5vcHRpb25zLnVybCxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiB0aGlzLmNvb3JkaW5hdGVzXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaGFzVHJhbnNpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhIGxpc3Qgb2YgY29vcmRpbmF0ZXMsIGdldCB0aGVpciBjZW50ZXIgYXMgYSBjb29yZGluYXRlLlxuICpcbiAqIEByZXR1cm5zIGNlbnRlcnBvaW50XG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29vcmRpbmF0ZXNDZW50ZXJUaWxlSUQoY29vcmRzOiBBcnJheTxNZXJjYXRvckNvb3JkaW5hdGU+KSB7XG4gICAgbGV0IG1pblggPSBJbmZpbml0eTtcbiAgICBsZXQgbWluWSA9IEluZmluaXR5O1xuICAgIGxldCBtYXhYID0gLUluZmluaXR5O1xuICAgIGxldCBtYXhZID0gLUluZmluaXR5O1xuXG4gICAgZm9yIChjb25zdCBjb29yZCBvZiBjb29yZHMpIHtcbiAgICAgICAgbWluWCA9IE1hdGgubWluKG1pblgsIGNvb3JkLngpO1xuICAgICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgY29vcmQueSk7XG4gICAgICAgIG1heFggPSBNYXRoLm1heChtYXhYLCBjb29yZC54KTtcbiAgICAgICAgbWF4WSA9IE1hdGgubWF4KG1heFksIGNvb3JkLnkpO1xuICAgIH1cblxuICAgIGNvbnN0IGR4ID0gbWF4WCAtIG1pblg7XG4gICAgY29uc3QgZHkgPSBtYXhZIC0gbWluWTtcbiAgICBjb25zdCBkTWF4ID0gTWF0aC5tYXgoZHgsIGR5KTtcbiAgICBjb25zdCB6b29tID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcigtTWF0aC5sb2coZE1heCkgLyBNYXRoLkxOMikpO1xuICAgIGNvbnN0IHRpbGVzQXRab29tID0gTWF0aC5wb3coMiwgem9vbSk7XG5cbiAgICByZXR1cm4gbmV3IENhbm9uaWNhbFRpbGVJRChcbiAgICAgICAgICAgIHpvb20sXG4gICAgICAgICAgICBNYXRoLmZsb29yKChtaW5YICsgbWF4WCkgLyAyICogdGlsZXNBdFpvb20pLFxuICAgICAgICAgICAgTWF0aC5mbG9vcigobWluWSArIG1heFkpIC8gMiAqIHRpbGVzQXRab29tKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlU291cmNlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtnZXRWaWRlbywgUmVzb3VyY2VUeXBlfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuXG5pbXBvcnQgSW1hZ2VTb3VyY2UgZnJvbSAnLi9pbWFnZV9zb3VyY2UnO1xuaW1wb3J0IHJhc3RlckJvdW5kc0F0dHJpYnV0ZXMgZnJvbSAnLi4vZGF0YS9yYXN0ZXJfYm91bmRzX2F0dHJpYnV0ZXMnO1xuaW1wb3J0IFNlZ21lbnRWZWN0b3IgZnJvbSAnLi4vZGF0YS9zZWdtZW50JztcbmltcG9ydCBUZXh0dXJlIGZyb20gJy4uL3JlbmRlci90ZXh0dXJlJztcbmltcG9ydCB7RXJyb3JFdmVudH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcbmltcG9ydCBWYWxpZGF0aW9uRXJyb3IgZnJvbSAnLi4vc3R5bGUtc3BlYy9lcnJvci92YWxpZGF0aW9uX2Vycm9yJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL3VpL21hcCc7XG5pbXBvcnQgdHlwZSBEaXNwYXRjaGVyIGZyb20gJy4uL3V0aWwvZGlzcGF0Y2hlcic7XG5pbXBvcnQgdHlwZSB7RXZlbnRlZH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcbmltcG9ydCB0eXBlIHtWaWRlb1NvdXJjZVNwZWNpZmljYXRpb259IGZyb20gJy4uL3N0eWxlLXNwZWMvdHlwZXMnO1xuXG4vKipcbiAqIEEgZGF0YSBzb3VyY2UgY29udGFpbmluZyB2aWRlby5cbiAqIChTZWUgdGhlIFtTdHlsZSBTcGVjaWZpY2F0aW9uXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1zdHlsZS1zcGVjLyNzb3VyY2VzLXZpZGVvKSBmb3IgZGV0YWlsZWQgZG9jdW1lbnRhdGlvbiBvZiBvcHRpb25zLilcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gYWRkIHRvIG1hcFxuICogbWFwLmFkZFNvdXJjZSgnc29tZSBpZCcsIHtcbiAqICAgIHR5cGU6ICd2aWRlbycsXG4gKiAgICB1cmw6IFtcbiAqICAgICAgICAnaHR0cHM6Ly93d3cubWFwYm94LmNvbS9ibG9nL2Fzc2V0cy9iYWx0aW1vcmUtc21va2UubXA0JyxcbiAqICAgICAgICAnaHR0cHM6Ly93d3cubWFwYm94LmNvbS9ibG9nL2Fzc2V0cy9iYWx0aW1vcmUtc21va2Uud2VibSdcbiAqICAgIF0sXG4gKiAgICBjb29yZGluYXRlczogW1xuICogICAgICAgIFstNzYuNTQsIDM5LjE4XSxcbiAqICAgICAgICBbLTc2LjUyLCAzOS4xOF0sXG4gKiAgICAgICAgWy03Ni41MiwgMzkuMTddLFxuICogICAgICAgIFstNzYuNTQsIDM5LjE3XVxuICogICAgXVxuICogfSk7XG4gKlxuICogLy8gdXBkYXRlXG4gKiB2YXIgbXlTb3VyY2UgPSBtYXAuZ2V0U291cmNlKCdzb21lIGlkJyk7XG4gKiBteVNvdXJjZS5zZXRDb29yZGluYXRlcyhbXG4gKiAgICAgWy03Ni41NDMzNTczNzIyODM5NCwgMzkuMTg1Nzk5MDcyMjk3NDhdLFxuICogICAgIFstNzYuNTI4MDM2NTk0MzkwODcsIDM5LjE4MzgzNjQ4NDc1ODddLFxuICogICAgIFstNzYuNTI5NTM4NjMxNDM5MiwgMzkuMTc2ODMzOTI1MDc2MDZdLFxuICogICAgIFstNzYuNTQ1MjAyNzMyMDg2MTgsIDM5LjE3ODc2MzQ0MTA2NjQyXVxuICogXSk7XG4gKlxuICogbWFwLnJlbW92ZVNvdXJjZSgnc29tZSBpZCcpOyAgLy8gcmVtb3ZlXG4gKiBAc2VlIFtBZGQgYSB2aWRlb10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS92aWRlby1vbi1hLW1hcC8pXG4gKi9cbmNsYXNzIFZpZGVvU291cmNlIGV4dGVuZHMgSW1hZ2VTb3VyY2Uge1xuICAgIG9wdGlvbnM6IFZpZGVvU291cmNlU3BlY2lmaWNhdGlvbjtcbiAgICB1cmxzOiBBcnJheTxzdHJpbmc+O1xuICAgIHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50O1xuICAgIHJvdW5kWm9vbTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb3B0aW9uczogVmlkZW9Tb3VyY2VTcGVjaWZpY2F0aW9uLCBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyLCBldmVudGVkUGFyZW50OiBFdmVudGVkKSB7XG4gICAgICAgIHN1cGVyKGlkLCBvcHRpb25zLCBkaXNwYXRjaGVyLCBldmVudGVkUGFyZW50KTtcbiAgICAgICAgdGhpcy5yb3VuZFpvb20gPSB0cnVlO1xuICAgICAgICB0aGlzLnR5cGUgPSAndmlkZW8nO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIGxvYWQoKSB7XG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIHRoaXMudXJscyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHVybCBvZiBvcHRpb25zLnVybHMpIHtcbiAgICAgICAgICAgIHRoaXMudXJscy5wdXNoKHRoaXMubWFwLl9yZXF1ZXN0TWFuYWdlci50cmFuc2Zvcm1SZXF1ZXN0KHVybCwgUmVzb3VyY2VUeXBlLlNvdXJjZSkudXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFZpZGVvKHRoaXMudXJscywgKGVyciwgdmlkZW8pID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KGVycikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2aWRlbykge1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW8gPSB2aWRlbztcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvLmxvb3AgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgLy8gU3RhcnQgcmVwYWludGluZyB3aGVuIHZpZGVvIHN0YXJ0cyBwbGF5aW5nLiBoYXNUcmFuc2l0aW9uKCkgd2lsbCB0aGVuIHJldHVyblxuICAgICAgICAgICAgICAgIC8vIHRydWUgdG8gdHJpZ2dlciBhZGRpdGlvbmFsIGZyYW1lcyBhcyBsb25nIGFzIHRoZSB2aWRlb3MgY29udGludWVzIHBsYXlpbmcuXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlby5hZGRFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC50cmlnZ2VyUmVwYWludCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW8ucGxheSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmlzaExvYWRpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF1c2VzIHRoZSB2aWRlby5cbiAgICAgKi9cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmlkZW8pIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsYXlzIHRoZSB2aWRlby5cbiAgICAgKi9cbiAgICBwbGF5KCkge1xuICAgICAgICBpZiAodGhpcy52aWRlbykge1xuICAgICAgICAgICAgdGhpcy52aWRlby5wbGF5KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHBsYXliYWNrIHRvIGEgdGltZXN0YW1wLCBpbiBzZWNvbmRzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc2VlayhzZWNvbmRzOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMudmlkZW8pIHtcbiAgICAgICAgICAgIGNvbnN0IHNlZWthYmxlUmFuZ2UgPSB0aGlzLnZpZGVvLnNlZWthYmxlO1xuICAgICAgICAgICAgaWYgKHNlY29uZHMgPCBzZWVrYWJsZVJhbmdlLnN0YXJ0KDApIHx8IHNlY29uZHMgPiBzZWVrYWJsZVJhbmdlLmVuZCgwKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgVmFsaWRhdGlvbkVycm9yKGBzb3VyY2VzLiR7dGhpcy5pZH1gLCBudWxsLCBgUGxheWJhY2sgZm9yIHRoaXMgdmlkZW8gY2FuIGJlIHNldCBvbmx5IGJldHdlZW4gdGhlICR7c2Vla2FibGVSYW5nZS5zdGFydCgwKX0gYW5kICR7c2Vla2FibGVSYW5nZS5lbmQoMCl9LXNlY29uZCBtYXJrLmApKSk7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy52aWRlby5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBIVE1MIGB2aWRlb2AgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIVE1MVmlkZW9FbGVtZW50fSBUaGUgSFRNTCBgdmlkZW9gIGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0VmlkZW8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcCkgcmV0dXJuO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIGlmICh0aGlzLnZpZGVvKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvLnBsYXkoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29vcmRpbmF0ZXModGhpcy5jb29yZGluYXRlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2aWRlbydzIGNvb3JkaW5hdGVzIGFuZCByZS1yZW5kZXJzIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNldENvb3JkaW5hdGVzXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQG1lbWJlcm9mIFZpZGVvU291cmNlXG4gICAgICogQHJldHVybnMge1ZpZGVvU291cmNlfSB0aGlzXG4gICAgICovXG4gICAgLy8gc2V0Q29vcmRpbmF0ZXMgaW5oZXJpdGVkIGZyb20gSW1hZ2VTb3VyY2VcblxuICAgIHByZXBhcmUoKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLnRpbGVzKS5sZW5ndGggPT09IDAgfHwgdGhpcy52aWRlby5yZWFkeVN0YXRlIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBub3QgZW5vdWdoIGRhdGEgZm9yIGN1cnJlbnQgcG9zaXRpb25cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLm1hcC5wYWludGVyLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzQnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kc0J1ZmZlciA9IGNvbnRleHQuY3JlYXRlVmVydGV4QnVmZmVyKHRoaXMuX2JvdW5kc0FycmF5LCByYXN0ZXJCb3VuZHNBdHRyaWJ1dGVzLm1lbWJlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kc1NlZ21lbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kc1NlZ21lbnRzID0gU2VnbWVudFZlY3Rvci5zaW1wbGVTZWdtZW50KDAsIDAsIDQsIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnRleHR1cmUpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IG5ldyBUZXh0dXJlKGNvbnRleHQsIHRoaXMudmlkZW8sIGdsLlJHQkEpO1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy52aWRlby5wYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZS5iaW5kKGdsLkxJTkVBUiwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIHRoaXMudmlkZW8pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCB3IGluIHRoaXMudGlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLnRpbGVzW3ddO1xuICAgICAgICAgICAgaWYgKHRpbGUuc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9ICdsb2FkZWQnO1xuICAgICAgICAgICAgICAgIHRpbGUudGV4dHVyZSA9IHRoaXMudGV4dHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICAgICAgICB1cmxzOiB0aGlzLnVybHMsXG4gICAgICAgICAgICBjb29yZGluYXRlczogdGhpcy5jb29yZGluYXRlc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGhhc1RyYW5zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvICYmICF0aGlzLnZpZGVvLnBhdXNlZDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvU291cmNlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IEltYWdlU291cmNlIGZyb20gJy4vaW1hZ2Vfc291cmNlJztcblxuaW1wb3J0IHdpbmRvdyBmcm9tICcuLi91dGlsL3dpbmRvdyc7XG5pbXBvcnQgcmFzdGVyQm91bmRzQXR0cmlidXRlcyBmcm9tICcuLi9kYXRhL3Jhc3Rlcl9ib3VuZHNfYXR0cmlidXRlcyc7XG5pbXBvcnQgU2VnbWVudFZlY3RvciBmcm9tICcuLi9kYXRhL3NlZ21lbnQnO1xuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi4vcmVuZGVyL3RleHR1cmUnO1xuaW1wb3J0IHtFcnJvckV2ZW50fSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IFZhbGlkYXRpb25FcnJvciBmcm9tICcuLi9zdHlsZS1zcGVjL2Vycm9yL3ZhbGlkYXRpb25fZXJyb3InO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vdWkvbWFwJztcbmltcG9ydCB0eXBlIERpc3BhdGNoZXIgZnJvbSAnLi4vdXRpbC9kaXNwYXRjaGVyJztcbmltcG9ydCB0eXBlIHtFdmVudGVkfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuXG5leHBvcnQgdHlwZSBDYW52YXNTb3VyY2VTcGVjaWZpY2F0aW9uID0ge3xcbiAgICBcInR5cGVcIjogXCJjYW52YXNcIixcbiAgICBcImNvb3JkaW5hdGVzXCI6IFtbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdXSxcbiAgICBcImFuaW1hdGVcIj86IGJvb2xlYW4sXG4gICAgXCJjYW52YXNcIjogc3RyaW5nIHwgSFRNTENhbnZhc0VsZW1lbnRcbnx9O1xuXG4vKipcbiAqIE9wdGlvbnMgdG8gYWRkIGEgY2FudmFzIHNvdXJjZSB0eXBlIHRvIHRoZSBtYXAuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gQ2FudmFzU291cmNlT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgU291cmNlIHR5cGUuIE11c3QgYmUgYFwiY2FudmFzXCJgLlxuICogQHByb3BlcnR5IHtzdHJpbmd8SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyBDYW52YXMgc291cmNlIGZyb20gd2hpY2ggdG8gcmVhZCBwaXhlbHMuIENhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIElEIG9mIHRoZSBjYW52YXMgZWxlbWVudCwgb3IgdGhlIGBIVE1MQ2FudmFzRWxlbWVudGAgaXRzZWxmLlxuICogQHByb3BlcnR5IHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZXMgRm91ciBnZW9ncmFwaGljYWwgY29vcmRpbmF0ZXMgZGVub3Rpbmcgd2hlcmUgdG8gcGxhY2UgdGhlIGNvcm5lcnMgb2YgdGhlIGNhbnZhcywgc3BlY2lmaWVkIGluIGBbbG9uZ2l0dWRlLCBsYXRpdHVkZV1gIHBhaXJzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbYW5pbWF0ZT10cnVlXSBXaGV0aGVyIHRoZSBjYW52YXMgc291cmNlIGlzIGFuaW1hdGVkLiBJZiB0aGUgY2FudmFzIGlzIHN0YXRpYyAoaS5lLiBwaXhlbHMgZG8gbm90IG5lZWQgdG8gYmUgcmUtcmVhZCBvbiBldmVyeSBmcmFtZSksIGBhbmltYXRlYCBzaG91bGQgYmUgc2V0IHRvIGBmYWxzZWAgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAqL1xuXG4vKipcbiAqIEEgZGF0YSBzb3VyY2UgY29udGFpbmluZyB0aGUgY29udGVudHMgb2YgYW4gSFRNTCBjYW52YXMuIFNlZSB7QGxpbmsgQ2FudmFzU291cmNlT3B0aW9uc30gZm9yIGRldGFpbGVkIGRvY3VtZW50YXRpb24gb2Ygb3B0aW9ucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gYWRkIHRvIG1hcFxuICogbWFwLmFkZFNvdXJjZSgnc29tZSBpZCcsIHtcbiAqICAgIHR5cGU6ICdjYW52YXMnLFxuICogICAgY2FudmFzOiAnaWRPZk15SFRNTENhbnZhcycsXG4gKiAgICBhbmltYXRlOiB0cnVlLFxuICogICAgY29vcmRpbmF0ZXM6IFtcbiAqICAgICAgICBbLTc2LjU0LCAzOS4xOF0sXG4gKiAgICAgICAgWy03Ni41MiwgMzkuMThdLFxuICogICAgICAgIFstNzYuNTIsIDM5LjE3XSxcbiAqICAgICAgICBbLTc2LjU0LCAzOS4xN11cbiAqICAgIF1cbiAqIH0pO1xuICpcbiAqIC8vIHVwZGF0ZVxuICogdmFyIG15U291cmNlID0gbWFwLmdldFNvdXJjZSgnc29tZSBpZCcpO1xuICogbXlTb3VyY2Uuc2V0Q29vcmRpbmF0ZXMoW1xuICogICAgIFstNzYuNTQzMzU3MzcyMjgzOTQsIDM5LjE4NTc5OTA3MjI5NzQ4XSxcbiAqICAgICBbLTc2LjUyODAzNjU5NDM5MDg3LCAzOS4xODM4MzY0ODQ3NTg3XSxcbiAqICAgICBbLTc2LjUyOTUzODYzMTQzOTIsIDM5LjE3NjgzMzkyNTA3NjA2XSxcbiAqICAgICBbLTc2LjU0NTIwMjczMjA4NjE4LCAzOS4xNzg3NjM0NDEwNjY0Ml1cbiAqIF0pO1xuICpcbiAqIG1hcC5yZW1vdmVTb3VyY2UoJ3NvbWUgaWQnKTsgIC8vIHJlbW92ZVxuICovXG5jbGFzcyBDYW52YXNTb3VyY2UgZXh0ZW5kcyBJbWFnZVNvdXJjZSB7XG4gICAgb3B0aW9uczogQ2FudmFzU291cmNlU3BlY2lmaWNhdGlvbjtcbiAgICBhbmltYXRlOiBib29sZWFuO1xuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBwbGF5OiAoKSA9PiB2b2lkO1xuICAgIHBhdXNlOiAoKSA9PiB2b2lkO1xuICAgIF9wbGF5aW5nOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBvcHRpb25zOiBDYW52YXNTb3VyY2VTcGVjaWZpY2F0aW9uLCBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyLCBldmVudGVkUGFyZW50OiBFdmVudGVkKSB7XG4gICAgICAgIHN1cGVyKGlkLCBvcHRpb25zLCBkaXNwYXRjaGVyLCBldmVudGVkUGFyZW50KTtcblxuICAgICAgICAvLyBXZSBidWlsZCBpbiBzb21lIHZhbGlkYXRpb24gaGVyZSwgc2luY2UgY2FudmFzIHNvdXJjZXMgYXJlbid0IGluY2x1ZGVkIGluIHRoZSBzdHlsZSBzcGVjOlxuICAgICAgICBpZiAoIW9wdGlvbnMuY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgVmFsaWRhdGlvbkVycm9yKGBzb3VyY2VzLiR7aWR9YCwgbnVsbCwgJ21pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgXCJjb29yZGluYXRlc1wiJykpKTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShvcHRpb25zLmNvb3JkaW5hdGVzKSB8fCBvcHRpb25zLmNvb3JkaW5hdGVzLmxlbmd0aCAhPT0gNCB8fFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY29vcmRpbmF0ZXMuc29tZShjID0+ICFBcnJheS5pc0FycmF5KGMpIHx8IGMubGVuZ3RoICE9PSAyIHx8IGMuc29tZShsID0+IHR5cGVvZiBsICE9PSAnbnVtYmVyJykpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IFZhbGlkYXRpb25FcnJvcihgc291cmNlcy4ke2lkfWAsIG51bGwsICdcImNvb3JkaW5hdGVzXCIgcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheSBvZiA0IGxvbmdpdHVkZS9sYXRpdHVkZSBhcnJheSBwYWlycycpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRlICYmIHR5cGVvZiBvcHRpb25zLmFuaW1hdGUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBWYWxpZGF0aW9uRXJyb3IoYHNvdXJjZXMuJHtpZH1gLCBudWxsLCAnb3B0aW9uYWwgXCJhbmltYXRlXCIgcHJvcGVydHkgbXVzdCBiZSBhIGJvb2xlYW4gdmFsdWUnKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBWYWxpZGF0aW9uRXJyb3IoYHNvdXJjZXMuJHtpZH1gLCBudWxsLCAnbWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBcImNhbnZhc1wiJykpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5jYW52YXMgIT09ICdzdHJpbmcnICYmICEob3B0aW9ucy5jYW52YXMgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTENhbnZhc0VsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IFZhbGlkYXRpb25FcnJvcihgc291cmNlcy4ke2lkfWAsIG51bGwsICdcImNhbnZhc1wiIG11c3QgYmUgZWl0aGVyIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgSUQgb2YgdGhlIGNhbnZhcyBlbGVtZW50IGZyb20gd2hpY2ggdG8gcmVhZCwgb3IgYW4gSFRNTENhbnZhc0VsZW1lbnQgaW5zdGFuY2UnKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5hbmltYXRlID0gb3B0aW9ucy5hbmltYXRlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmFuaW1hdGUgOiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgYW5pbWF0aW9uLiBUaGUgaW1hZ2Ugd2lsbCBiZSBjb3BpZWQgZnJvbSB0aGUgY2FudmFzIHRvIHRoZSBtYXAgb24gZWFjaCBmcmFtZS5cbiAgICAgKiBAbWV0aG9kIHBsYXlcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAbWVtYmVyb2YgQ2FudmFzU291cmNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyBhbmltYXRpb24uIFRoZSBtYXAgd2lsbCBkaXNwbGF5IGEgc3RhdGljIGNvcHkgb2YgdGhlIGNhbnZhcyBpbWFnZS5cbiAgICAgKiBAbWV0aG9kIHBhdXNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQG1lbWJlcm9mIENhbnZhc1NvdXJjZVxuICAgICAqL1xuXG4gICAgbG9hZCgpIHtcbiAgICAgICAgdGhpcy5fbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSAodGhpcy5vcHRpb25zLmNhbnZhcyBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MQ2FudmFzRWxlbWVudCkgP1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jYW52YXMgOlxuICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm9wdGlvbnMuY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkRGltZW5zaW9ucygpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKCdDYW52YXMgZGltZW5zaW9ucyBjYW5ub3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHplcm8uJykpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fcGxheWluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm1hcC50cmlnZ2VyUmVwYWludCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wbGF5aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVwYXJlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGxheWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2ZpbmlzaExvYWRpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBIVE1MIGBjYW52YXNgIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9IFRoZSBIVE1MIGBjYW52YXNgIGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0Q2FudmFzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXM7XG4gICAgfVxuXG4gICAgb25BZGQobWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMubG9hZCgpO1xuICAgICAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGUpIHRoaXMucGxheSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SZW1vdmUoKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjYW52YXMncyBjb29yZGluYXRlcyBhbmQgcmUtcmVuZGVycyB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZXRDb29yZGluYXRlc1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBtZW1iZXJvZiBDYW52YXNTb3VyY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBjb29yZGluYXRlcyBGb3VyIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlcyxcbiAgICAgKiAgIHJlcHJlc2VudGVkIGFzIGFycmF5cyBvZiBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIG51bWJlcnMsIHdoaWNoIGRlZmluZSB0aGUgY29ybmVycyBvZiB0aGUgY2FudmFzLlxuICAgICAqICAgVGhlIGNvb3JkaW5hdGVzIHN0YXJ0IGF0IHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhcyBhbmQgcHJvY2VlZCBpbiBjbG9ja3dpc2Ugb3JkZXIuXG4gICAgICogICBUaGV5IGRvIG5vdCBoYXZlIHRvIHJlcHJlc2VudCBhIHJlY3RhbmdsZS5cbiAgICAgKiBAcmV0dXJucyB7Q2FudmFzU291cmNlfSB0aGlzXG4gICAgICovXG4gICAgLy8gc2V0Q29vcmRpbmF0ZXMgaW5oZXJpdGVkIGZyb20gSW1hZ2VTb3VyY2VcblxuICAgIHByZXBhcmUoKSB7XG4gICAgICAgIGxldCByZXNpemUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzLndpZHRoICE9PSB0aGlzLndpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgICAgICAgICByZXNpemUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNhbnZhcy5oZWlnaHQgIT09IHRoaXMuaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcbiAgICAgICAgICAgIHJlc2l6ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faGFzSW52YWxpZERpbWVuc2lvbnMoKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLnRpbGVzKS5sZW5ndGggPT09IDApIHJldHVybjsgLy8gbm90IGVub3VnaCBkYXRhIGZvciBjdXJyZW50IHBvc2l0aW9uXG5cbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMubWFwLnBhaW50ZXIuY29udGV4dDtcbiAgICAgICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHNCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzQnVmZmVyID0gY29udGV4dC5jcmVhdGVWZXJ0ZXhCdWZmZXIodGhpcy5fYm91bmRzQXJyYXksIHJhc3RlckJvdW5kc0F0dHJpYnV0ZXMubWVtYmVycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzU2VnbWVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzU2VnbWVudHMgPSBTZWdtZW50VmVjdG9yLnNpbXBsZVNlZ21lbnQoMCwgMCwgNCwgMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMudGV4dHVyZSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gbmV3IFRleHR1cmUoY29udGV4dCwgdGhpcy5jYW52YXMsIGdsLlJHQkEsIHtwcmVtdWx0aXBseTogdHJ1ZX0pO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc2l6ZSB8fCB0aGlzLl9wbGF5aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUudXBkYXRlKHRoaXMuY2FudmFzLCB7cHJlbXVsdGlwbHk6IHRydWV9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgdyBpbiB0aGlzLnRpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy50aWxlc1t3XTtcbiAgICAgICAgICAgIGlmICh0aWxlLnN0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAnbG9hZGVkJztcbiAgICAgICAgICAgICAgICB0aWxlLnRleHR1cmUgPSB0aGlzLnRleHR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXJpYWxpemUoKTogT2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdjYW52YXMnLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHRoaXMuY29vcmRpbmF0ZXNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBoYXNUcmFuc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGxheWluZztcbiAgICB9XG5cbiAgICBfaGFzSW52YWxpZERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgeCBvZiBbdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodF0pIHtcbiAgICAgICAgICAgIGlmIChpc05hTih4KSB8fCB4IDw9IDApIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbnZhc1NvdXJjZTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7YmluZEFsbH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHR5cGUgRGlzcGF0Y2hlciBmcm9tICcuLi91dGlsL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHR5cGUge0V2ZW50LCBFdmVudGVkfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL3VpL21hcCc7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4vdGlsZSc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi90aWxlX2lkJztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuaW1wb3J0IHtDYW5vbmljYWxUaWxlSUR9IGZyb20gJy4vdGlsZV9pZCc7XG5cbi8qKlxuICogVGhlIGBTb3VyY2VgIGludGVyZmFjZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IGVhY2ggc291cmNlIHR5cGUsIGluY2x1ZGluZyBcImNvcmVcIiB0eXBlcyAoYHZlY3RvcmAsIGByYXN0ZXJgLFxuICogYHZpZGVvYCwgZXRjLikgYW5kIGFsbCBjdXN0b20sIHRoaXJkLXBhcnR5IHR5cGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBmb3IgdGhlIHNvdXJjZS4gTXVzdCBub3QgYmUgdXNlZCBieSBhbnkgZXhpc3Rpbmcgc291cmNlLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU291cmNlIG9wdGlvbnMsIHNwZWNpZmljIHRvIHRoZSBzb3VyY2UgdHlwZSAoZXhjZXB0IGZvciBgb3B0aW9ucy50eXBlYCwgd2hpY2ggaXMgYWx3YXlzXG4gKiByZXF1aXJlZCkuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy50eXBlIFRoZSBzb3VyY2UgdHlwZSwgbWF0Y2hpbmcgdGhlIHZhbHVlIG9mIGBuYW1lYCB1c2VkIGluIHtAbGluayBTdHlsZSNhZGRTb3VyY2VUeXBlfS5cbiAqIEBwYXJhbSB7RGlzcGF0Y2hlcn0gZGlzcGF0Y2hlciBBIHtAbGluayBEaXNwYXRjaGVyfSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gc2VuZCBtZXNzYWdlcyB0byB0aGUgd29ya2Vycy5cbiAqXG4gKiBAZmlyZXMgZGF0YSB3aXRoIGB7ZGF0YVR5cGU6ICdzb3VyY2UnLCBzb3VyY2VEYXRhVHlwZTogJ21ldGFkYXRhJ31gIHRvIGluZGljYXRlIHRoYXQgYW55IG5lY2Vzc2FyeSBtZXRhZGF0YVxuICogaGFzIGJlZW4gbG9hZGVkIHNvIHRoYXQgaXQncyBva2F5IHRvIGNhbGwgYGxvYWRUaWxlYDsgYW5kIHdpdGggYHtkYXRhVHlwZTogJ3NvdXJjZScsIHNvdXJjZURhdGFUeXBlOiAnY29udGVudCd9YFxuICogdG8gaW5kaWNhdGUgdGhhdCB0aGUgc291cmNlIGRhdGEgaGFzIGNoYW5nZWQsIHNvIHRoYXQgYW55IGN1cnJlbnQgY2FjaGVzIHNob3VsZCBiZSBmbHVzaGVkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGlkIFRoZSBpZCBmb3IgdGhlIHNvdXJjZS4gIE11c3QgbWF0Y2ggdGhlIGlkIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IuXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWluem9vbVxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1heHpvb21cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNUaWxlQ2xpcHBlZCBgZmFsc2VgIGlmIHRpbGVzIGNhbiBiZSBkcmF3biBvdXRzaWRlIHRoZWlyIGJvdW5kYXJpZXMsIGB0cnVlYCBpZiB0aGV5IGNhbm5vdC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcmVwYXJzZU92ZXJzY2FsZWQgYHRydWVgIGlmIHRpbGVzIHNob3VsZCBiZSBzZW50IGJhY2sgdG8gdGhlIHdvcmtlciBmb3IgZWFjaCBvdmVyem9vbWVkIHpvb21cbiAqIGxldmVsLCBgZmFsc2VgIGlmIG5vdC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcm91bmRab29tIGB0cnVlYCBpZiB6b29tIGxldmVscyBhcmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIGluIHRoZSBzb3VyY2UgZGF0YSwgYGZhbHNlYFxuICogaWYgdGhleSBhcmUgZmxvb3ItZWQgdG8gdGhlIG5lYXJlc3QgaW50ZWdlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTb3VyY2Uge1xuICAgICt0eXBlOiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZztcbiAgICBtaW56b29tOiBudW1iZXIsXG4gICAgbWF4em9vbTogbnVtYmVyLFxuICAgIHRpbGVTaXplOiBudW1iZXIsXG4gICAgYXR0cmlidXRpb24/OiBzdHJpbmcsXG5cbiAgICByb3VuZFpvb20/OiBib29sZWFuLFxuICAgIGlzVGlsZUNsaXBwZWQ/OiBib29sZWFuLFxuICAgIG1hcGJveF9sb2dvPzogYm9vbGVhbixcbiAgICB0aWxlSUQ/OiBDYW5vbmljYWxUaWxlSUQ7XG4gICAgcmVwYXJzZU92ZXJzY2FsZWQ/OiBib29sZWFuLFxuICAgIHZlY3RvckxheWVySWRzPzogQXJyYXk8c3RyaW5nPixcblxuICAgIGhhc1RyYW5zaXRpb24oKTogYm9vbGVhbjtcbiAgICBsb2FkZWQoKTogYm9vbGVhbjtcblxuICAgIGZpcmUoZXZlbnQ6IEV2ZW50KTogbWl4ZWQ7XG5cbiAgICArb25BZGQ/OiAobWFwOiBNYXApID0+IHZvaWQ7XG4gICAgK29uUmVtb3ZlPzogKG1hcDogTWFwKSA9PiB2b2lkO1xuXG4gICAgbG9hZFRpbGUodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KTogdm9pZDtcbiAgICAraGFzVGlsZT86ICh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpID0+IGJvb2xlYW47XG4gICAgK2Fib3J0VGlsZT86ICh0aWxlOiBUaWxlLCBjYWxsYmFjazogQ2FsbGJhY2s8dm9pZD4pID0+IHZvaWQ7XG4gICAgK3VubG9hZFRpbGU/OiAodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSA9PiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgQSBwbGFpbiAoc3RyaW5naWZpYWJsZSkgSlMgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc291cmNlLlxuICAgICAqIENyZWF0aW5nIGEgc291cmNlIHVzaW5nIHRoZSByZXR1cm5lZCBvYmplY3QgYXMgdGhlIGBvcHRpb25zYCBzaG91bGQgcmVzdWx0IGluIGEgU291cmNlIHRoYXQgaXNcbiAgICAgKiBlcXVpdmFsZW50IHRvIHRoaXMgb25lLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc2VyaWFsaXplKCk6IE9iamVjdDtcblxuICAgICtwcmVwYXJlPzogKCkgPT4gdm9pZDtcbn1cblxudHlwZSBTb3VyY2VTdGF0aWNzID0ge1xuICAgIC8qXG4gICAgICogQW4gb3B0aW9uYWwgVVJMIHRvIGEgc2NyaXB0IHdoaWNoLCB3aGVuIHJ1biBieSBhIFdvcmtlciwgcmVnaXN0ZXJzIGEge0BsaW5rIFdvcmtlclNvdXJjZX1cbiAgICAgKiBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBTb3VyY2UgdHlwZSBieSBjYWxsaW5nIGBzZWxmLnJlZ2lzdGVyV29ya2VyU291cmNlKHdvcmtlclNvdXJjZTogV29ya2VyU291cmNlKWAuXG4gICAgICovXG4gICAgd29ya2VyU291cmNlVVJMPzogVVJMO1xufTtcblxuZXhwb3J0IHR5cGUgU291cmNlQ2xhc3MgPSBDbGFzczxTb3VyY2U+ICYgU291cmNlU3RhdGljcztcblxuaW1wb3J0IHZlY3RvciBmcm9tICcuLi9zb3VyY2UvdmVjdG9yX3RpbGVfc291cmNlJztcbmltcG9ydCByYXN0ZXIgZnJvbSAnLi4vc291cmNlL3Jhc3Rlcl90aWxlX3NvdXJjZSc7XG5pbXBvcnQgcmFzdGVyRGVtIGZyb20gJy4uL3NvdXJjZS9yYXN0ZXJfZGVtX3RpbGVfc291cmNlJztcbmltcG9ydCBnZW9qc29uIGZyb20gJy4uL3NvdXJjZS9nZW9qc29uX3NvdXJjZSc7XG5pbXBvcnQgdmlkZW8gZnJvbSAnLi4vc291cmNlL3ZpZGVvX3NvdXJjZSc7XG5pbXBvcnQgaW1hZ2UgZnJvbSAnLi4vc291cmNlL2ltYWdlX3NvdXJjZSc7XG5pbXBvcnQgY2FudmFzIGZyb20gJy4uL3NvdXJjZS9jYW52YXNfc291cmNlJztcblxuaW1wb3J0IHR5cGUge1NvdXJjZVNwZWNpZmljYXRpb259IGZyb20gJy4uL3N0eWxlLXNwZWMvdHlwZXMnO1xuXG5jb25zdCBzb3VyY2VUeXBlcyA9IHtcbiAgICB2ZWN0b3IsXG4gICAgcmFzdGVyLFxuICAgICdyYXN0ZXItZGVtJzogcmFzdGVyRGVtLFxuICAgIGdlb2pzb24sXG4gICAgdmlkZW8sXG4gICAgaW1hZ2UsXG4gICAgY2FudmFzXG59O1xuXG4vKlxuICogQ3JlYXRlcyBhIHRpbGVkIGRhdGEgc291cmNlIGluc3RhbmNlIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBpZFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBBIHNvdXJjZSBkZWZpbml0aW9uIG9iamVjdCBjb21wbGlhbnQgd2l0aFxuICogW2BtYXBib3gtZ2wtc3R5bGUtc3BlY2BdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvI3NvdXJjZXMpIG9yLCBmb3IgYSB0aGlyZC1wYXJ0eSBzb3VyY2UgdHlwZSxcbiAgKiB3aXRoIHRoYXQgdHlwZSdzIHJlcXVpcmVtZW50cy5cbiAqIEBwYXJhbSB7RGlzcGF0Y2hlcn0gZGlzcGF0Y2hlclxuICogQHJldHVybnMge1NvdXJjZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IGZ1bmN0aW9uKGlkOiBzdHJpbmcsIHNwZWNpZmljYXRpb246IFNvdXJjZVNwZWNpZmljYXRpb24sIGRpc3BhdGNoZXI6IERpc3BhdGNoZXIsIGV2ZW50ZWRQYXJlbnQ6IEV2ZW50ZWQpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBuZXcgc291cmNlVHlwZXNbc3BlY2lmaWNhdGlvbi50eXBlXShpZCwgKHNwZWNpZmljYXRpb246IGFueSksIGRpc3BhdGNoZXIsIGV2ZW50ZWRQYXJlbnQpO1xuXG4gICAgaWYgKHNvdXJjZS5pZCAhPT0gaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBTb3VyY2UgaWQgdG8gYmUgJHtpZH0gaW5zdGVhZCBvZiAke3NvdXJjZS5pZH1gKTtcbiAgICB9XG5cbiAgICBiaW5kQWxsKFsnbG9hZCcsICdhYm9ydCcsICd1bmxvYWQnLCAnc2VyaWFsaXplJywgJ3ByZXBhcmUnXSwgc291cmNlKTtcbiAgICByZXR1cm4gc291cmNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFR5cGUgPSBmdW5jdGlvbiAobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHNvdXJjZVR5cGVzW25hbWVdO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldFR5cGUgPSBmdW5jdGlvbiAobmFtZTogc3RyaW5nLCB0eXBlOiBDbGFzczxTb3VyY2U+KSB7XG4gICAgc291cmNlVHlwZXNbbmFtZV0gPSB0eXBlO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBBY3RvciB7XG4gICAgc2VuZCh0eXBlOiBzdHJpbmcsIGRhdGE6IE9iamVjdCwgY2FsbGJhY2s6IENhbGxiYWNrPGFueT4pOiB2b2lkO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUgU291cmNlQ2FjaGUgZnJvbSAnLi9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUgU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSBDb2xsaXNpb25JbmRleCBmcm9tICcuLi9zeW1ib2wvY29sbGlzaW9uX2luZGV4JztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIHtSZXRhaW5lZFF1ZXJ5RGF0YX0gZnJvbSAnLi4vc3ltYm9sL3BsYWNlbWVudCc7XG5pbXBvcnQgdHlwZSB7RmlsdGVyU3BlY2lmaWNhdGlvbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQge21hdDR9IGZyb20gJ2dsLW1hdHJpeCc7XG5cbi8qXG4gKiBSZXR1cm5zIGEgbWF0cml4IHRoYXQgY2FuIGJlIHVzZWQgdG8gY29udmVydCBmcm9tIHRpbGUgY29vcmRpbmF0ZXMgdG8gdmlld3BvcnQgcGl4ZWwgY29vcmRpbmF0ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFBpeGVsUG9zTWF0cml4KHRyYW5zZm9ybSwgdGlsZUlEKSB7XG4gICAgY29uc3QgdCA9IG1hdDQuaWRlbnRpdHkoW10pO1xuICAgIG1hdDQudHJhbnNsYXRlKHQsIHQsIFsxLCAxLCAwXSk7XG4gICAgbWF0NC5zY2FsZSh0LCB0LCBbdHJhbnNmb3JtLndpZHRoICogMC41LCB0cmFuc2Zvcm0uaGVpZ2h0ICogMC41LCAxXSk7XG4gICAgcmV0dXJuIG1hdDQubXVsdGlwbHkodCwgdCwgdHJhbnNmb3JtLmNhbGN1bGF0ZVBvc01hdHJpeCh0aWxlSUQudG9VbndyYXBwZWQoKSkpO1xufVxuXG5mdW5jdGlvbiBxdWVyeUluY2x1ZGVzM0RMYXllcihsYXllcnM/OiBBcnJheTxzdHJpbmc+LCBzdHlsZUxheWVyczoge1tfOiBzdHJpbmddOiBTdHlsZUxheWVyfSwgc291cmNlSUQ6IHN0cmluZykge1xuICAgIGlmIChsYXllcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBsYXllcklEIG9mIGxheWVycykge1xuICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBzdHlsZUxheWVyc1tsYXllcklEXTtcbiAgICAgICAgICAgIGlmIChsYXllciAmJiBsYXllci5zb3VyY2UgPT09IHNvdXJjZUlEICYmIGxheWVyLnR5cGUgPT09ICdmaWxsLWV4dHJ1c2lvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlTGF5ZXJzKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHN0eWxlTGF5ZXJzW2tleV07XG4gICAgICAgICAgICBpZiAobGF5ZXIuc291cmNlID09PSBzb3VyY2VJRCAmJiBsYXllci50eXBlID09PSAnZmlsbC1leHRydXNpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlSZW5kZXJlZEZlYXR1cmVzKHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUxheWVyczoge1tfOiBzdHJpbmddOiBTdHlsZUxheWVyfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVkTGF5ZXJzOiB7W186IHN0cmluZ106IE9iamVjdH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlHZW9tZXRyeTogQXJyYXk8UG9pbnQ+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogeyBmaWx0ZXI6IEZpbHRlclNwZWNpZmljYXRpb24sIGxheWVyczogQXJyYXk8c3RyaW5nPiwgYXZhaWxhYmxlSW1hZ2VzOiBBcnJheTxzdHJpbmc+IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcblxuICAgIGNvbnN0IGhhczNETGF5ZXIgPSBxdWVyeUluY2x1ZGVzM0RMYXllcihwYXJhbXMgJiYgcGFyYW1zLmxheWVycywgc3R5bGVMYXllcnMsIHNvdXJjZUNhY2hlLmlkKTtcbiAgICBjb25zdCBtYXhQaXRjaFNjYWxlRmFjdG9yID0gdHJhbnNmb3JtLm1heFBpdGNoU2NhbGVGYWN0b3IoKTtcbiAgICBjb25zdCB0aWxlc0luID0gc291cmNlQ2FjaGUudGlsZXNJbihxdWVyeUdlb21ldHJ5LCBtYXhQaXRjaFNjYWxlRmFjdG9yLCBoYXMzRExheWVyKTtcblxuICAgIHRpbGVzSW4uc29ydChzb3J0VGlsZXNJbik7XG4gICAgY29uc3QgcmVuZGVyZWRGZWF0dXJlTGF5ZXJzID0gW107XG4gICAgZm9yIChjb25zdCB0aWxlSW4gb2YgdGlsZXNJbikge1xuICAgICAgICByZW5kZXJlZEZlYXR1cmVMYXllcnMucHVzaCh7XG4gICAgICAgICAgICB3cmFwcGVkVGlsZUlEOiB0aWxlSW4udGlsZUlELndyYXBwZWQoKS5rZXksXG4gICAgICAgICAgICBxdWVyeVJlc3VsdHM6IHRpbGVJbi50aWxlLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhcbiAgICAgICAgICAgICAgICBzdHlsZUxheWVycyxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTGF5ZXJzLFxuICAgICAgICAgICAgICAgIHNvdXJjZUNhY2hlLl9zdGF0ZSxcbiAgICAgICAgICAgICAgICB0aWxlSW4ucXVlcnlHZW9tZXRyeSxcbiAgICAgICAgICAgICAgICB0aWxlSW4uY2FtZXJhUXVlcnlHZW9tZXRyeSxcbiAgICAgICAgICAgICAgICB0aWxlSW4uc2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICBtYXhQaXRjaFNjYWxlRmFjdG9yLFxuICAgICAgICAgICAgICAgIGdldFBpeGVsUG9zTWF0cml4KHNvdXJjZUNhY2hlLnRyYW5zZm9ybSwgdGlsZUluLnRpbGVJRCkpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IG1lcmdlUmVuZGVyZWRGZWF0dXJlTGF5ZXJzKHJlbmRlcmVkRmVhdHVyZUxheWVycyk7XG5cbiAgICAvLyBNZXJnZSBzdGF0ZSBmcm9tIFNvdXJjZUNhY2hlIGludG8gdGhlIHJlc3VsdHNcbiAgICBmb3IgKGNvbnN0IGxheWVySUQgaW4gcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdFtsYXllcklEXS5mb3JFYWNoKChmZWF0dXJlV3JhcHBlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZSA9IGZlYXR1cmVXcmFwcGVyLmZlYXR1cmU7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHNvdXJjZUNhY2hlLmdldEZlYXR1cmVTdGF0ZShmZWF0dXJlLmxheWVyWydzb3VyY2UtbGF5ZXInXSwgZmVhdHVyZS5pZCk7XG4gICAgICAgICAgICBmZWF0dXJlLnNvdXJjZSA9IGZlYXR1cmUubGF5ZXIuc291cmNlO1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUubGF5ZXJbJ3NvdXJjZS1sYXllciddKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5zb3VyY2VMYXllciA9IGZlYXR1cmUubGF5ZXJbJ3NvdXJjZS1sYXllciddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmVhdHVyZS5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5UmVuZGVyZWRTeW1ib2xzKHN0eWxlTGF5ZXJzOiB7W186IHN0cmluZ106IFN0eWxlTGF5ZXJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWRMYXllcnM6IHtbXzogc3RyaW5nXTogU3R5bGVMYXllcn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ2FjaGVzOiB7W186IHN0cmluZ106IFNvdXJjZUNhY2hlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUdlb21ldHJ5OiBBcnJheTxQb2ludD4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IGZpbHRlcjogRmlsdGVyU3BlY2lmaWNhdGlvbiwgbGF5ZXJzOiBBcnJheTxzdHJpbmc+LCBhdmFpbGFibGVJbWFnZXM6IEFycmF5PHN0cmluZz4gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25JbmRleDogQ29sbGlzaW9uSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0YWluZWRRdWVyeURhdGE6IHtbXzogbnVtYmVyXTogUmV0YWluZWRRdWVyeURhdGF9KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgY29uc3QgcmVuZGVyZWRTeW1ib2xzID0gY29sbGlzaW9uSW5kZXgucXVlcnlSZW5kZXJlZFN5bWJvbHMocXVlcnlHZW9tZXRyeSk7XG4gICAgY29uc3QgYnVja2V0UXVlcnlEYXRhID0gW107XG4gICAgZm9yIChjb25zdCBidWNrZXRJbnN0YW5jZUlkIG9mIE9iamVjdC5rZXlzKHJlbmRlcmVkU3ltYm9scykubWFwKE51bWJlcikpIHtcbiAgICAgICAgYnVja2V0UXVlcnlEYXRhLnB1c2gocmV0YWluZWRRdWVyeURhdGFbYnVja2V0SW5zdGFuY2VJZF0pO1xuICAgIH1cbiAgICBidWNrZXRRdWVyeURhdGEuc29ydChzb3J0VGlsZXNJbik7XG5cbiAgICBmb3IgKGNvbnN0IHF1ZXJ5RGF0YSBvZiBidWNrZXRRdWVyeURhdGEpIHtcbiAgICAgICAgY29uc3QgYnVja2V0U3ltYm9scyA9IHF1ZXJ5RGF0YS5mZWF0dXJlSW5kZXgubG9va3VwU3ltYm9sRmVhdHVyZXMoXG4gICAgICAgICAgICAgICAgcmVuZGVyZWRTeW1ib2xzW3F1ZXJ5RGF0YS5idWNrZXRJbnN0YW5jZUlkXSxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTGF5ZXJzLFxuICAgICAgICAgICAgICAgIHF1ZXJ5RGF0YS5idWNrZXRJbmRleCxcbiAgICAgICAgICAgICAgICBxdWVyeURhdGEuc291cmNlTGF5ZXJJbmRleCxcbiAgICAgICAgICAgICAgICBwYXJhbXMuZmlsdGVyLFxuICAgICAgICAgICAgICAgIHBhcmFtcy5sYXllcnMsXG4gICAgICAgICAgICAgICAgcGFyYW1zLmF2YWlsYWJsZUltYWdlcyxcbiAgICAgICAgICAgICAgICBzdHlsZUxheWVycyk7XG5cbiAgICAgICAgZm9yIChjb25zdCBsYXllcklEIGluIGJ1Y2tldFN5bWJvbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdEZlYXR1cmVzID0gcmVzdWx0W2xheWVySURdID0gcmVzdWx0W2xheWVySURdIHx8IFtdO1xuICAgICAgICAgICAgY29uc3QgbGF5ZXJTeW1ib2xzID0gYnVja2V0U3ltYm9sc1tsYXllcklEXTtcbiAgICAgICAgICAgIGxheWVyU3ltYm9scy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gTWF0Y2ggdG9wRG93bkZlYXR1cmVDb21wYXJhdG9yIGZyb20gRmVhdHVyZUluZGV4LCBidXQgdXNpbmdcbiAgICAgICAgICAgICAgICAvLyBtb3N0IHJlY2VudCBzb3J0aW5nIG9mIGZlYXR1cmVzIGZyb20gYnVja2V0LnNvcnRGZWF0dXJlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVTb3J0T3JkZXIgPSBxdWVyeURhdGEuZmVhdHVyZVNvcnRPcmRlcjtcbiAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZVNvcnRPcmRlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBxdWVyeVJlbmRlcmVkU3ltYm9scyBkb2N1bWVudGF0aW9uIHNheXMgd2UnbGwgcmV0dXJuIGZlYXR1cmVzIGluXG4gICAgICAgICAgICAgICAgICAgIC8vIFwidG9wLXRvLWJvdHRvbVwiIHJlbmRlcmluZyBvcmRlciAoYWthIGxhc3QtdG8tZmlyc3QpLlxuICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxseSB0aGVyZSBjYW4gYmUgbXVsdGlwbGUgc3ltYm9sIGluc3RhbmNlcyBwZXIgZmVhdHVyZSwgc29cbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc29ydCBlYWNoIGZlYXR1cmUgYmFzZWQgb24gdGhlIGZpcnN0IG1hdGNoaW5nIHN5bWJvbCBpbnN0YW5jZS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkQSA9IGZlYXR1cmVTb3J0T3JkZXIuaW5kZXhPZihhLmZlYXR1cmVJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvcnRlZEIgPSBmZWF0dXJlU29ydE9yZGVyLmluZGV4T2YoYi5mZWF0dXJlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoc29ydGVkQSA+PSAwKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KHNvcnRlZEIgPj0gMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3J0ZWRCIC0gc29ydGVkQTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBCdWNrZXQgaGFzbid0IGJlZW4gcmUtc29ydGVkIGJhc2VkIG9uIGFuZ2xlLCBzbyB1c2UgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldmVyc2Ugb2YgdGhlIG9yZGVyIHRoZSBmZWF0dXJlcyBhcHBlYXJlZCBpbiB0aGUgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuZmVhdHVyZUluZGV4IC0gYS5mZWF0dXJlSW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN5bWJvbEZlYXR1cmUgb2YgbGF5ZXJTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0RmVhdHVyZXMucHVzaChzeW1ib2xGZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1lcmdlIHN0YXRlIGZyb20gU291cmNlQ2FjaGUgaW50byB0aGUgcmVzdWx0c1xuICAgIGZvciAoY29uc3QgbGF5ZXJOYW1lIGluIHJlc3VsdCkge1xuICAgICAgICByZXN1bHRbbGF5ZXJOYW1lXS5mb3JFYWNoKChmZWF0dXJlV3JhcHBlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZSA9IGZlYXR1cmVXcmFwcGVyLmZlYXR1cmU7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHN0eWxlTGF5ZXJzW2xheWVyTmFtZV07XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHNvdXJjZUNhY2hlc1tsYXllci5zb3VyY2VdO1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBzb3VyY2VDYWNoZS5nZXRGZWF0dXJlU3RhdGUoZmVhdHVyZS5sYXllclsnc291cmNlLWxheWVyJ10sIGZlYXR1cmUuaWQpO1xuICAgICAgICAgICAgZmVhdHVyZS5zb3VyY2UgPSBmZWF0dXJlLmxheWVyLnNvdXJjZTtcbiAgICAgICAgICAgIGlmIChmZWF0dXJlLmxheWVyWydzb3VyY2UtbGF5ZXInXSkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmUuc291cmNlTGF5ZXIgPSBmZWF0dXJlLmxheWVyWydzb3VyY2UtbGF5ZXInXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZlYXR1cmUuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeVNvdXJjZUZlYXR1cmVzKHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSwgcGFyYW1zOiBhbnkpIHtcbiAgICBjb25zdCB0aWxlcyA9IHNvdXJjZUNhY2hlLmdldFJlbmRlcmFibGVJZHMoKS5tYXAoKGlkKSA9PiB7XG4gICAgICAgIHJldHVybiBzb3VyY2VDYWNoZS5nZXRUaWxlQnlJRChpZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgIGNvbnN0IGRhdGFUaWxlcyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHRpbGVzW2ldO1xuICAgICAgICBjb25zdCBkYXRhSUQgPSB0aWxlLnRpbGVJRC5jYW5vbmljYWwua2V5O1xuICAgICAgICBpZiAoIWRhdGFUaWxlc1tkYXRhSURdKSB7XG4gICAgICAgICAgICBkYXRhVGlsZXNbZGF0YUlEXSA9IHRydWU7XG4gICAgICAgICAgICB0aWxlLnF1ZXJ5U291cmNlRmVhdHVyZXMocmVzdWx0LCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc29ydFRpbGVzSW4oYSwgYikge1xuICAgIGNvbnN0IGlkQSA9IGEudGlsZUlEO1xuICAgIGNvbnN0IGlkQiA9IGIudGlsZUlEO1xuICAgIHJldHVybiAoaWRBLm92ZXJzY2FsZWRaIC0gaWRCLm92ZXJzY2FsZWRaKSB8fCAoaWRBLmNhbm9uaWNhbC55IC0gaWRCLmNhbm9uaWNhbC55KSB8fCAoaWRBLndyYXAgLSBpZEIud3JhcCkgfHwgKGlkQS5jYW5vbmljYWwueCAtIGlkQi5jYW5vbmljYWwueCk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlUmVuZGVyZWRGZWF0dXJlTGF5ZXJzKHRpbGVzKSB7XG4gICAgLy8gTWVyZ2UgcmVzdWx0cyBmcm9tIGFsbCB0aWxlcywgYnV0IGlmIHR3byB0aWxlcyBzaGFyZSB0aGUgc2FtZVxuICAgIC8vIHdyYXBwZWQgSUQsIGRvbid0IGR1cGxpY2F0ZSBmZWF0dXJlcyBiZXR3ZWVuIHRoZSB0d28gdGlsZXNcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBjb25zdCB3cmFwcGVkSURMYXllck1hcCA9IHt9O1xuICAgIGZvciAoY29uc3QgdGlsZSBvZiB0aWxlcykge1xuICAgICAgICBjb25zdCBxdWVyeVJlc3VsdHMgPSB0aWxlLnF1ZXJ5UmVzdWx0cztcbiAgICAgICAgY29uc3Qgd3JhcHBlZElEID0gdGlsZS53cmFwcGVkVGlsZUlEO1xuICAgICAgICBjb25zdCB3cmFwcGVkSURMYXllcnMgPSB3cmFwcGVkSURMYXllck1hcFt3cmFwcGVkSURdID0gd3JhcHBlZElETGF5ZXJNYXBbd3JhcHBlZElEXSB8fCB7fTtcbiAgICAgICAgZm9yIChjb25zdCBsYXllcklEIGluIHF1ZXJ5UmVzdWx0cykge1xuICAgICAgICAgICAgY29uc3QgdGlsZUZlYXR1cmVzID0gcXVlcnlSZXN1bHRzW2xheWVySURdO1xuICAgICAgICAgICAgY29uc3Qgd3JhcHBlZElERmVhdHVyZXMgPSB3cmFwcGVkSURMYXllcnNbbGF5ZXJJRF0gPSB3cmFwcGVkSURMYXllcnNbbGF5ZXJJRF0gfHwge307XG4gICAgICAgICAgICBjb25zdCByZXN1bHRGZWF0dXJlcyA9IHJlc3VsdFtsYXllcklEXSA9IHJlc3VsdFtsYXllcklEXSB8fCBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGlsZUZlYXR1cmUgb2YgdGlsZUZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3cmFwcGVkSURGZWF0dXJlc1t0aWxlRmVhdHVyZS5mZWF0dXJlSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZWRJREZlYXR1cmVzW3RpbGVGZWF0dXJlLmZlYXR1cmVJbmRleF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRGZWF0dXJlcy5wdXNoKHRpbGVGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi90aWxlX2lkJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi90aWxlJztcblxuLyoqXG4gKiBBIFtsZWFzdC1yZWNlbnRseS11c2VkIGNhY2hlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhY2hlX2FsZ29yaXRobXMpXG4gKiB3aXRoIGhhc2ggbG9va3VwIG1hZGUgcG9zc2libGUgYnkga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyBpbiBwYXJhbGxlbCB0b1xuICogYW4gYXJyYXkgb2YgZGljdGlvbmFyeSBvZiB2YWx1ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBUaWxlQ2FjaGUge1xuICAgIG1heDogbnVtYmVyO1xuICAgIGRhdGE6IHtba2V5OiBzdHJpbmddOiBBcnJheTx7IHZhbHVlOiBUaWxlLCB0aW1lb3V0OiA/VGltZW91dElEfT59O1xuICAgIG9yZGVyOiBBcnJheTxzdHJpbmc+O1xuICAgIG9uUmVtb3ZlOiAoZWxlbWVudDogVGlsZSkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4IG51bWJlciBvZiBwZXJtaXR0ZWQgdmFsdWVzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25SZW1vdmUgY2FsbGJhY2sgY2FsbGVkIHdpdGggaXRlbXMgd2hlbiB0aGV5IGV4cGlyZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1heDogbnVtYmVyLCBvblJlbW92ZTogKGVsZW1lbnQ6IFRpbGUpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgICAgIHRoaXMub25SZW1vdmUgPSBvblJlbW92ZTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBjYWNoZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1RpbGVDYWNoZX0gdGhpcyBjYWNoZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCByZW1vdmVkRGF0YSBvZiB0aGlzLmRhdGFba2V5XSkge1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkRGF0YS50aW1lb3V0KSBjbGVhclRpbWVvdXQocmVtb3ZlZERhdGEudGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vblJlbW92ZShyZW1vdmVkRGF0YS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5vcmRlciA9IFtdO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGtleSwgdmFsdWUgY29tYmluYXRpb24gdG8gdGhlIGNhY2hlLCB0cmltbWluZyBpdHMgc2l6ZSBpZiB0aGlzIHB1c2hlc1xuICAgICAqIGl0IG92ZXIgbWF4IGxlbmd0aC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T3ZlcnNjYWxlZFRpbGVJRH0gdGlsZUlEIGxvb2t1cCBrZXkgZm9yIHRoZSBpdGVtXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIGFueSB2YWx1ZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1RpbGVDYWNoZX0gdGhpcyBjYWNoZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWRkKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgZGF0YTogVGlsZSwgZXhwaXJ5VGltZW91dDogbnVtYmVyIHwgdm9pZCkge1xuICAgICAgICBjb25zdCBrZXkgPSB0aWxlSUQud3JhcHBlZCgpLmtleTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtrZXldID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhV3JhcHBlciA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgICAgICAgdGltZW91dDogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGV4cGlyeVRpbWVvdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGF0YVdyYXBwZXIudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRpbGVJRCwgZGF0YVdyYXBwZXIpO1xuICAgICAgICAgICAgfSwgZXhwaXJ5VGltZW91dCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGFba2V5XS5wdXNoKGRhdGFXcmFwcGVyKTtcbiAgICAgICAgdGhpcy5vcmRlci5wdXNoKGtleSk7XG5cbiAgICAgICAgaWYgKHRoaXMub3JkZXIubGVuZ3RoID4gdGhpcy5tYXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWREYXRhID0gdGhpcy5fZ2V0QW5kUmVtb3ZlQnlLZXkodGhpcy5vcmRlclswXSk7XG4gICAgICAgICAgICBpZiAocmVtb3ZlZERhdGEpIHRoaXMub25SZW1vdmUocmVtb3ZlZERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHZhbHVlIGF0dGFjaGVkIHRvIGBrZXlgIGlzIHByZXNlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T3ZlcnNjYWxlZFRpbGVJRH0gdGlsZUlEIHRoZSBrZXkgdG8gYmUgbG9va2VkLXVwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIGNhY2hlIGhhcyB0aGlzIHZhbHVlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBoYXModGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aWxlSUQud3JhcHBlZCgpLmtleSBpbiB0aGlzLmRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBhdHRhY2hlZCB0byBhIHNwZWNpZmljIGtleSBhbmQgcmVtb3ZlIGRhdGEgZnJvbSBjYWNoZS5cbiAgICAgKiBJZiB0aGUga2V5IGlzIG5vdCBmb3VuZCwgcmV0dXJucyBgbnVsbGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T3ZlcnNjYWxlZFRpbGVJRH0gdGlsZUlEIHRoZSBrZXkgdG8gbG9vayB1cFxuICAgICAqIEByZXR1cm5zIHsqfSB0aGUgZGF0YSwgb3IgbnVsbCBpZiBpdCBpc24ndCBmb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0QW5kUmVtb3ZlKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCk6ID9UaWxlIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhcyh0aWxlSUQpKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRBbmRSZW1vdmVCeUtleSh0aWxlSUQud3JhcHBlZCgpLmtleSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBHZXQgYW5kIHJlbW92ZSB0aGUgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICAgKi9cbiAgICBfZ2V0QW5kUmVtb3ZlQnlLZXkoa2V5OiBzdHJpbmcpOiA/VGlsZSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGFba2V5XS5zaGlmdCgpO1xuICAgICAgICBpZiAoZGF0YS50aW1lb3V0KSBjbGVhclRpbWVvdXQoZGF0YS50aW1lb3V0KTtcblxuICAgICAgICBpZiAodGhpcy5kYXRhW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5kYXRhW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcmRlci5zcGxpY2UodGhpcy5vcmRlci5pbmRleE9mKGtleSksIDEpO1xuXG4gICAgICAgIHJldHVybiBkYXRhLnZhbHVlO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogR2V0IHRoZSB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQgKHdyYXBwZWQgdGlsZSkga2V5LlxuICAgICAqL1xuICAgIGdldEJ5S2V5KGtleTogc3RyaW5nKTogP1RpbGUge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhW2tleV07XG4gICAgICAgIHJldHVybiBkYXRhID8gZGF0YVswXS52YWx1ZSA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBhdHRhY2hlZCB0byBhIHNwZWNpZmljIGtleSB3aXRob3V0IHJlbW92aW5nIGRhdGFcbiAgICAgKiBmcm9tIHRoZSBjYWNoZS4gSWYgdGhlIGtleSBpcyBub3QgZm91bmQsIHJldHVybnMgYG51bGxgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge092ZXJzY2FsZWRUaWxlSUR9IHRpbGVJRCB0aGUga2V5IHRvIGxvb2sgdXBcbiAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIGRhdGEsIG9yIG51bGwgaWYgaXQgaXNuJ3QgZm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldCh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpOiA/VGlsZSB7XG4gICAgICAgIGlmICghdGhpcy5oYXModGlsZUlEKSkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGFbdGlsZUlELndyYXBwZWQoKS5rZXldWzBdO1xuICAgICAgICByZXR1cm4gZGF0YS52YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBrZXkvdmFsdWUgY29tYmluYXRpb24gZnJvbSB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge092ZXJzY2FsZWRUaWxlSUR9IHRpbGVJRCB0aGUga2V5IGZvciB0aGUgcGFpciB0byBkZWxldGVcbiAgICAgKiBAcGFyYW0ge1RpbGV9IHZhbHVlIElmIGEgdmFsdWUgaXMgcHJvdmlkZWQsIHJlbW92ZSB0aGF0IGV4YWN0IHZlcnNpb24gb2YgdGhlIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtUaWxlQ2FjaGV9IHRoaXMgY2FjaGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlbW92ZSh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQsIHZhbHVlOiA/eyB2YWx1ZTogVGlsZSwgdGltZW91dDogP1RpbWVvdXRJRH0pIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhcyh0aWxlSUQpKSB7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIGNvbnN0IGtleSA9IHRpbGVJRC53cmFwcGVkKCkua2V5O1xuXG4gICAgICAgIGNvbnN0IGRhdGFJbmRleCA9IHZhbHVlID09PSB1bmRlZmluZWQgPyAwIDogdGhpcy5kYXRhW2tleV0uaW5kZXhPZih2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGFba2V5XVtkYXRhSW5kZXhdO1xuICAgICAgICB0aGlzLmRhdGFba2V5XS5zcGxpY2UoZGF0YUluZGV4LCAxKTtcbiAgICAgICAgaWYgKGRhdGEudGltZW91dCkgY2xlYXJUaW1lb3V0KGRhdGEudGltZW91dCk7XG4gICAgICAgIGlmICh0aGlzLmRhdGFba2V5XS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRhdGFba2V5XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uUmVtb3ZlKGRhdGEudmFsdWUpO1xuICAgICAgICB0aGlzLm9yZGVyLnNwbGljZSh0aGlzLm9yZGVyLmluZGV4T2Yoa2V5KSwgMSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBtYXggc2l6ZSBvZiB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4IHRoZSBtYXggc2l6ZSBvZiB0aGUgY2FjaGVcbiAgICAgKiBAcmV0dXJucyB7VGlsZUNhY2hlfSB0aGlzIGNhY2hlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzZXRNYXhTaXplKG1heDogbnVtYmVyKTogVGlsZUNhY2hlIHtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG5cbiAgICAgICAgd2hpbGUgKHRoaXMub3JkZXIubGVuZ3RoID4gdGhpcy5tYXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWREYXRhID0gdGhpcy5fZ2V0QW5kUmVtb3ZlQnlLZXkodGhpcy5vcmRlclswXSk7XG4gICAgICAgICAgICBpZiAocmVtb3ZlZERhdGEpIHRoaXMub25SZW1vdmUocmVtb3ZlZERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGVudHJpZXMgdGhhdCBkbyBub3QgcGFzcyBhIGZpbHRlciBmdW5jdGlvbi4gVXNlZCBmb3IgcmVtb3ZpbmdcbiAgICAgKiBzdGFsZSB0aWxlcyBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZpbHRlckZuIERldGVybWluZXMgd2hldGhlciB0aGUgdGlsZSBpcyBmaWx0ZXJlZC4gSWYgdGhlIHN1cHBsaWVkIGZ1bmN0aW9uIHJldHVybnMgZmFsc2UsIHRoZSB0aWxlIHdpbGwgYmUgZmlsdGVyZWQgb3V0LlxuICAgICAqL1xuICAgIGZpbHRlcihmaWx0ZXJGbjogKHRpbGU6IFRpbGUpID0+IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgcmVtb3ZlZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgdGhpcy5kYXRhW2tleV0pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbHRlckZuKGVudHJ5LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZW50cnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHIgb2YgcmVtb3ZlZCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoci52YWx1ZS50aWxlSUQsIHIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaWxlQ2FjaGU7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5pbXBvcnQgdHlwZSB7U3RydWN0QXJyYXl9IGZyb20gJy4uL3V0aWwvc3RydWN0X2FycmF5JztcbmltcG9ydCB0eXBlIHtUcmlhbmdsZUluZGV4QXJyYXksIExpbmVJbmRleEFycmF5LCBMaW5lU3RyaXBJbmRleEFycmF5fSBmcm9tICcuLi9kYXRhL2luZGV4X2FycmF5X3R5cGUnO1xuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi9nbC9jb250ZXh0JztcblxuY2xhc3MgSW5kZXhCdWZmZXIge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcbiAgICBkeW5hbWljRHJhdzogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQsIGFycmF5OiBUcmlhbmdsZUluZGV4QXJyYXkgfCBMaW5lSW5kZXhBcnJheSB8IExpbmVTdHJpcEluZGV4QXJyYXksIGR5bmFtaWNEcmF3PzogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIHRoaXMuZHluYW1pY0RyYXcgPSBCb29sZWFuKGR5bmFtaWNEcmF3KTtcblxuICAgICAgICAvLyBUaGUgYm91bmQgaW5kZXggYnVmZmVyIGlzIHBhcnQgb2YgdmVydGV4IGFycmF5IG9iamVjdCBzdGF0ZS4gV2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBtb2RpZnkgd2hhdGV2ZXIgVkFPIGhhcHBlbnMgdG8gYmUgY3VycmVudGx5IGJvdW5kLCBzbyBtYWtlIHN1cmUgdGhlIGRlZmF1bHRcbiAgICAgICAgLy8gdmVydGV4IGFycmF5IHByb3ZpZGVkIGJ5IHRoZSBjb250ZXh0IGlzIGJvdW5kIGluc3RlYWQuXG4gICAgICAgIHRoaXMuY29udGV4dC51bmJpbmRWQU8oKTtcblxuICAgICAgICBjb250ZXh0LmJpbmRFbGVtZW50QnVmZmVyLnNldCh0aGlzLmJ1ZmZlcik7XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGFycmF5LmFycmF5QnVmZmVyLCB0aGlzLmR5bmFtaWNEcmF3ID8gZ2wuRFlOQU1JQ19EUkFXIDogZ2wuU1RBVElDX0RSQVcpO1xuXG4gICAgICAgIGlmICghdGhpcy5keW5hbWljRHJhdykge1xuICAgICAgICAgICAgZGVsZXRlIGFycmF5LmFycmF5QnVmZmVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYmluZCgpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LmJpbmRFbGVtZW50QnVmZmVyLnNldCh0aGlzLmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgdXBkYXRlRGF0YShhcnJheTogU3RydWN0QXJyYXkpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIGFzc2VydCh0aGlzLmR5bmFtaWNEcmF3KTtcbiAgICAgICAgLy8gVGhlIHJpZ2h0IFZBTyB3aWxsIGdldCB0aGlzIGJ1ZmZlciByZS1ib3VuZCBsYXRlciBpbiBWZXJ0ZXhBcnJheU9iamVjdCNiaW5kXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvNTYyMFxuICAgICAgICB0aGlzLmNvbnRleHQudW5iaW5kVkFPKCk7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCAwLCBhcnJheS5hcnJheUJ1ZmZlcik7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcikge1xuICAgICAgICAgICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5kZXhCdWZmZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB0eXBlIHtcbiAgICBTdHJ1Y3RBcnJheSxcbiAgICBTdHJ1Y3RBcnJheU1lbWJlclxufSBmcm9tICcuLi91dGlsL3N0cnVjdF9hcnJheSc7XG5cbmltcG9ydCB0eXBlIFByb2dyYW0gZnJvbSAnLi4vcmVuZGVyL3Byb2dyYW0nO1xuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi9nbC9jb250ZXh0JztcblxuLyoqXG4gKiBAZW51bSB7c3RyaW5nfSBBdHRyaWJ1dGVUeXBlXG4gKiBAcHJpdmF0ZVxuICogQHJlYWRvbmx5XG4gKi9cbmNvbnN0IEF0dHJpYnV0ZVR5cGUgPSB7XG4gICAgSW50ODogICAnQllURScsXG4gICAgVWludDg6ICAnVU5TSUdORURfQllURScsXG4gICAgSW50MTY6ICAnU0hPUlQnLFxuICAgIFVpbnQxNjogJ1VOU0lHTkVEX1NIT1JUJyxcbiAgICBJbnQzMjogICdJTlQnLFxuICAgIFVpbnQzMjogJ1VOU0lHTkVEX0lOVCcsXG4gICAgRmxvYXQzMjogJ0ZMT0FUJ1xufTtcblxuLyoqXG4gKiBUaGUgYFZlcnRleEJ1ZmZlcmAgY2xhc3MgdHVybnMgYSBgU3RydWN0QXJyYXlgIGludG8gYSBXZWJHTCBidWZmZXIuIEVhY2ggbWVtYmVyIG9mIHRoZSBTdHJ1Y3RBcnJheSdzXG4gKiBTdHJ1Y3QgdHlwZSBpcyBjb252ZXJ0ZWQgdG8gYSBXZWJHTCBhdHJpYnV0ZS5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFZlcnRleEJ1ZmZlciB7XG4gICAgbGVuZ3RoOiBudW1iZXI7XG4gICAgYXR0cmlidXRlczogJFJlYWRPbmx5QXJyYXk8U3RydWN0QXJyYXlNZW1iZXI+O1xuICAgIGl0ZW1TaXplOiBudW1iZXI7XG4gICAgZHluYW1pY0RyYXc6ID9ib29sZWFuO1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkeW5hbWljRHJhdyBXaGV0aGVyIHRoaXMgYnVmZmVyIHdpbGwgYmUgcmVwZWF0ZWRseSB1cGRhdGVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCwgYXJyYXk6IFN0cnVjdEFycmF5LCBhdHRyaWJ1dGVzOiAkUmVhZE9ubHlBcnJheTxTdHJ1Y3RBcnJheU1lbWJlcj4sIGR5bmFtaWNEcmF3PzogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgdGhpcy5pdGVtU2l6ZSA9IGFycmF5LmJ5dGVzUGVyRWxlbWVudDtcbiAgICAgICAgdGhpcy5keW5hbWljRHJhdyA9IGR5bmFtaWNEcmF3O1xuXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgY29udGV4dC5iaW5kVmVydGV4QnVmZmVyLnNldCh0aGlzLmJ1ZmZlcik7XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBhcnJheS5hcnJheUJ1ZmZlciwgdGhpcy5keW5hbWljRHJhdyA/IGdsLkRZTkFNSUNfRFJBVyA6IGdsLlNUQVRJQ19EUkFXKTtcblxuICAgICAgICBpZiAoIXRoaXMuZHluYW1pY0RyYXcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBhcnJheS5hcnJheUJ1ZmZlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJpbmQoKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5iaW5kVmVydGV4QnVmZmVyLnNldCh0aGlzLmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgdXBkYXRlRGF0YShhcnJheTogU3RydWN0QXJyYXkpIHtcbiAgICAgICAgYXNzZXJ0KGFycmF5Lmxlbmd0aCA9PT0gdGhpcy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEoZ2wuQVJSQVlfQlVGRkVSLCAwLCBhcnJheS5hcnJheUJ1ZmZlcik7XG4gICAgfVxuXG4gICAgZW5hYmxlQXR0cmlidXRlcyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwcm9ncmFtOiBQcm9ncmFtPCo+KSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBtZW1iZXIgPSB0aGlzLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJJbmRleDogbnVtYmVyIHwgdm9pZCA9IHByb2dyYW0uYXR0cmlidXRlc1ttZW1iZXIubmFtZV07XG4gICAgICAgICAgICBpZiAoYXR0cmliSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYkluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgYXR0cmlidXRlIHBvaW50ZXJzIGluIGEgV2ViR0wgY29udGV4dFxuICAgICAqIEBwYXJhbSBnbCBUaGUgV2ViR0wgY29udGV4dFxuICAgICAqIEBwYXJhbSBwcm9ncmFtIFRoZSBhY3RpdmUgV2ViR0wgcHJvZ3JhbVxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhPZmZzZXQgSW5kZXggb2YgdGhlIHN0YXJ0aW5nIHZlcnRleCBvZiB0aGUgc2VnbWVudFxuICAgICAqL1xuICAgIHNldFZlcnRleEF0dHJpYlBvaW50ZXJzKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHByb2dyYW06IFByb2dyYW08Kj4sIHZlcnRleE9mZnNldDogP251bWJlcikge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgbWVtYmVyID0gdGhpcy5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgY29uc3QgYXR0cmliSW5kZXg6IG51bWJlciB8IHZvaWQgPSBwcm9ncmFtLmF0dHJpYnV0ZXNbbWVtYmVyLm5hbWVdO1xuXG4gICAgICAgICAgICBpZiAoYXR0cmliSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYkluZGV4LFxuICAgICAgICAgICAgICAgICAgICBtZW1iZXIuY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICAgICAgKGdsOiBhbnkpW0F0dHJpYnV0ZVR5cGVbbWVtYmVyLnR5cGVdXSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbVNpemUsXG4gICAgICAgICAgICAgICAgICAgIG1lbWJlci5vZmZzZXQgKyAodGhpcy5pdGVtU2l6ZSAqICh2ZXJ0ZXhPZmZzZXQgfHwgMCkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIEdMIGJ1ZmZlciBib3VuZCB0byB0aGUgZ2l2ZW4gV2ViR0wgY29udGV4dFxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLmJ1ZmZlcik7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5idWZmZXI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZlcnRleEJ1ZmZlcjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBDb2xvciBmcm9tICcuLi9zdHlsZS1zcGVjL3V0aWwvY29sb3InO1xuXG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4vY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7XG4gICAgQmxlbmRGdW5jVHlwZSxcbiAgICBCbGVuZEVxdWF0aW9uVHlwZSxcbiAgICBDb2xvck1hc2tUeXBlLFxuICAgIERlcHRoUmFuZ2VUeXBlLFxuICAgIERlcHRoTWFza1R5cGUsXG4gICAgU3RlbmNpbEZ1bmNUeXBlLFxuICAgIFN0ZW5jaWxPcFR5cGUsXG4gICAgRGVwdGhGdW5jVHlwZSxcbiAgICBUZXh0dXJlVW5pdFR5cGUsXG4gICAgVmlld3BvcnRUeXBlLFxuICAgIEN1bGxGYWNlTW9kZVR5cGUsXG4gICAgRnJvbnRGYWNlVHlwZSxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWU8VD4ge1xuICAgIGN1cnJlbnQ6IFQ7XG4gICAgZGVmYXVsdDogVDtcbiAgICBkaXJ0eTogYm9vbGVhbjtcbiAgICBnZXQoKTogVDtcbiAgICBzZXREZWZhdWx0KCk6IHZvaWQ7XG4gICAgc2V0KHZhbHVlOiBUKTogdm9pZDtcbn1cblxuY2xhc3MgQmFzZVZhbHVlPFQ+IGltcGxlbWVudHMgVmFsdWU8VD4ge1xuICAgIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgY3VycmVudDogVDtcbiAgICBkZWZhdWx0OiBUO1xuICAgIGRpcnR5OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmdsID0gY29udGV4dC5nbDtcbiAgICAgICAgdGhpcy5kZWZhdWx0ID0gdGhpcy5nZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuZGVmYXVsdDtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGdldCgpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudDtcbiAgICB9XG4gICAgc2V0KHZhbHVlOiBUKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgLy8gb3ZlcnJpZGRlbiBpbiBjaGlsZCBjbGFzc2VzO1xuICAgIH1cblxuICAgIGdldERlZmF1bHQoKTogVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHQ7IC8vIG92ZXJyaWRlbiBpbiBjaGlsZCBjbGFzc2VzXG4gICAgfVxuICAgIHNldERlZmF1bHQoKSB7XG4gICAgICAgIHRoaXMuc2V0KHRoaXMuZGVmYXVsdCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2xlYXJDb2xvciBleHRlbmRzIEJhc2VWYWx1ZTxDb2xvcj4ge1xuICAgIGdldERlZmF1bHQoKTogQ29sb3Ige1xuICAgICAgICByZXR1cm4gQ29sb3IudHJhbnNwYXJlbnQ7XG4gICAgfVxuICAgIHNldCh2OiBDb2xvcikge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5jdXJyZW50O1xuICAgICAgICBpZiAodi5yID09PSBjLnIgJiYgdi5nID09PSBjLmcgJiYgdi5iID09PSBjLmIgJiYgdi5hID09PSBjLmEgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5jbGVhckNvbG9yKHYuciwgdi5nLCB2LmIsIHYuYSk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbGVhckRlcHRoIGV4dGVuZHMgQmFzZVZhbHVlPG51bWJlcj4ge1xuICAgIGdldERlZmF1bHQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHNldCh2OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmNsZWFyRGVwdGgodik7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbGVhclN0ZW5jaWwgZXh0ZW5kcyBCYXNlVmFsdWU8bnVtYmVyPiB7XG4gICAgZ2V0RGVmYXVsdCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgc2V0KHY6IG51bWJlcikge1xuICAgICAgICBpZiAodiA9PT0gdGhpcy5jdXJyZW50ICYmICF0aGlzLmRpcnR5KSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuY2xlYXJTdGVuY2lsKHYpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29sb3JNYXNrIGV4dGVuZHMgQmFzZVZhbHVlPENvbG9yTWFza1R5cGU+IHtcbiAgICBnZXREZWZhdWx0KCk6IENvbG9yTWFza1R5cGUge1xuICAgICAgICByZXR1cm4gW3RydWUsIHRydWUsIHRydWUsIHRydWVdO1xuICAgIH1cbiAgICBzZXQodjogQ29sb3JNYXNrVHlwZSkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5jdXJyZW50O1xuICAgICAgICBpZiAodlswXSA9PT0gY1swXSAmJiB2WzFdID09PSBjWzFdICYmIHZbMl0gPT09IGNbMl0gJiYgdlszXSA9PT0gY1szXSAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmNvbG9yTWFzayh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlcHRoTWFzayBleHRlbmRzIEJhc2VWYWx1ZTxEZXB0aE1hc2tUeXBlPiB7XG4gICAgZ2V0RGVmYXVsdCgpOiBEZXB0aE1hc2tUeXBlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHNldCh2OiBEZXB0aE1hc2tUeXBlKTogdm9pZCB7XG4gICAgICAgIGlmICh2ID09PSB0aGlzLmN1cnJlbnQgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5kZXB0aE1hc2sodik7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGVuY2lsTWFzayBleHRlbmRzIEJhc2VWYWx1ZTxudW1iZXI+IHtcbiAgICBnZXREZWZhdWx0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAweEZGO1xuICAgIH1cbiAgICBzZXQodjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh2ID09PSB0aGlzLmN1cnJlbnQgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5zdGVuY2lsTWFzayh2KTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0ZW5jaWxGdW5jIGV4dGVuZHMgQmFzZVZhbHVlPFN0ZW5jaWxGdW5jVHlwZT4ge1xuICAgIGdldERlZmF1bHQoKTogU3RlbmNpbEZ1bmNUeXBlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZ1bmM6IHRoaXMuZ2wuQUxXQVlTLFxuICAgICAgICAgICAgcmVmOiAwLFxuICAgICAgICAgICAgbWFzazogMHhGRlxuICAgICAgICB9O1xuICAgIH1cbiAgICBzZXQodjogU3RlbmNpbEZ1bmNUeXBlKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGlmICh2LmZ1bmMgPT09IGMuZnVuYyAmJiB2LnJlZiA9PT0gYy5yZWYgJiYgdi5tYXNrID09PSBjLm1hc2sgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5zdGVuY2lsRnVuYyh2LmZ1bmMsIHYucmVmLCB2Lm1hc2spO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RlbmNpbE9wIGV4dGVuZHMgQmFzZVZhbHVlPFN0ZW5jaWxPcFR5cGU+IHtcbiAgICBnZXREZWZhdWx0KCk6IFN0ZW5jaWxPcFR5cGUge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHJldHVybiBbZ2wuS0VFUCwgZ2wuS0VFUCwgZ2wuS0VFUF07XG4gICAgfVxuICAgIHNldCh2OiBTdGVuY2lsT3BUeXBlKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGlmICh2WzBdID09PSBjWzBdICYmIHZbMV0gPT09IGNbMV0gJiYgdlsyXSA9PT0gY1syXSAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLnN0ZW5jaWxPcCh2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0ZW5jaWxUZXN0IGV4dGVuZHMgQmFzZVZhbHVlPGJvb2xlYW4+IHtcbiAgICBnZXREZWZhdWx0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNldCh2OiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2ID09PSB0aGlzLmN1cnJlbnQgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLlNURU5DSUxfVEVTVCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbC5kaXNhYmxlKGdsLlNURU5DSUxfVEVTVCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlcHRoUmFuZ2UgZXh0ZW5kcyBCYXNlVmFsdWU8RGVwdGhSYW5nZVR5cGU+IHtcbiAgICBnZXREZWZhdWx0KCk6IERlcHRoUmFuZ2VUeXBlIHtcbiAgICAgICAgcmV0dXJuIFswLCAxXTtcbiAgICB9XG4gICAgc2V0KHY6IERlcHRoUmFuZ2VUeXBlKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGlmICh2WzBdID09PSBjWzBdICYmIHZbMV0gPT09IGNbMV0gJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5kZXB0aFJhbmdlKHZbMF0sIHZbMV0pO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVwdGhUZXN0IGV4dGVuZHMgQmFzZVZhbHVlPGJvb2xlYW4+IHtcbiAgICBnZXREZWZhdWx0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNldCh2OiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2ID09PSB0aGlzLmN1cnJlbnQgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVwdGhGdW5jIGV4dGVuZHMgQmFzZVZhbHVlPERlcHRoRnVuY1R5cGU+IHtcbiAgICBnZXREZWZhdWx0KCk6IERlcHRoRnVuY1R5cGUge1xuICAgICAgICByZXR1cm4gdGhpcy5nbC5MRVNTO1xuICAgIH1cbiAgICBzZXQodjogRGVwdGhGdW5jVHlwZSkge1xuICAgICAgICBpZiAodiA9PT0gdGhpcy5jdXJyZW50ICYmICF0aGlzLmRpcnR5KSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuZGVwdGhGdW5jKHYpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmxlbmQgZXh0ZW5kcyBCYXNlVmFsdWU8Ym9vbGVhbj4ge1xuICAgIGdldERlZmF1bHQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2V0KHY6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5CTEVORCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJsZW5kRnVuYyBleHRlbmRzIEJhc2VWYWx1ZTxCbGVuZEZ1bmNUeXBlPiB7XG4gICAgZ2V0RGVmYXVsdCgpOiBCbGVuZEZ1bmNUeXBlIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICByZXR1cm4gW2dsLk9ORSwgZ2wuWkVST107XG4gICAgfVxuICAgIHNldCh2OiBCbGVuZEZ1bmNUeXBlKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGlmICh2WzBdID09PSBjWzBdICYmIHZbMV0gPT09IGNbMV0gJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5ibGVuZEZ1bmModlswXSwgdlsxXSk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCbGVuZENvbG9yIGV4dGVuZHMgQmFzZVZhbHVlPENvbG9yPiB7XG4gICAgZ2V0RGVmYXVsdCgpOiBDb2xvciB7XG4gICAgICAgIHJldHVybiBDb2xvci50cmFuc3BhcmVudDtcbiAgICB9XG4gICAgc2V0KHY6IENvbG9yKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGlmICh2LnIgPT09IGMuciAmJiB2LmcgPT09IGMuZyAmJiB2LmIgPT09IGMuYiAmJiB2LmEgPT09IGMuYSAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmJsZW5kQ29sb3Iodi5yLCB2LmcsIHYuYiwgdi5hKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJsZW5kRXF1YXRpb24gZXh0ZW5kcyBCYXNlVmFsdWU8QmxlbmRFcXVhdGlvblR5cGU+IHtcbiAgICBnZXREZWZhdWx0KCk6IEJsZW5kRXF1YXRpb25UeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2wuRlVOQ19BREQ7XG4gICAgfVxuICAgIHNldCh2OiBCbGVuZEVxdWF0aW9uVHlwZSkge1xuICAgICAgICBpZiAodiA9PT0gdGhpcy5jdXJyZW50ICYmICF0aGlzLmRpcnR5KSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuYmxlbmRFcXVhdGlvbih2KTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEN1bGxGYWNlIGV4dGVuZHMgQmFzZVZhbHVlPGJvb2xlYW4+IHtcbiAgICBnZXREZWZhdWx0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNldCh2OiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2ID09PSB0aGlzLmN1cnJlbnQgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkNVTExfRkFDRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbC5kaXNhYmxlKGdsLkNVTExfRkFDRSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEN1bGxGYWNlU2lkZSBleHRlbmRzIEJhc2VWYWx1ZTxDdWxsRmFjZU1vZGVUeXBlPiB7XG4gICAgZ2V0RGVmYXVsdCgpOiBDdWxsRmFjZU1vZGVUeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2wuQkFDSztcbiAgICB9XG4gICAgc2V0KHY6IEN1bGxGYWNlTW9kZVR5cGUpIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmN1bGxGYWNlKHYpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRnJvbnRGYWNlIGV4dGVuZHMgQmFzZVZhbHVlPEZyb250RmFjZVR5cGU+IHtcbiAgICBnZXREZWZhdWx0KCk6IEZyb250RmFjZVR5cGUge1xuICAgICAgICByZXR1cm4gdGhpcy5nbC5DQ1c7XG4gICAgfVxuICAgIHNldCh2OiBGcm9udEZhY2VUeXBlKSB7XG4gICAgICAgIGlmICh2ID09PSB0aGlzLmN1cnJlbnQgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5mcm9udEZhY2Uodik7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9ncmFtIGV4dGVuZHMgQmFzZVZhbHVlPD9XZWJHTFByb2dyYW0+IHtcbiAgICBnZXREZWZhdWx0KCk6IFdlYkdMUHJvZ3JhbSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzZXQodjogP1dlYkdMUHJvZ3JhbSkge1xuICAgICAgICBpZiAodiA9PT0gdGhpcy5jdXJyZW50ICYmICF0aGlzLmRpcnR5KSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbSh2KTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFjdGl2ZVRleHR1cmVVbml0IGV4dGVuZHMgQmFzZVZhbHVlPFRleHR1cmVVbml0VHlwZT4ge1xuICAgIGdldERlZmF1bHQoKTogVGV4dHVyZVVuaXRUeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2wuVEVYVFVSRTA7XG4gICAgfVxuICAgIHNldCh2OiBUZXh0dXJlVW5pdFR5cGUpIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodik7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWV3cG9ydCBleHRlbmRzIEJhc2VWYWx1ZTxWaWV3cG9ydFR5cGU+IHtcbiAgICBnZXREZWZhdWx0KCk6IFZpZXdwb3J0VHlwZSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgcmV0dXJuIFswLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHRdO1xuICAgIH1cbiAgICBzZXQodjogVmlld3BvcnRUeXBlKSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGlmICh2WzBdID09PSBjWzBdICYmIHZbMV0gPT09IGNbMV0gJiYgdlsyXSA9PT0gY1syXSAmJiB2WzNdID09PSBjWzNdICYmICF0aGlzLmRpcnR5KSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wudmlld3BvcnQodlswXSwgdlsxXSwgdlsyXSwgdlszXSk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaW5kRnJhbWVidWZmZXIgZXh0ZW5kcyBCYXNlVmFsdWU8P1dlYkdMRnJhbWVidWZmZXI+IHtcbiAgICBnZXREZWZhdWx0KCk6IFdlYkdMRnJhbWVidWZmZXIge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2V0KHY6ID9XZWJHTEZyYW1lYnVmZmVyKSB7XG4gICAgICAgIGlmICh2ID09PSB0aGlzLmN1cnJlbnQgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHYpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmluZFJlbmRlcmJ1ZmZlciBleHRlbmRzIEJhc2VWYWx1ZTw/V2ViR0xSZW5kZXJidWZmZXI+IHtcbiAgICBnZXREZWZhdWx0KCk6IFdlYkdMUmVuZGVyYnVmZmVyIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHNldCh2OiA/V2ViR0xSZW5kZXJidWZmZXIpIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCB2KTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJpbmRUZXh0dXJlIGV4dGVuZHMgQmFzZVZhbHVlPD9XZWJHTFRleHR1cmU+IHtcbiAgICBnZXREZWZhdWx0KCk6IFdlYkdMVGV4dHVyZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzZXQodjogP1dlYkdMVGV4dHVyZSkge1xuICAgICAgICBpZiAodiA9PT0gdGhpcy5jdXJyZW50ICYmICF0aGlzLmRpcnR5KSByZXR1cm47XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdik7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaW5kVmVydGV4QnVmZmVyIGV4dGVuZHMgQmFzZVZhbHVlPD9XZWJHTEJ1ZmZlcj4ge1xuICAgIGdldERlZmF1bHQoKTogV2ViR0xCdWZmZXIge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2V0KHY6ID9XZWJHTEJ1ZmZlcikge1xuICAgICAgICBpZiAodiA9PT0gdGhpcy5jdXJyZW50ICYmICF0aGlzLmRpcnR5KSByZXR1cm47XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHYpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmluZEVsZW1lbnRCdWZmZXIgZXh0ZW5kcyBCYXNlVmFsdWU8P1dlYkdMQnVmZmVyPiB7XG4gICAgZ2V0RGVmYXVsdCgpOiBXZWJHTEJ1ZmZlciB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzZXQodjogP1dlYkdMQnVmZmVyKSB7XG4gICAgICAgIC8vIEFsd2F5cyByZWJpbmRcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB2KTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJpbmRWZXJ0ZXhBcnJheU9FUyBleHRlbmRzIEJhc2VWYWx1ZTxhbnk+IHtcbiAgICB2YW86IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XG4gICAgICAgIHRoaXMudmFvID0gY29udGV4dC5leHRWZXJ0ZXhBcnJheU9iamVjdDtcbiAgICB9XG4gICAgZ2V0RGVmYXVsdCgpOiBhbnkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2V0KHY6IGFueSkge1xuICAgICAgICBpZiAoIXRoaXMudmFvIHx8IHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnZhby5iaW5kVmVydGV4QXJyYXlPRVModik7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQaXhlbFN0b3JlVW5wYWNrIGV4dGVuZHMgQmFzZVZhbHVlPG51bWJlcj4ge1xuICAgIGdldERlZmF1bHQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgfVxuICAgIHNldCh2OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19BTElHTk1FTlQsIHYpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGl4ZWxTdG9yZVVucGFja1ByZW11bHRpcGx5QWxwaGEgZXh0ZW5kcyBCYXNlVmFsdWU8Ym9vbGVhbj4ge1xuICAgIGdldERlZmF1bHQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2V0KHY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgKHY6IGFueSkpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGl4ZWxTdG9yZVVucGFja0ZsaXBZIGV4dGVuZHMgQmFzZVZhbHVlPGJvb2xlYW4+IHtcbiAgICBnZXREZWZhdWx0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNldCh2OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmICh2ID09PSB0aGlzLmN1cnJlbnQgJiYgIXRoaXMuZGlydHkpIHJldHVybjtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCAodjogYW55KSk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG5cbmNsYXNzIEZyYW1lYnVmZmVyQXR0YWNobWVudDxUPiBleHRlbmRzIEJhc2VWYWx1ZTw/VD4ge1xuICAgIHBhcmVudDogV2ViR0xGcmFtZWJ1ZmZlcjtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCwgcGFyZW50OiBXZWJHTEZyYW1lYnVmZmVyKSB7XG4gICAgICAgIHN1cGVyKGNvbnRleHQpO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB9XG4gICAgZ2V0RGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29sb3JBdHRhY2htZW50IGV4dGVuZHMgRnJhbWVidWZmZXJBdHRhY2htZW50PFdlYkdMVGV4dHVyZT4ge1xuICAgIHNldERpcnR5KCkge1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgc2V0KHY6ID9XZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvbnRleHQuYmluZEZyYW1lYnVmZmVyLnNldCh0aGlzLnBhcmVudCk7XG4gICAgICAgIC8vIG5vdGU6IGl0J3MgcG9zc2libGUgdG8gYXR0YWNoIGEgcmVuZGVyYnVmZmVyIHRvIHRoZSBjb2xvclxuICAgICAgICAvLyBhdHRhY2htZW50IHBvaW50LCBidXQgdGh1cyBmYXIgTUJHTCBvbmx5IHVzZXMgdGV4dHVyZXMgZm9yIGNvbG9yXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB2LCAwKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlcHRoQXR0YWNobWVudCBleHRlbmRzIEZyYW1lYnVmZmVyQXR0YWNobWVudDxXZWJHTFJlbmRlcmJ1ZmZlcj4ge1xuICAgIHNldCh2OiA/V2ViR0xSZW5kZXJidWZmZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHYgPT09IHRoaXMuY3VycmVudCAmJiAhdGhpcy5kaXJ0eSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvbnRleHQuYmluZEZyYW1lYnVmZmVyLnNldCh0aGlzLnBhcmVudCk7XG4gICAgICAgIC8vIG5vdGU6IGl0J3MgcG9zc2libGUgdG8gYXR0YWNoIGEgdGV4dHVyZSB0byB0aGUgZGVwdGggYXR0YWNobWVudFxuICAgICAgICAvLyBwb2ludCwgYnV0IHRodXMgZmFyIE1CR0wgb25seSB1c2VzIHJlbmRlcmJ1ZmZlcnMgZm9yIGRlcHRoXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsLkRFUFRIX0FUVEFDSE1FTlQsIGdsLlJFTkRFUkJVRkZFUiwgdik7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHtDb2xvckF0dGFjaG1lbnQsIERlcHRoQXR0YWNobWVudH0gZnJvbSAnLi92YWx1ZSc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi9jb250ZXh0JztcblxuY2xhc3MgRnJhbWVidWZmZXIge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBmcmFtZWJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlcjtcbiAgICBjb2xvckF0dGFjaG1lbnQ6IENvbG9yQXR0YWNobWVudDtcbiAgICBkZXB0aEF0dGFjaG1lbnQ6IERlcHRoQXR0YWNobWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBoYXNEZXB0aDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgICAgIGNvbnN0IGZibyA9IHRoaXMuZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG4gICAgICAgIHRoaXMuY29sb3JBdHRhY2htZW50ID0gbmV3IENvbG9yQXR0YWNobWVudChjb250ZXh0LCBmYm8pO1xuICAgICAgICBpZiAoaGFzRGVwdGgpIHtcbiAgICAgICAgICAgIHRoaXMuZGVwdGhBdHRhY2htZW50ID0gbmV3IERlcHRoQXR0YWNobWVudChjb250ZXh0LCBmYm8pO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydChnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKSA9PT0gZ2wuRlJBTUVCVUZGRVJfQ09NUExFVEUpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuXG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSB0aGlzLmNvbG9yQXR0YWNobWVudC5nZXQoKTtcbiAgICAgICAgaWYgKHRleHR1cmUpIGdsLmRlbGV0ZVRleHR1cmUodGV4dHVyZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZGVwdGhBdHRhY2htZW50KSB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJidWZmZXIgPSB0aGlzLmRlcHRoQXR0YWNobWVudC5nZXQoKTtcbiAgICAgICAgICAgIGlmIChyZW5kZXJidWZmZXIpIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihyZW5kZXJidWZmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5mcmFtZWJ1ZmZlcik7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGcmFtZWJ1ZmZlcjtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7RGVwdGhGdW5jVHlwZSwgRGVwdGhNYXNrVHlwZSwgRGVwdGhSYW5nZVR5cGV9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBBTFdBWVMgPSAweDAyMDc7XG5cbmNsYXNzIERlcHRoTW9kZSB7XG4gICAgZnVuYzogRGVwdGhGdW5jVHlwZTtcbiAgICBtYXNrOiBEZXB0aE1hc2tUeXBlO1xuICAgIHJhbmdlOiBEZXB0aFJhbmdlVHlwZTtcblxuICAgIC8vIERlcHRoTWFzayBlbnVtc1xuICAgIHN0YXRpYyBSZWFkT25seTogYm9vbGVhbjtcbiAgICBzdGF0aWMgUmVhZFdyaXRlOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGVwdGhGdW5jOiBEZXB0aEZ1bmNUeXBlLCBkZXB0aE1hc2s6IERlcHRoTWFza1R5cGUsIGRlcHRoUmFuZ2U6IERlcHRoUmFuZ2VUeXBlKSB7XG4gICAgICAgIHRoaXMuZnVuYyA9IGRlcHRoRnVuYztcbiAgICAgICAgdGhpcy5tYXNrID0gZGVwdGhNYXNrO1xuICAgICAgICB0aGlzLnJhbmdlID0gZGVwdGhSYW5nZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGlzYWJsZWQ6ICRSZWFkT25seTxEZXB0aE1vZGU+O1xufVxuXG5EZXB0aE1vZGUuUmVhZE9ubHkgPSBmYWxzZTtcbkRlcHRoTW9kZS5SZWFkV3JpdGUgPSB0cnVlO1xuXG5EZXB0aE1vZGUuZGlzYWJsZWQgPSBuZXcgRGVwdGhNb2RlKEFMV0FZUywgRGVwdGhNb2RlLlJlYWRPbmx5LCBbMCwgMV0pO1xuXG5leHBvcnQgZGVmYXVsdCBEZXB0aE1vZGU7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUge1N0ZW5jaWxPcENvbnN0YW50LCBTdGVuY2lsVGVzdH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IEFMV0FZUyA9IDB4MDIwNztcbmNvbnN0IEtFRVAgPSAweDFFMDA7XG5cbmNsYXNzIFN0ZW5jaWxNb2RlIHtcbiAgICB0ZXN0OiBTdGVuY2lsVGVzdDtcbiAgICByZWY6IG51bWJlcjtcbiAgICBtYXNrOiBudW1iZXI7XG4gICAgZmFpbDogU3RlbmNpbE9wQ29uc3RhbnQ7XG4gICAgZGVwdGhGYWlsOiBTdGVuY2lsT3BDb25zdGFudDtcbiAgICBwYXNzOiBTdGVuY2lsT3BDb25zdGFudDtcblxuICAgIGNvbnN0cnVjdG9yKHRlc3Q6IFN0ZW5jaWxUZXN0LCByZWY6IG51bWJlciwgbWFzazogbnVtYmVyLCBmYWlsOiBTdGVuY2lsT3BDb25zdGFudCxcbiAgICAgICAgZGVwdGhGYWlsOiBTdGVuY2lsT3BDb25zdGFudCwgcGFzczogU3RlbmNpbE9wQ29uc3RhbnQpIHtcbiAgICAgICAgdGhpcy50ZXN0ID0gdGVzdDtcbiAgICAgICAgdGhpcy5yZWYgPSByZWY7XG4gICAgICAgIHRoaXMubWFzayA9IG1hc2s7XG4gICAgICAgIHRoaXMuZmFpbCA9IGZhaWw7XG4gICAgICAgIHRoaXMuZGVwdGhGYWlsID0gZGVwdGhGYWlsO1xuICAgICAgICB0aGlzLnBhc3MgPSBwYXNzO1xuICAgIH1cblxuICAgIHN0YXRpYyBkaXNhYmxlZDogJFJlYWRPbmx5PFN0ZW5jaWxNb2RlPjtcbn1cblxuU3RlbmNpbE1vZGUuZGlzYWJsZWQgPSBuZXcgU3RlbmNpbE1vZGUoe2Z1bmM6IEFMV0FZUywgbWFzazogMH0sIDAsIDAsIEtFRVAsIEtFRVAsIEtFRVApO1xuXG5leHBvcnQgZGVmYXVsdCBTdGVuY2lsTW9kZTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcblxuaW1wb3J0IHR5cGUge0JsZW5kRnVuY1R5cGUsIENvbG9yTWFza1R5cGV9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBaRVJPID0gMHgwMDAwO1xuY29uc3QgT05FID0gMHgwMDAxO1xuY29uc3QgT05FX01JTlVTX1NSQ19BTFBIQSA9IDB4MDMwMztcblxuY2xhc3MgQ29sb3JNb2RlIHtcbiAgICBibGVuZEZ1bmN0aW9uOiBCbGVuZEZ1bmNUeXBlO1xuICAgIGJsZW5kQ29sb3I6IENvbG9yO1xuICAgIG1hc2s6IENvbG9yTWFza1R5cGU7XG5cbiAgICBjb25zdHJ1Y3RvcihibGVuZEZ1bmN0aW9uOiBCbGVuZEZ1bmNUeXBlLCBibGVuZENvbG9yOiBDb2xvciwgbWFzazogQ29sb3JNYXNrVHlwZSkge1xuICAgICAgICB0aGlzLmJsZW5kRnVuY3Rpb24gPSBibGVuZEZ1bmN0aW9uO1xuICAgICAgICB0aGlzLmJsZW5kQ29sb3IgPSBibGVuZENvbG9yO1xuICAgICAgICB0aGlzLm1hc2sgPSBtYXNrO1xuICAgIH1cblxuICAgIHN0YXRpYyBSZXBsYWNlOiBCbGVuZEZ1bmNUeXBlO1xuXG4gICAgc3RhdGljIGRpc2FibGVkOiAkUmVhZE9ubHk8Q29sb3JNb2RlPjtcbiAgICBzdGF0aWMgdW5ibGVuZGVkOiAkUmVhZE9ubHk8Q29sb3JNb2RlPjtcbiAgICBzdGF0aWMgYWxwaGFCbGVuZGVkOiAkUmVhZE9ubHk8Q29sb3JNb2RlPjtcbn1cblxuQ29sb3JNb2RlLlJlcGxhY2UgPSBbT05FLCBaRVJPXTtcblxuQ29sb3JNb2RlLmRpc2FibGVkID0gbmV3IENvbG9yTW9kZShDb2xvck1vZGUuUmVwbGFjZSwgQ29sb3IudHJhbnNwYXJlbnQsIFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV0pO1xuQ29sb3JNb2RlLnVuYmxlbmRlZCA9IG5ldyBDb2xvck1vZGUoQ29sb3JNb2RlLlJlcGxhY2UsIENvbG9yLnRyYW5zcGFyZW50LCBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV0pO1xuQ29sb3JNb2RlLmFscGhhQmxlbmRlZCA9IG5ldyBDb2xvck1vZGUoW09ORSwgT05FX01JTlVTX1NSQ19BTFBIQV0sIENvbG9yLnRyYW5zcGFyZW50LCBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV0pO1xuXG5leHBvcnQgZGVmYXVsdCBDb2xvck1vZGU7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7Q3VsbEZhY2VNb2RlVHlwZSwgRnJvbnRGYWNlVHlwZX0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IEJBQ0sgPSAweDA0MDU7XG5jb25zdCBDQ1cgPSAweDA5MDE7XG5cbmNsYXNzIEN1bGxGYWNlTW9kZSB7XG4gICAgZW5hYmxlOiBib29sZWFuO1xuICAgIG1vZGU6IEN1bGxGYWNlTW9kZVR5cGU7XG4gICAgZnJvbnRGYWNlOiBGcm9udEZhY2VUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoZW5hYmxlOiBib29sZWFuLCBtb2RlOiBDdWxsRmFjZU1vZGVUeXBlLCBmcm9udEZhY2U6IEZyb250RmFjZVR5cGUpIHtcbiAgICAgICAgdGhpcy5lbmFibGUgPSBlbmFibGU7XG4gICAgICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlID0gZnJvbnRGYWNlO1xuICAgIH1cblxuICAgIHN0YXRpYyBkaXNhYmxlZDogJFJlYWRPbmx5PEN1bGxGYWNlTW9kZT47XG4gICAgc3RhdGljIGJhY2tDQ1c6ICRSZWFkT25seTxDdWxsRmFjZU1vZGU+O1xufVxuXG5DdWxsRmFjZU1vZGUuZGlzYWJsZWQgPSBuZXcgQ3VsbEZhY2VNb2RlKGZhbHNlLCBCQUNLLCBDQ1cpO1xuQ3VsbEZhY2VNb2RlLmJhY2tDQ1cgPSBuZXcgQ3VsbEZhY2VNb2RlKHRydWUsIEJBQ0ssIENDVyk7XG5cbmV4cG9ydCBkZWZhdWx0IEN1bGxGYWNlTW9kZTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgSW5kZXhCdWZmZXIgZnJvbSAnLi9pbmRleF9idWZmZXInO1xuXG5pbXBvcnQgVmVydGV4QnVmZmVyIGZyb20gJy4vdmVydGV4X2J1ZmZlcic7XG5pbXBvcnQgRnJhbWVidWZmZXIgZnJvbSAnLi9mcmFtZWJ1ZmZlcic7XG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4vZGVwdGhfbW9kZSc7XG5pbXBvcnQgU3RlbmNpbE1vZGUgZnJvbSAnLi9zdGVuY2lsX21vZGUnO1xuaW1wb3J0IENvbG9yTW9kZSBmcm9tICcuL2NvbG9yX21vZGUnO1xuaW1wb3J0IEN1bGxGYWNlTW9kZSBmcm9tICcuL2N1bGxfZmFjZV9tb2RlJztcbmltcG9ydCB7ZGVlcEVxdWFsfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHtDbGVhckNvbG9yLCBDbGVhckRlcHRoLCBDbGVhclN0ZW5jaWwsIENvbG9yTWFzaywgRGVwdGhNYXNrLCBTdGVuY2lsTWFzaywgU3RlbmNpbEZ1bmMsIFN0ZW5jaWxPcCwgU3RlbmNpbFRlc3QsIERlcHRoUmFuZ2UsIERlcHRoVGVzdCwgRGVwdGhGdW5jLCBCbGVuZCwgQmxlbmRGdW5jLCBCbGVuZENvbG9yLCBCbGVuZEVxdWF0aW9uLCBDdWxsRmFjZSwgQ3VsbEZhY2VTaWRlLCBGcm9udEZhY2UsIFByb2dyYW0sIEFjdGl2ZVRleHR1cmVVbml0LCBWaWV3cG9ydCwgQmluZEZyYW1lYnVmZmVyLCBCaW5kUmVuZGVyYnVmZmVyLCBCaW5kVGV4dHVyZSwgQmluZFZlcnRleEJ1ZmZlciwgQmluZEVsZW1lbnRCdWZmZXIsIEJpbmRWZXJ0ZXhBcnJheU9FUywgUGl4ZWxTdG9yZVVucGFjaywgUGl4ZWxTdG9yZVVucGFja1ByZW11bHRpcGx5QWxwaGEsIFBpeGVsU3RvcmVVbnBhY2tGbGlwWX0gZnJvbSAnLi92YWx1ZSc7XG5cbmltcG9ydCB0eXBlIHtUcmlhbmdsZUluZGV4QXJyYXksIExpbmVJbmRleEFycmF5LCBMaW5lU3RyaXBJbmRleEFycmF5fSBmcm9tICcuLi9kYXRhL2luZGV4X2FycmF5X3R5cGUnO1xuaW1wb3J0IHR5cGUge1xuICAgIFN0cnVjdEFycmF5LFxuICAgIFN0cnVjdEFycmF5TWVtYmVyXG59IGZyb20gJy4uL3V0aWwvc3RydWN0X2FycmF5JztcbmltcG9ydCB0eXBlIENvbG9yIGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9jb2xvcic7XG5cbnR5cGUgQ2xlYXJBcmdzID0ge1xuICAgIGNvbG9yPzogQ29sb3IsXG4gICAgZGVwdGg/OiBudW1iZXIsXG4gICAgc3RlbmNpbD86IG51bWJlclxufTtcblxuY2xhc3MgQ29udGV4dCB7XG4gICAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcbiAgICBleHRWZXJ0ZXhBcnJheU9iamVjdDogYW55O1xuICAgIGN1cnJlbnROdW1BdHRyaWJ1dGVzOiA/bnVtYmVyO1xuICAgIG1heFRleHR1cmVTaXplOiBudW1iZXI7XG5cbiAgICBjbGVhckNvbG9yOiBDbGVhckNvbG9yO1xuICAgIGNsZWFyRGVwdGg6IENsZWFyRGVwdGg7XG4gICAgY2xlYXJTdGVuY2lsOiBDbGVhclN0ZW5jaWw7XG4gICAgY29sb3JNYXNrOiBDb2xvck1hc2s7XG4gICAgZGVwdGhNYXNrOiBEZXB0aE1hc2s7XG4gICAgc3RlbmNpbE1hc2s6IFN0ZW5jaWxNYXNrO1xuICAgIHN0ZW5jaWxGdW5jOiBTdGVuY2lsRnVuYztcbiAgICBzdGVuY2lsT3A6IFN0ZW5jaWxPcDtcbiAgICBzdGVuY2lsVGVzdDogU3RlbmNpbFRlc3Q7XG4gICAgZGVwdGhSYW5nZTogRGVwdGhSYW5nZTtcbiAgICBkZXB0aFRlc3Q6IERlcHRoVGVzdDtcbiAgICBkZXB0aEZ1bmM6IERlcHRoRnVuYztcbiAgICBibGVuZDogQmxlbmQ7XG4gICAgYmxlbmRGdW5jOiBCbGVuZEZ1bmM7XG4gICAgYmxlbmRDb2xvcjogQmxlbmRDb2xvcjtcbiAgICBibGVuZEVxdWF0aW9uOiBCbGVuZEVxdWF0aW9uO1xuICAgIGN1bGxGYWNlOiBDdWxsRmFjZTtcbiAgICBjdWxsRmFjZVNpZGU6IEN1bGxGYWNlU2lkZTtcbiAgICBmcm9udEZhY2U6IEZyb250RmFjZTtcbiAgICBwcm9ncmFtOiBQcm9ncmFtO1xuICAgIGFjdGl2ZVRleHR1cmU6IEFjdGl2ZVRleHR1cmVVbml0O1xuICAgIHZpZXdwb3J0OiBWaWV3cG9ydDtcbiAgICBiaW5kRnJhbWVidWZmZXI6IEJpbmRGcmFtZWJ1ZmZlcjtcbiAgICBiaW5kUmVuZGVyYnVmZmVyOiBCaW5kUmVuZGVyYnVmZmVyO1xuICAgIGJpbmRUZXh0dXJlOiBCaW5kVGV4dHVyZTtcbiAgICBiaW5kVmVydGV4QnVmZmVyOiBCaW5kVmVydGV4QnVmZmVyO1xuICAgIGJpbmRFbGVtZW50QnVmZmVyOiBCaW5kRWxlbWVudEJ1ZmZlcjtcbiAgICBiaW5kVmVydGV4QXJyYXlPRVM6IEJpbmRWZXJ0ZXhBcnJheU9FUztcbiAgICBwaXhlbFN0b3JlVW5wYWNrOiBQaXhlbFN0b3JlVW5wYWNrO1xuICAgIHBpeGVsU3RvcmVVbnBhY2tQcmVtdWx0aXBseUFscGhhOiBQaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYTtcbiAgICBwaXhlbFN0b3JlVW5wYWNrRmxpcFk6IFBpeGVsU3RvcmVVbnBhY2tGbGlwWTtcblxuICAgIGV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpYzogYW55O1xuICAgIGV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpY01heDogYW55O1xuICAgIGV4dFRleHR1cmVIYWxmRmxvYXQ6IGFueTtcbiAgICBleHRSZW5kZXJUb1RleHR1cmVIYWxmRmxvYXQ6IGFueTtcbiAgICBleHRUaW1lclF1ZXJ5OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5leHRWZXJ0ZXhBcnJheU9iamVjdCA9IHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcpO1xuXG4gICAgICAgIHRoaXMuY2xlYXJDb2xvciA9IG5ldyBDbGVhckNvbG9yKHRoaXMpO1xuICAgICAgICB0aGlzLmNsZWFyRGVwdGggPSBuZXcgQ2xlYXJEZXB0aCh0aGlzKTtcbiAgICAgICAgdGhpcy5jbGVhclN0ZW5jaWwgPSBuZXcgQ2xlYXJTdGVuY2lsKHRoaXMpO1xuICAgICAgICB0aGlzLmNvbG9yTWFzayA9IG5ldyBDb2xvck1hc2sodGhpcyk7XG4gICAgICAgIHRoaXMuZGVwdGhNYXNrID0gbmV3IERlcHRoTWFzayh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGVuY2lsTWFzayA9IG5ldyBTdGVuY2lsTWFzayh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGVuY2lsRnVuYyA9IG5ldyBTdGVuY2lsRnVuYyh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGVuY2lsT3AgPSBuZXcgU3RlbmNpbE9wKHRoaXMpO1xuICAgICAgICB0aGlzLnN0ZW5jaWxUZXN0ID0gbmV3IFN0ZW5jaWxUZXN0KHRoaXMpO1xuICAgICAgICB0aGlzLmRlcHRoUmFuZ2UgPSBuZXcgRGVwdGhSYW5nZSh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXB0aFRlc3QgPSBuZXcgRGVwdGhUZXN0KHRoaXMpO1xuICAgICAgICB0aGlzLmRlcHRoRnVuYyA9IG5ldyBEZXB0aEZ1bmModGhpcyk7XG4gICAgICAgIHRoaXMuYmxlbmQgPSBuZXcgQmxlbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jID0gbmV3IEJsZW5kRnVuYyh0aGlzKTtcbiAgICAgICAgdGhpcy5ibGVuZENvbG9yID0gbmV3IEJsZW5kQ29sb3IodGhpcyk7XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbiA9IG5ldyBCbGVuZEVxdWF0aW9uKHRoaXMpO1xuICAgICAgICB0aGlzLmN1bGxGYWNlID0gbmV3IEN1bGxGYWNlKHRoaXMpO1xuICAgICAgICB0aGlzLmN1bGxGYWNlU2lkZSA9IG5ldyBDdWxsRmFjZVNpZGUodGhpcyk7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlID0gbmV3IEZyb250RmFjZSh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcyk7XG4gICAgICAgIHRoaXMuYWN0aXZlVGV4dHVyZSA9IG5ldyBBY3RpdmVUZXh0dXJlVW5pdCh0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IG5ldyBWaWV3cG9ydCh0aGlzKTtcbiAgICAgICAgdGhpcy5iaW5kRnJhbWVidWZmZXIgPSBuZXcgQmluZEZyYW1lYnVmZmVyKHRoaXMpO1xuICAgICAgICB0aGlzLmJpbmRSZW5kZXJidWZmZXIgPSBuZXcgQmluZFJlbmRlcmJ1ZmZlcih0aGlzKTtcbiAgICAgICAgdGhpcy5iaW5kVGV4dHVyZSA9IG5ldyBCaW5kVGV4dHVyZSh0aGlzKTtcbiAgICAgICAgdGhpcy5iaW5kVmVydGV4QnVmZmVyID0gbmV3IEJpbmRWZXJ0ZXhCdWZmZXIodGhpcyk7XG4gICAgICAgIHRoaXMuYmluZEVsZW1lbnRCdWZmZXIgPSBuZXcgQmluZEVsZW1lbnRCdWZmZXIodGhpcyk7XG4gICAgICAgIHRoaXMuYmluZFZlcnRleEFycmF5T0VTID0gdGhpcy5leHRWZXJ0ZXhBcnJheU9iamVjdCAmJiBuZXcgQmluZFZlcnRleEFycmF5T0VTKHRoaXMpO1xuICAgICAgICB0aGlzLnBpeGVsU3RvcmVVbnBhY2sgPSBuZXcgUGl4ZWxTdG9yZVVucGFjayh0aGlzKTtcbiAgICAgICAgdGhpcy5waXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSA9IG5ldyBQaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSh0aGlzKTtcbiAgICAgICAgdGhpcy5waXhlbFN0b3JlVW5wYWNrRmxpcFkgPSBuZXcgUGl4ZWxTdG9yZVVucGFja0ZsaXBZKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljID0gKFxuICAgICAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKSB8fFxuICAgICAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbignV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0aGlzLmV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpYykge1xuICAgICAgICAgICAgdGhpcy5leHRUZXh0dXJlRmlsdGVyQW5pc290cm9waWNNYXggPSBnbC5nZXRQYXJhbWV0ZXIodGhpcy5leHRUZXh0dXJlRmlsdGVyQW5pc290cm9waWMuTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXh0VGV4dHVyZUhhbGZGbG9hdCA9IGdsLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcpO1xuICAgICAgICBpZiAodGhpcy5leHRUZXh0dXJlSGFsZkZsb2F0KSB7XG4gICAgICAgICAgICBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmV4dFJlbmRlclRvVGV4dHVyZUhhbGZGbG9hdCA9IGdsLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmV4dFRpbWVyUXVlcnkgPSBnbC5nZXRFeHRlbnNpb24oJ0VYVF9kaXNqb2ludF90aW1lcl9xdWVyeScpO1xuICAgICAgICB0aGlzLm1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9URVhUVVJFX1NJWkUpO1xuICAgIH1cblxuICAgIHNldERlZmF1bHQoKSB7XG4gICAgICAgIHRoaXMudW5iaW5kVkFPKCk7XG5cbiAgICAgICAgdGhpcy5jbGVhckNvbG9yLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5jbGVhckRlcHRoLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5jbGVhclN0ZW5jaWwuc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmNvbG9yTWFzay5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuZGVwdGhNYXNrLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zdGVuY2lsTWFzay5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuc3RlbmNpbEZ1bmMuc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnN0ZW5jaWxPcC5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuc3RlbmNpbFRlc3Quc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmRlcHRoUmFuZ2Uuc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmRlcHRoVGVzdC5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuZGVwdGhGdW5jLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5ibGVuZC5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5ibGVuZENvbG9yLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5jdWxsRmFjZS5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuY3VsbEZhY2VTaWRlLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5mcm9udEZhY2Uuc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnByb2dyYW0uc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmFjdGl2ZVRleHR1cmUuc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmJpbmRGcmFtZWJ1ZmZlci5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucGl4ZWxTdG9yZVVucGFjay5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucGl4ZWxTdG9yZVVucGFja1ByZW11bHRpcGx5QWxwaGEuc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnBpeGVsU3RvcmVVbnBhY2tGbGlwWS5zZXREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgc2V0RGlydHkoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJDb2xvci5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xlYXJEZXB0aC5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xlYXJTdGVuY2lsLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb2xvck1hc2suZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlcHRoTWFzay5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RlbmNpbE1hc2suZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0ZW5jaWxGdW5jLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGVuY2lsT3AuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0ZW5jaWxUZXN0LmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXB0aFJhbmdlLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXB0aFRlc3QuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlcHRoRnVuYy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuYmxlbmQuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuYmxlbmRDb2xvci5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbi5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuY3VsbEZhY2UuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmN1bGxGYWNlU2lkZS5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wcm9ncmFtLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hY3RpdmVUZXh0dXJlLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52aWV3cG9ydC5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuYmluZEZyYW1lYnVmZmVyLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5iaW5kUmVuZGVyYnVmZmVyLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5iaW5kVGV4dHVyZS5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuYmluZFZlcnRleEJ1ZmZlci5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuYmluZEVsZW1lbnRCdWZmZXIuZGlydHkgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5leHRWZXJ0ZXhBcnJheU9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5iaW5kVmVydGV4QXJyYXlPRVMuZGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGl4ZWxTdG9yZVVucGFjay5kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMucGl4ZWxTdG9yZVVucGFja1ByZW11bHRpcGx5QWxwaGEuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnBpeGVsU3RvcmVVbnBhY2tGbGlwWS5kaXJ0eSA9IHRydWU7XG4gICAgfVxuXG4gICAgY3JlYXRlSW5kZXhCdWZmZXIoYXJyYXk6IFRyaWFuZ2xlSW5kZXhBcnJheSB8IExpbmVJbmRleEFycmF5IHwgTGluZVN0cmlwSW5kZXhBcnJheSwgZHluYW1pY0RyYXc/OiBib29sZWFuKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW5kZXhCdWZmZXIodGhpcywgYXJyYXksIGR5bmFtaWNEcmF3KTtcbiAgICB9XG5cbiAgICBjcmVhdGVWZXJ0ZXhCdWZmZXIoYXJyYXk6IFN0cnVjdEFycmF5LCBhdHRyaWJ1dGVzOiAkUmVhZE9ubHlBcnJheTxTdHJ1Y3RBcnJheU1lbWJlcj4sIGR5bmFtaWNEcmF3PzogYm9vbGVhbikge1xuICAgICAgICByZXR1cm4gbmV3IFZlcnRleEJ1ZmZlcih0aGlzLCBhcnJheSwgYXR0cmlidXRlcywgZHluYW1pY0RyYXcpO1xuICAgIH1cblxuICAgIGNyZWF0ZVJlbmRlcmJ1ZmZlcihzdG9yYWdlRm9ybWF0OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcblxuICAgICAgICBjb25zdCByYm8gPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcbiAgICAgICAgdGhpcy5iaW5kUmVuZGVyYnVmZmVyLnNldChyYm8pO1xuICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgc3RvcmFnZUZvcm1hdCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuYmluZFJlbmRlcmJ1ZmZlci5zZXQobnVsbCk7XG5cbiAgICAgICAgcmV0dXJuIHJibztcbiAgICB9XG5cbiAgICBjcmVhdGVGcmFtZWJ1ZmZlcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgaGFzRGVwdGg6IGJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGcmFtZWJ1ZmZlcih0aGlzLCB3aWR0aCwgaGVpZ2h0LCBoYXNEZXB0aCk7XG4gICAgfVxuXG4gICAgY2xlYXIoe2NvbG9yLCBkZXB0aH06IENsZWFyQXJncykge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGxldCBtYXNrID0gMDtcblxuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICAgIG1hc2sgfD0gZ2wuQ09MT1JfQlVGRkVSX0JJVDtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDb2xvci5zZXQoY29sb3IpO1xuICAgICAgICAgICAgdGhpcy5jb2xvck1hc2suc2V0KFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGRlcHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbWFzayB8PSBnbC5ERVBUSF9CVUZGRVJfQklUO1xuXG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBwbGF0Zm9ybXMgd2hlcmUgY2xlYXJEZXB0aCBkb2Vzbid0IHNlZW0gdG8gd29ya1xuICAgICAgICAgICAgLy8gd2l0aG91dCByZXNldGluZyB0aGUgZGVwdGhSYW5nZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy8zNDM3XG4gICAgICAgICAgICB0aGlzLmRlcHRoUmFuZ2Uuc2V0KFswLCAxXSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2xlYXJEZXB0aC5zZXQoZGVwdGgpO1xuICAgICAgICAgICAgdGhpcy5kZXB0aE1hc2suc2V0KHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VlIG5vdGUgaW4gUGFpbnRlciNjbGVhclN0ZW5jaWw6IGltcGxlbWVudCB0aGlzIHRoZSBlYXN5IHdheSBvbmNlIEdQVSBidWcvd29ya2Fyb3VuZCBpcyBmaXhlZCB1cHN0cmVhbVxuICAgICAgICAvLyBpZiAodHlwZW9mIHN0ZW5jaWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vICAgICBtYXNrIHw9IGdsLlNURU5DSUxfQlVGRkVSX0JJVDtcbiAgICAgICAgLy8gICAgIHRoaXMuY2xlYXJTdGVuY2lsLnNldChzdGVuY2lsKTtcbiAgICAgICAgLy8gICAgIHRoaXMuc3RlbmNpbE1hc2suc2V0KDB4RkYpO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgZ2wuY2xlYXIobWFzayk7XG4gICAgfVxuXG4gICAgc2V0Q3VsbEZhY2UoY3VsbEZhY2VNb2RlOiAkUmVhZE9ubHk8Q3VsbEZhY2VNb2RlPikge1xuICAgICAgICBpZiAoY3VsbEZhY2VNb2RlLmVuYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuY3VsbEZhY2Uuc2V0KGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VsbEZhY2Uuc2V0KHRydWUpO1xuICAgICAgICAgICAgdGhpcy5jdWxsRmFjZVNpZGUuc2V0KGN1bGxGYWNlTW9kZS5tb2RlKTtcbiAgICAgICAgICAgIHRoaXMuZnJvbnRGYWNlLnNldChjdWxsRmFjZU1vZGUuZnJvbnRGYWNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldERlcHRoTW9kZShkZXB0aE1vZGU6ICRSZWFkT25seTxEZXB0aE1vZGU+KSB7XG4gICAgICAgIGlmIChkZXB0aE1vZGUuZnVuYyA9PT0gdGhpcy5nbC5BTFdBWVMgJiYgIWRlcHRoTW9kZS5tYXNrKSB7XG4gICAgICAgICAgICB0aGlzLmRlcHRoVGVzdC5zZXQoZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXB0aFRlc3Quc2V0KHRydWUpO1xuICAgICAgICAgICAgdGhpcy5kZXB0aEZ1bmMuc2V0KGRlcHRoTW9kZS5mdW5jKTtcbiAgICAgICAgICAgIHRoaXMuZGVwdGhNYXNrLnNldChkZXB0aE1vZGUubWFzayk7XG4gICAgICAgICAgICB0aGlzLmRlcHRoUmFuZ2Uuc2V0KGRlcHRoTW9kZS5yYW5nZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRTdGVuY2lsTW9kZShzdGVuY2lsTW9kZTogJFJlYWRPbmx5PFN0ZW5jaWxNb2RlPikge1xuICAgICAgICBpZiAoc3RlbmNpbE1vZGUudGVzdC5mdW5jID09PSB0aGlzLmdsLkFMV0FZUyAmJiAhc3RlbmNpbE1vZGUubWFzaykge1xuICAgICAgICAgICAgdGhpcy5zdGVuY2lsVGVzdC5zZXQoZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGVuY2lsVGVzdC5zZXQodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnN0ZW5jaWxNYXNrLnNldChzdGVuY2lsTW9kZS5tYXNrKTtcbiAgICAgICAgICAgIHRoaXMuc3RlbmNpbE9wLnNldChbc3RlbmNpbE1vZGUuZmFpbCwgc3RlbmNpbE1vZGUuZGVwdGhGYWlsLCBzdGVuY2lsTW9kZS5wYXNzXSk7XG4gICAgICAgICAgICB0aGlzLnN0ZW5jaWxGdW5jLnNldCh7XG4gICAgICAgICAgICAgICAgZnVuYzogc3RlbmNpbE1vZGUudGVzdC5mdW5jLFxuICAgICAgICAgICAgICAgIHJlZjogc3RlbmNpbE1vZGUucmVmLFxuICAgICAgICAgICAgICAgIG1hc2s6IHN0ZW5jaWxNb2RlLnRlc3QubWFza1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDb2xvck1vZGUoY29sb3JNb2RlOiAkUmVhZE9ubHk8Q29sb3JNb2RlPikge1xuICAgICAgICBpZiAoZGVlcEVxdWFsKGNvbG9yTW9kZS5ibGVuZEZ1bmN0aW9uLCBDb2xvck1vZGUuUmVwbGFjZSkpIHtcbiAgICAgICAgICAgIHRoaXMuYmxlbmQuc2V0KGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYmxlbmQuc2V0KHRydWUpO1xuICAgICAgICAgICAgdGhpcy5ibGVuZEZ1bmMuc2V0KGNvbG9yTW9kZS5ibGVuZEZ1bmN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuYmxlbmRDb2xvci5zZXQoY29sb3JNb2RlLmJsZW5kQ29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb2xvck1hc2suc2V0KGNvbG9yTW9kZS5tYXNrKTtcbiAgICB9XG5cbiAgICB1bmJpbmRWQU8oKSB7XG4gICAgICAgIC8vIFVuYmluZGluZyB0aGUgVkFPIHByZXZlbnRzIG90aGVyIHRoaW5ncyAoY3VzdG9tIGxheWVycywgbmV3IGJ1ZmZlciBjcmVhdGlvbikgZnJvbVxuICAgICAgICAvLyB1bmludGVudGlvbmFsbHkgY2hhbmdpbmcgdGhlIHN0YXRlIG9mIHRoZSBsYXN0IFZBTyB1c2VkLlxuICAgICAgICBpZiAodGhpcy5leHRWZXJ0ZXhBcnJheU9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5iaW5kVmVydGV4QXJyYXlPRVMuc2V0KG51bGwpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250ZXh0O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtjcmVhdGUgYXMgY3JlYXRlU291cmNlfSBmcm9tICcuL3NvdXJjZSc7XG5cbmltcG9ydCBUaWxlIGZyb20gJy4vdGlsZSc7XG5pbXBvcnQge0V2ZW50LCBFcnJvckV2ZW50LCBFdmVudGVkfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IFRpbGVDYWNoZSBmcm9tICcuL3RpbGVfY2FjaGUnO1xuaW1wb3J0IE1lcmNhdG9yQ29vcmRpbmF0ZSBmcm9tICcuLi9nZW8vbWVyY2F0b3JfY29vcmRpbmF0ZSc7XG5pbXBvcnQge2tleXNEaWZmZXJlbmNlLCB2YWx1ZXN9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcbmltcG9ydCBDb250ZXh0IGZyb20gJy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi4vdXRpbC9icm93c2VyJztcbmltcG9ydCB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi90aWxlX2lkJztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBTb3VyY2VGZWF0dXJlU3RhdGUgZnJvbSAnLi9zb3VyY2Vfc3RhdGUnO1xuXG5pbXBvcnQgdHlwZSB7U291cmNlfSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vdWkvbWFwJztcbmltcG9ydCB0eXBlIFN0eWxlIGZyb20gJy4uL3N0eWxlL3N0eWxlJztcbmltcG9ydCB0eXBlIERpc3BhdGNoZXIgZnJvbSAnLi4vdXRpbC9kaXNwYXRjaGVyJztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIHtUaWxlU3RhdGV9IGZyb20gJy4vdGlsZSc7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcbmltcG9ydCB0eXBlIHtTb3VyY2VTcGVjaWZpY2F0aW9ufSBmcm9tICcuLi9zdHlsZS1zcGVjL3R5cGVzJztcblxuLyoqXG4gKiBgU291cmNlQ2FjaGVgIGlzIHJlc3BvbnNpYmxlIGZvclxuICpcbiAqICAtIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIGBTb3VyY2VgXG4gKiAgLSBmb3J3YXJkaW5nIGV2ZW50cyBmcm9tIGBTb3VyY2VgXG4gKiAgLSBjYWNoaW5nIHRpbGVzIGxvYWRlZCBmcm9tIGFuIGluc3RhbmNlIG9mIGBTb3VyY2VgXG4gKiAgLSBsb2FkaW5nIHRoZSB0aWxlcyBuZWVkZWQgdG8gcmVuZGVyIGEgZ2l2ZW4gdmlld3BvcnRcbiAqICAtIHVubG9hZGluZyB0aGUgY2FjaGVkIHRpbGVzIG5vdCBuZWVkZWQgdG8gcmVuZGVyIGEgZ2l2ZW4gdmlld3BvcnRcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBTb3VyY2VDYWNoZSBleHRlbmRzIEV2ZW50ZWQge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlcjtcbiAgICBtYXA6IE1hcDtcbiAgICBzdHlsZTogU3R5bGU7XG5cbiAgICBfc291cmNlOiBTb3VyY2U7XG4gICAgX3NvdXJjZUxvYWRlZDogYm9vbGVhbjtcbiAgICBfc291cmNlRXJyb3JlZDogYm9vbGVhbjtcbiAgICBfdGlsZXM6IHtbXzogc3RyaW5nXTogVGlsZX07XG4gICAgX3ByZXZMbmc6IG51bWJlciB8IHZvaWQ7XG4gICAgX2NhY2hlOiBUaWxlQ2FjaGU7XG4gICAgX3RpbWVyczoge1tfOiBhbnldOiBUaW1lb3V0SUR9O1xuICAgIF9jYWNoZVRpbWVyczoge1tfOiBhbnldOiBUaW1lb3V0SUR9O1xuICAgIF9tYXhUaWxlQ2FjaGVTaXplOiA/bnVtYmVyO1xuICAgIF9wYXVzZWQ6IGJvb2xlYW47XG4gICAgX3Nob3VsZFJlbG9hZE9uUmVzdW1lOiBib29sZWFuO1xuICAgIF9jb3ZlcmVkVGlsZXM6IHtbXzogc3RyaW5nXTogYm9vbGVhbn07XG4gICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm07XG4gICAgX2lzSWRSZW5kZXJhYmxlOiAoaWQ6IHN0cmluZywgc3ltYm9sTGF5ZXI/OiBib29sZWFuKSA9PiBib29sZWFuO1xuICAgIHVzZWQ6IGJvb2xlYW47XG4gICAgX3N0YXRlOiBTb3VyY2VGZWF0dXJlU3RhdGU7XG4gICAgX2xvYWRlZFBhcmVudFRpbGVzOiB7W186IHN0cmluZ106ID9UaWxlfTtcblxuICAgIHN0YXRpYyBtYXhVbmRlcnpvb21pbmc6IG51bWJlcjtcbiAgICBzdGF0aWMgbWF4T3Zlcnpvb21pbmc6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIG9wdGlvbnM6IFNvdXJjZVNwZWNpZmljYXRpb24sIGRpc3BhdGNoZXI6IERpc3BhdGNoZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyO1xuXG4gICAgICAgIHRoaXMub24oJ2RhdGEnLCAoZSkgPT4ge1xuICAgICAgICAgICAgLy8gdGhpcy5fc291cmNlTG9hZGVkIHNpZ25pZmllcyB0aGF0IHRoZSBUaWxlSlNPTiBpcyBsb2FkZWQgaWYgYXBwbGljYWJsZS5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBzb3VyY2UgdHlwZSBkb2VzIG5vdCBjb21lIHdpdGggYSBUaWxlSlNPTiwgdGhlIGZsYWcgc2lnbmlmaWVzIHRoZVxuICAgICAgICAgICAgLy8gc291cmNlIGRhdGEgaGFzIGxvYWRlZCAoaS5lIGdlb2pzb24gaGFzIGJlZW4gdGlsZWQgb24gdGhlIHdvcmtlciBhbmQgaXMgcmVhZHkpXG4gICAgICAgICAgICBpZiAoZS5kYXRhVHlwZSA9PT0gJ3NvdXJjZScgJiYgZS5zb3VyY2VEYXRhVHlwZSA9PT0gJ21ldGFkYXRhJykgdGhpcy5fc291cmNlTG9hZGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy8gZm9yIHNvdXJjZXMgd2l0aCBtdXRhYmxlIGRhdGEsIHRoaXMgZXZlbnQgZmlyZXMgd2hlbiB0aGUgdW5kZXJseWluZyBkYXRhXG4gICAgICAgICAgICAvLyB0byBhIHNvdXJjZSBpcyBjaGFuZ2VkLiAoaS5lLiBHZW9KU09OU291cmNlI3NldERhdGEgYW5kIEltYWdlU291cmNlI3NlckNvb3JkaW5hdGVzKVxuICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZUxvYWRlZCAmJiAhdGhpcy5fcGF1c2VkICYmIGUuZGF0YVR5cGUgPT09IFwic291cmNlXCIgJiYgZS5zb3VyY2VEYXRhVHlwZSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vbignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zb3VyY2VFcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fc291cmNlID0gY3JlYXRlU291cmNlKGlkLCBvcHRpb25zLCBkaXNwYXRjaGVyLCB0aGlzKTtcblxuICAgICAgICB0aGlzLl90aWxlcyA9IHt9O1xuICAgICAgICB0aGlzLl9jYWNoZSA9IG5ldyBUaWxlQ2FjaGUoMCwgdGhpcy5fdW5sb2FkVGlsZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fdGltZXJzID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlVGltZXJzID0ge307XG4gICAgICAgIHRoaXMuX21heFRpbGVDYWNoZVNpemUgPSBudWxsO1xuICAgICAgICB0aGlzLl9sb2FkZWRQYXJlbnRUaWxlcyA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2NvdmVyZWRUaWxlcyA9IHt9O1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IG5ldyBTb3VyY2VGZWF0dXJlU3RhdGUoKTtcbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5fbWF4VGlsZUNhY2hlU2l6ZSA9IG1hcCA/IG1hcC5fbWF4VGlsZUNhY2hlU2l6ZSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLl9zb3VyY2UgJiYgdGhpcy5fc291cmNlLm9uQWRkKSB7XG4gICAgICAgICAgICB0aGlzLl9zb3VyY2Uub25BZGQobWFwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uUmVtb3ZlKG1hcDogTWFwKSB7XG4gICAgICAgIGlmICh0aGlzLl9zb3VyY2UgJiYgdGhpcy5fc291cmNlLm9uUmVtb3ZlKSB7XG4gICAgICAgICAgICB0aGlzLl9zb3VyY2Uub25SZW1vdmUobWFwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0cnVlIGlmIG5vIHRpbGUgZGF0YSBpcyBwZW5kaW5nLCB0aWxlcyB3aWxsIG5vdCBjaGFuZ2UgdW5sZXNzXG4gICAgICogYW4gYWRkaXRpb25hbCBBUEkgY2FsbCBpcyByZWNlaXZlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGxvYWRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZUVycm9yZWQpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgaWYgKCF0aGlzLl9zb3VyY2VMb2FkZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIGlmICghdGhpcy5fc291cmNlLmxvYWRlZCgpKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICBmb3IgKGNvbnN0IHQgaW4gdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLl90aWxlc1t0XTtcbiAgICAgICAgICAgIGlmICh0aWxlLnN0YXRlICE9PSAnbG9hZGVkJyAmJiB0aWxlLnN0YXRlICE9PSAnZXJyb3JlZCcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGdldFNvdXJjZSgpOiBTb3VyY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fc291cmNlO1xuICAgIH1cblxuICAgIHBhdXNlKCkge1xuICAgICAgICB0aGlzLl9wYXVzZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJlc3VtZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wYXVzZWQpIHJldHVybjtcbiAgICAgICAgY29uc3Qgc2hvdWxkUmVsb2FkID0gdGhpcy5fc2hvdWxkUmVsb2FkT25SZXN1bWU7XG4gICAgICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zaG91bGRSZWxvYWRPblJlc3VtZSA9IGZhbHNlO1xuICAgICAgICBpZiAoc2hvdWxkUmVsb2FkKSB0aGlzLnJlbG9hZCgpO1xuICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm0pIHRoaXMudXBkYXRlKHRoaXMudHJhbnNmb3JtKTtcbiAgICB9XG5cbiAgICBfbG9hZFRpbGUodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2UubG9hZFRpbGUodGlsZSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIF91bmxvYWRUaWxlKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZS51bmxvYWRUaWxlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZS51bmxvYWRUaWxlKHRpbGUsICgpID0+IHt9KTtcbiAgICB9XG5cbiAgICBfYWJvcnRUaWxlKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZS5hYm9ydFRpbGUpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc291cmNlLmFib3J0VGlsZSh0aWxlLCAoKSA9PiB7fSk7XG4gICAgfVxuXG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc291cmNlLnNlcmlhbGl6ZSgpO1xuICAgIH1cblxuICAgIHByZXBhcmUoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICBpZiAgKHRoaXMuX3NvdXJjZS5wcmVwYXJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zb3VyY2UucHJlcGFyZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3RhdGUuY29hbGVzY2VDaGFuZ2VzKHRoaXMuX3RpbGVzLCB0aGlzLm1hcCA/IHRoaXMubWFwLnBhaW50ZXIgOiBudWxsKTtcbiAgICAgICAgZm9yIChjb25zdCBpIGluIHRoaXMuX3RpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbaV07XG4gICAgICAgICAgICB0aWxlLnVwbG9hZChjb250ZXh0KTtcbiAgICAgICAgICAgIHRpbGUucHJlcGFyZSh0aGlzLm1hcC5zdHlsZS5pbWFnZU1hbmFnZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGFsbCB0aWxlIGlkcyBvcmRlcmVkIHdpdGggei1vcmRlciwgYW5kIGNhc3QgdG8gbnVtYmVyc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0SWRzKCk6IEFycmF5PHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gKHZhbHVlcyh0aGlzLl90aWxlcyk6IGFueSkubWFwKCh0aWxlOiBUaWxlKSA9PiB0aWxlLnRpbGVJRCkuc29ydChjb21wYXJlVGlsZUlkKS5tYXAoaWQgPT4gaWQua2V5KTtcbiAgICB9XG5cbiAgICBnZXRSZW5kZXJhYmxlSWRzKHN5bWJvbExheWVyPzogYm9vbGVhbik6IEFycmF5PHN0cmluZz4ge1xuICAgICAgICBjb25zdCByZW5kZXJhYmxlczogQXJyYXk8VGlsZT4gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSWRSZW5kZXJhYmxlKGlkLCBzeW1ib2xMYXllcikpIHJlbmRlcmFibGVzLnB1c2godGhpcy5fdGlsZXNbaWRdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ltYm9sTGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJhYmxlcy5zb3J0KChhXzogVGlsZSwgYl86IFRpbGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gYV8udGlsZUlEO1xuICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBiXy50aWxlSUQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRlZEEgPSAobmV3IFBvaW50KGEuY2Fub25pY2FsLngsIGEuY2Fub25pY2FsLnkpKS5fcm90YXRlKHRoaXMudHJhbnNmb3JtLmFuZ2xlKTtcbiAgICAgICAgICAgICAgICBjb25zdCByb3RhdGVkQiA9IChuZXcgUG9pbnQoYi5jYW5vbmljYWwueCwgYi5jYW5vbmljYWwueSkpLl9yb3RhdGUodGhpcy50cmFuc2Zvcm0uYW5nbGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhLm92ZXJzY2FsZWRaIC0gYi5vdmVyc2NhbGVkWiB8fCByb3RhdGVkQi55IC0gcm90YXRlZEEueSB8fCByb3RhdGVkQi54IC0gcm90YXRlZEEueDtcbiAgICAgICAgICAgIH0pLm1hcCh0aWxlID0+IHRpbGUudGlsZUlELmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbmRlcmFibGVzLm1hcCh0aWxlID0+IHRpbGUudGlsZUlEKS5zb3J0KGNvbXBhcmVUaWxlSWQpLm1hcChpZCA9PiBpZC5rZXkpO1xuICAgIH1cblxuICAgIGhhc1JlbmRlcmFibGVQYXJlbnQodGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFRpbGUgPSB0aGlzLmZpbmRMb2FkZWRQYXJlbnQodGlsZUlELCAwKTtcbiAgICAgICAgaWYgKHBhcmVudFRpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0lkUmVuZGVyYWJsZShwYXJlbnRUaWxlLnRpbGVJRC5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfaXNJZFJlbmRlcmFibGUoaWQ6IHN0cmluZywgc3ltYm9sTGF5ZXI/OiBib29sZWFuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90aWxlc1tpZF0gJiYgdGhpcy5fdGlsZXNbaWRdLmhhc0RhdGEoKSAmJlxuICAgICAgICAgICAgIXRoaXMuX2NvdmVyZWRUaWxlc1tpZF0gJiYgKHN5bWJvbExheWVyIHx8ICF0aGlzLl90aWxlc1tpZF0uaG9sZGluZ0ZvckZhZGUoKSk7XG4gICAgfVxuXG4gICAgcmVsb2FkKCkge1xuICAgICAgICBpZiAodGhpcy5fcGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9zaG91bGRSZWxvYWRPblJlc3VtZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jYWNoZS5yZXNldCgpO1xuXG4gICAgICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbGVzW2ldLnN0YXRlICE9PSBcImVycm9yZWRcIikgdGhpcy5fcmVsb2FkVGlsZShpLCAncmVsb2FkaW5nJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVsb2FkVGlsZShpZDogc3RyaW5nLCBzdGF0ZTogVGlsZVN0YXRlKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLl90aWxlc1tpZF07XG5cbiAgICAgICAgLy8gdGhpcyBwb3RlbnRpYWxseSBkb2VzIG5vdCBhZGRyZXNzIGFsbCB1bmRlcmx5aW5nXG4gICAgICAgIC8vIGlzc3VlcyBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvNDI1MlxuICAgICAgICAvLyAtIGhhcmQgdG8gdGVsbCB3aXRob3V0IHJlcHJvIHN0ZXBzXG4gICAgICAgIGlmICghdGlsZSkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gXCJsb2FkaW5nXCIgdGlsZXMgYW5kIFwicmVsb2FkaW5nXCIgb3IgXCJleHBpcmVkXCJcbiAgICAgICAgLy8gdGlsZXMgaXMgdGhhdCBcInJlbG9hZGluZ1wiL1wiZXhwaXJlZFwiIHRpbGVzIGFyZSBcInJlbmRlcmFibGVcIi5cbiAgICAgICAgLy8gVGhlcmVmb3JlLCBhIFwibG9hZGluZ1wiIHRpbGUgY2Fubm90IGJlY29tZSBhIFwicmVsb2FkaW5nXCIgdGlsZSB3aXRob3V0XG4gICAgICAgIC8vIGZpcnN0IGJlY29taW5nIGEgXCJsb2FkZWRcIiB0aWxlLlxuICAgICAgICBpZiAodGlsZS5zdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICB0aWxlLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb2FkVGlsZSh0aWxlLCB0aGlzLl90aWxlTG9hZGVkLmJpbmQodGhpcywgdGlsZSwgaWQsIHN0YXRlKSk7XG4gICAgfVxuXG4gICAgX3RpbGVMb2FkZWQodGlsZTogVGlsZSwgaWQ6IHN0cmluZywgcHJldmlvdXNTdGF0ZTogVGlsZVN0YXRlLCBlcnI6ID9FcnJvcikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICB0aWxlLnN0YXRlID0gJ2Vycm9yZWQnO1xuICAgICAgICAgICAgaWYgKChlcnI6IGFueSkuc3RhdHVzICE9PSA0MDQpIHRoaXMuX3NvdXJjZS5maXJlKG5ldyBFcnJvckV2ZW50KGVyciwge3RpbGV9KSk7XG4gICAgICAgICAgICAvLyBjb250aW51ZSB0byB0cnkgbG9hZGluZyBwYXJlbnQvY2hpbGRyZW4gdGlsZXMgaWYgYSB0aWxlIGRvZXNuJ3QgZXhpc3QgKDQwNClcbiAgICAgICAgICAgIGVsc2UgdGhpcy51cGRhdGUodGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGlsZS50aW1lQWRkZWQgPSBicm93c2VyLm5vdygpO1xuICAgICAgICBpZiAocHJldmlvdXNTdGF0ZSA9PT0gJ2V4cGlyZWQnKSB0aWxlLnJlZnJlc2hlZFVwb25FeHBpcmF0aW9uID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2V0VGlsZVJlbG9hZFRpbWVyKGlkLCB0aWxlKTtcbiAgICAgICAgaWYgKHRoaXMuZ2V0U291cmNlKCkudHlwZSA9PT0gJ3Jhc3Rlci1kZW0nICYmIHRpbGUuZGVtKSB0aGlzLl9iYWNrZmlsbERFTSh0aWxlKTtcbiAgICAgICAgdGhpcy5fc3RhdGUuaW5pdGlhbGl6ZVRpbGVTdGF0ZSh0aWxlLCB0aGlzLm1hcCA/IHRoaXMubWFwLnBhaW50ZXIgOiBudWxsKTtcblxuICAgICAgICB0aGlzLl9zb3VyY2UuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnLCB0aWxlLCBjb29yZDogdGlsZS50aWxlSUR9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBGb3IgcmFzdGVyIHRlcnJhaW4gc291cmNlLCBiYWNrZmlsbCBERU0gdG8gZWxpbWluYXRlIHZpc2libGUgdGlsZSBib3VuZGFyaWVzXG4gICAgKiBAcHJpdmF0ZVxuICAgICovXG4gICAgX2JhY2tmaWxsREVNKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyYWJsZXMgPSB0aGlzLmdldFJlbmRlcmFibGVJZHMoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYm9yZGVySWQgPSByZW5kZXJhYmxlc1tpXTtcbiAgICAgICAgICAgIGlmICh0aWxlLm5laWdoYm9yaW5nVGlsZXMgJiYgdGlsZS5uZWlnaGJvcmluZ1RpbGVzW2JvcmRlcklkXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvcmRlclRpbGUgPSB0aGlzLmdldFRpbGVCeUlEKGJvcmRlcklkKTtcbiAgICAgICAgICAgICAgICBmaWxsQm9yZGVyKHRpbGUsIGJvcmRlclRpbGUpO1xuICAgICAgICAgICAgICAgIGZpbGxCb3JkZXIoYm9yZGVyVGlsZSwgdGlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaWxsQm9yZGVyKHRpbGUsIGJvcmRlclRpbGUpIHtcbiAgICAgICAgICAgIHRpbGUubmVlZHNIaWxsc2hhZGVQcmVwYXJlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBkeCA9IGJvcmRlclRpbGUudGlsZUlELmNhbm9uaWNhbC54IC0gdGlsZS50aWxlSUQuY2Fub25pY2FsLng7XG4gICAgICAgICAgICBjb25zdCBkeSA9IGJvcmRlclRpbGUudGlsZUlELmNhbm9uaWNhbC55IC0gdGlsZS50aWxlSUQuY2Fub25pY2FsLnk7XG4gICAgICAgICAgICBjb25zdCBkaW0gPSBNYXRoLnBvdygyLCB0aWxlLnRpbGVJRC5jYW5vbmljYWwueik7XG4gICAgICAgICAgICBjb25zdCBib3JkZXJJZCA9IGJvcmRlclRpbGUudGlsZUlELmtleTtcbiAgICAgICAgICAgIGlmIChkeCA9PT0gMCAmJiBkeSA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZHkpID4gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkeCkgPiAxKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRqdXN0IHRoZSBkZWx0YSBjb29yZGluYXRlIGZvciB3b3JsZCB3cmFwYXJvdW5kLlxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkeCArIGRpbSkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZHggKz0gZGltO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZHggLSBkaW0pID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGR4IC09IGRpbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWJvcmRlclRpbGUuZGVtIHx8ICF0aWxlLmRlbSkgcmV0dXJuO1xuICAgICAgICAgICAgdGlsZS5kZW0uYmFja2ZpbGxCb3JkZXIoYm9yZGVyVGlsZS5kZW0sIGR4LCBkeSk7XG4gICAgICAgICAgICBpZiAodGlsZS5uZWlnaGJvcmluZ1RpbGVzICYmIHRpbGUubmVpZ2hib3JpbmdUaWxlc1tib3JkZXJJZF0pXG4gICAgICAgICAgICAgICAgdGlsZS5uZWlnaGJvcmluZ1RpbGVzW2JvcmRlcklkXS5iYWNrZmlsbGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzcGVjaWZpYyB0aWxlIGJ5IFRpbGVJRFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0VGlsZSh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpOiBUaWxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlsZUJ5SUQodGlsZUlELmtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgdGlsZSBieSBpZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0VGlsZUJ5SUQoaWQ6IHN0cmluZyk6IFRpbGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGlsZXNbaWRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvciBhIGdpdmVuIHNldCBvZiB0aWxlcywgcmV0YWluIGNoaWxkcmVuIHRoYXQgYXJlIGxvYWRlZCBhbmQgaGF2ZSBhIHpvb21cbiAgICAgKiBiZXR3ZWVuIGB6b29tYCAoZXhjbHVzaXZlKSBhbmQgYG1heENvdmVyaW5nWm9vbWAgKGluY2x1c2l2ZSlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZXRhaW5Mb2FkZWRDaGlsZHJlbihcbiAgICAgICAgaWRlYWxUaWxlczoge1tfOiBhbnldOiBPdmVyc2NhbGVkVGlsZUlEfSxcbiAgICAgICAgem9vbTogbnVtYmVyLFxuICAgICAgICBtYXhDb3ZlcmluZ1pvb206IG51bWJlcixcbiAgICAgICAgcmV0YWluOiB7W186IGFueV06IE92ZXJzY2FsZWRUaWxlSUR9XG4gICAgKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIGxldCB0aWxlID0gdGhpcy5fdGlsZXNbaWRdO1xuXG4gICAgICAgICAgICAvLyBvbmx5IGNvbnNpZGVyIHJlbmRlcmFibGUgdGlsZXMgdXAgdG8gbWF4Q292ZXJpbmdab29tXG4gICAgICAgICAgICBpZiAocmV0YWluW2lkXSB8fFxuICAgICAgICAgICAgICAgICF0aWxlLmhhc0RhdGEoKSB8fFxuICAgICAgICAgICAgICAgIHRpbGUudGlsZUlELm92ZXJzY2FsZWRaIDw9IHpvb20gfHxcbiAgICAgICAgICAgICAgICB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWiA+IG1heENvdmVyaW5nWm9vbVxuICAgICAgICAgICAgKSBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHBhcmVudHMgYW5kIHJldGFpbiB0aGUgdG9wbW9zdCBsb2FkZWQgb25lIGlmIGZvdW5kXG4gICAgICAgICAgICBsZXQgdG9wbW9zdExvYWRlZElEID0gdGlsZS50aWxlSUQ7XG4gICAgICAgICAgICB3aGlsZSAodGlsZSAmJiB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWiA+IHpvb20gKyAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50SUQgPSB0aWxlLnRpbGVJRC5zY2FsZWRUbyh0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWiAtIDEpO1xuXG4gICAgICAgICAgICAgICAgdGlsZSA9IHRoaXMuX3RpbGVzW3BhcmVudElELmtleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodGlsZSAmJiB0aWxlLmhhc0RhdGEoKSkge1xuICAgICAgICAgICAgICAgICAgICB0b3Btb3N0TG9hZGVkSUQgPSBwYXJlbnRJRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCBhbmNlc3RvcnMgb2YgdGhlIHRvcG1vc3QgbG9hZGVkIGNoaWxkIHRvIHNlZSBpZiB0aGVyZSdzIG9uZSB0aGF0IG5lZWRlZCBpdFxuICAgICAgICAgICAgbGV0IHRpbGVJRCA9IHRvcG1vc3RMb2FkZWRJRDtcbiAgICAgICAgICAgIHdoaWxlICh0aWxlSUQub3ZlcnNjYWxlZFogPiB6b29tKSB7XG4gICAgICAgICAgICAgICAgdGlsZUlEID0gdGlsZUlELnNjYWxlZFRvKHRpbGVJRC5vdmVyc2NhbGVkWiAtIDEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlkZWFsVGlsZXNbdGlsZUlELmtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm91bmQgYSBwYXJlbnQgdGhhdCBuZWVkZWQgYSBsb2FkZWQgY2hpbGQ7IHJldGFpbiB0aGF0IGNoaWxkXG4gICAgICAgICAgICAgICAgICAgIHJldGFpblt0b3Btb3N0TG9hZGVkSUQua2V5XSA9IHRvcG1vc3RMb2FkZWRJRDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCBhIGxvYWRlZCBwYXJlbnQgb2YgdGhlIGdpdmVuIHRpbGUgKHVwIHRvIG1pbkNvdmVyaW5nWm9vbSlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZpbmRMb2FkZWRQYXJlbnQodGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlELCBtaW5Db3ZlcmluZ1pvb206IG51bWJlcik6ID9UaWxlIHtcbiAgICAgICAgaWYgKHRpbGVJRC5rZXkgaW4gdGhpcy5fbG9hZGVkUGFyZW50VGlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuX2xvYWRlZFBhcmVudFRpbGVzW3RpbGVJRC5rZXldO1xuICAgICAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudGlsZUlELm92ZXJzY2FsZWRaID49IG1pbkNvdmVyaW5nWm9vbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHogPSB0aWxlSUQub3ZlcnNjYWxlZFogLSAxOyB6ID49IG1pbkNvdmVyaW5nWm9vbTsgei0tKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRUaWxlSUQgPSB0aWxlSUQuc2NhbGVkVG8oeik7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fZ2V0TG9hZGVkVGlsZShwYXJlbnRUaWxlSUQpO1xuICAgICAgICAgICAgaWYgKHRpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRMb2FkZWRUaWxlKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCk6ID9UaWxlIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuX3RpbGVzW3RpbGVJRC5rZXldO1xuICAgICAgICBpZiAodGlsZSAmJiB0aWxlLmhhc0RhdGEoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbGU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGlsZUNhY2hlIGlnbm9yZXMgd3JhcCBpbiBsb29rdXAuXG4gICAgICAgIGNvbnN0IGNhY2hlZFRpbGUgPSB0aGlzLl9jYWNoZS5nZXRCeUtleSh0aWxlSUQud3JhcHBlZCgpLmtleSk7XG4gICAgICAgIHJldHVybiBjYWNoZWRUaWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIHRpbGUgY2FjaGUgYmFzZWQgb24gdGhlIGN1cnJlbnQgdmlld3BvcnQncyBzaXplXG4gICAgICogb3IgdGhlIG1heFRpbGVDYWNoZVNpemUgb3B0aW9uIHBhc3NlZCBkdXJpbmcgbWFwIGNyZWF0aW9uXG4gICAgICpcbiAgICAgKiBMYXJnZXIgdmlld3BvcnRzIHVzZSBtb3JlIHRpbGVzIGFuZCBuZWVkIGxhcmdlciBjYWNoZXMuIExhcmdlciB2aWV3cG9ydHNcbiAgICAgKiBhcmUgbW9yZSBsaWtlbHkgdG8gYmUgZm91bmQgb24gZGV2aWNlcyB3aXRoIG1vcmUgbWVtb3J5IGFuZCBvbiBwYWdlcyB3aGVyZVxuICAgICAqIHRoZSBtYXAgaXMgbW9yZSBpbXBvcnRhbnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB1cGRhdGVDYWNoZVNpemUodHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcbiAgICAgICAgY29uc3Qgd2lkdGhJblRpbGVzID0gTWF0aC5jZWlsKHRyYW5zZm9ybS53aWR0aCAvIHRoaXMuX3NvdXJjZS50aWxlU2l6ZSkgKyAxO1xuICAgICAgICBjb25zdCBoZWlnaHRJblRpbGVzID0gTWF0aC5jZWlsKHRyYW5zZm9ybS5oZWlnaHQgLyB0aGlzLl9zb3VyY2UudGlsZVNpemUpICsgMTtcbiAgICAgICAgY29uc3QgYXBwcm94VGlsZXNJblZpZXcgPSB3aWR0aEluVGlsZXMgKiBoZWlnaHRJblRpbGVzO1xuICAgICAgICBjb25zdCBjb21tb25ab29tUmFuZ2UgPSA1O1xuXG4gICAgICAgIGNvbnN0IHZpZXdEZXBlbmRlbnRNYXhTaXplID0gTWF0aC5mbG9vcihhcHByb3hUaWxlc0luVmlldyAqIGNvbW1vblpvb21SYW5nZSk7XG4gICAgICAgIGNvbnN0IG1heFNpemUgPSB0eXBlb2YgdGhpcy5fbWF4VGlsZUNhY2hlU2l6ZSA9PT0gJ251bWJlcicgPyBNYXRoLm1pbih0aGlzLl9tYXhUaWxlQ2FjaGVTaXplLCB2aWV3RGVwZW5kZW50TWF4U2l6ZSkgOiB2aWV3RGVwZW5kZW50TWF4U2l6ZTtcblxuICAgICAgICB0aGlzLl9jYWNoZS5zZXRNYXhTaXplKG1heFNpemUpO1xuICAgIH1cblxuICAgIGhhbmRsZVdyYXBKdW1wKGxuZzogbnVtYmVyKSB7XG4gICAgICAgIC8vIE9uIHRvcCBvZiB0aGUgcmVndWxhciB6L3gveSB2YWx1ZXMsIFRpbGVJRHMgaGF2ZSBhIGB3cmFwYCB2YWx1ZSB0aGF0IHNwZWNpZnlcbiAgICAgICAgLy8gd2hpY2ggY3BweSBvZiB0aGUgd29ybGQgdGhlIHRpbGUgYmVsb25ncyB0by4gRm9yIGV4YW1wbGUsIGF0IGBsbmc6IDEwYCB5b3VcbiAgICAgICAgLy8gbWlnaHQgcmVuZGVyIHoveC95LzAgd2hpbGUgYXQgYGxuZzogMzcwYCB5b3Ugd291bGQgcmVuZGVyIHoveC95LzEuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdoZW4gbG5nIHZhbHVlcyBnZXQgd3JhcHBlZCAoZ29pbmcgZnJvbSBgbG5nOiAzNzBgIHRvIGBsb25nOiAxMGApIHlvdSBleHBlY3RcbiAgICAgICAgLy8gdG8gc2VlIHRoZSBzYW1lIHRoaW5nIG9uIHRoZSBzY3JlZW4gKDM3MCBkZWdyZWVzIGFuZCAxMCBkZWdyZWVzIGlzIHRoZSBzYW1lXG4gICAgICAgIC8vIHBsYWNlIGluIHRoZSB3b3JsZCkgYnV0IGFsbCB0aGUgVGlsZUlEcyB3aWxsIGhhdmUgZGlmZmVyZW50IHdyYXAgdmFsdWVzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJbiBvcmRlciB0byBtYWtlIHRoaXMgdHJhbnNpdGlvbiBzZWFtbGVzcywgd2UgY2FsY3VsYXRlIHRoZSByb3VuZGVkIGRpZmZlcmVuY2Ugb2ZcbiAgICAgICAgLy8gXCJ3b3JsZHNcIiBiZXR3ZWVuIHRoZSBsYXN0IGZyYW1lIGFuZCB0aGUgY3VycmVudCBmcmFtZS4gSWYgdGhlIG1hcCBwYW5uZWQgYnlcbiAgICAgICAgLy8gYSB3b3JsZCwgdGhlbiB3ZSBjYW4gYXNzaWduIGFsbCB0aGUgdGlsZXMgbmV3IFRpbGVJRHMgd2l0aCB1cGRhdGVkIHdyYXAgdmFsdWVzLlxuICAgICAgICAvLyBGb3IgZXhhbXBsZSwgYXNzaWduIHoveC95LzEgYSBuZXcgaWQ6IHoveC95LzAuIEl0IGlzIHRoZSBzYW1lIHRpbGUsIGp1c3QgcmVuZGVyZWRcbiAgICAgICAgLy8gaW4gYSBkaWZmZXJlbnQgcG9zaXRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgZW5hYmxlcyB1cyB0byByZXVzZSB0aGUgdGlsZXMgYXQgbW9yZSBpZGVhbCBsb2NhdGlvbnMgYW5kIHByZXZlbnQgZmxpY2tlcmluZy5cbiAgICAgICAgY29uc3QgcHJldkxuZyA9IHRoaXMuX3ByZXZMbmcgPT09IHVuZGVmaW5lZCA/IGxuZyA6IHRoaXMuX3ByZXZMbmc7XG4gICAgICAgIGNvbnN0IGxuZ0RpZmZlcmVuY2UgPSBsbmcgLSBwcmV2TG5nO1xuICAgICAgICBjb25zdCB3b3JsZERpZmZlcmVuY2UgPSBsbmdEaWZmZXJlbmNlIC8gMzYwO1xuICAgICAgICBjb25zdCB3cmFwRGVsdGEgPSBNYXRoLnJvdW5kKHdvcmxkRGlmZmVyZW5jZSk7XG4gICAgICAgIHRoaXMuX3ByZXZMbmcgPSBsbmc7XG5cbiAgICAgICAgaWYgKHdyYXBEZWx0YSkge1xuICAgICAgICAgICAgY29uc3QgdGlsZXM6IHtbXzogc3RyaW5nXTogVGlsZX0gPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3RpbGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuX3RpbGVzW2tleV07XG4gICAgICAgICAgICAgICAgdGlsZS50aWxlSUQgPSB0aWxlLnRpbGVJRC51bndyYXBUbyh0aWxlLnRpbGVJRC53cmFwICsgd3JhcERlbHRhKTtcbiAgICAgICAgICAgICAgICB0aWxlc1t0aWxlLnRpbGVJRC5rZXldID0gdGlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RpbGVzID0gdGlsZXM7XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHRpbGUgcmVsb2FkIHRpbWVyc1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLl90aW1lcnMpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXJzW2lkXSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RpbWVyc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuX3RpbGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuX3RpbGVzW2lkXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRUaWxlUmVsb2FkVGltZXIoaWQsIHRpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aWxlcyB0aGF0IGFyZSBvdXRzaWRlIHRoZSB2aWV3cG9ydCBhbmQgYWRkcyBuZXcgdGlsZXMgdGhhdFxuICAgICAqIGFyZSBpbnNpZGUgdGhlIHZpZXdwb3J0LlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdXBkYXRlKHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICBpZiAoIXRoaXMuX3NvdXJjZUxvYWRlZCB8fCB0aGlzLl9wYXVzZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGhpcy51cGRhdGVDYWNoZVNpemUodHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5oYW5kbGVXcmFwSnVtcCh0aGlzLnRyYW5zZm9ybS5jZW50ZXIubG5nKTtcblxuICAgICAgICAvLyBDb3ZlcmVkIGlzIGEgbGlzdCBvZiByZXRhaW5lZCB0aWxlcyB3aG8ncyBhcmVhcyBhcmUgZnVsbHkgY292ZXJlZCBieSBvdGhlcixcbiAgICAgICAgLy8gYmV0dGVyLCByZXRhaW5lZCB0aWxlcy4gVGhleSBhcmUgbm90IGRyYXduIHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX2NvdmVyZWRUaWxlcyA9IHt9O1xuXG4gICAgICAgIGxldCBpZGVhbFRpbGVJRHM7XG4gICAgICAgIGlmICghdGhpcy51c2VkKSB7XG4gICAgICAgICAgICBpZGVhbFRpbGVJRHMgPSBbXTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zb3VyY2UudGlsZUlEKSB7XG4gICAgICAgICAgICBpZGVhbFRpbGVJRHMgPSB0cmFuc2Zvcm0uZ2V0VmlzaWJsZVVud3JhcHBlZENvb3JkaW5hdGVzKHRoaXMuX3NvdXJjZS50aWxlSUQpXG4gICAgICAgICAgICAgICAgLm1hcCgodW53cmFwcGVkKSA9PiBuZXcgT3ZlcnNjYWxlZFRpbGVJRCh1bndyYXBwZWQuY2Fub25pY2FsLnosIHVud3JhcHBlZC53cmFwLCB1bndyYXBwZWQuY2Fub25pY2FsLnosIHVud3JhcHBlZC5jYW5vbmljYWwueCwgdW53cmFwcGVkLmNhbm9uaWNhbC55KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZGVhbFRpbGVJRHMgPSB0cmFuc2Zvcm0uY292ZXJpbmdUaWxlcyh7XG4gICAgICAgICAgICAgICAgdGlsZVNpemU6IHRoaXMuX3NvdXJjZS50aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICBtaW56b29tOiB0aGlzLl9zb3VyY2UubWluem9vbSxcbiAgICAgICAgICAgICAgICBtYXh6b29tOiB0aGlzLl9zb3VyY2UubWF4em9vbSxcbiAgICAgICAgICAgICAgICByb3VuZFpvb206IHRoaXMuX3NvdXJjZS5yb3VuZFpvb20sXG4gICAgICAgICAgICAgICAgcmVwYXJzZU92ZXJzY2FsZWQ6IHRoaXMuX3NvdXJjZS5yZXBhcnNlT3ZlcnNjYWxlZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2UuaGFzVGlsZSkge1xuICAgICAgICAgICAgICAgIGlkZWFsVGlsZUlEcyA9IGlkZWFsVGlsZUlEcy5maWx0ZXIoKGNvb3JkKSA9PiAodGhpcy5fc291cmNlLmhhc1RpbGU6IGFueSkoY29vcmQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgb3Zlcnpvb21pbmcvdW5kZXJ6b29taW5nIGFtb3VudHMuXG4gICAgICAgIGNvbnN0IHpvb20gPSB0cmFuc2Zvcm0uY292ZXJpbmdab29tTGV2ZWwodGhpcy5fc291cmNlKTtcbiAgICAgICAgY29uc3QgbWluQ292ZXJpbmdab29tID0gTWF0aC5tYXgoem9vbSAtIFNvdXJjZUNhY2hlLm1heE92ZXJ6b29taW5nLCB0aGlzLl9zb3VyY2UubWluem9vbSk7XG4gICAgICAgIGNvbnN0IG1heENvdmVyaW5nWm9vbSA9IE1hdGgubWF4KHpvb20gKyBTb3VyY2VDYWNoZS5tYXhVbmRlcnpvb21pbmcsICB0aGlzLl9zb3VyY2UubWluem9vbSk7XG5cbiAgICAgICAgLy8gUmV0YWluIGlzIGEgbGlzdCBvZiB0aWxlcyB0aGF0IHdlIHNob3VsZG4ndCBkZWxldGUsIGV2ZW4gaWYgdGhleSBhcmUgbm90XG4gICAgICAgIC8vIHRoZSBtb3N0IGlkZWFsIHRpbGUgZm9yIHRoZSBjdXJyZW50IHZpZXdwb3J0LiBUaGlzIG1heSBpbmNsdWRlIHRpbGVzIGxpa2VcbiAgICAgICAgLy8gcGFyZW50IG9yIGNoaWxkIHRpbGVzIHRoYXQgYXJlICphbHJlYWR5KiBsb2FkZWQuXG4gICAgICAgIGNvbnN0IHJldGFpbiA9IHRoaXMuX3VwZGF0ZVJldGFpbmVkVGlsZXMoaWRlYWxUaWxlSURzLCB6b29tKTtcblxuICAgICAgICBpZiAoaXNSYXN0ZXJUeXBlKHRoaXMuX3NvdXJjZS50eXBlKSkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50c0ZvckZhZGluZzoge1tfOiBzdHJpbmddOiBPdmVyc2NhbGVkVGlsZUlEfSA9IHt9O1xuICAgICAgICAgICAgY29uc3QgZmFkaW5nVGlsZXMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IE9iamVjdC5rZXlzKHJldGFpbik7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGlkcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGVJRCA9IHJldGFpbltpZF07XG4gICAgICAgICAgICAgICAgYXNzZXJ0KHRpbGVJRC5rZXkgPT09IGlkKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLl90aWxlc1tpZF07XG4gICAgICAgICAgICAgICAgaWYgKCF0aWxlIHx8IHRpbGUuZmFkZUVuZFRpbWUgJiYgdGlsZS5mYWRlRW5kVGltZSA8PSBicm93c2VyLm5vdygpKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB0aWxlIGlzIGxvYWRlZCBidXQgc3RpbGwgZmFkaW5nIGluLCBmaW5kIHBhcmVudHMgdG8gY3Jvc3MtZmFkZSB3aXRoIGl0XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50VGlsZSA9IHRoaXMuZmluZExvYWRlZFBhcmVudCh0aWxlSUQsIG1pbkNvdmVyaW5nWm9vbSk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudFRpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVGlsZShwYXJlbnRUaWxlLnRpbGVJRCk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHNGb3JGYWRpbmdbcGFyZW50VGlsZS50aWxlSUQua2V5XSA9IHBhcmVudFRpbGUudGlsZUlEO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZhZGluZ1RpbGVzW2lkXSA9IHRpbGVJRDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZm9yIHRpbGVzIHRoYXQgYXJlIHN0aWxsIGZhZGluZyBpbiwgYWxzbyBmaW5kIGNoaWxkcmVuIHRvIGNyb3NzLWZhZGUgd2l0aFxuICAgICAgICAgICAgdGhpcy5fcmV0YWluTG9hZGVkQ2hpbGRyZW4oZmFkaW5nVGlsZXMsIHpvb20sIG1heENvdmVyaW5nWm9vbSwgcmV0YWluKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiBwYXJlbnRzRm9yRmFkaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXRhaW5baWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGEgdGlsZSBpcyBvbmx5IG5lZWRlZCBmb3IgZmFkaW5nLCBtYXJrIGl0IGFzIGNvdmVyZWQgc28gdGhhdCBpdCBpc24ndCByZW5kZXJlZCBvbiBpdCdzIG93bi5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY292ZXJlZFRpbGVzW2lkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldGFpbltpZF0gPSBwYXJlbnRzRm9yRmFkaW5nW2lkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IHJldGFpbmVkSWQgaW4gcmV0YWluKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgcmV0YWluZWQgdGlsZXMgYWx3YXlzIGNsZWFyIGFueSBleGlzdGluZyBmYWRlIGhvbGRzXG4gICAgICAgICAgICAvLyBzbyB0aGF0IGlmIHRoZXkncmUgcmVtb3ZlZCBhZ2FpbiB0aGVpciBmYWRlIHRpbWVyIHN0YXJ0cyBmcmVzaC5cbiAgICAgICAgICAgIHRoaXMuX3RpbGVzW3JldGFpbmVkSWRdLmNsZWFyRmFkZUhvbGQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgdGlsZXMgd2UgZG9uJ3QgbmVlZCBhbnltb3JlLlxuICAgICAgICBjb25zdCByZW1vdmUgPSBrZXlzRGlmZmVyZW5jZSh0aGlzLl90aWxlcywgcmV0YWluKTtcbiAgICAgICAgZm9yIChjb25zdCB0aWxlSUQgb2YgcmVtb3ZlKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbdGlsZUlEXTtcbiAgICAgICAgICAgIGlmICh0aWxlLmhhc1N5bWJvbEJ1Y2tldHMgJiYgIXRpbGUuaG9sZGluZ0ZvckZhZGUoKSkge1xuICAgICAgICAgICAgICAgIHRpbGUuc2V0SG9sZER1cmF0aW9uKHRoaXMubWFwLl9mYWRlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGlsZS5oYXNTeW1ib2xCdWNrZXRzIHx8IHRpbGUuc3ltYm9sRmFkZUZpbmlzaGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVUaWxlKHRpbGVJRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb25zdHJ1Y3QgYSBjYWNoZSBvZiBsb2FkZWQgcGFyZW50c1xuICAgICAgICB0aGlzLl91cGRhdGVMb2FkZWRQYXJlbnRUaWxlQ2FjaGUoKTtcbiAgICB9XG5cbiAgICByZWxlYXNlU3ltYm9sRmFkZVRpbGVzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuX3RpbGVzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdGlsZXNbaWRdLmhvbGRpbmdGb3JGYWRlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVUaWxlKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVSZXRhaW5lZFRpbGVzKGlkZWFsVGlsZUlEczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4sIHpvb206IG51bWJlcik6IHtbXzogc3RyaW5nXTogT3ZlcnNjYWxlZFRpbGVJRH0ge1xuICAgICAgICBjb25zdCByZXRhaW46IHtbXzogc3RyaW5nXTogT3ZlcnNjYWxlZFRpbGVJRH0gPSB7fTtcbiAgICAgICAgY29uc3QgY2hlY2tlZDoge1tfOiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcbiAgICAgICAgY29uc3QgbWluQ292ZXJpbmdab29tID0gTWF0aC5tYXgoem9vbSAtIFNvdXJjZUNhY2hlLm1heE92ZXJ6b29taW5nLCB0aGlzLl9zb3VyY2UubWluem9vbSk7XG4gICAgICAgIGNvbnN0IG1heENvdmVyaW5nWm9vbSA9IE1hdGgubWF4KHpvb20gKyBTb3VyY2VDYWNoZS5tYXhVbmRlcnpvb21pbmcsICB0aGlzLl9zb3VyY2UubWluem9vbSk7XG5cbiAgICAgICAgY29uc3QgbWlzc2luZ1RpbGVzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdGlsZUlEIG9mIGlkZWFsVGlsZUlEcykge1xuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuX2FkZFRpbGUodGlsZUlEKTtcblxuICAgICAgICAgICAgLy8gcmV0YWluIHRoZSB0aWxlIGV2ZW4gaWYgaXQncyBub3QgbG9hZGVkIGJlY2F1c2UgaXQncyBhbiBpZGVhbCB0aWxlLlxuICAgICAgICAgICAgcmV0YWluW3RpbGVJRC5rZXldID0gdGlsZUlEO1xuXG4gICAgICAgICAgICBpZiAodGlsZS5oYXNEYXRhKCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoem9vbSA8IHRoaXMuX3NvdXJjZS5tYXh6b29tKSB7XG4gICAgICAgICAgICAgICAgLy8gc2F2ZSBtaXNzaW5nIHRpbGVzIHRoYXQgcG90ZW50aWFsbHkgaGF2ZSBsb2FkZWQgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBtaXNzaW5nVGlsZXNbdGlsZUlELmtleV0gPSB0aWxlSUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXRhaW4gYW55IGxvYWRlZCBjaGlsZHJlbiBvZiBpZGVhbCB0aWxlcyB1cCB0byBtYXhDb3ZlcmluZ1pvb21cbiAgICAgICAgdGhpcy5fcmV0YWluTG9hZGVkQ2hpbGRyZW4obWlzc2luZ1RpbGVzLCB6b29tLCBtYXhDb3ZlcmluZ1pvb20sIHJldGFpbik7XG5cbiAgICAgICAgZm9yIChjb25zdCB0aWxlSUQgb2YgaWRlYWxUaWxlSURzKSB7XG4gICAgICAgICAgICBsZXQgdGlsZSA9IHRoaXMuX3RpbGVzW3RpbGVJRC5rZXldO1xuXG4gICAgICAgICAgICBpZiAodGlsZS5oYXNEYXRhKCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBUaGUgdGlsZSB3ZSByZXF1aXJlIGlzIG5vdCB5ZXQgbG9hZGVkIG9yIGRvZXMgbm90IGV4aXN0O1xuICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBmaW5kIGNoaWxkcmVuIHRoYXQgZnVsbHkgY292ZXIgaXQuXG5cbiAgICAgICAgICAgIGlmICh6b29tICsgMSA+IHRoaXMuX3NvdXJjZS5tYXh6b29tKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UncmUgbG9va2luZyBmb3IgYW4gb3Zlcnpvb21lZCBjaGlsZCB0aWxlLlxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ29vcmQgPSB0aWxlSUQuY2hpbGRyZW4odGhpcy5fc291cmNlLm1heHpvb20pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkVGlsZSA9IHRoaXMuZ2V0VGlsZShjaGlsZENvb3JkKTtcbiAgICAgICAgICAgICAgICBpZiAoISFjaGlsZFRpbGUgJiYgY2hpbGRUaWxlLmhhc0RhdGEoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXRhaW5bY2hpbGRDb29yZC5rZXldID0gY2hpbGRDb29yZDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIHRpbGUgaXMgY292ZXJlZCBieSBvdmVyem9vbWVkIGNoaWxkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhbGwgNCBpbW1lZGlhdGUgY2hpbGRyZW4gYXJlIGxvYWRlZCAoaS5lLiB0aGUgbWlzc2luZyBpZGVhbCB0aWxlIGlzIGNvdmVyZWQpXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aWxlSUQuY2hpbGRyZW4odGhpcy5fc291cmNlLm1heHpvb20pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJldGFpbltjaGlsZHJlblswXS5rZXldICYmXG4gICAgICAgICAgICAgICAgICAgIHJldGFpbltjaGlsZHJlblsxXS5rZXldICYmXG4gICAgICAgICAgICAgICAgICAgIHJldGFpbltjaGlsZHJlblsyXS5rZXldICYmXG4gICAgICAgICAgICAgICAgICAgIHJldGFpbltjaGlsZHJlblszXS5rZXldKSBjb250aW51ZTsgLy8gdGlsZSBpcyBjb3ZlcmVkIGJ5IGNoaWxkcmVuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlIGNvdWxkbid0IGZpbmQgY2hpbGQgdGlsZXMgdGhhdCBlbnRpcmVseSBjb3ZlciB0aGUgaWRlYWwgdGlsZTsgbG9vayBmb3IgcGFyZW50cyBub3cuXG5cbiAgICAgICAgICAgIC8vIEFzIHdlIGFzY2VuZCB1cCB0aGUgdGlsZSBweXJhbWlkIG9mIHRoZSBpZGVhbCB0aWxlLCB3ZSBjaGVjayB3aGV0aGVyIHRoZSBwYXJlbnRcbiAgICAgICAgICAgIC8vIHRpbGUgaGFzIGJlZW4gcHJldmlvdXNseSByZXF1ZXN0ZWQgKGFuZCBlcnJvcmVkIGJlY2F1c2Ugd2Ugb25seSBsb29wIG92ZXIgdGlsZXMgd2l0aCBubyBkYXRhKVxuICAgICAgICAgICAgLy8gaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gcmVxdWVzdCBpdHMgcGFyZW50LlxuICAgICAgICAgICAgbGV0IHBhcmVudFdhc1JlcXVlc3RlZCA9IHRpbGUud2FzUmVxdWVzdGVkKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IG92ZXJzY2FsZWRaID0gdGlsZUlELm92ZXJzY2FsZWRaIC0gMTsgb3ZlcnNjYWxlZFogPj0gbWluQ292ZXJpbmdab29tOyAtLW92ZXJzY2FsZWRaKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50SWQgPSB0aWxlSUQuc2NhbGVkVG8ob3ZlcnNjYWxlZFopO1xuXG4gICAgICAgICAgICAgICAgLy8gQnJlYWsgcGFyZW50IHRpbGUgYXNjZW50IGlmIHRoaXMgcm91dGUgaGFzIGJlZW4gcHJldmlvdXNseSBjaGVja2VkIGJ5IGFub3RoZXIgY2hpbGQuXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWRbcGFyZW50SWQua2V5XSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2hlY2tlZFtwYXJlbnRJZC5rZXldID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHRpbGUgPSB0aGlzLmdldFRpbGUocGFyZW50SWQpO1xuICAgICAgICAgICAgICAgIGlmICghdGlsZSAmJiBwYXJlbnRXYXNSZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGlsZSA9IHRoaXMuX2FkZFRpbGUocGFyZW50SWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGlsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXRhaW5bcGFyZW50SWQua2V5XSA9IHBhcmVudElkO1xuICAgICAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHZhbHVlcywgc2luY2UgdGhleSdyZSB0aGUgcGFyZW50IG9mIHRoZSBuZXh0IGl0ZXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBvZiB0aGUgcGFyZW50IHRpbGUgYXNjZW50IGxvb3AuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFdhc1JlcXVlc3RlZCA9IHRpbGUud2FzUmVxdWVzdGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aWxlLmhhc0RhdGEoKSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldGFpbjtcbiAgICB9XG5cbiAgICBfdXBkYXRlTG9hZGVkUGFyZW50VGlsZUNhY2hlKCkge1xuICAgICAgICB0aGlzLl9sb2FkZWRQYXJlbnRUaWxlcyA9IHt9O1xuXG4gICAgICAgIGZvciAoY29uc3QgdGlsZUtleSBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IFtdO1xuICAgICAgICAgICAgbGV0IHBhcmVudFRpbGU6ID9UaWxlO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRJZCA9IHRoaXMuX3RpbGVzW3RpbGVLZXldLnRpbGVJRDtcblxuICAgICAgICAgICAgLy8gRmluZCB0aGUgY2xvc2VzdCBsb2FkZWQgYW5jZXN0b3IgYnkgdHJhdmVyc2luZyB0aGUgdGlsZSB0cmVlIHRvd2FyZHMgdGhlIHJvb3QgYW5kXG4gICAgICAgICAgICAvLyBjYWNoaW5nIHJlc3VsdHMgYWxvbmcgdGhlIHdheVxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnRJZC5vdmVyc2NhbGVkWiA+IDApIHtcblxuICAgICAgICAgICAgICAgIC8vIERvIHdlIGhhdmUgYSBjYWNoZWQgcmVzdWx0IGZyb20gcHJldmlvdXMgdHJhdmVyc2Fscz9cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudElkLmtleSBpbiB0aGlzLl9sb2FkZWRQYXJlbnRUaWxlcykge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRUaWxlID0gdGhpcy5fbG9hZGVkUGFyZW50VGlsZXNbY3VycmVudElkLmtleV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhdGgucHVzaChjdXJyZW50SWQua2V5KTtcblxuICAgICAgICAgICAgICAgIC8vIElzIHRoZSBwYXJlbnQgbG9hZGVkP1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudElkID0gY3VycmVudElkLnNjYWxlZFRvKGN1cnJlbnRJZC5vdmVyc2NhbGVkWiAtIDEpO1xuICAgICAgICAgICAgICAgIHBhcmVudFRpbGUgPSB0aGlzLl9nZXRMb2FkZWRUaWxlKHBhcmVudElkKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50VGlsZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50SWQgPSBwYXJlbnRJZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FjaGUgdGhlIHJlc3VsdCBvZiB0aGlzIHRyYXZlcnNhbCB0byBhbGwgbmV3bHkgdmlzaXRlZCB0aWxlc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgcGF0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlZFBhcmVudFRpbGVzW2tleV0gPSBwYXJlbnRUaWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgdGlsZSwgZ2l2ZW4gaXRzIGNvb3JkaW5hdGUsIHRvIHRoZSBweXJhbWlkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2FkZFRpbGUodGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEKTogVGlsZSB7XG4gICAgICAgIGxldCB0aWxlID0gdGhpcy5fdGlsZXNbdGlsZUlELmtleV07XG4gICAgICAgIGlmICh0aWxlKVxuICAgICAgICAgICAgcmV0dXJuIHRpbGU7XG5cbiAgICAgICAgdGlsZSA9IHRoaXMuX2NhY2hlLmdldEFuZFJlbW92ZSh0aWxlSUQpO1xuICAgICAgICBpZiAodGlsZSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0VGlsZVJlbG9hZFRpbWVyKHRpbGVJRC5rZXksIHRpbGUpO1xuICAgICAgICAgICAgLy8gc2V0IHRoZSB0aWxlSUQgYmVjYXVzZSB0aGUgY2FjaGVkIHRpbGUgY291bGQgaGF2ZSBoYWQgYSBkaWZmZXJlbnQgd3JhcCB2YWx1ZVxuICAgICAgICAgICAgdGlsZS50aWxlSUQgPSB0aWxlSUQ7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5pbml0aWFsaXplVGlsZVN0YXRlKHRpbGUsIHRoaXMubWFwID8gdGhpcy5tYXAucGFpbnRlciA6IG51bGwpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlVGltZXJzW3RpbGVJRC5rZXldKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2NhY2hlVGltZXJzW3RpbGVJRC5rZXldKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FjaGVUaW1lcnNbdGlsZUlELmtleV07XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0VGlsZVJlbG9hZFRpbWVyKHRpbGVJRC5rZXksIHRpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FjaGVkID0gQm9vbGVhbih0aWxlKTtcbiAgICAgICAgaWYgKCFjYWNoZWQpIHtcbiAgICAgICAgICAgIHRpbGUgPSBuZXcgVGlsZSh0aWxlSUQsIHRoaXMuX3NvdXJjZS50aWxlU2l6ZSAqIHRpbGVJRC5vdmVyc2NhbGVGYWN0b3IoKSk7XG4gICAgICAgICAgICB0aGlzLl9sb2FkVGlsZSh0aWxlLCB0aGlzLl90aWxlTG9hZGVkLmJpbmQodGhpcywgdGlsZSwgdGlsZUlELmtleSwgdGlsZS5zdGF0ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW1wb3NzaWJsZSwgYnV0IHNpbGVuY2UgZmxvdy5cbiAgICAgICAgaWYgKCF0aWxlKSByZXR1cm4gKG51bGw6IGFueSk7XG5cbiAgICAgICAgdGlsZS51c2VzKys7XG4gICAgICAgIHRoaXMuX3RpbGVzW3RpbGVJRC5rZXldID0gdGlsZTtcbiAgICAgICAgaWYgKCFjYWNoZWQpIHRoaXMuX3NvdXJjZS5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7dGlsZSwgY29vcmQ6IHRpbGUudGlsZUlELCBkYXRhVHlwZTogJ3NvdXJjZSd9KSk7XG5cbiAgICAgICAgcmV0dXJuIHRpbGU7XG4gICAgfVxuXG4gICAgX3NldFRpbGVSZWxvYWRUaW1lcihpZDogc3RyaW5nLCB0aWxlOiBUaWxlKSB7XG4gICAgICAgIGlmIChpZCBpbiB0aGlzLl90aW1lcnMpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcnNbaWRdKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl90aW1lcnNbaWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXhwaXJ5VGltZW91dCA9IHRpbGUuZ2V0RXhwaXJ5VGltZW91dCgpO1xuICAgICAgICBpZiAoZXhwaXJ5VGltZW91dCkge1xuICAgICAgICAgICAgdGhpcy5fdGltZXJzW2lkXSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbG9hZFRpbGUoaWQsICdleHBpcmVkJyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RpbWVyc1tpZF07XG4gICAgICAgICAgICB9LCBleHBpcnlUaW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHRpbGUsIGdpdmVuIGl0cyBpZCwgZnJvbSB0aGUgcHlyYW1pZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlbW92ZVRpbGUoaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbaWRdO1xuICAgICAgICBpZiAoIXRpbGUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGlsZS51c2VzLS07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl90aWxlc1tpZF07XG4gICAgICAgIGlmICh0aGlzLl90aW1lcnNbaWRdKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXJzW2lkXSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fdGltZXJzW2lkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aWxlLnVzZXMgPiAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aWxlLmhhc0RhdGEoKSAmJiB0aWxlLnN0YXRlICE9PSAncmVsb2FkaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUuYWRkKHRpbGUudGlsZUlELCB0aWxlLCB0aWxlLmdldEV4cGlyeVRpbWVvdXQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aWxlLmFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fYWJvcnRUaWxlKHRpbGUpO1xuICAgICAgICAgICAgdGhpcy5fdW5sb2FkVGlsZSh0aWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgdGlsZXMgZnJvbSB0aGlzIHB5cmFtaWRcbiAgICAgKi9cbiAgICBjbGVhclRpbGVzKCkge1xuICAgICAgICB0aGlzLl9zaG91bGRSZWxvYWRPblJlc3VtZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuX3RpbGVzKVxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlVGlsZShpZCk7XG5cbiAgICAgICAgdGhpcy5fY2FjaGUucmVzZXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggdGhyb3VnaCBvdXIgY3VycmVudCB0aWxlcyBhbmQgYXR0ZW1wdCB0byBmaW5kIHRoZSB0aWxlcyB0aGF0XG4gICAgICogY292ZXIgdGhlIGdpdmVuIGJvdW5kcy5cbiAgICAgKiBAcGFyYW0gcG9pbnRRdWVyeUdlb21ldHJ5IGNvb3JkaW5hdGVzIG9mIHRoZSBjb3JuZXJzIG9mIGJvdW5kaW5nIHJlY3RhbmdsZVxuICAgICAqIEByZXR1cm5zIHtBcnJheTxPYmplY3Q+fSByZXN1bHQgaXRlbXMgaGF2ZSB7dGlsZSwgbWluWCwgbWF4WCwgbWluWSwgbWF4WX0sIHdoZXJlIG1pbi9tYXggYm91bmRpbmcgdmFsdWVzIGFyZSB0aGUgZ2l2ZW4gYm91bmRzIHRyYW5zZm9ybWVkIGluIGludG8gdGhlIGNvb3JkaW5hdGUgc3BhY2Ugb2YgdGhpcyB0aWxlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGlsZXNJbihwb2ludFF1ZXJ5R2VvbWV0cnk6IEFycmF5PFBvaW50PiwgbWF4UGl0Y2hTY2FsZUZhY3RvcjogbnVtYmVyLCBoYXMzRExheWVyOiBib29sZWFuKSB7XG5cbiAgICAgICAgY29uc3QgdGlsZVJlc3VsdHMgPSBbXTtcblxuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybTtcbiAgICAgICAgaWYgKCF0cmFuc2Zvcm0pIHJldHVybiB0aWxlUmVzdWx0cztcblxuICAgICAgICBjb25zdCBjYW1lcmFQb2ludFF1ZXJ5R2VvbWV0cnkgPSBoYXMzRExheWVyID9cbiAgICAgICAgICAgIHRyYW5zZm9ybS5nZXRDYW1lcmFRdWVyeUdlb21ldHJ5KHBvaW50UXVlcnlHZW9tZXRyeSkgOlxuICAgICAgICAgICAgcG9pbnRRdWVyeUdlb21ldHJ5O1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5R2VvbWV0cnkgPSBwb2ludFF1ZXJ5R2VvbWV0cnkubWFwKChwKSA9PiB0cmFuc2Zvcm0ucG9pbnRDb29yZGluYXRlKHApKTtcbiAgICAgICAgY29uc3QgY2FtZXJhUXVlcnlHZW9tZXRyeSA9IGNhbWVyYVBvaW50UXVlcnlHZW9tZXRyeS5tYXAoKHApID0+IHRyYW5zZm9ybS5wb2ludENvb3JkaW5hdGUocCkpO1xuXG4gICAgICAgIGNvbnN0IGlkcyA9IHRoaXMuZ2V0SWRzKCk7XG5cbiAgICAgICAgbGV0IG1pblggPSBJbmZpbml0eTtcbiAgICAgICAgbGV0IG1pblkgPSBJbmZpbml0eTtcbiAgICAgICAgbGV0IG1heFggPSAtSW5maW5pdHk7XG4gICAgICAgIGxldCBtYXhZID0gLUluZmluaXR5O1xuXG4gICAgICAgIGZvciAoY29uc3QgcCBvZiBjYW1lcmFRdWVyeUdlb21ldHJ5KSB7XG4gICAgICAgICAgICBtaW5YID0gTWF0aC5taW4obWluWCwgcC54KTtcbiAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBwLnkpO1xuICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIHAueCk7XG4gICAgICAgICAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgcC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbaWRzW2ldXTtcbiAgICAgICAgICAgIGlmICh0aWxlLmhvbGRpbmdGb3JGYWRlKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaWxlcyBoZWxkIGZvciBmYWRpbmcgYXJlIGNvdmVyZWQgYnkgdGlsZXMgdGhhdCBhcmUgY2xvc2VyIHRvIGlkZWFsXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0aWxlSUQgPSB0aWxlLnRpbGVJRDtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMiwgdHJhbnNmb3JtLnpvb20gLSB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWik7XG4gICAgICAgICAgICBjb25zdCBxdWVyeVBhZGRpbmcgPSBtYXhQaXRjaFNjYWxlRmFjdG9yICogdGlsZS5xdWVyeVBhZGRpbmcgKiBFWFRFTlQgLyB0aWxlLnRpbGVTaXplIC8gc2NhbGU7XG5cbiAgICAgICAgICAgIGNvbnN0IHRpbGVTcGFjZUJvdW5kcyA9IFtcbiAgICAgICAgICAgICAgICB0aWxlSUQuZ2V0VGlsZVBvaW50KG5ldyBNZXJjYXRvckNvb3JkaW5hdGUobWluWCwgbWluWSkpLFxuICAgICAgICAgICAgICAgIHRpbGVJRC5nZXRUaWxlUG9pbnQobmV3IE1lcmNhdG9yQ29vcmRpbmF0ZShtYXhYLCBtYXhZKSlcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGlmICh0aWxlU3BhY2VCb3VuZHNbMF0ueCAtIHF1ZXJ5UGFkZGluZyA8IEVYVEVOVCAmJiB0aWxlU3BhY2VCb3VuZHNbMF0ueSAtIHF1ZXJ5UGFkZGluZyA8IEVYVEVOVCAmJlxuICAgICAgICAgICAgICAgIHRpbGVTcGFjZUJvdW5kc1sxXS54ICsgcXVlcnlQYWRkaW5nID49IDAgJiYgdGlsZVNwYWNlQm91bmRzWzFdLnkgKyBxdWVyeVBhZGRpbmcgPj0gMCkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGlsZVNwYWNlUXVlcnlHZW9tZXRyeTogQXJyYXk8UG9pbnQ+ID0gcXVlcnlHZW9tZXRyeS5tYXAoKGMpID0+IHRpbGVJRC5nZXRUaWxlUG9pbnQoYykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGVTcGFjZUNhbWVyYVF1ZXJ5R2VvbWV0cnkgPSBjYW1lcmFRdWVyeUdlb21ldHJ5Lm1hcCgoYykgPT4gdGlsZUlELmdldFRpbGVQb2ludChjKSk7XG5cbiAgICAgICAgICAgICAgICB0aWxlUmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGlsZSxcbiAgICAgICAgICAgICAgICAgICAgdGlsZUlELFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUdlb21ldHJ5OiB0aWxlU3BhY2VRdWVyeUdlb21ldHJ5LFxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFRdWVyeUdlb21ldHJ5OiB0aWxlU3BhY2VDYW1lcmFRdWVyeUdlb21ldHJ5LFxuICAgICAgICAgICAgICAgICAgICBzY2FsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRpbGVSZXN1bHRzO1xuICAgIH1cblxuICAgIGdldFZpc2libGVDb29yZGluYXRlcyhzeW1ib2xMYXllcj86IGJvb2xlYW4pOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPiB7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuZ2V0UmVuZGVyYWJsZUlkcyhzeW1ib2xMYXllcikubWFwKChpZCkgPT4gdGhpcy5fdGlsZXNbaWRdLnRpbGVJRCk7XG4gICAgICAgIGZvciAoY29uc3QgY29vcmQgb2YgY29vcmRzKSB7XG4gICAgICAgICAgICBjb29yZC5wb3NNYXRyaXggPSB0aGlzLnRyYW5zZm9ybS5jYWxjdWxhdGVQb3NNYXRyaXgoY29vcmQudG9VbndyYXBwZWQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvb3JkcztcbiAgICB9XG5cbiAgICBoYXNUcmFuc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fc291cmNlLmhhc1RyYW5zaXRpb24oKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNSYXN0ZXJUeXBlKHRoaXMuX3NvdXJjZS50eXBlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLl90aWxlc1tpZF07XG4gICAgICAgICAgICAgICAgaWYgKHRpbGUuZmFkZUVuZFRpbWUgIT09IHVuZGVmaW5lZCAmJiB0aWxlLmZhZGVFbmRUaW1lID49IGJyb3dzZXIubm93KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdmFsdWUgb2YgYSBwYXJ0aWN1bGFyIHN0YXRlIGZvciBhIGZlYXR1cmVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHNldEZlYXR1cmVTdGF0ZShzb3VyY2VMYXllcj86IHN0cmluZywgZmVhdHVyZUlkOiBudW1iZXIgfCBzdHJpbmcsIHN0YXRlOiBPYmplY3QpIHtcbiAgICAgICAgc291cmNlTGF5ZXIgPSBzb3VyY2VMYXllciB8fCAnX2dlb2pzb25UaWxlTGF5ZXInO1xuICAgICAgICB0aGlzLl9zdGF0ZS51cGRhdGVTdGF0ZShzb3VyY2VMYXllciwgZmVhdHVyZUlkLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSB2YWx1ZSBvZiBhIHBhcnRpY3VsYXIgc3RhdGUga2V5IGZvciBhIGZlYXR1cmVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlbW92ZUZlYXR1cmVTdGF0ZShzb3VyY2VMYXllcj86IHN0cmluZywgZmVhdHVyZUlkPzogbnVtYmVyIHwgc3RyaW5nLCBrZXk/OiBzdHJpbmcpIHtcbiAgICAgICAgc291cmNlTGF5ZXIgPSBzb3VyY2VMYXllciB8fCAnX2dlb2pzb25UaWxlTGF5ZXInO1xuICAgICAgICB0aGlzLl9zdGF0ZS5yZW1vdmVGZWF0dXJlU3RhdGUoc291cmNlTGF5ZXIsIGZlYXR1cmVJZCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGVudGlyZSBzdGF0ZSBvYmplY3QgZm9yIGEgZmVhdHVyZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0RmVhdHVyZVN0YXRlKHNvdXJjZUxheWVyPzogc3RyaW5nLCBmZWF0dXJlSWQ6IG51bWJlciB8IHN0cmluZykge1xuICAgICAgICBzb3VyY2VMYXllciA9IHNvdXJjZUxheWVyIHx8ICdfZ2VvanNvblRpbGVMYXllcic7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5nZXRTdGF0ZShzb3VyY2VMYXllciwgZmVhdHVyZUlkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZXQgb2Yga2V5cyB0aGF0IHRoZSB0aWxlIGRlcGVuZHMgb24uIFRoaXMgYWxsb3dzIHRpbGVzIHRvXG4gICAgICogYmUgcmVsb2FkZWQgd2hlbiB0aGVpciBkZXBlbmRlbmNpZXMgY2hhbmdlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc2V0RGVwZW5kZW5jaWVzKHRpbGVLZXk6IHN0cmluZywgbmFtZXNwYWNlOiBzdHJpbmcsIGRlcGVuZGVuY2llczogQXJyYXk8c3RyaW5nPikge1xuICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbdGlsZUtleV07XG4gICAgICAgIGlmICh0aWxlKSB7XG4gICAgICAgICAgICB0aWxlLnNldERlcGVuZGVuY2llcyhuYW1lc3BhY2UsIGRlcGVuZGVuY2llcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWxvYWRzIGFsbCB0aWxlcyB0aGF0IGRlcGVuZCBvbiB0aGUgZ2l2ZW4ga2V5cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlbG9hZFRpbGVzRm9yRGVwZW5kZW5jaWVzKG5hbWVzcGFjZXM6IEFycmF5PHN0cmluZz4sIGtleXM6IEFycmF5PHN0cmluZz4pIHtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuX3RpbGVzW2lkXTtcbiAgICAgICAgICAgIGlmICh0aWxlLmhhc0RlcGVuZGVuY3kobmFtZXNwYWNlcywga2V5cykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWxvYWRUaWxlKGlkLCAncmVsb2FkaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FjaGUuZmlsdGVyKHRpbGUgPT4gIXRpbGUuaGFzRGVwZW5kZW5jeShuYW1lc3BhY2VzLCBrZXlzKSk7XG4gICAgfVxufVxuXG5Tb3VyY2VDYWNoZS5tYXhPdmVyem9vbWluZyA9IDEwO1xuU291cmNlQ2FjaGUubWF4VW5kZXJ6b29taW5nID0gMztcblxuZnVuY3Rpb24gY29tcGFyZVRpbGVJZChhOiBPdmVyc2NhbGVkVGlsZUlELCBiOiBPdmVyc2NhbGVkVGlsZUlEKTogbnVtYmVyIHtcbiAgICAvLyBEaWZmZXJlbnQgY29waWVzIG9mIHRoZSB3b3JsZCBhcmUgc29ydGVkIGJhc2VkIG9uIHRoZWlyIGRpc3RhbmNlIHRvIHRoZSBjZW50ZXIuXG4gICAgLy8gV3JhcCB2YWx1ZXMgYXJlIGNvbnZlcnRlZCB0byB1bnNpZ25lZCBkaXN0YW5jZXMgYnkgcmVzZXJ2aW5nIG9kZCBudW1iZXIgZm9yIGNvcGllc1xuICAgIC8vIHdpdGggbmVnYXRpdmUgd3JhcCBhbmQgZXZlbiBudW1iZXJzIGZvciBjb3BpZXMgd2l0aCBwb3NpdGl2ZSB3cmFwLlxuICAgIGNvbnN0IGFXcmFwID0gTWF0aC5hYnMoYS53cmFwICogMikgLSArKGEud3JhcCA8IDApO1xuICAgIGNvbnN0IGJXcmFwID0gTWF0aC5hYnMoYi53cmFwICogMikgLSArKGIud3JhcCA8IDApO1xuICAgIHJldHVybiBhLm92ZXJzY2FsZWRaIC0gYi5vdmVyc2NhbGVkWiB8fCBiV3JhcCAtIGFXcmFwIHx8IGIuY2Fub25pY2FsLnkgLSBhLmNhbm9uaWNhbC55IHx8IGIuY2Fub25pY2FsLnggLSBhLmNhbm9uaWNhbC54O1xufVxuXG5mdW5jdGlvbiBpc1Jhc3RlclR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSAncmFzdGVyJyB8fCB0eXBlID09PSAnaW1hZ2UnIHx8IHR5cGUgPT09ICd2aWRlbyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvdXJjZUNhY2hlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHdpbmRvdyBmcm9tICcuLi93aW5kb3cnO1xuaW1wb3J0IG1hcGJveGdsIGZyb20gJy4uLy4uLyc7XG5cbmltcG9ydCB0eXBlIHtXb3JrZXJJbnRlcmZhY2V9IGZyb20gJy4uL3dlYl93b3JrZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKTogV29ya2VySW50ZXJmYWNlIHtcbiAgICByZXR1cm4gKG5ldyB3aW5kb3cuV29ya2VyKG1hcGJveGdsLndvcmtlclVybCk6IGFueSk7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgV2ViV29ya2VyIGZyb20gJy4vd2ViX3dvcmtlcic7XG5pbXBvcnQgdHlwZSB7V29ya2VySW50ZXJmYWNlfSBmcm9tICcuL3dlYl93b3JrZXInO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi9icm93c2VyJztcblxuZXhwb3J0IGNvbnN0IFBSRUxPQURfUE9PTF9JRCA9ICdtYXBib3hnbF9wcmVsb2FkZWRfd29ya2VyX3Bvb2wnO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSB3b3JrZXIgcG9vbC5cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvcmtlclBvb2wge1xuICAgIHN0YXRpYyB3b3JrZXJDb3VudDogbnVtYmVyO1xuXG4gICAgYWN0aXZlOiB7W186IG51bWJlciB8IHN0cmluZ106IGJvb2xlYW59O1xuICAgIHdvcmtlcnM6IEFycmF5PFdvcmtlckludGVyZmFjZT47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB7fTtcbiAgICB9XG5cbiAgICBhY3F1aXJlKG1hcElkOiBudW1iZXIgfCBzdHJpbmcpOiBBcnJheTxXb3JrZXJJbnRlcmZhY2U+IHtcbiAgICAgICAgaWYgKCF0aGlzLndvcmtlcnMpIHtcbiAgICAgICAgICAgIC8vIExhemlseSBsb29rIHVwIHRoZSB2YWx1ZSBvZiBtYXBib3hnbC53b3JrZXJDb3VudCBzbyB0aGF0XG4gICAgICAgICAgICAvLyBjbGllbnQgY29kZSBoYXMgaGFkIGEgY2hhbmNlIHRvIHNldCBpdC5cbiAgICAgICAgICAgIHRoaXMud29ya2VycyA9IFtdO1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMud29ya2Vycy5sZW5ndGggPCBXb3JrZXJQb29sLndvcmtlckNvdW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy53b3JrZXJzLnB1c2gobmV3IFdlYldvcmtlcigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWN0aXZlW21hcElkXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzLndvcmtlcnMuc2xpY2UoKTtcbiAgICB9XG5cbiAgICByZWxlYXNlKG1hcElkOiBudW1iZXIgfCBzdHJpbmcpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuYWN0aXZlW21hcElkXTtcbiAgICAgICAgaWYgKHRoaXMubnVtQWN0aXZlKCkgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMud29ya2Vycy5mb3JFYWNoKCh3KSA9PiB7XG4gICAgICAgICAgICAgICAgdy50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy53b3JrZXJzID0gKG51bGw6IGFueSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1ByZWxvYWRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5hY3RpdmVbUFJFTE9BRF9QT09MX0lEXTtcbiAgICB9XG5cbiAgICBudW1BY3RpdmUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYWN0aXZlKS5sZW5ndGg7XG4gICAgfVxufVxuXG5jb25zdCBhdmFpbGFibGVMb2dpY2FsUHJvY2Vzc29ycyA9IE1hdGguZmxvb3IoYnJvd3Nlci5oYXJkd2FyZUNvbmN1cnJlbmN5IC8gMik7XG5Xb3JrZXJQb29sLndvcmtlckNvdW50ID0gTWF0aC5tYXgoTWF0aC5taW4oYXZhaWxhYmxlTG9naWNhbFByb2Nlc3NvcnMsIDYpLCAxKTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBXb3JrZXJQb29sLCB7UFJFTE9BRF9QT09MX0lEfSBmcm9tICcuL3dvcmtlcl9wb29sJztcblxubGV0IGdsb2JhbFdvcmtlclBvb2w7XG5cbi8qKlxuICogQ3JlYXRlcyAoaWYgbmVjZXNzYXJ5KSBhbmQgcmV0dXJucyB0aGUgc2luZ2xlLCBnbG9iYWwgV29ya2VyUG9vbCBpbnN0YW5jZVxuICogdG8gYmUgc2hhcmVkIGFjcm9zcyBlYWNoIE1hcFxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0R2xvYmFsV29ya2VyUG9vbCAoKSB7XG4gICAgaWYgKCFnbG9iYWxXb3JrZXJQb29sKSB7XG4gICAgICAgIGdsb2JhbFdvcmtlclBvb2wgPSBuZXcgV29ya2VyUG9vbCgpO1xuICAgIH1cbiAgICByZXR1cm4gZ2xvYmFsV29ya2VyUG9vbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXdhcm0oKSB7XG4gICAgY29uc3Qgd29ya2VyUG9vbCA9IGdldEdsb2JhbFdvcmtlclBvb2woKTtcbiAgICB3b3JrZXJQb29sLmFjcXVpcmUoUFJFTE9BRF9QT09MX0lEKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyUHJld2FybWVkUmVzb3VyY2VzKCkge1xuICAgIGNvbnN0IHBvb2wgPSBnbG9iYWxXb3JrZXJQb29sO1xuICAgIGlmIChwb29sKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgcG9vbCBvbmx5IGlmIGFsbCBtYXBzIHRoYXQgcmVmZXJlbmNlZCB0aGUgcHJlbG9hZGVkIGdsb2JhbCB3b3JrZXIgcG9vbCBoYXZlIGJlZW4gcmVtb3ZlZC5cbiAgICAgICAgaWYgKHBvb2wuaXNQcmVsb2FkZWQoKSAmJiBwb29sLm51bUFjdGl2ZSgpID09PSAxKSB7XG4gICAgICAgICAgICBwb29sLnJlbGVhc2UoUFJFTE9BRF9QT09MX0lEKTtcbiAgICAgICAgICAgIGdsb2JhbFdvcmtlclBvb2wgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgY2xlYXIgV2ViV29ya2VycyBzaW5jZSB0aGVyZSBhcmUgYWN0aXZlIE1hcCBpbnN0YW5jZXMgdGhhdCBzdGlsbCByZWZlcmVuY2UgaXQuIFRoZSBwcmUtd2FybWVkIFdlYldvcmtlciBwb29sIGNhbiBvbmx5IGJlIGNsZWFyZWQgd2hlbiBhbGwgbWFwIGluc3RhbmNlcyBoYXZlIGJlZW4gcmVtb3ZlZCB3aXRoIG1hcC5yZW1vdmUoKScpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiXG5pbXBvcnQgcmVmUHJvcGVydGllcyBmcm9tICcuL3V0aWwvcmVmX3Byb3BlcnRpZXMnO1xuXG5mdW5jdGlvbiBkZXJlZihsYXllciwgcGFyZW50KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IGsgaW4gbGF5ZXIpIHtcbiAgICAgICAgaWYgKGsgIT09ICdyZWYnKSB7XG4gICAgICAgICAgICByZXN1bHRba10gPSBsYXllcltrXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZlByb3BlcnRpZXMuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgICBpZiAoayBpbiBwYXJlbnQpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrXSA9IHBhcmVudFtrXTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVyZWZMYXllcnM7XG5cbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgb2YgbGF5ZXJzLCBzb21lIG9mIHdoaWNoIG1heSBjb250YWluIGByZWZgIHByb3BlcnRpZXNcbiAqIHdob3NlIHZhbHVlIGlzIHRoZSBgaWRgIG9mIGFub3RoZXIgcHJvcGVydHksIHJldHVybiBhIG5ldyBhcnJheSB3aGVyZVxuICogc3VjaCBsYXllcnMgaGF2ZSBiZWVuIGF1Z21lbnRlZCB3aXRoIHRoZSAndHlwZScsICdzb3VyY2UnLCBldGMuIHByb3BlcnRpZXNcbiAqIGZyb20gdGhlIHBhcmVudCBsYXllciwgYW5kIHRoZSBgcmVmYCBwcm9wZXJ0eSBoYXMgYmVlbiByZW1vdmVkLlxuICpcbiAqIFRoZSBpbnB1dCBpcyBub3QgbW9kaWZpZWQuIFRoZSBvdXRwdXQgbWF5IGNvbnRhaW4gcmVmZXJlbmNlcyB0byBwb3J0aW9uc1xuICogb2YgdGhlIGlucHV0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PExheWVyPn0gbGF5ZXJzXG4gKiBAcmV0dXJucyB7QXJyYXk8TGF5ZXI+fVxuICovXG5mdW5jdGlvbiBkZXJlZkxheWVycyhsYXllcnMpIHtcbiAgICBsYXllcnMgPSBsYXllcnMuc2xpY2UoKTtcblxuICAgIGNvbnN0IG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbWFwW2xheWVyc1tpXS5pZF0gPSBsYXllcnNbaV07XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCdyZWYnIGluIGxheWVyc1tpXSkge1xuICAgICAgICAgICAgbGF5ZXJzW2ldID0gZGVyZWYobGF5ZXJzW2ldLCBtYXBbbGF5ZXJzW2ldLnJlZl0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxheWVycztcbn1cbiIsIlxuaW1wb3J0IGlzRXF1YWwgZnJvbSAnLi91dGlsL2RlZXBfZXF1YWwnO1xuXG5jb25zdCBvcGVyYXRpb25zID0ge1xuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRTdHlsZScsIGFyZ3M6IFtzdHlsZXNoZWV0XSB9XG4gICAgICovXG4gICAgc2V0U3R5bGU6ICdzZXRTdHlsZScsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ2FkZExheWVyJywgYXJnczogW2xheWVyLCAnYmVmb3JlTGF5ZXJJZCddIH1cbiAgICAgKi9cbiAgICBhZGRMYXllcjogJ2FkZExheWVyJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAncmVtb3ZlTGF5ZXInLCBhcmdzOiBbJ2xheWVySWQnXSB9XG4gICAgICovXG4gICAgcmVtb3ZlTGF5ZXI6ICdyZW1vdmVMYXllcicsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldFBhaW50UHJvcGVydHknLCBhcmdzOiBbJ2xheWVySWQnLCAncHJvcCcsIHZhbHVlXSB9XG4gICAgICovXG4gICAgc2V0UGFpbnRQcm9wZXJ0eTogJ3NldFBhaW50UHJvcGVydHknLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRMYXlvdXRQcm9wZXJ0eScsIGFyZ3M6IFsnbGF5ZXJJZCcsICdwcm9wJywgdmFsdWVdIH1cbiAgICAgKi9cbiAgICBzZXRMYXlvdXRQcm9wZXJ0eTogJ3NldExheW91dFByb3BlcnR5JyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnc2V0RmlsdGVyJywgYXJnczogWydsYXllcklkJywgZmlsdGVyXSB9XG4gICAgICovXG4gICAgc2V0RmlsdGVyOiAnc2V0RmlsdGVyJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnYWRkU291cmNlJywgYXJnczogWydzb3VyY2VJZCcsIHNvdXJjZV0gfVxuICAgICAqL1xuICAgIGFkZFNvdXJjZTogJ2FkZFNvdXJjZScsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3JlbW92ZVNvdXJjZScsIGFyZ3M6IFsnc291cmNlSWQnXSB9XG4gICAgICovXG4gICAgcmVtb3ZlU291cmNlOiAncmVtb3ZlU291cmNlJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnc2V0R2VvSlNPTlNvdXJjZURhdGEnLCBhcmdzOiBbJ3NvdXJjZUlkJywgZGF0YV0gfVxuICAgICAqL1xuICAgIHNldEdlb0pTT05Tb3VyY2VEYXRhOiAnc2V0R2VvSlNPTlNvdXJjZURhdGEnLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRMYXllclpvb21SYW5nZScsIGFyZ3M6IFsnbGF5ZXJJZCcsIDAsIDIyXSB9XG4gICAgICovXG4gICAgc2V0TGF5ZXJab29tUmFuZ2U6ICdzZXRMYXllclpvb21SYW5nZScsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldExheWVyUHJvcGVydHknLCBhcmdzOiBbJ2xheWVySWQnLCAncHJvcCcsIHZhbHVlXSB9XG4gICAgICovXG4gICAgc2V0TGF5ZXJQcm9wZXJ0eTogJ3NldExheWVyUHJvcGVydHknLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRDZW50ZXInLCBhcmdzOiBbW2xvbiwgbGF0XV0gfVxuICAgICAqL1xuICAgIHNldENlbnRlcjogJ3NldENlbnRlcicsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldFpvb20nLCBhcmdzOiBbem9vbV0gfVxuICAgICAqL1xuICAgIHNldFpvb206ICdzZXRab29tJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnc2V0QmVhcmluZycsIGFyZ3M6IFtiZWFyaW5nXSB9XG4gICAgICovXG4gICAgc2V0QmVhcmluZzogJ3NldEJlYXJpbmcnLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRQaXRjaCcsIGFyZ3M6IFtwaXRjaF0gfVxuICAgICAqL1xuICAgIHNldFBpdGNoOiAnc2V0UGl0Y2gnLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRTcHJpdGUnLCBhcmdzOiBbJ3Nwcml0ZVVybCddIH1cbiAgICAgKi9cbiAgICBzZXRTcHJpdGU6ICdzZXRTcHJpdGUnLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRHbHlwaHMnLCBhcmdzOiBbJ2dseXBoc1VybCddIH1cbiAgICAgKi9cbiAgICBzZXRHbHlwaHM6ICdzZXRHbHlwaHMnLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRUcmFuc2l0aW9uJywgYXJnczogW3RyYW5zaXRpb25dIH1cbiAgICAgKi9cbiAgICBzZXRUcmFuc2l0aW9uOiAnc2V0VHJhbnNpdGlvbicsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldExpZ2h0aW5nJywgYXJnczogW2xpZ2h0UHJvcGVydGllc10gfVxuICAgICAqL1xuICAgIHNldExpZ2h0OiAnc2V0TGlnaHQnXG5cbn07XG5cbmZ1bmN0aW9uIGFkZFNvdXJjZShzb3VyY2VJZCwgYWZ0ZXIsIGNvbW1hbmRzKSB7XG4gICAgY29tbWFuZHMucHVzaCh7Y29tbWFuZDogb3BlcmF0aW9ucy5hZGRTb3VyY2UsIGFyZ3M6IFtzb3VyY2VJZCwgYWZ0ZXJbc291cmNlSWRdXX0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTb3VyY2Uoc291cmNlSWQsIGNvbW1hbmRzLCBzb3VyY2VzUmVtb3ZlZCkge1xuICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMucmVtb3ZlU291cmNlLCBhcmdzOiBbc291cmNlSWRdfSk7XG4gICAgc291cmNlc1JlbW92ZWRbc291cmNlSWRdID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU291cmNlKHNvdXJjZUlkLCBhZnRlciwgY29tbWFuZHMsIHNvdXJjZXNSZW1vdmVkKSB7XG4gICAgcmVtb3ZlU291cmNlKHNvdXJjZUlkLCBjb21tYW5kcywgc291cmNlc1JlbW92ZWQpO1xuICAgIGFkZFNvdXJjZShzb3VyY2VJZCwgYWZ0ZXIsIGNvbW1hbmRzKTtcbn1cblxuZnVuY3Rpb24gY2FuVXBkYXRlR2VvSlNPTihiZWZvcmUsIGFmdGVyLCBzb3VyY2VJZCkge1xuICAgIGxldCBwcm9wO1xuICAgIGZvciAocHJvcCBpbiBiZWZvcmVbc291cmNlSWRdKSB7XG4gICAgICAgIGlmICghYmVmb3JlW3NvdXJjZUlkXS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG4gICAgICAgIGlmIChwcm9wICE9PSAnZGF0YScgJiYgIWlzRXF1YWwoYmVmb3JlW3NvdXJjZUlkXVtwcm9wXSwgYWZ0ZXJbc291cmNlSWRdW3Byb3BdKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAocHJvcCBpbiBhZnRlcltzb3VyY2VJZF0pIHtcbiAgICAgICAgaWYgKCFhZnRlcltzb3VyY2VJZF0uaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAocHJvcCAhPT0gJ2RhdGEnICYmICFpc0VxdWFsKGJlZm9yZVtzb3VyY2VJZF1bcHJvcF0sIGFmdGVyW3NvdXJjZUlkXVtwcm9wXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZGlmZlNvdXJjZXMoYmVmb3JlLCBhZnRlciwgY29tbWFuZHMsIHNvdXJjZXNSZW1vdmVkKSB7XG4gICAgYmVmb3JlID0gYmVmb3JlIHx8IHt9O1xuICAgIGFmdGVyID0gYWZ0ZXIgfHwge307XG5cbiAgICBsZXQgc291cmNlSWQ7XG5cbiAgICAvLyBsb29rIGZvciBzb3VyY2VzIHRvIHJlbW92ZVxuICAgIGZvciAoc291cmNlSWQgaW4gYmVmb3JlKSB7XG4gICAgICAgIGlmICghYmVmb3JlLmhhc093blByb3BlcnR5KHNvdXJjZUlkKSkgY29udGludWU7XG4gICAgICAgIGlmICghYWZ0ZXIuaGFzT3duUHJvcGVydHkoc291cmNlSWQpKSB7XG4gICAgICAgICAgICByZW1vdmVTb3VyY2Uoc291cmNlSWQsIGNvbW1hbmRzLCBzb3VyY2VzUmVtb3ZlZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBsb29rIGZvciBzb3VyY2VzIHRvIGFkZC91cGRhdGVcbiAgICBmb3IgKHNvdXJjZUlkIGluIGFmdGVyKSB7XG4gICAgICAgIGlmICghYWZ0ZXIuaGFzT3duUHJvcGVydHkoc291cmNlSWQpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFiZWZvcmUuaGFzT3duUHJvcGVydHkoc291cmNlSWQpKSB7XG4gICAgICAgICAgICBhZGRTb3VyY2Uoc291cmNlSWQsIGFmdGVyLCBjb21tYW5kcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRXF1YWwoYmVmb3JlW3NvdXJjZUlkXSwgYWZ0ZXJbc291cmNlSWRdKSkge1xuICAgICAgICAgICAgaWYgKGJlZm9yZVtzb3VyY2VJZF0udHlwZSA9PT0gJ2dlb2pzb24nICYmIGFmdGVyW3NvdXJjZUlkXS50eXBlID09PSAnZ2VvanNvbicgJiYgY2FuVXBkYXRlR2VvSlNPTihiZWZvcmUsIGFmdGVyLCBzb3VyY2VJZCkpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtjb21tYW5kOiBvcGVyYXRpb25zLnNldEdlb0pTT05Tb3VyY2VEYXRhLCBhcmdzOiBbc291cmNlSWQsIGFmdGVyW3NvdXJjZUlkXS5kYXRhXX0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBubyB1cGRhdGUgY29tbWFuZCwgbXVzdCByZW1vdmUgdGhlbiBhZGRcbiAgICAgICAgICAgICAgICB1cGRhdGVTb3VyY2Uoc291cmNlSWQsIGFmdGVyLCBjb21tYW5kcywgc291cmNlc1JlbW92ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaWZmTGF5ZXJQcm9wZXJ0eUNoYW5nZXMoYmVmb3JlLCBhZnRlciwgY29tbWFuZHMsIGxheWVySWQsIGtsYXNzLCBjb21tYW5kKSB7XG4gICAgYmVmb3JlID0gYmVmb3JlIHx8IHt9O1xuICAgIGFmdGVyID0gYWZ0ZXIgfHwge307XG5cbiAgICBsZXQgcHJvcDtcblxuICAgIGZvciAocHJvcCBpbiBiZWZvcmUpIHtcbiAgICAgICAgaWYgKCFiZWZvcmUuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWlzRXF1YWwoYmVmb3JlW3Byb3BdLCBhZnRlcltwcm9wXSkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQsIGFyZ3M6IFtsYXllcklkLCBwcm9wLCBhZnRlcltwcm9wXSwga2xhc3NdfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wIGluIGFmdGVyKSB7XG4gICAgICAgIGlmICghYWZ0ZXIuaGFzT3duUHJvcGVydHkocHJvcCkgfHwgYmVmb3JlLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZVtwcm9wXSwgYWZ0ZXJbcHJvcF0pKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtjb21tYW5kLCBhcmdzOiBbbGF5ZXJJZCwgcHJvcCwgYWZ0ZXJbcHJvcF0sIGtsYXNzXX0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwbHVja0lkKGxheWVyKSB7XG4gICAgcmV0dXJuIGxheWVyLmlkO1xufVxuZnVuY3Rpb24gaW5kZXhCeUlkKGdyb3VwLCBsYXllcikge1xuICAgIGdyb3VwW2xheWVyLmlkXSA9IGxheWVyO1xuICAgIHJldHVybiBncm91cDtcbn1cblxuZnVuY3Rpb24gZGlmZkxheWVycyhiZWZvcmUsIGFmdGVyLCBjb21tYW5kcykge1xuICAgIGJlZm9yZSA9IGJlZm9yZSB8fCBbXTtcbiAgICBhZnRlciA9IGFmdGVyIHx8IFtdO1xuXG4gICAgLy8gb3JkZXIgb2YgbGF5ZXJzIGJ5IGlkXG4gICAgY29uc3QgYmVmb3JlT3JkZXIgPSBiZWZvcmUubWFwKHBsdWNrSWQpO1xuICAgIGNvbnN0IGFmdGVyT3JkZXIgPSBhZnRlci5tYXAocGx1Y2tJZCk7XG5cbiAgICAvLyBpbmRleCBvZiBsYXllciBieSBpZFxuICAgIGNvbnN0IGJlZm9yZUluZGV4ID0gYmVmb3JlLnJlZHVjZShpbmRleEJ5SWQsIHt9KTtcbiAgICBjb25zdCBhZnRlckluZGV4ID0gYWZ0ZXIucmVkdWNlKGluZGV4QnlJZCwge30pO1xuXG4gICAgLy8gdHJhY2sgb3JkZXIgb2YgbGF5ZXJzIGFzIGlmIHRoZXkgaGF2ZSBiZWVuIG11dGF0ZWRcbiAgICBjb25zdCB0cmFja2VyID0gYmVmb3JlT3JkZXIuc2xpY2UoKTtcblxuICAgIC8vIGxheWVycyB0aGF0IGhhdmUgYmVlbiBhZGRlZCBkbyBub3QgbmVlZCB0byBiZSBkaWZmZWRcbiAgICBjb25zdCBjbGVhbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBsZXQgaSwgZCwgbGF5ZXJJZCwgYmVmb3JlTGF5ZXIsIGFmdGVyTGF5ZXIsIGluc2VydEJlZm9yZUxheWVySWQsIHByb3A7XG5cbiAgICAvLyByZW1vdmUgbGF5ZXJzXG4gICAgZm9yIChpID0gMCwgZCA9IDA7IGkgPCBiZWZvcmVPcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsYXllcklkID0gYmVmb3JlT3JkZXJbaV07XG4gICAgICAgIGlmICghYWZ0ZXJJbmRleC5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7Y29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVMYXllciwgYXJnczogW2xheWVySWRdfSk7XG4gICAgICAgICAgICB0cmFja2VyLnNwbGljZSh0cmFja2VyLmluZGV4T2YobGF5ZXJJZCwgZCksIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbGltaXQgd2hlcmUgaW4gdHJhY2tlciB3ZSBuZWVkIHRvIGxvb2sgZm9yIGEgbWF0Y2hcbiAgICAgICAgICAgIGQrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZC9yZW9yZGVyIGxheWVyc1xuICAgIGZvciAoaSA9IDAsIGQgPSAwOyBpIDwgYWZ0ZXJPcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyB3b3JrIGJhY2t3YXJkcyBhcyBpbnNlcnQgaXMgYmVmb3JlIGFuIGV4aXN0aW5nIGxheWVyXG4gICAgICAgIGxheWVySWQgPSBhZnRlck9yZGVyW2FmdGVyT3JkZXIubGVuZ3RoIC0gMSAtIGldO1xuXG4gICAgICAgIGlmICh0cmFja2VyW3RyYWNrZXIubGVuZ3RoIC0gMSAtIGldID09PSBsYXllcklkKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoYmVmb3JlSW5kZXguaGFzT3duUHJvcGVydHkobGF5ZXJJZCkpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgbGF5ZXIgYmVmb3JlIHdlIGluc2VydCBhdCB0aGUgY29ycmVjdCBwb3NpdGlvblxuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7Y29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVMYXllciwgYXJnczogW2xheWVySWRdfSk7XG4gICAgICAgICAgICB0cmFja2VyLnNwbGljZSh0cmFja2VyLmxhc3RJbmRleE9mKGxheWVySWQsIHRyYWNrZXIubGVuZ3RoIC0gZCksIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbGltaXQgd2hlcmUgaW4gdHJhY2tlciB3ZSBuZWVkIHRvIGxvb2sgZm9yIGEgbWF0Y2hcbiAgICAgICAgICAgIGQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCBsYXllciBhdCBjb3JyZWN0IHBvc2l0aW9uXG4gICAgICAgIGluc2VydEJlZm9yZUxheWVySWQgPSB0cmFja2VyW3RyYWNrZXIubGVuZ3RoIC0gaV07XG4gICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMuYWRkTGF5ZXIsIGFyZ3M6IFthZnRlckluZGV4W2xheWVySWRdLCBpbnNlcnRCZWZvcmVMYXllcklkXX0pO1xuICAgICAgICB0cmFja2VyLnNwbGljZSh0cmFja2VyLmxlbmd0aCAtIGksIDAsIGxheWVySWQpO1xuICAgICAgICBjbGVhbltsYXllcklkXSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGxheWVyc1xuICAgIGZvciAoaSA9IDA7IGkgPCBhZnRlck9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxheWVySWQgPSBhZnRlck9yZGVyW2ldO1xuICAgICAgICBiZWZvcmVMYXllciA9IGJlZm9yZUluZGV4W2xheWVySWRdO1xuICAgICAgICBhZnRlckxheWVyID0gYWZ0ZXJJbmRleFtsYXllcklkXTtcblxuICAgICAgICAvLyBubyBuZWVkIHRvIHVwZGF0ZSBpZiBwcmV2aW91c2x5IGFkZGVkIChuZXcgb3IgbW92ZWQpXG4gICAgICAgIGlmIChjbGVhbltsYXllcklkXSB8fCBpc0VxdWFsKGJlZm9yZUxheWVyLCBhZnRlckxheWVyKSkgY29udGludWU7XG5cbiAgICAgICAgLy8gSWYgc291cmNlLCBzb3VyY2UtbGF5ZXIsIG9yIHR5cGUgaGF2ZSBjaGFuZ2VzLCB0aGVuIHJlbW92ZSB0aGUgbGF5ZXJcbiAgICAgICAgLy8gYW5kIGFkZCBpdCBiYWNrICdmcm9tIHNjcmF0Y2gnLlxuICAgICAgICBpZiAoIWlzRXF1YWwoYmVmb3JlTGF5ZXIuc291cmNlLCBhZnRlckxheWVyLnNvdXJjZSkgfHwgIWlzRXF1YWwoYmVmb3JlTGF5ZXJbJ3NvdXJjZS1sYXllciddLCBhZnRlckxheWVyWydzb3VyY2UtbGF5ZXInXSkgfHwgIWlzRXF1YWwoYmVmb3JlTGF5ZXIudHlwZSwgYWZ0ZXJMYXllci50eXBlKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7Y29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVMYXllciwgYXJnczogW2xheWVySWRdfSk7XG4gICAgICAgICAgICAvLyB3ZSBhZGQgdGhlIGxheWVyIGJhY2sgYXQgdGhlIHNhbWUgcG9zaXRpb24gaXQgd2FzIGFscmVhZHkgaW4sIHNvXG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIG5lZWQgdG8gdXBkYXRlIHRoZSBgdHJhY2tlcmBcbiAgICAgICAgICAgIGluc2VydEJlZm9yZUxheWVySWQgPSB0cmFja2VyW3RyYWNrZXIubGFzdEluZGV4T2YobGF5ZXJJZCkgKyAxXTtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMuYWRkTGF5ZXIsIGFyZ3M6IFthZnRlckxheWVyLCBpbnNlcnRCZWZvcmVMYXllcklkXX0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsYXlvdXQsIHBhaW50LCBmaWx0ZXIsIG1pbnpvb20sIG1heHpvb21cbiAgICAgICAgZGlmZkxheWVyUHJvcGVydHlDaGFuZ2VzKGJlZm9yZUxheWVyLmxheW91dCwgYWZ0ZXJMYXllci5sYXlvdXQsIGNvbW1hbmRzLCBsYXllcklkLCBudWxsLCBvcGVyYXRpb25zLnNldExheW91dFByb3BlcnR5KTtcbiAgICAgICAgZGlmZkxheWVyUHJvcGVydHlDaGFuZ2VzKGJlZm9yZUxheWVyLnBhaW50LCBhZnRlckxheWVyLnBhaW50LCBjb21tYW5kcywgbGF5ZXJJZCwgbnVsbCwgb3BlcmF0aW9ucy5zZXRQYWludFByb3BlcnR5KTtcbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZUxheWVyLmZpbHRlciwgYWZ0ZXJMYXllci5maWx0ZXIpKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtjb21tYW5kOiBvcGVyYXRpb25zLnNldEZpbHRlciwgYXJnczogW2xheWVySWQsIGFmdGVyTGF5ZXIuZmlsdGVyXX0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmVMYXllci5taW56b29tLCBhZnRlckxheWVyLm1pbnpvb20pIHx8ICFpc0VxdWFsKGJlZm9yZUxheWVyLm1heHpvb20sIGFmdGVyTGF5ZXIubWF4em9vbSkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0TGF5ZXJab29tUmFuZ2UsIGFyZ3M6IFtsYXllcklkLCBhZnRlckxheWVyLm1pbnpvb20sIGFmdGVyTGF5ZXIubWF4em9vbV19KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBhbGwgb3RoZXIgbGF5ZXIgcHJvcHMsIGluY2x1ZGluZyBwYWludC4qXG4gICAgICAgIGZvciAocHJvcCBpbiBiZWZvcmVMYXllcikge1xuICAgICAgICAgICAgaWYgKCFiZWZvcmVMYXllci5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2xheW91dCcgfHwgcHJvcCA9PT0gJ3BhaW50JyB8fCBwcm9wID09PSAnZmlsdGVyJyB8fFxuICAgICAgICAgICAgICAgIHByb3AgPT09ICdtZXRhZGF0YScgfHwgcHJvcCA9PT0gJ21pbnpvb20nIHx8IHByb3AgPT09ICdtYXh6b29tJykgY29udGludWU7XG4gICAgICAgICAgICBpZiAocHJvcC5pbmRleE9mKCdwYWludC4nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpZmZMYXllclByb3BlcnR5Q2hhbmdlcyhiZWZvcmVMYXllcltwcm9wXSwgYWZ0ZXJMYXllcltwcm9wXSwgY29tbWFuZHMsIGxheWVySWQsIHByb3Auc2xpY2UoNiksIG9wZXJhdGlvbnMuc2V0UGFpbnRQcm9wZXJ0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc0VxdWFsKGJlZm9yZUxheWVyW3Byb3BdLCBhZnRlckxheWVyW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0TGF5ZXJQcm9wZXJ0eSwgYXJnczogW2xheWVySWQsIHByb3AsIGFmdGVyTGF5ZXJbcHJvcF1dfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wIGluIGFmdGVyTGF5ZXIpIHtcbiAgICAgICAgICAgIGlmICghYWZ0ZXJMYXllci5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCBiZWZvcmVMYXllci5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2xheW91dCcgfHwgcHJvcCA9PT0gJ3BhaW50JyB8fCBwcm9wID09PSAnZmlsdGVyJyB8fFxuICAgICAgICAgICAgICAgIHByb3AgPT09ICdtZXRhZGF0YScgfHwgcHJvcCA9PT0gJ21pbnpvb20nIHx8IHByb3AgPT09ICdtYXh6b29tJykgY29udGludWU7XG4gICAgICAgICAgICBpZiAocHJvcC5pbmRleE9mKCdwYWludC4nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpZmZMYXllclByb3BlcnR5Q2hhbmdlcyhiZWZvcmVMYXllcltwcm9wXSwgYWZ0ZXJMYXllcltwcm9wXSwgY29tbWFuZHMsIGxheWVySWQsIHByb3Auc2xpY2UoNiksIG9wZXJhdGlvbnMuc2V0UGFpbnRQcm9wZXJ0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc0VxdWFsKGJlZm9yZUxheWVyW3Byb3BdLCBhZnRlckxheWVyW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0TGF5ZXJQcm9wZXJ0eSwgYXJnczogW2xheWVySWQsIHByb3AsIGFmdGVyTGF5ZXJbcHJvcF1dfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGlmZiB0d28gc3R5bGVzaGVldFxuICpcbiAqIENyZWF0ZXMgc2VtYW50aWNseSBhd2FyZSBkaWZmcyB0aGF0IGNhbiBlYXNpbHkgYmUgYXBwbGllZCBhdCBydW50aW1lLlxuICogT3BlcmF0aW9ucyBwcm9kdWNlZCBieSB0aGUgZGlmZiBjbG9zZWx5IHJlc2VtYmxlIHRoZSBtYXBib3gtZ2wtanMgQVBJLiBBbnlcbiAqIGVycm9yIGNyZWF0aW5nIHRoZSBkaWZmIHdpbGwgZmFsbCBiYWNrIHRvIHRoZSAnc2V0U3R5bGUnIG9wZXJhdGlvbi5cbiAqXG4gKiBFeGFtcGxlIGRpZmY6XG4gKiBbXG4gKiAgICAgeyBjb21tYW5kOiAnc2V0Q29uc3RhbnQnLCBhcmdzOiBbJ0B3YXRlcicsICcjMDAwMEZGJ10gfSxcbiAqICAgICB7IGNvbW1hbmQ6ICdzZXRQYWludFByb3BlcnR5JywgYXJnczogWydiYWNrZ3JvdW5kJywgJ2JhY2tncm91bmQtY29sb3InLCAnYmxhY2snXSB9XG4gKiBdXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW2JlZm9yZV0gc3R5bGVzaGVldCB0byBjb21wYXJlIGZyb21cbiAqIEBwYXJhbSB7Kn0gYWZ0ZXIgc3R5bGVzaGVldCB0byBjb21wYXJlIHRvXG4gKiBAcmV0dXJucyBBcnJheSBsaXN0IG9mIGNoYW5nZXNcbiAqL1xuZnVuY3Rpb24gZGlmZlN0eWxlcyhiZWZvcmUsIGFmdGVyKSB7XG4gICAgaWYgKCFiZWZvcmUpIHJldHVybiBbe2NvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0U3R5bGUsIGFyZ3M6IFthZnRlcl19XTtcblxuICAgIGxldCBjb21tYW5kcyA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSGFuZGxlIGNoYW5nZXMgdG8gdG9wLWxldmVsIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZS52ZXJzaW9uLCBhZnRlci52ZXJzaW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIFt7Y29tbWFuZDogb3BlcmF0aW9ucy5zZXRTdHlsZSwgYXJnczogW2FmdGVyXX1dO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmUuY2VudGVyLCBhZnRlci5jZW50ZXIpKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtjb21tYW5kOiBvcGVyYXRpb25zLnNldENlbnRlciwgYXJnczogW2FmdGVyLmNlbnRlcl19KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRXF1YWwoYmVmb3JlLnpvb20sIGFmdGVyLnpvb20pKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtjb21tYW5kOiBvcGVyYXRpb25zLnNldFpvb20sIGFyZ3M6IFthZnRlci56b29tXX0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmUuYmVhcmluZywgYWZ0ZXIuYmVhcmluZykpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0QmVhcmluZywgYXJnczogW2FmdGVyLmJlYXJpbmddfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZS5waXRjaCwgYWZ0ZXIucGl0Y2gpKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtjb21tYW5kOiBvcGVyYXRpb25zLnNldFBpdGNoLCBhcmdzOiBbYWZ0ZXIucGl0Y2hdfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZS5zcHJpdGUsIGFmdGVyLnNwcml0ZSkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0U3ByaXRlLCBhcmdzOiBbYWZ0ZXIuc3ByaXRlXX0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmUuZ2x5cGhzLCBhZnRlci5nbHlwaHMpKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtjb21tYW5kOiBvcGVyYXRpb25zLnNldEdseXBocywgYXJnczogW2FmdGVyLmdseXBoc119KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRXF1YWwoYmVmb3JlLnRyYW5zaXRpb24sIGFmdGVyLnRyYW5zaXRpb24pKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtjb21tYW5kOiBvcGVyYXRpb25zLnNldFRyYW5zaXRpb24sIGFyZ3M6IFthZnRlci50cmFuc2l0aW9uXX0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmUubGlnaHQsIGFmdGVyLmxpZ2h0KSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7Y29tbWFuZDogb3BlcmF0aW9ucy5zZXRMaWdodCwgYXJnczogW2FmdGVyLmxpZ2h0XX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGNoYW5nZXMgdG8gYHNvdXJjZXNgXG4gICAgICAgIC8vIElmIGEgc291cmNlIGlzIHRvIGJlIHJlbW92ZWQsIHdlIGFsc28tLWJlZm9yZSB0aGUgcmVtb3ZlU291cmNlXG4gICAgICAgIC8vIGNvbW1hbmQtLW5lZWQgdG8gcmVtb3ZlIGFsbCB0aGUgc3R5bGUgbGF5ZXJzIHRoYXQgZGVwZW5kIG9uIGl0LlxuICAgICAgICBjb25zdCBzb3VyY2VzUmVtb3ZlZCA9IHt9O1xuXG4gICAgICAgIC8vIEZpcnN0IGNvbGxlY3QgdGhlIHthZGQscmVtb3ZlfVNvdXJjZSBjb21tYW5kc1xuICAgICAgICBjb25zdCByZW1vdmVPckFkZFNvdXJjZUNvbW1hbmRzID0gW107XG4gICAgICAgIGRpZmZTb3VyY2VzKGJlZm9yZS5zb3VyY2VzLCBhZnRlci5zb3VyY2VzLCByZW1vdmVPckFkZFNvdXJjZUNvbW1hbmRzLCBzb3VyY2VzUmVtb3ZlZCk7XG5cbiAgICAgICAgLy8gUHVzaCBhIHJlbW92ZUxheWVyIGNvbW1hbmQgZm9yIGVhY2ggc3R5bGUgbGF5ZXIgdGhhdCBkZXBlbmRzIG9uIGFcbiAgICAgICAgLy8gc291cmNlIHRoYXQncyBiZWluZyByZW1vdmVkLlxuICAgICAgICAvLyBBbHNvLCBleGNsdWRlIGFueSBzdWNoIGxheWVycyB0aGVtIGZyb20gdGhlIGlucHV0IHRvIGBkaWZmTGF5ZXJzYFxuICAgICAgICAvLyBiZWxvdywgc28gdGhhdCBkaWZmTGF5ZXJzIHByb2R1Y2VzIHRoZSBhcHByb3ByaWF0ZSBgYWRkTGF5ZXJzYFxuICAgICAgICAvLyBjb21tYW5kXG4gICAgICAgIGNvbnN0IGJlZm9yZUxheWVycyA9IFtdO1xuICAgICAgICBpZiAoYmVmb3JlLmxheWVycykge1xuICAgICAgICAgICAgYmVmb3JlLmxheWVycy5mb3JFYWNoKChsYXllcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VzUmVtb3ZlZFtsYXllci5zb3VyY2VdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe2NvbW1hbmQ6IG9wZXJhdGlvbnMucmVtb3ZlTGF5ZXIsIGFyZ3M6IFtsYXllci5pZF19KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBiZWZvcmVMYXllcnMucHVzaChsYXllcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29tbWFuZHMgPSBjb21tYW5kcy5jb25jYXQocmVtb3ZlT3JBZGRTb3VyY2VDb21tYW5kcyk7XG5cbiAgICAgICAgLy8gSGFuZGxlIGNoYW5nZXMgdG8gYGxheWVyc2BcbiAgICAgICAgZGlmZkxheWVycyhiZWZvcmVMYXllcnMsIGFmdGVyLmxheWVycywgY29tbWFuZHMpO1xuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBmYWxsIGJhY2sgdG8gc2V0U3R5bGVcbiAgICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gY29tcHV0ZSBzdHlsZSBkaWZmOicsIGUpO1xuICAgICAgICBjb21tYW5kcyA9IFt7Y29tbWFuZDogb3BlcmF0aW9ucy5zZXRTdHlsZSwgYXJnczogW2FmdGVyXX1dO1xuICAgIH1cblxuICAgIHJldHVybiBjb21tYW5kcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlmZlN0eWxlcztcbmV4cG9ydCB7b3BlcmF0aW9uc307XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge2NsYW1wfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5jbGFzcyBQYXRoSW50ZXJwb2xhdG9yIHtcbiAgICBwb2ludHM6IEFycmF5PFBvaW50PjtcbiAgICBsZW5ndGg6IG51bWJlcjtcbiAgICBwYWRkZWRMZW5ndGg6IG51bWJlcjtcbiAgICBwYWRkaW5nOiBudW1iZXI7XG4gICAgX2Rpc3RhbmNlczogQXJyYXk8bnVtYmVyPjtcblxuICAgIGNvbnN0cnVjdG9yKHBvaW50c186ID9BcnJheTxQb2ludD4sIHBhZGRpbmdfOiA/bnVtYmVyKSB7XG4gICAgICAgIHRoaXMucmVzZXQocG9pbnRzXywgcGFkZGluZ18pO1xuICAgIH1cblxuICAgIHJlc2V0KHBvaW50c186ID9BcnJheTxQb2ludD4sIHBhZGRpbmdfOiA/bnVtYmVyKSB7XG4gICAgICAgIHRoaXMucG9pbnRzID0gcG9pbnRzXyB8fCBbXTtcblxuICAgICAgICAvLyBDb21wdXRlIGN1bXVsYXRpdmUgZGlzdGFuY2UgZnJvbSBmaXJzdCBwb2ludCB0byBldmVyeSBvdGhlciBwb2ludCBpbiB0aGUgc2VnbWVudC5cbiAgICAgICAgLy8gTGFzdCBlbnRyeSBpbiB0aGUgYXJyYXkgaXMgdG90YWwgbGVuZ3RoIG9mIHRoZSBwYXRoXG4gICAgICAgIHRoaXMuX2Rpc3RhbmNlcyA9IFswLjBdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3RhbmNlc1tpXSA9IHRoaXMuX2Rpc3RhbmNlc1tpIC0gMV0gKyB0aGlzLnBvaW50c1tpXS5kaXN0KHRoaXMucG9pbnRzW2kgLSAxXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX2Rpc3RhbmNlc1t0aGlzLl9kaXN0YW5jZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIHRoaXMucGFkZGluZyA9IE1hdGgubWluKHBhZGRpbmdfIHx8IDAsIHRoaXMubGVuZ3RoICogMC41KTtcbiAgICAgICAgdGhpcy5wYWRkZWRMZW5ndGggPSB0aGlzLmxlbmd0aCAtIHRoaXMucGFkZGluZyAqIDIuMDtcbiAgICB9XG5cbiAgICBsZXJwKHQ6IG51bWJlcik6IFBvaW50IHtcbiAgICAgICAgYXNzZXJ0KHRoaXMucG9pbnRzLmxlbmd0aCA+IDApO1xuICAgICAgICBpZiAodGhpcy5wb2ludHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb2ludHNbMF07XG4gICAgICAgIH1cblxuICAgICAgICB0ID0gY2xhbXAodCwgMCwgMSk7XG5cbiAgICAgICAgLy8gRmluZCB0aGUgY29ycmVjdCBzZWdtZW50IFtwMCwgcDFdIHdoZXJlIHAwIDw9IHggPCBwMVxuICAgICAgICBsZXQgY3VycmVudEluZGV4ID0gMTtcbiAgICAgICAgbGV0IGRpc3RPZkN1cnJlbnRJZHggPSB0aGlzLl9kaXN0YW5jZXNbY3VycmVudEluZGV4XTtcbiAgICAgICAgY29uc3QgZGlzdFRvVGFyZ2V0ID0gdCAqIHRoaXMucGFkZGVkTGVuZ3RoICsgdGhpcy5wYWRkaW5nO1xuXG4gICAgICAgIHdoaWxlIChkaXN0T2ZDdXJyZW50SWR4IDwgZGlzdFRvVGFyZ2V0ICYmIGN1cnJlbnRJbmRleCA8IHRoaXMuX2Rpc3RhbmNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRpc3RPZkN1cnJlbnRJZHggPSB0aGlzLl9kaXN0YW5jZXNbKytjdXJyZW50SW5kZXhdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW50ZXJwb2xhdGUgYmV0d2VlbiB0aGUgdHdvIHBvaW50cyBvZiB0aGUgc2VnbWVudFxuICAgICAgICBjb25zdCBpZHhPZlByZXZQb2ludCA9IGN1cnJlbnRJbmRleCAtIDE7XG4gICAgICAgIGNvbnN0IGRpc3RPZlByZXZJZHggPSB0aGlzLl9kaXN0YW5jZXNbaWR4T2ZQcmV2UG9pbnRdO1xuICAgICAgICBjb25zdCBzZWdtZW50TGVuZ3RoID0gZGlzdE9mQ3VycmVudElkeCAtIGRpc3RPZlByZXZJZHg7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRUID0gc2VnbWVudExlbmd0aCA+IDAgPyAoZGlzdFRvVGFyZ2V0IC0gZGlzdE9mUHJldklkeCkgLyBzZWdtZW50TGVuZ3RoIDogMDtcblxuICAgICAgICByZXR1cm4gdGhpcy5wb2ludHNbaWR4T2ZQcmV2UG9pbnRdLm11bHQoMS4wIC0gc2VnbWVudFQpLmFkZCh0aGlzLnBvaW50c1tjdXJyZW50SW5kZXhdLm11bHQoc2VnbWVudFQpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhdGhJbnRlcnBvbGF0b3I7XG4iLCIvLyBAZmxvd1xuXG4vKipcbiAqIEdyaWRJbmRleCBpcyBhIGRhdGEgc3RydWN0dXJlIGZvciB0ZXN0aW5nIHRoZSBpbnRlcnNlY3Rpb24gb2ZcbiAqIGNpcmNsZXMgYW5kIHJlY3RhbmdsZXMgaW4gYSAyZCBwbGFuZS5cbiAqIEl0IGlzIG9wdGltaXplZCBmb3IgcmFwaWQgaW5zZXJ0aW9uIGFuZCBxdWVyeWluZy5cbiAqIEdyaWRJbmRleCBzcGxpdHMgdGhlIHBsYW5lIGludG8gYSBzZXQgb2YgXCJjZWxsc1wiIGFuZCBrZWVwcyB0cmFja1xuICogb2Ygd2hpY2ggZ2VvbWV0cmllcyBpbnRlcnNlY3Qgd2l0aCBlYWNoIGNlbGwuIEF0IHF1ZXJ5IHRpbWUsXG4gKiBmdWxsIGdlb21ldHJ5IGNvbXBhcmlzb25zIGFyZSBvbmx5IGRvbmUgZm9yIGl0ZW1zIHRoYXQgc2hhcmVcbiAqIGF0IGxlYXN0IG9uZSBjZWxsLiBBcyBsb25nIGFzIHRoZSBnZW9tZXRyaWVzIGFyZSByZWxhdGl2ZWx5XG4gKiB1bmlmb3JtbHkgZGlzdHJpYnV0ZWQgYWNyb3NzIHRoZSBwbGFuZSwgdGhpcyBncmVhdGx5IHJlZHVjZXNcbiAqIHRoZSBudW1iZXIgb2YgY29tcGFyaXNvbnMgbmVjZXNzYXJ5LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEdyaWRJbmRleCB7XG4gICAgY2lyY2xlS2V5czogQXJyYXk8YW55PjtcbiAgICBib3hLZXlzOiBBcnJheTxhbnk+O1xuICAgIGJveENlbGxzOiBBcnJheTxBcnJheTxudW1iZXI+PjtcbiAgICBjaXJjbGVDZWxsczogQXJyYXk8QXJyYXk8bnVtYmVyPj47XG4gICAgYmJveGVzOiBBcnJheTxudW1iZXI+O1xuICAgIGNpcmNsZXM6IEFycmF5PG51bWJlcj47XG4gICAgeENlbGxDb3VudDogbnVtYmVyO1xuICAgIHlDZWxsQ291bnQ6IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHhTY2FsZTogbnVtYmVyO1xuICAgIHlTY2FsZTogbnVtYmVyO1xuICAgIGJveFVpZDogbnVtYmVyO1xuICAgIGNpcmNsZVVpZDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IgKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjZWxsU2l6ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGJveENlbGxzID0gdGhpcy5ib3hDZWxscyA9IFtdO1xuICAgICAgICBjb25zdCBjaXJjbGVDZWxscyA9IHRoaXMuY2lyY2xlQ2VsbHMgPSBbXTtcblxuICAgICAgICAvLyBNb3JlIGNlbGxzIC0+IGZld2VyIGdlb21ldHJpZXMgdG8gY2hlY2sgcGVyIGNlbGwsIGJ1dCBpdGVtcyB0ZW5kXG4gICAgICAgIC8vIHRvIGJlIHNwbGl0IGFjcm9zcyBtb3JlIGNlbGxzLlxuICAgICAgICAvLyBTd2VldCBzcG90IGFsbG93cyBtb3N0IHNtYWxsIGl0ZW1zIHRvIGZpdCBpbiBvbmUgY2VsbFxuICAgICAgICB0aGlzLnhDZWxsQ291bnQgPSBNYXRoLmNlaWwod2lkdGggLyBjZWxsU2l6ZSk7XG4gICAgICAgIHRoaXMueUNlbGxDb3VudCA9IE1hdGguY2VpbChoZWlnaHQgLyBjZWxsU2l6ZSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnhDZWxsQ291bnQgKiB0aGlzLnlDZWxsQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgYm94Q2VsbHMucHVzaChbXSk7XG4gICAgICAgICAgICBjaXJjbGVDZWxscy5wdXNoKFtdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNpcmNsZUtleXMgPSBbXTtcbiAgICAgICAgdGhpcy5ib3hLZXlzID0gW107XG4gICAgICAgIHRoaXMuYmJveGVzID0gW107XG4gICAgICAgIHRoaXMuY2lyY2xlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMueFNjYWxlID0gdGhpcy54Q2VsbENvdW50IC8gd2lkdGg7XG4gICAgICAgIHRoaXMueVNjYWxlID0gdGhpcy55Q2VsbENvdW50IC8gaGVpZ2h0O1xuICAgICAgICB0aGlzLmJveFVpZCA9IDA7XG4gICAgICAgIHRoaXMuY2lyY2xlVWlkID0gMDtcbiAgICB9XG5cbiAgICBrZXlzTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3hLZXlzLmxlbmd0aCArIHRoaXMuY2lyY2xlS2V5cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgaW5zZXJ0KGtleTogYW55LCB4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2ZvckVhY2hDZWxsKHgxLCB5MSwgeDIsIHkyLCB0aGlzLl9pbnNlcnRCb3hDZWxsLCB0aGlzLmJveFVpZCsrKTtcbiAgICAgICAgdGhpcy5ib3hLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgdGhpcy5iYm94ZXMucHVzaCh4MSk7XG4gICAgICAgIHRoaXMuYmJveGVzLnB1c2goeTEpO1xuICAgICAgICB0aGlzLmJib3hlcy5wdXNoKHgyKTtcbiAgICAgICAgdGhpcy5iYm94ZXMucHVzaCh5Mik7XG4gICAgfVxuXG4gICAgaW5zZXJ0Q2lyY2xlKGtleTogYW55LCB4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIpIHtcbiAgICAgICAgLy8gSW5zZXJ0IGNpcmNsZSBpbnRvIGdyaWQgZm9yIGFsbCBjZWxscyBpbiB0aGUgY2lyY3Vtc2NyaWJpbmcgc3F1YXJlXG4gICAgICAgIC8vIEl0J3MgbW9yZSB0aGFuIG5lY2Vzc2FyeSAoYnkgYSBmYWN0b3Igb2YgNC9QSSksIGJ1dCBmYXN0IHRvIGluc2VydFxuICAgICAgICB0aGlzLl9mb3JFYWNoQ2VsbCh4IC0gcmFkaXVzLCB5IC0gcmFkaXVzLCB4ICsgcmFkaXVzLCB5ICsgcmFkaXVzLCB0aGlzLl9pbnNlcnRDaXJjbGVDZWxsLCB0aGlzLmNpcmNsZVVpZCsrKTtcbiAgICAgICAgdGhpcy5jaXJjbGVLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgdGhpcy5jaXJjbGVzLnB1c2goeCk7XG4gICAgICAgIHRoaXMuY2lyY2xlcy5wdXNoKHkpO1xuICAgICAgICB0aGlzLmNpcmNsZXMucHVzaChyYWRpdXMpO1xuICAgIH1cblxuICAgIF9pbnNlcnRCb3hDZWxsKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIGNlbGxJbmRleDogbnVtYmVyLCB1aWQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmJveENlbGxzW2NlbGxJbmRleF0ucHVzaCh1aWQpO1xuICAgIH1cblxuICAgIF9pbnNlcnRDaXJjbGVDZWxsKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIGNlbGxJbmRleDogbnVtYmVyLCB1aWQ6IG51bWJlcikgIHtcbiAgICAgICAgdGhpcy5jaXJjbGVDZWxsc1tjZWxsSW5kZXhdLnB1c2godWlkKTtcbiAgICB9XG5cbiAgICBfcXVlcnkoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgaGl0VGVzdDogYm9vbGVhbiwgcHJlZGljYXRlPzogYW55KSB7XG4gICAgICAgIGlmICh4MiA8IDAgfHwgeDEgPiB0aGlzLndpZHRoIHx8IHkyIDwgMCB8fCB5MSA+IHRoaXMuaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGl0VGVzdCA/IGZhbHNlIDogW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGlmICh4MSA8PSAwICYmIHkxIDw9IDAgJiYgdGhpcy53aWR0aCA8PSB4MiAmJiB0aGlzLmhlaWdodCA8PSB5Mikge1xuICAgICAgICAgICAgaWYgKGhpdFRlc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGJveFVpZCA9IDA7IGJveFVpZCA8IHRoaXMuYm94S2V5cy5sZW5ndGg7IGJveFVpZCsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHRoaXMuYm94S2V5c1tib3hVaWRdLFxuICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy5iYm94ZXNbYm94VWlkICogNF0sXG4gICAgICAgICAgICAgICAgICAgIHkxOiB0aGlzLmJib3hlc1tib3hVaWQgKiA0ICsgMV0sXG4gICAgICAgICAgICAgICAgICAgIHgyOiB0aGlzLmJib3hlc1tib3hVaWQgKiA0ICsgMl0sXG4gICAgICAgICAgICAgICAgICAgIHkyOiB0aGlzLmJib3hlc1tib3hVaWQgKiA0ICsgM11cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGNpcmNsZVVpZCA9IDA7IGNpcmNsZVVpZCA8IHRoaXMuY2lyY2xlS2V5cy5sZW5ndGg7IGNpcmNsZVVpZCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMuY2lyY2xlc1tjaXJjbGVVaWQgKiAzXTtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gdGhpcy5jaXJjbGVzW2NpcmNsZVVpZCAqIDMgKyAxXTtcbiAgICAgICAgICAgICAgICBjb25zdCByYWRpdXMgPSB0aGlzLmNpcmNsZXNbY2lyY2xlVWlkICogMyArIDJdO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiB0aGlzLmNpcmNsZUtleXNbY2lyY2xlVWlkXSxcbiAgICAgICAgICAgICAgICAgICAgeDE6IHggLSByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgIHkxOiB5IC0gcmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICB4MjogeCArIHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgeTI6IHkgKyByYWRpdXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcmVkaWNhdGUgPyByZXN1bHQuZmlsdGVyKHByZWRpY2F0ZSkgOiByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeUFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgaGl0VGVzdCxcbiAgICAgICAgICAgICAgICBzZWVuVWlkczoge2JveDoge30sIGNpcmNsZToge319XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fZm9yRWFjaENlbGwoeDEsIHkxLCB4MiwgeTIsIHRoaXMuX3F1ZXJ5Q2VsbCwgcmVzdWx0LCBxdWVyeUFyZ3MsIHByZWRpY2F0ZSk7XG4gICAgICAgICAgICByZXR1cm4gaGl0VGVzdCA/IHJlc3VsdC5sZW5ndGggPiAwIDogcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3F1ZXJ5Q2lyY2xlKHg6IG51bWJlciwgeTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgaGl0VGVzdDogYm9vbGVhbiwgcHJlZGljYXRlPzogYW55KSB7XG4gICAgICAgIC8vIEluc2VydCBjaXJjbGUgaW50byBncmlkIGZvciBhbGwgY2VsbHMgaW4gdGhlIGNpcmN1bXNjcmliaW5nIHNxdWFyZVxuICAgICAgICAvLyBJdCdzIG1vcmUgdGhhbiBuZWNlc3NhcnkgKGJ5IGEgZmFjdG9yIG9mIDQvUEkpLCBidXQgZmFzdCB0byBpbnNlcnRcbiAgICAgICAgY29uc3QgeDEgPSB4IC0gcmFkaXVzO1xuICAgICAgICBjb25zdCB4MiA9IHggKyByYWRpdXM7XG4gICAgICAgIGNvbnN0IHkxID0geSAtIHJhZGl1cztcbiAgICAgICAgY29uc3QgeTIgPSB5ICsgcmFkaXVzO1xuICAgICAgICBpZiAoeDIgPCAwIHx8IHgxID4gdGhpcy53aWR0aCB8fCB5MiA8IDAgfHwgeTEgPiB0aGlzLmhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIGhpdFRlc3QgPyBmYWxzZSA6IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQm94IHF1ZXJ5IGVhcmx5IGV4aXRzIGlmIHRoZSBib3VuZGluZyBib3ggaXMgbGFyZ2VyIHRoYW4gdGhlIGdyaWQsIGJ1dCB3ZSBkb24ndCBkb1xuICAgICAgICAvLyB0aGUgZXF1aXZhbGVudCBjYWxjdWxhdGlvbiBmb3IgY2lyY2xlIHF1ZXJpZXMgYmVjYXVzZSBlYXJseSBleGl0IGlzIGxlc3MgbGlrZWx5XG4gICAgICAgIC8vIGFuZCB0aGUgY2FsY3VsYXRpb24gaXMgbW9yZSBleHBlbnNpdmVcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGNvbnN0IHF1ZXJ5QXJncyA9IHtcbiAgICAgICAgICAgIGhpdFRlc3QsXG4gICAgICAgICAgICBjaXJjbGU6IHt4LCB5LCByYWRpdXN9LFxuICAgICAgICAgICAgc2VlblVpZHM6IHtib3g6IHt9LCBjaXJjbGU6IHt9fVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9mb3JFYWNoQ2VsbCh4MSwgeTEsIHgyLCB5MiwgdGhpcy5fcXVlcnlDZWxsQ2lyY2xlLCByZXN1bHQsIHF1ZXJ5QXJncywgcHJlZGljYXRlKTtcbiAgICAgICAgcmV0dXJuIGhpdFRlc3QgPyByZXN1bHQubGVuZ3RoID4gMCA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICBxdWVyeSh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCBwcmVkaWNhdGU/OiBhbnkpOiBBcnJheTxhbnk+IHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9xdWVyeSh4MSwgeTEsIHgyLCB5MiwgZmFsc2UsIHByZWRpY2F0ZSk6IGFueSk7XG4gICAgfVxuXG4gICAgaGl0VGVzdCh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCBwcmVkaWNhdGU/OiBhbnkpOiBib29sZWFuICB7XG4gICAgICAgIHJldHVybiAodGhpcy5fcXVlcnkoeDEsIHkxLCB4MiwgeTIsIHRydWUsIHByZWRpY2F0ZSk6IGFueSk7XG4gICAgfVxuXG4gICAgaGl0VGVzdENpcmNsZSh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHByZWRpY2F0ZT86IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3F1ZXJ5Q2lyY2xlKHgsIHksIHJhZGl1cywgdHJ1ZSwgcHJlZGljYXRlKTogYW55KTtcbiAgICB9XG5cbiAgICBfcXVlcnlDZWxsKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIGNlbGxJbmRleDogbnVtYmVyLCByZXN1bHQ6IGFueSwgcXVlcnlBcmdzOiBhbnksIHByZWRpY2F0ZT86IGFueSkge1xuICAgICAgICBjb25zdCBzZWVuVWlkcyA9IHF1ZXJ5QXJncy5zZWVuVWlkcztcbiAgICAgICAgY29uc3QgYm94Q2VsbCA9IHRoaXMuYm94Q2VsbHNbY2VsbEluZGV4XTtcbiAgICAgICAgaWYgKGJveENlbGwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGJib3hlcyA9IHRoaXMuYmJveGVzO1xuICAgICAgICAgICAgZm9yIChjb25zdCBib3hVaWQgb2YgYm94Q2VsbCkge1xuICAgICAgICAgICAgICAgIGlmICghc2VlblVpZHMuYm94W2JveFVpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VlblVpZHMuYm94W2JveFVpZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBib3hVaWQgKiA0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHgxIDw9IGJib3hlc1tvZmZzZXQgKyAyXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh5MSA8PSBiYm94ZXNbb2Zmc2V0ICsgM10pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoeDIgPj0gYmJveGVzW29mZnNldCArIDBdKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHkyID49IGJib3hlc1tvZmZzZXQgKyAxXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZSh0aGlzLmJveEtleXNbYm94VWlkXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlBcmdzLmhpdFRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHRoaXMuYm94S2V5c1tib3hVaWRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogYmJveGVzW29mZnNldF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBiYm94ZXNbb2Zmc2V0ICsgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyOiBiYm94ZXNbb2Zmc2V0ICsgMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBiYm94ZXNbb2Zmc2V0ICsgM11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaXJjbGVDZWxsID0gdGhpcy5jaXJjbGVDZWxsc1tjZWxsSW5kZXhdO1xuICAgICAgICBpZiAoY2lyY2xlQ2VsbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgY2lyY2xlcyA9IHRoaXMuY2lyY2xlcztcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2lyY2xlVWlkIG9mIGNpcmNsZUNlbGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlZW5VaWRzLmNpcmNsZVtjaXJjbGVVaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZW5VaWRzLmNpcmNsZVtjaXJjbGVVaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY2lyY2xlVWlkICogMztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NpcmNsZUFuZFJlY3RDb2xsaWRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlc1tvZmZzZXRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlc1tvZmZzZXQgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXNbb2Zmc2V0ICsgMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5MikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZSh0aGlzLmNpcmNsZUtleXNbY2lyY2xlVWlkXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlBcmdzLmhpdFRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IGNpcmNsZXNbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gY2lyY2xlc1tvZmZzZXQgKyAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRpdXMgPSBjaXJjbGVzW29mZnNldCArIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiB0aGlzLmNpcmNsZUtleXNbY2lyY2xlVWlkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDE6IHggLSByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxOiB5IC0gcmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MjogeCArIHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTI6IHkgKyByYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9xdWVyeUNlbGxDaXJjbGUoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgY2VsbEluZGV4OiBudW1iZXIsIHJlc3VsdDogYW55LCBxdWVyeUFyZ3M6IGFueSwgcHJlZGljYXRlPzogYW55KSB7XG4gICAgICAgIGNvbnN0IGNpcmNsZSA9IHF1ZXJ5QXJncy5jaXJjbGU7XG4gICAgICAgIGNvbnN0IHNlZW5VaWRzID0gcXVlcnlBcmdzLnNlZW5VaWRzO1xuICAgICAgICBjb25zdCBib3hDZWxsID0gdGhpcy5ib3hDZWxsc1tjZWxsSW5kZXhdO1xuICAgICAgICBpZiAoYm94Q2VsbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgYmJveGVzID0gdGhpcy5iYm94ZXM7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJveFVpZCBvZiBib3hDZWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWVuVWlkcy5ib3hbYm94VWlkXSkge1xuICAgICAgICAgICAgICAgICAgICBzZWVuVWlkcy5ib3hbYm94VWlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGJveFVpZCAqIDQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaXJjbGVBbmRSZWN0Q29sbGlkZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZS54LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLnksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGUucmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmJveGVzW29mZnNldCArIDBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmJveGVzW29mZnNldCArIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmJveGVzW29mZnNldCArIDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmJveGVzW29mZnNldCArIDNdKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHRoaXMuYm94S2V5c1tib3hVaWRdKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaXJjbGVDZWxsID0gdGhpcy5jaXJjbGVDZWxsc1tjZWxsSW5kZXhdO1xuICAgICAgICBpZiAoY2lyY2xlQ2VsbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgY2lyY2xlcyA9IHRoaXMuY2lyY2xlcztcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2lyY2xlVWlkIG9mIGNpcmNsZUNlbGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlZW5VaWRzLmNpcmNsZVtjaXJjbGVVaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZW5VaWRzLmNpcmNsZVtjaXJjbGVVaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY2lyY2xlVWlkICogMztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NpcmNsZXNDb2xsaWRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlc1tvZmZzZXRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlc1tvZmZzZXQgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXNbb2Zmc2V0ICsgMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGUueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZS55LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLnJhZGl1cykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZSh0aGlzLmNpcmNsZUtleXNbY2lyY2xlVWlkXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2ZvckVhY2hDZWxsKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIGZuOiBhbnksIGFyZzE6IGFueSwgYXJnMj86IGFueSwgcHJlZGljYXRlPzogYW55KSB7XG4gICAgICAgIGNvbnN0IGN4MSA9IHRoaXMuX2NvbnZlcnRUb1hDZWxsQ29vcmQoeDEpO1xuICAgICAgICBjb25zdCBjeTEgPSB0aGlzLl9jb252ZXJ0VG9ZQ2VsbENvb3JkKHkxKTtcbiAgICAgICAgY29uc3QgY3gyID0gdGhpcy5fY29udmVydFRvWENlbGxDb29yZCh4Mik7XG4gICAgICAgIGNvbnN0IGN5MiA9IHRoaXMuX2NvbnZlcnRUb1lDZWxsQ29vcmQoeTIpO1xuXG4gICAgICAgIGZvciAobGV0IHggPSBjeDE7IHggPD0gY3gyOyB4KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSBjeTE7IHkgPD0gY3kyOyB5KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsSW5kZXggPSB0aGlzLnhDZWxsQ291bnQgKiB5ICsgeDtcbiAgICAgICAgICAgICAgICBpZiAoZm4uY2FsbCh0aGlzLCB4MSwgeTEsIHgyLCB5MiwgY2VsbEluZGV4LCBhcmcxLCBhcmcyLCBwcmVkaWNhdGUpKSByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY29udmVydFRvWENlbGxDb29yZCh4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMueENlbGxDb3VudCAtIDEsIE1hdGguZmxvb3IoeCAqIHRoaXMueFNjYWxlKSkpO1xuICAgIH1cblxuICAgIF9jb252ZXJ0VG9ZQ2VsbENvb3JkKHk6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4odGhpcy55Q2VsbENvdW50IC0gMSwgTWF0aC5mbG9vcih5ICogdGhpcy55U2NhbGUpKSk7XG4gICAgfVxuXG4gICAgX2NpcmNsZXNDb2xsaWRlKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHIxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIHIyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgZHggPSB4MiAtIHgxO1xuICAgICAgICBjb25zdCBkeSA9IHkyIC0geTE7XG4gICAgICAgIGNvbnN0IGJvdGhSYWRpaSA9IHIxICsgcjI7XG4gICAgICAgIHJldHVybiAoYm90aFJhZGlpICogYm90aFJhZGlpKSA+IChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgfVxuXG4gICAgX2NpcmNsZUFuZFJlY3RDb2xsaWRlKGNpcmNsZVg6IG51bWJlciwgY2lyY2xlWTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBoYWxmUmVjdFdpZHRoID0gKHgyIC0geDEpIC8gMjtcbiAgICAgICAgY29uc3QgZGlzdFggPSBNYXRoLmFicyhjaXJjbGVYIC0gKHgxICsgaGFsZlJlY3RXaWR0aCkpO1xuICAgICAgICBpZiAoZGlzdFggPiAoaGFsZlJlY3RXaWR0aCArIHJhZGl1cykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhbGZSZWN0SGVpZ2h0ID0gKHkyIC0geTEpIC8gMjtcbiAgICAgICAgY29uc3QgZGlzdFkgPSBNYXRoLmFicyhjaXJjbGVZIC0gKHkxICsgaGFsZlJlY3RIZWlnaHQpKTtcbiAgICAgICAgaWYgKGRpc3RZID4gKGhhbGZSZWN0SGVpZ2h0ICsgcmFkaXVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3RYIDw9IGhhbGZSZWN0V2lkdGggfHwgZGlzdFkgPD0gaGFsZlJlY3RIZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZHggPSBkaXN0WCAtIGhhbGZSZWN0V2lkdGg7XG4gICAgICAgIGNvbnN0IGR5ID0gZGlzdFkgLSBoYWxmUmVjdEhlaWdodDtcbiAgICAgICAgcmV0dXJuIChkeCAqIGR4ICsgZHkgKiBkeSA8PSAocmFkaXVzICogcmFkaXVzKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHcmlkSW5kZXg7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5cbmltcG9ydCB7bWF0NCwgdmVjNH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCAqIGFzIHN5bWJvbFNpemUgZnJvbSAnLi9zeW1ib2xfc2l6ZSc7XG5pbXBvcnQge2FkZER5bmFtaWNBdHRyaWJ1dGVzfSBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuLi9yZW5kZXIvcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBUcmFuc2Zvcm0gZnJvbSAnLi4vZ2VvL3RyYW5zZm9ybSc7XG5pbXBvcnQgdHlwZSBTeW1ib2xCdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvc3ltYm9sX2J1Y2tldCc7XG5pbXBvcnQgdHlwZSB7XG4gICAgR2x5cGhPZmZzZXRBcnJheSxcbiAgICBTeW1ib2xMaW5lVmVydGV4QXJyYXksXG4gICAgU3ltYm9sRHluYW1pY0xheW91dEFycmF5XG59IGZyb20gJy4uL2RhdGEvYXJyYXlfdHlwZXMnO1xuaW1wb3J0IHtXcml0aW5nTW9kZX0gZnJvbSAnLi4vc3ltYm9sL3NoYXBpbmcnO1xuXG5leHBvcnQge3VwZGF0ZUxpbmVMYWJlbHMsIGhpZGVHbHlwaHMsIGdldExhYmVsUGxhbmVNYXRyaXgsIGdldEdsQ29vcmRNYXRyaXgsIHByb2plY3QsIGdldFBlcnNwZWN0aXZlUmF0aW8sIHBsYWNlRmlyc3RBbmRMYXN0R2x5cGgsIHBsYWNlR2x5cGhBbG9uZ0xpbmUsIHh5VHJhbnNmb3JtTWF0NH07XG5cbi8qXG4gKiAjIE92ZXJ2aWV3IG9mIGNvb3JkaW5hdGUgc3BhY2VzXG4gKlxuICogIyMgVGlsZSBjb29yZGluYXRlIHNwYWNlc1xuICogRWFjaCBsYWJlbCBoYXMgYW4gYW5jaG9yLiBTb21lIGxhYmVscyBoYXZlIGNvcnJlc3BvbmRpbmcgbGluZSBnZW9tZXRyaWVzLlxuICogVGhlIHBvaW50cyBmb3IgYm90aCBhbmNob3JzIGFuZCBsaW5lcyBhcmUgc3RvcmVkIGluIHRpbGUgdW5pdHMuIEVhY2ggdGlsZSBoYXMgaXQncyBvd25cbiAqIGNvb3JkaW5hdGUgc3BhY2UgZ29pbmcgZnJvbSAoMCwgMCkgYXQgdGhlIHRvcCBsZWZ0IHRvIChFWFRFTlQsIEVYVEVOVCkgYXQgdGhlIGJvdHRvbSByaWdodC5cbiAqXG4gKiAjIyBHTCBjb29yZGluYXRlIHNwYWNlXG4gKiBBdCB0aGUgZW5kIG9mIGV2ZXJ5dGhpbmcsIHRoZSB2ZXJ0ZXggc2hhZGVyIG5lZWRzIHRvIHByb2R1Y2UgYSBwb3NpdGlvbiBpbiBHTCBjb29yZGluYXRlIHNwYWNlLFxuICogd2hpY2ggaXMgKC0xLCAxKSBhdCB0aGUgdG9wIGxlZnQgYW5kICgxLCAtMSkgaW4gdGhlIGJvdHRvbSByaWdodC5cbiAqXG4gKiAjIyBNYXAgcGl4ZWwgY29vcmRpbmF0ZSBzcGFjZXNcbiAqIEVhY2ggdGlsZSBoYXMgYSBwaXhlbCBjb29yZGluYXRlIHNwYWNlLiBJdCdzIGp1c3QgdGhlIHRpbGUgdW5pdHMgc2NhbGVkIHNvIHRoYXQgb25lIHVuaXQgaXNcbiAqIHdoYXRldmVyIGNvdW50cyBhcyAxIHBpeGVsIGF0IHRoZSBjdXJyZW50IHpvb20uXG4gKiBUaGlzIHNwYWNlIGlzIHVzZWQgZm9yIHBpdGNoLWFsaWdubWVudD1tYXAsIHJvdGF0aW9uLWFsaWdubWVudD1tYXBcbiAqXG4gKiAjIyBSb3RhdGVkIG1hcCBwaXhlbCBjb29yZGluYXRlIHNwYWNlc1xuICogTGlrZSB0aGUgYWJvdmUsIGJ1dCByb3RhdGVkIHNvIGF4aXMgb2YgdGhlIHNwYWNlIGFyZSBhbGlnbmVkIHdpdGggdGhlIHZpZXdwb3J0IGluc3RlYWQgb2YgdGhlIHRpbGUuXG4gKiBUaGlzIHNwYWNlIGlzIHVzZWQgZm9yIHBpdGNoLWFsaWdubWVudD1tYXAsIHJvdGF0aW9uLWFsaWdubWVudD12aWV3cG9ydFxuICpcbiAqICMjIFZpZXdwb3J0IHBpeGVsIGNvb3JkaW5hdGUgc3BhY2VcbiAqICgwLCAwKSBpcyBhdCB0aGUgdG9wIGxlZnQgb2YgdGhlIGNhbnZhcyBhbmQgKHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0KSBpcyBhdCB0aGUgYm90dG9tIHJpZ2h0IGNvcm5lclxuICogb2YgdGhlIGNhbnZhcy4gVGhpcyBzcGFjZSBpcyB1c2VkIGZvciBwaXRjaC1hbGlnbm1lbnQ9dmlld3BvcnRcbiAqXG4gKlxuICogIyBWZXJ0ZXggcHJvamVjdGlvblxuICogSXQgZ29lcyByb3VnaGx5IGxpa2UgdGhpczpcbiAqIDEuIHByb2plY3QgdGhlIGFuY2hvciBhbmQgbGluZSBmcm9tIHRpbGUgdW5pdHMgaW50byB0aGUgY29ycmVjdCBsYWJlbCBjb29yZGluYXRlIHNwYWNlXG4gKiAgICAgIC0gbWFwIHBpeGVsIHNwYWNlICAgICAgICAgICBwaXRjaC1hbGlnbm1lbnQ9bWFwICAgICAgICAgcm90YXRpb24tYWxpZ25tZW50PW1hcFxuICogICAgICAtIHJvdGF0ZWQgbWFwIHBpeGVsIHNwYWNlICAgcGl0Y2gtYWxpZ25tZW50PW1hcCAgICAgICAgIHJvdGF0aW9uLWFsaWdubWVudD12aWV3cG9ydFxuICogICAgICAtIHZpZXdwb3J0IHBpeGVsIHNwYWNlICAgICAgcGl0Y2gtYWxpZ25tZW50PXZpZXdwb3J0ICAgIHJvdGF0aW9uLWFsaWdubWVudD0qXG4gKiAyLiBpZiB0aGUgbGFiZWwgZm9sbG93cyBhIGxpbmUsIGZpbmQgdGhlIHBvaW50IGFsb25nIHRoZSBsaW5lIHRoYXQgaXMgdGhlIGNvcnJlY3QgZGlzdGFuY2UgZnJvbSB0aGUgYW5jaG9yLlxuICogMy4gYWRkIHRoZSBnbHlwaCdzIGNvcm5lciBvZmZzZXQgdG8gdGhlIHBvaW50IGZyb20gc3RlcCAzXG4gKiA0LiBjb252ZXJ0IGZyb20gdGhlIGxhYmVsIGNvb3JkaW5hdGUgc3BhY2UgdG8gZ2wgY29vcmRpbmF0ZXNcbiAqXG4gKiBGb3IgaG9yaXpvbnRhbCBsYWJlbHMgd2Ugd2FudCB0byBkbyBzdGVwIDEgaW4gdGhlIHNoYWRlciBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyAobm8gY3B1IHdvcmspLlxuICogICAgICBUaGlzIGlzIHdoYXQgYHVfbGFiZWxfcGxhbmVfbWF0cml4YCBpcyB1c2VkIGZvci5cbiAqIEZvciBsYWJlbHMgYWxpZ25lZCB3aXRoIGxpbmVzIHdlIGhhdmUgdG8gc3RlcHMgMSBhbmQgMiBvbiB0aGUgY3B1IHNpbmNlIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBsaW5lIGdlb21ldHJ5LlxuICogICAgICBUaGlzIGlzIHdoYXQgYHVwZGF0ZUxpbmVMYWJlbHMoLi4uKWAgZG9lcy5cbiAqICAgICAgU2luY2UgdGhlIGNvbnZlcnNpb24gaXMgaGFuZGxlZCBvbiB0aGUgY3B1IHdlIGp1c3Qgc2V0IGB1X2xhYmVsX3BsYW5lX21hdHJpeGAgdG8gYW4gaWRlbnRpdHkgbWF0cml4LlxuICpcbiAqIFN0ZXBzIDMgYW5kIDQgYXJlIGRvbmUgaW4gdGhlIHNoYWRlcnMgZm9yIGFsbCBsYWJlbHMuXG4gKi9cblxuLypcbiAqIFJldHVybnMgYSBtYXRyaXggZm9yIGNvbnZlcnRpbmcgZnJvbSB0aWxlIHVuaXRzIHRvIHRoZSBjb3JyZWN0IGxhYmVsIGNvb3JkaW5hdGUgc3BhY2UuXG4gKi9cbmZ1bmN0aW9uIGdldExhYmVsUGxhbmVNYXRyaXgocG9zTWF0cml4OiBtYXQ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXRjaFdpdGhNYXA6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVdpdGhNYXA6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbHNUb1RpbGVVbml0czogbnVtYmVyKSB7XG4gICAgY29uc3QgbSA9IG1hdDQuY3JlYXRlKCk7XG4gICAgaWYgKHBpdGNoV2l0aE1hcCkge1xuICAgICAgICBtYXQ0LnNjYWxlKG0sIG0sIFsxIC8gcGl4ZWxzVG9UaWxlVW5pdHMsIDEgLyBwaXhlbHNUb1RpbGVVbml0cywgMV0pO1xuICAgICAgICBpZiAoIXJvdGF0ZVdpdGhNYXApIHtcbiAgICAgICAgICAgIG1hdDQucm90YXRlWihtLCBtLCB0cmFuc2Zvcm0uYW5nbGUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbWF0NC5tdWx0aXBseShtLCB0cmFuc2Zvcm0ubGFiZWxQbGFuZU1hdHJpeCwgcG9zTWF0cml4KTtcbiAgICB9XG4gICAgcmV0dXJuIG07XG59XG5cbi8qXG4gKiBSZXR1cm5zIGEgbWF0cml4IGZvciBjb252ZXJ0aW5nIGZyb20gdGhlIGNvcnJlY3QgbGFiZWwgY29vcmRpbmF0ZSBzcGFjZSB0byBnbCBjb29yZHMuXG4gKi9cbmZ1bmN0aW9uIGdldEdsQ29vcmRNYXRyaXgocG9zTWF0cml4OiBtYXQ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwaXRjaFdpdGhNYXA6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVdpdGhNYXA6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbHNUb1RpbGVVbml0czogbnVtYmVyKSB7XG4gICAgaWYgKHBpdGNoV2l0aE1hcCkge1xuICAgICAgICBjb25zdCBtID0gbWF0NC5jbG9uZShwb3NNYXRyaXgpO1xuICAgICAgICBtYXQ0LnNjYWxlKG0sIG0sIFtwaXhlbHNUb1RpbGVVbml0cywgcGl4ZWxzVG9UaWxlVW5pdHMsIDFdKTtcbiAgICAgICAgaWYgKCFyb3RhdGVXaXRoTWFwKSB7XG4gICAgICAgICAgICBtYXQ0LnJvdGF0ZVoobSwgbSwgLXRyYW5zZm9ybS5hbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybS5nbENvb3JkTWF0cml4O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvamVjdChwb2ludDogUG9pbnQsIG1hdHJpeDogbWF0NCkge1xuICAgIGNvbnN0IHBvcyA9IFtwb2ludC54LCBwb2ludC55LCAwLCAxXTtcbiAgICB4eVRyYW5zZm9ybU1hdDQocG9zLCBwb3MsIG1hdHJpeCk7XG4gICAgY29uc3QgdyA9IHBvc1szXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwb2ludDogbmV3IFBvaW50KHBvc1swXSAvIHcsIHBvc1sxXSAvIHcpLFxuICAgICAgICBzaWduZWREaXN0YW5jZUZyb21DYW1lcmE6IHdcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQZXJzcGVjdGl2ZVJhdGlvKGNhbWVyYVRvQ2VudGVyRGlzdGFuY2U6IG51bWJlciwgc2lnbmVkRGlzdGFuY2VGcm9tQ2FtZXJhOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAwLjUgKyAwLjUgKiAoY2FtZXJhVG9DZW50ZXJEaXN0YW5jZSAvIHNpZ25lZERpc3RhbmNlRnJvbUNhbWVyYSk7XG59XG5cbmZ1bmN0aW9uIGlzVmlzaWJsZShhbmNob3JQb3M6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdLFxuICAgICAgICAgICAgICAgICAgIGNsaXBwaW5nQnVmZmVyOiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gICAgY29uc3QgeCA9IGFuY2hvclBvc1swXSAvIGFuY2hvclBvc1szXTtcbiAgICBjb25zdCB5ID0gYW5jaG9yUG9zWzFdIC8gYW5jaG9yUG9zWzNdO1xuICAgIGNvbnN0IGluUGFkZGVkVmlld3BvcnQgPSAoXG4gICAgICAgIHggPj0gLWNsaXBwaW5nQnVmZmVyWzBdICYmXG4gICAgICAgIHggPD0gY2xpcHBpbmdCdWZmZXJbMF0gJiZcbiAgICAgICAgeSA+PSAtY2xpcHBpbmdCdWZmZXJbMV0gJiZcbiAgICAgICAgeSA8PSBjbGlwcGluZ0J1ZmZlclsxXSk7XG4gICAgcmV0dXJuIGluUGFkZGVkVmlld3BvcnQ7XG59XG5cbi8qXG4gKiAgVXBkYXRlIHRoZSBgZHluYW1pY0xheW91dFZlcnRleEJ1ZmZlcmAgZm9yIHRoZSBidWZmZXIgd2l0aCB0aGUgY29ycmVjdCBnbHlwaCBwb3NpdGlvbnMgZm9yIHRoZSBjdXJyZW50IG1hcCB2aWV3LlxuICogIFRoaXMgaXMgb25seSBydW4gb24gbGFiZWxzIHRoYXQgYXJlIGFsaWduZWQgd2l0aCBsaW5lcy4gSG9yaXpvbnRhbCBsYWJlbHMgYXJlIGhhbmRsZWQgZW50aXJlbHkgaW4gdGhlIHNoYWRlci5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlTGluZUxhYmVscyhidWNrZXQ6IFN5bWJvbEJ1Y2tldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zTWF0cml4OiBtYXQ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwYWludGVyOiBQYWludGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RleHQ6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsUGxhbmVNYXRyaXg6IG1hdDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdsQ29vcmRNYXRyaXg6IG1hdDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBpdGNoV2l0aE1hcDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAga2VlcFVwcmlnaHQ6IGJvb2xlYW4pIHtcblxuICAgIGNvbnN0IHNpemVEYXRhID0gaXNUZXh0ID8gYnVja2V0LnRleHRTaXplRGF0YSA6IGJ1Y2tldC5pY29uU2l6ZURhdGE7XG4gICAgY29uc3QgcGFydGlhbGx5RXZhbHVhdGVkU2l6ZSA9IHN5bWJvbFNpemUuZXZhbHVhdGVTaXplRm9yWm9vbShzaXplRGF0YSwgcGFpbnRlci50cmFuc2Zvcm0uem9vbSk7XG5cbiAgICBjb25zdCBjbGlwcGluZ0J1ZmZlciA9IFsyNTYgLyBwYWludGVyLndpZHRoICogMiArIDEsIDI1NiAvIHBhaW50ZXIuaGVpZ2h0ICogMiArIDFdO1xuXG4gICAgY29uc3QgZHluYW1pY0xheW91dFZlcnRleEFycmF5ID0gaXNUZXh0ID9cbiAgICAgICAgYnVja2V0LnRleHQuZHluYW1pY0xheW91dFZlcnRleEFycmF5IDpcbiAgICAgICAgYnVja2V0Lmljb24uZHluYW1pY0xheW91dFZlcnRleEFycmF5O1xuICAgIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheS5jbGVhcigpO1xuXG4gICAgY29uc3QgbGluZVZlcnRleEFycmF5ID0gYnVja2V0LmxpbmVWZXJ0ZXhBcnJheTtcbiAgICBjb25zdCBwbGFjZWRTeW1ib2xzID0gaXNUZXh0ID8gYnVja2V0LnRleHQucGxhY2VkU3ltYm9sQXJyYXkgOiBidWNrZXQuaWNvbi5wbGFjZWRTeW1ib2xBcnJheTtcblxuICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gcGFpbnRlci50cmFuc2Zvcm0ud2lkdGggLyBwYWludGVyLnRyYW5zZm9ybS5oZWlnaHQ7XG5cbiAgICBsZXQgdXNlVmVydGljYWwgPSBmYWxzZTtcblxuICAgIGZvciAobGV0IHMgPSAwOyBzIDwgcGxhY2VkU3ltYm9scy5sZW5ndGg7IHMrKykge1xuICAgICAgICBjb25zdCBzeW1ib2w6IGFueSA9IHBsYWNlZFN5bWJvbHMuZ2V0KHMpO1xuXG4gICAgICAgIC8vIERvbid0IGRvIGNhbGN1bGF0aW9ucyBmb3IgdmVydGljYWwgZ2x5cGhzIHVubGVzcyB0aGUgcHJldmlvdXMgc3ltYm9sIHdhcyBob3Jpem9udGFsXG4gICAgICAgIC8vIGFuZCB3ZSBkZXRlcm1pbmVkIHRoYXQgdmVydGljYWwgZ2x5cGhzIHdlcmUgbmVjZXNzYXJ5LlxuICAgICAgICAvLyBBbHNvIGRvbid0IGRvIGNhbGN1bGF0aW9ucyBmb3Igc3ltYm9scyB0aGF0IGFyZSBjb2xsaWRlZCBhbmQgZnVsbHkgZmFkZWQgb3V0XG4gICAgICAgIGlmIChzeW1ib2wuaGlkZGVuIHx8IHN5bWJvbC53cml0aW5nTW9kZSA9PT0gV3JpdGluZ01vZGUudmVydGljYWwgJiYgIXVzZVZlcnRpY2FsKSB7XG4gICAgICAgICAgICBoaWRlR2x5cGhzKHN5bWJvbC5udW1HbHlwaHMsIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBd2t3YXJkLi4uIGJ1dCB3ZSdyZSBjb3VudGluZyBvbiB0aGUgcGFpcmVkIFwidmVydGljYWxcIiBzeW1ib2wgY29taW5nIGltbWVkaWF0ZWx5IGFmdGVyIGl0cyBob3Jpem9udGFsIGNvdW50ZXJwYXJ0XG4gICAgICAgIHVzZVZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3QgYW5jaG9yUG9zID0gW3N5bWJvbC5hbmNob3JYLCBzeW1ib2wuYW5jaG9yWSwgMCwgMV07XG4gICAgICAgIHZlYzQudHJhbnNmb3JtTWF0NChhbmNob3JQb3MsIGFuY2hvclBvcywgcG9zTWF0cml4KTtcblxuICAgICAgICAvLyBEb24ndCBib3RoZXIgY2FsY3VsYXRpbmcgdGhlIGNvcnJlY3QgcG9pbnQgZm9yIGludmlzaWJsZSBsYWJlbHMuXG4gICAgICAgIGlmICghaXNWaXNpYmxlKGFuY2hvclBvcywgY2xpcHBpbmdCdWZmZXIpKSB7XG4gICAgICAgICAgICBoaWRlR2x5cGhzKHN5bWJvbC5udW1HbHlwaHMsIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbWVyYVRvQW5jaG9yRGlzdGFuY2UgPSBhbmNob3JQb3NbM107XG4gICAgICAgIGNvbnN0IHBlcnNwZWN0aXZlUmF0aW8gPSBnZXRQZXJzcGVjdGl2ZVJhdGlvKHBhaW50ZXIudHJhbnNmb3JtLmNhbWVyYVRvQ2VudGVyRGlzdGFuY2UsIGNhbWVyYVRvQW5jaG9yRGlzdGFuY2UpO1xuXG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gc3ltYm9sU2l6ZS5ldmFsdWF0ZVNpemVGb3JGZWF0dXJlKHNpemVEYXRhLCBwYXJ0aWFsbHlFdmFsdWF0ZWRTaXplLCBzeW1ib2wpO1xuICAgICAgICBjb25zdCBwaXRjaFNjYWxlZEZvbnRTaXplID0gcGl0Y2hXaXRoTWFwID8gZm9udFNpemUgLyBwZXJzcGVjdGl2ZVJhdGlvIDogZm9udFNpemUgKiBwZXJzcGVjdGl2ZVJhdGlvO1xuXG4gICAgICAgIGNvbnN0IHRpbGVBbmNob3JQb2ludCA9IG5ldyBQb2ludChzeW1ib2wuYW5jaG9yWCwgc3ltYm9sLmFuY2hvclkpO1xuICAgICAgICBjb25zdCBhbmNob3JQb2ludCA9IHByb2plY3QodGlsZUFuY2hvclBvaW50LCBsYWJlbFBsYW5lTWF0cml4KS5wb2ludDtcbiAgICAgICAgY29uc3QgcHJvamVjdGlvbkNhY2hlID0ge307XG5cbiAgICAgICAgY29uc3QgcGxhY2VVbmZsaXBwZWQ6IGFueSA9IHBsYWNlR2x5cGhzQWxvbmdMaW5lKHN5bWJvbCwgcGl0Y2hTY2FsZWRGb250U2l6ZSwgZmFsc2UgLyp1bmZsaXBwZWQqLywga2VlcFVwcmlnaHQsIHBvc01hdHJpeCwgbGFiZWxQbGFuZU1hdHJpeCwgZ2xDb29yZE1hdHJpeCxcbiAgICAgICAgICAgIGJ1Y2tldC5nbHlwaE9mZnNldEFycmF5LCBsaW5lVmVydGV4QXJyYXksIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSwgYW5jaG9yUG9pbnQsIHRpbGVBbmNob3JQb2ludCwgcHJvamVjdGlvbkNhY2hlLCBhc3BlY3RSYXRpbyk7XG5cbiAgICAgICAgdXNlVmVydGljYWwgPSBwbGFjZVVuZmxpcHBlZC51c2VWZXJ0aWNhbDtcblxuICAgICAgICBpZiAocGxhY2VVbmZsaXBwZWQubm90RW5vdWdoUm9vbSB8fCB1c2VWZXJ0aWNhbCB8fFxuICAgICAgICAgICAgKHBsYWNlVW5mbGlwcGVkLm5lZWRzRmxpcHBpbmcgJiZcbiAgICAgICAgICAgICBwbGFjZUdseXBoc0Fsb25nTGluZShzeW1ib2wsIHBpdGNoU2NhbGVkRm9udFNpemUsIHRydWUgLypmbGlwcGVkKi8sIGtlZXBVcHJpZ2h0LCBwb3NNYXRyaXgsIGxhYmVsUGxhbmVNYXRyaXgsIGdsQ29vcmRNYXRyaXgsXG4gICAgICAgICAgICAgICAgIGJ1Y2tldC5nbHlwaE9mZnNldEFycmF5LCBsaW5lVmVydGV4QXJyYXksIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSwgYW5jaG9yUG9pbnQsIHRpbGVBbmNob3JQb2ludCwgcHJvamVjdGlvbkNhY2hlLCBhc3BlY3RSYXRpbykubm90RW5vdWdoUm9vbSkpIHtcbiAgICAgICAgICAgIGhpZGVHbHlwaHMoc3ltYm9sLm51bUdseXBocywgZHluYW1pY0xheW91dFZlcnRleEFycmF5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1RleHQpIHtcbiAgICAgICAgYnVja2V0LnRleHQuZHluYW1pY0xheW91dFZlcnRleEJ1ZmZlci51cGRhdGVEYXRhKGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnVja2V0Lmljb24uZHluYW1pY0xheW91dFZlcnRleEJ1ZmZlci51cGRhdGVEYXRhKGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwbGFjZUZpcnN0QW5kTGFzdEdseXBoKGZvbnRTY2FsZTogbnVtYmVyLCBnbHlwaE9mZnNldEFycmF5OiBHbHlwaE9mZnNldEFycmF5LCBsaW5lT2Zmc2V0WDogbnVtYmVyLCBsaW5lT2Zmc2V0WTogbnVtYmVyLCBmbGlwOiBib29sZWFuLCBhbmNob3JQb2ludDogUG9pbnQsIHRpbGVBbmNob3JQb2ludDogUG9pbnQsIHN5bWJvbDogYW55LCBsaW5lVmVydGV4QXJyYXk6IFN5bWJvbExpbmVWZXJ0ZXhBcnJheSwgbGFiZWxQbGFuZU1hdHJpeDogbWF0NCwgcHJvamVjdGlvbkNhY2hlOiBhbnkpIHtcbiAgICBjb25zdCBnbHlwaEVuZEluZGV4ID0gc3ltYm9sLmdseXBoU3RhcnRJbmRleCArIHN5bWJvbC5udW1HbHlwaHM7XG4gICAgY29uc3QgbGluZVN0YXJ0SW5kZXggPSBzeW1ib2wubGluZVN0YXJ0SW5kZXg7XG4gICAgY29uc3QgbGluZUVuZEluZGV4ID0gc3ltYm9sLmxpbmVTdGFydEluZGV4ICsgc3ltYm9sLmxpbmVMZW5ndGg7XG5cbiAgICBjb25zdCBmaXJzdEdseXBoT2Zmc2V0ID0gZ2x5cGhPZmZzZXRBcnJheS5nZXRvZmZzZXRYKHN5bWJvbC5nbHlwaFN0YXJ0SW5kZXgpO1xuICAgIGNvbnN0IGxhc3RHbHlwaE9mZnNldCA9IGdseXBoT2Zmc2V0QXJyYXkuZ2V0b2Zmc2V0WChnbHlwaEVuZEluZGV4IC0gMSk7XG5cbiAgICBjb25zdCBmaXJzdFBsYWNlZEdseXBoID0gcGxhY2VHbHlwaEFsb25nTGluZShmb250U2NhbGUgKiBmaXJzdEdseXBoT2Zmc2V0LCBsaW5lT2Zmc2V0WCwgbGluZU9mZnNldFksIGZsaXAsIGFuY2hvclBvaW50LCB0aWxlQW5jaG9yUG9pbnQsIHN5bWJvbC5zZWdtZW50LFxuICAgICAgICBsaW5lU3RhcnRJbmRleCwgbGluZUVuZEluZGV4LCBsaW5lVmVydGV4QXJyYXksIGxhYmVsUGxhbmVNYXRyaXgsIHByb2plY3Rpb25DYWNoZSk7XG4gICAgaWYgKCFmaXJzdFBsYWNlZEdseXBoKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IGxhc3RQbGFjZWRHbHlwaCA9IHBsYWNlR2x5cGhBbG9uZ0xpbmUoZm9udFNjYWxlICogbGFzdEdseXBoT2Zmc2V0LCBsaW5lT2Zmc2V0WCwgbGluZU9mZnNldFksIGZsaXAsIGFuY2hvclBvaW50LCB0aWxlQW5jaG9yUG9pbnQsIHN5bWJvbC5zZWdtZW50LFxuICAgICAgICBsaW5lU3RhcnRJbmRleCwgbGluZUVuZEluZGV4LCBsaW5lVmVydGV4QXJyYXksIGxhYmVsUGxhbmVNYXRyaXgsIHByb2plY3Rpb25DYWNoZSk7XG4gICAgaWYgKCFsYXN0UGxhY2VkR2x5cGgpXG4gICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHtmaXJzdDogZmlyc3RQbGFjZWRHbHlwaCwgbGFzdDogbGFzdFBsYWNlZEdseXBofTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZXNPcmllbnRhdGlvbkNoYW5nZSh3cml0aW5nTW9kZSwgZmlyc3RQb2ludCwgbGFzdFBvaW50LCBhc3BlY3RSYXRpbykge1xuICAgIGlmICh3cml0aW5nTW9kZSA9PT0gV3JpdGluZ01vZGUuaG9yaXpvbnRhbCkge1xuICAgICAgICAvLyBPbiB0b3Agb2YgY2hvb3Npbmcgd2hldGhlciB0byBmbGlwLCBjaG9vc2Ugd2hldGhlciB0byByZW5kZXIgdGhpcyB2ZXJzaW9uIG9mIHRoZSBnbHlwaHMgb3IgdGhlIGFsdGVybmF0ZVxuICAgICAgICAvLyB2ZXJ0aWNhbCBnbHlwaHMuIFdlIGNhbid0IGp1c3QgZmlsdGVyIG91dCB2ZXJ0aWNhbCBnbHlwaHMgaW4gdGhlIGhvcml6b250YWwgcmFuZ2UgYmVjYXVzZSB0aGUgaG9yaXpvbnRhbFxuICAgICAgICAvLyBhbmQgdmVydGljYWwgdmVyc2lvbnMgY2FuIGhhdmUgc2xpZ2h0bHkgZGlmZmVyZW50IHByb2plY3Rpb25zIHdoaWNoIGNvdWxkIGxlYWQgdG8gYW5nbGVzIHdoZXJlIGJvdGggb3JcbiAgICAgICAgLy8gbmVpdGhlciBzaG93ZWQuXG4gICAgICAgIGNvbnN0IHJpc2UgPSBNYXRoLmFicyhsYXN0UG9pbnQueSAtIGZpcnN0UG9pbnQueSk7XG4gICAgICAgIGNvbnN0IHJ1biA9IE1hdGguYWJzKGxhc3RQb2ludC54IC0gZmlyc3RQb2ludC54KSAqIGFzcGVjdFJhdGlvO1xuICAgICAgICBpZiAocmlzZSA+IHJ1bikge1xuICAgICAgICAgICAgcmV0dXJuIHt1c2VWZXJ0aWNhbDogdHJ1ZX07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAod3JpdGluZ01vZGUgPT09IFdyaXRpbmdNb2RlLnZlcnRpY2FsID8gZmlyc3RQb2ludC55IDwgbGFzdFBvaW50LnkgOiBmaXJzdFBvaW50LnggPiBsYXN0UG9pbnQueCkge1xuICAgICAgICAvLyBJbmNsdWRlcyBcImhvcml6b250YWxPbmx5XCIgY2FzZSBmb3IgbGFiZWxzIHdpdGhvdXQgdmVydGljYWwgZ2x5cGhzXG4gICAgICAgIHJldHVybiB7bmVlZHNGbGlwcGluZzogdHJ1ZX07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHBsYWNlR2x5cGhzQWxvbmdMaW5lKHN5bWJvbCwgZm9udFNpemUsIGZsaXAsIGtlZXBVcHJpZ2h0LCBwb3NNYXRyaXgsIGxhYmVsUGxhbmVNYXRyaXgsIGdsQ29vcmRNYXRyaXgsIGdseXBoT2Zmc2V0QXJyYXksIGxpbmVWZXJ0ZXhBcnJheSwgZHluYW1pY0xheW91dFZlcnRleEFycmF5LCBhbmNob3JQb2ludCwgdGlsZUFuY2hvclBvaW50LCBwcm9qZWN0aW9uQ2FjaGUsIGFzcGVjdFJhdGlvKSB7XG4gICAgY29uc3QgZm9udFNjYWxlID0gZm9udFNpemUgLyAyNDtcbiAgICBjb25zdCBsaW5lT2Zmc2V0WCA9IHN5bWJvbC5saW5lT2Zmc2V0WCAqIGZvbnRTY2FsZTtcbiAgICBjb25zdCBsaW5lT2Zmc2V0WSA9IHN5bWJvbC5saW5lT2Zmc2V0WSAqIGZvbnRTY2FsZTtcblxuICAgIGxldCBwbGFjZWRHbHlwaHM7XG4gICAgaWYgKHN5bWJvbC5udW1HbHlwaHMgPiAxKSB7XG4gICAgICAgIGNvbnN0IGdseXBoRW5kSW5kZXggPSBzeW1ib2wuZ2x5cGhTdGFydEluZGV4ICsgc3ltYm9sLm51bUdseXBocztcbiAgICAgICAgY29uc3QgbGluZVN0YXJ0SW5kZXggPSBzeW1ib2wubGluZVN0YXJ0SW5kZXg7XG4gICAgICAgIGNvbnN0IGxpbmVFbmRJbmRleCA9IHN5bWJvbC5saW5lU3RhcnRJbmRleCArIHN5bWJvbC5saW5lTGVuZ3RoO1xuXG4gICAgICAgIC8vIFBsYWNlIHRoZSBmaXJzdCBhbmQgdGhlIGxhc3QgZ2x5cGggaW4gdGhlIGxhYmVsIGZpcnN0LCBzbyB3ZSBjYW4gZmlndXJlIG91dFxuICAgICAgICAvLyB0aGUgb3ZlcmFsbCBvcmllbnRhdGlvbiBvZiB0aGUgbGFiZWwgYW5kIGRldGVybWluZSB3aGV0aGVyIGl0IG5lZWRzIHRvIGJlIGZsaXBwZWQgaW4ga2VlcFVwcmlnaHQgbW9kZVxuICAgICAgICBjb25zdCBmaXJzdEFuZExhc3RHbHlwaCA9IHBsYWNlRmlyc3RBbmRMYXN0R2x5cGgoZm9udFNjYWxlLCBnbHlwaE9mZnNldEFycmF5LCBsaW5lT2Zmc2V0WCwgbGluZU9mZnNldFksIGZsaXAsIGFuY2hvclBvaW50LCB0aWxlQW5jaG9yUG9pbnQsIHN5bWJvbCwgbGluZVZlcnRleEFycmF5LCBsYWJlbFBsYW5lTWF0cml4LCBwcm9qZWN0aW9uQ2FjaGUpO1xuICAgICAgICBpZiAoIWZpcnN0QW5kTGFzdEdseXBoKSB7XG4gICAgICAgICAgICByZXR1cm4ge25vdEVub3VnaFJvb206IHRydWV9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBwcm9qZWN0KGZpcnN0QW5kTGFzdEdseXBoLmZpcnN0LnBvaW50LCBnbENvb3JkTWF0cml4KS5wb2ludDtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gcHJvamVjdChmaXJzdEFuZExhc3RHbHlwaC5sYXN0LnBvaW50LCBnbENvb3JkTWF0cml4KS5wb2ludDtcblxuICAgICAgICBpZiAoa2VlcFVwcmlnaHQgJiYgIWZsaXApIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWVudGF0aW9uQ2hhbmdlID0gcmVxdWlyZXNPcmllbnRhdGlvbkNoYW5nZShzeW1ib2wud3JpdGluZ01vZGUsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCwgYXNwZWN0UmF0aW8pO1xuICAgICAgICAgICAgaWYgKG9yaWVudGF0aW9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWVudGF0aW9uQ2hhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcGxhY2VkR2x5cGhzID0gW2ZpcnN0QW5kTGFzdEdseXBoLmZpcnN0XTtcbiAgICAgICAgZm9yIChsZXQgZ2x5cGhJbmRleCA9IHN5bWJvbC5nbHlwaFN0YXJ0SW5kZXggKyAxOyBnbHlwaEluZGV4IDwgZ2x5cGhFbmRJbmRleCAtIDE7IGdseXBoSW5kZXgrKykge1xuICAgICAgICAgICAgLy8gU2luY2UgZmlyc3QgYW5kIGxhc3QgZ2x5cGggZml0IG9uIHRoZSBsaW5lLCB3ZSdyZSBzdXJlIHRoYXQgdGhlIHJlc3Qgb2YgdGhlIGdseXBocyBjYW4gYmUgcGxhY2VkXG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgICBwbGFjZWRHbHlwaHMucHVzaChwbGFjZUdseXBoQWxvbmdMaW5lKGZvbnRTY2FsZSAqIGdseXBoT2Zmc2V0QXJyYXkuZ2V0b2Zmc2V0WChnbHlwaEluZGV4KSwgbGluZU9mZnNldFgsIGxpbmVPZmZzZXRZLCBmbGlwLCBhbmNob3JQb2ludCwgdGlsZUFuY2hvclBvaW50LCBzeW1ib2wuc2VnbWVudCxcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnRJbmRleCwgbGluZUVuZEluZGV4LCBsaW5lVmVydGV4QXJyYXksIGxhYmVsUGxhbmVNYXRyaXgsIHByb2plY3Rpb25DYWNoZSkpO1xuICAgICAgICB9XG4gICAgICAgIHBsYWNlZEdseXBocy5wdXNoKGZpcnN0QW5kTGFzdEdseXBoLmxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9ubHkgYSBzaW5nbGUgZ2x5cGggdG8gcGxhY2VcbiAgICAgICAgLy8gU28sIGRldGVybWluZSB3aGV0aGVyIHRvIGZsaXAgYmFzZWQgb24gcHJvamVjdGVkIGFuZ2xlIG9mIHRoZSBsaW5lIHNlZ21lbnQgaXQncyBvblxuICAgICAgICBpZiAoa2VlcFVwcmlnaHQgJiYgIWZsaXApIHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBwcm9qZWN0KHRpbGVBbmNob3JQb2ludCwgcG9zTWF0cml4KS5wb2ludDtcbiAgICAgICAgICAgIGNvbnN0IHRpbGVWZXJ0ZXhJbmRleCA9IChzeW1ib2wubGluZVN0YXJ0SW5kZXggKyBzeW1ib2wuc2VnbWVudCArIDEpO1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICAgICAgY29uc3QgdGlsZVNlZ21lbnRFbmQgPSBuZXcgUG9pbnQobGluZVZlcnRleEFycmF5LmdldHgodGlsZVZlcnRleEluZGV4KSwgbGluZVZlcnRleEFycmF5LmdldHkodGlsZVZlcnRleEluZGV4KSk7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0ZWRWZXJ0ZXggPSBwcm9qZWN0KHRpbGVTZWdtZW50RW5kLCBwb3NNYXRyaXgpO1xuICAgICAgICAgICAgLy8gV2Uga25vdyB0aGUgYW5jaG9yIHdpbGwgYmUgaW4gdGhlIHZpZXdwb3J0LCBidXQgdGhlIGVuZCBvZiB0aGUgbGluZSBzZWdtZW50IG1heSBiZVxuICAgICAgICAgICAgLy8gYmVoaW5kIHRoZSBwbGFuZSBvZiB0aGUgY2FtZXJhLCBpbiB3aGljaCBjYXNlIHdlIGNhbiB1c2UgYSBwb2ludCBhdCBhbnkgYXJiaXRyYXJ5IChjbG9zZXIpXG4gICAgICAgICAgICAvLyBwb2ludCBvbiB0aGUgc2VnbWVudC5cbiAgICAgICAgICAgIGNvbnN0IGIgPSAocHJvamVjdGVkVmVydGV4LnNpZ25lZERpc3RhbmNlRnJvbUNhbWVyYSA+IDApID9cbiAgICAgICAgICAgICAgICBwcm9qZWN0ZWRWZXJ0ZXgucG9pbnQgOlxuICAgICAgICAgICAgICAgIHByb2plY3RUcnVuY2F0ZWRMaW5lU2VnbWVudCh0aWxlQW5jaG9yUG9pbnQsIHRpbGVTZWdtZW50RW5kLCBhLCAxLCBwb3NNYXRyaXgpO1xuXG4gICAgICAgICAgICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZSA9IHJlcXVpcmVzT3JpZW50YXRpb25DaGFuZ2Uoc3ltYm9sLndyaXRpbmdNb2RlLCBhLCBiLCBhc3BlY3RSYXRpbyk7XG4gICAgICAgICAgICBpZiAob3JpZW50YXRpb25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZW50YXRpb25DaGFuZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICBjb25zdCBzaW5nbGVHbHlwaCA9IHBsYWNlR2x5cGhBbG9uZ0xpbmUoZm9udFNjYWxlICogZ2x5cGhPZmZzZXRBcnJheS5nZXRvZmZzZXRYKHN5bWJvbC5nbHlwaFN0YXJ0SW5kZXgpLCBsaW5lT2Zmc2V0WCwgbGluZU9mZnNldFksIGZsaXAsIGFuY2hvclBvaW50LCB0aWxlQW5jaG9yUG9pbnQsIHN5bWJvbC5zZWdtZW50LFxuICAgICAgICAgICAgc3ltYm9sLmxpbmVTdGFydEluZGV4LCBzeW1ib2wubGluZVN0YXJ0SW5kZXggKyBzeW1ib2wubGluZUxlbmd0aCwgbGluZVZlcnRleEFycmF5LCBsYWJlbFBsYW5lTWF0cml4LCBwcm9qZWN0aW9uQ2FjaGUpO1xuICAgICAgICBpZiAoIXNpbmdsZUdseXBoKVxuICAgICAgICAgICAgcmV0dXJuIHtub3RFbm91Z2hSb29tOiB0cnVlfTtcblxuICAgICAgICBwbGFjZWRHbHlwaHMgPSBbc2luZ2xlR2x5cGhdO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgZ2x5cGg6IGFueSBvZiBwbGFjZWRHbHlwaHMpIHtcbiAgICAgICAgYWRkRHluYW1pY0F0dHJpYnV0ZXMoZHluYW1pY0xheW91dFZlcnRleEFycmF5LCBnbHlwaC5wb2ludCwgZ2x5cGguYW5nbGUpO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHByb2plY3RUcnVuY2F0ZWRMaW5lU2VnbWVudChwcmV2aW91c1RpbGVQb2ludDogUG9pbnQsIGN1cnJlbnRUaWxlUG9pbnQ6IFBvaW50LCBwcmV2aW91c1Byb2plY3RlZFBvaW50OiBQb2ludCwgbWluaW11bUxlbmd0aDogbnVtYmVyLCBwcm9qZWN0aW9uTWF0cml4OiBtYXQ0KSB7XG4gICAgLy8gV2UgYXJlIGFzc3VtaW5nIFwicHJldmlvdXNUaWxlUG9pbnRcIiB3b24ndCBwcm9qZWN0IHRvIGEgcG9pbnQgd2l0aGluIG9uZSB1bml0IG9mIHRoZSBjYW1lcmEgcGxhbmVcbiAgICAvLyBJZiBpdCBkaWQsIHRoYXQgd291bGQgbWVhbiBvdXIgbGFiZWwgZXh0ZW5kZWQgYWxsIHRoZSB3YXkgb3V0IGZyb20gd2l0aGluIHRoZSB2aWV3cG9ydCB0byBhICh2ZXJ5IGRpc3RhbnQpXG4gICAgLy8gcG9pbnQgbmVhciB0aGUgcGxhbmUgb2YgdGhlIGNhbWVyYS4gV2Ugd291bGRuJ3QgYmUgYWJsZSB0byByZW5kZXIgdGhlIGxhYmVsIGFueXdheSBvbmNlIGl0IGNyb3NzZWQgdGhlXG4gICAgLy8gcGxhbmUgb2YgdGhlIGNhbWVyYS5cbiAgICBjb25zdCBwcm9qZWN0ZWRVbml0VmVydGV4ID0gcHJvamVjdChwcmV2aW91c1RpbGVQb2ludC5hZGQocHJldmlvdXNUaWxlUG9pbnQuc3ViKGN1cnJlbnRUaWxlUG9pbnQpLl91bml0KCkpLCBwcm9qZWN0aW9uTWF0cml4KS5wb2ludDtcbiAgICBjb25zdCBwcm9qZWN0ZWRVbml0U2VnbWVudCA9IHByZXZpb3VzUHJvamVjdGVkUG9pbnQuc3ViKHByb2plY3RlZFVuaXRWZXJ0ZXgpO1xuXG4gICAgcmV0dXJuIHByZXZpb3VzUHJvamVjdGVkUG9pbnQuYWRkKHByb2plY3RlZFVuaXRTZWdtZW50Ll9tdWx0KG1pbmltdW1MZW5ndGggLyBwcm9qZWN0ZWRVbml0U2VnbWVudC5tYWcoKSkpO1xufVxuXG5mdW5jdGlvbiBwbGFjZUdseXBoQWxvbmdMaW5lKG9mZnNldFg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU9mZnNldFg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU9mZnNldFk6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxpcDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yUG9pbnQ6IFBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlQW5jaG9yUG9pbnQ6IFBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JTZWdtZW50OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydEluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVFbmRJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmVydGV4QXJyYXk6IFN5bWJvbExpbmVWZXJ0ZXhBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxQbGFuZU1hdHJpeDogbWF0NCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbkNhY2hlOiB7W186IG51bWJlcl06IFBvaW50fSkge1xuXG4gICAgY29uc3QgY29tYmluZWRPZmZzZXRYID0gZmxpcCA/XG4gICAgICAgIG9mZnNldFggLSBsaW5lT2Zmc2V0WCA6XG4gICAgICAgIG9mZnNldFggKyBsaW5lT2Zmc2V0WDtcblxuICAgIGxldCBkaXIgPSBjb21iaW5lZE9mZnNldFggPiAwID8gMSA6IC0xO1xuXG4gICAgbGV0IGFuZ2xlID0gMDtcbiAgICBpZiAoZmxpcCkge1xuICAgICAgICAvLyBUaGUgbGFiZWwgbmVlZHMgdG8gYmUgZmxpcHBlZCB0byBrZWVwIHRleHQgdXByaWdodC5cbiAgICAgICAgLy8gSXRlcmF0ZSBpbiB0aGUgcmV2ZXJzZSBkaXJlY3Rpb24uXG4gICAgICAgIGRpciAqPSAtMTtcbiAgICAgICAgYW5nbGUgPSBNYXRoLlBJO1xuICAgIH1cblxuICAgIGlmIChkaXIgPCAwKSBhbmdsZSArPSBNYXRoLlBJO1xuXG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IGRpciA+IDAgP1xuICAgICAgICBsaW5lU3RhcnRJbmRleCArIGFuY2hvclNlZ21lbnQgOlxuICAgICAgICBsaW5lU3RhcnRJbmRleCArIGFuY2hvclNlZ21lbnQgKyAxO1xuXG4gICAgbGV0IGN1cnJlbnQgPSBhbmNob3JQb2ludDtcbiAgICBsZXQgcHJldiA9IGFuY2hvclBvaW50O1xuICAgIGxldCBkaXN0YW5jZVRvUHJldiA9IDA7XG4gICAgbGV0IGN1cnJlbnRTZWdtZW50RGlzdGFuY2UgPSAwO1xuICAgIGNvbnN0IGFic09mZnNldFggPSBNYXRoLmFicyhjb21iaW5lZE9mZnNldFgpO1xuICAgIGNvbnN0IHBhdGhWZXJ0aWNlcyA9IFtdO1xuXG4gICAgd2hpbGUgKGRpc3RhbmNlVG9QcmV2ICsgY3VycmVudFNlZ21lbnREaXN0YW5jZSA8PSBhYnNPZmZzZXRYKSB7XG4gICAgICAgIGN1cnJlbnRJbmRleCArPSBkaXI7XG5cbiAgICAgICAgLy8gb2Zmc2V0IGRvZXMgbm90IGZpdCBvbiB0aGUgcHJvamVjdGVkIGxpbmVcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA8IGxpbmVTdGFydEluZGV4IHx8IGN1cnJlbnRJbmRleCA+PSBsaW5lRW5kSW5kZXgpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBwcmV2ID0gY3VycmVudDtcbiAgICAgICAgcGF0aFZlcnRpY2VzLnB1c2goY3VycmVudCk7XG5cbiAgICAgICAgY3VycmVudCA9IHByb2plY3Rpb25DYWNoZVtjdXJyZW50SW5kZXhdO1xuICAgICAgICBpZiAoY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmVydGV4ID0gbmV3IFBvaW50KGxpbmVWZXJ0ZXhBcnJheS5nZXR4KGN1cnJlbnRJbmRleCksIGxpbmVWZXJ0ZXhBcnJheS5nZXR5KGN1cnJlbnRJbmRleCkpO1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdGlvbiA9IHByb2plY3QoY3VycmVudFZlcnRleCwgbGFiZWxQbGFuZU1hdHJpeCk7XG4gICAgICAgICAgICBpZiAocHJvamVjdGlvbi5zaWduZWREaXN0YW5jZUZyb21DYW1lcmEgPiAwKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHByb2plY3Rpb25DYWNoZVtjdXJyZW50SW5kZXhdID0gcHJvamVjdGlvbi5wb2ludDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHZlcnRleCBpcyBiZWhpbmQgdGhlIHBsYW5lIG9mIHRoZSBjYW1lcmEsIHNvIHdlIGNhbid0IHByb2plY3QgaXRcbiAgICAgICAgICAgICAgICAvLyBJbnN0ZWFkLCB3ZSdsbCBjcmVhdGUgYSB2ZXJ0ZXggYWxvbmcgdGhlIGxpbmUgdGhhdCdzIGZhciBlbm91Z2ggdG8gaW5jbHVkZSB0aGUgZ2x5cGhcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c0xpbmVWZXJ0ZXhJbmRleCA9IGN1cnJlbnRJbmRleCAtIGRpcjtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c1RpbGVQb2ludCA9IGRpc3RhbmNlVG9QcmV2ID09PSAwID9cbiAgICAgICAgICAgICAgICAgICAgdGlsZUFuY2hvclBvaW50IDpcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGxpbmVWZXJ0ZXhBcnJheS5nZXR4KHByZXZpb3VzTGluZVZlcnRleEluZGV4KSwgbGluZVZlcnRleEFycmF5LmdldHkocHJldmlvdXNMaW5lVmVydGV4SW5kZXgpKTtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBjYWNoZSBiZWNhdXNlIHRoZSBuZXcgdmVydGV4IG1pZ2h0IG5vdCBiZSBmYXIgZW5vdWdoIG91dCBmb3IgZnV0dXJlIGdseXBocyBvbiB0aGUgc2FtZSBzZWdtZW50XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHByb2plY3RUcnVuY2F0ZWRMaW5lU2VnbWVudChwcmV2aW91c1RpbGVQb2ludCwgY3VycmVudFZlcnRleCwgcHJldiwgYWJzT2Zmc2V0WCAtIGRpc3RhbmNlVG9QcmV2ICsgMSwgbGFiZWxQbGFuZU1hdHJpeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkaXN0YW5jZVRvUHJldiArPSBjdXJyZW50U2VnbWVudERpc3RhbmNlO1xuICAgICAgICBjdXJyZW50U2VnbWVudERpc3RhbmNlID0gcHJldi5kaXN0KGN1cnJlbnQpO1xuICAgIH1cblxuICAgIC8vIFRoZSBwb2ludCBpcyBvbiB0aGUgY3VycmVudCBzZWdtZW50LiBJbnRlcnBvbGF0ZSB0byBmaW5kIGl0LlxuICAgIGNvbnN0IHNlZ21lbnRJbnRlcnBvbGF0aW9uVCA9IChhYnNPZmZzZXRYIC0gZGlzdGFuY2VUb1ByZXYpIC8gY3VycmVudFNlZ21lbnREaXN0YW5jZTtcbiAgICBjb25zdCBwcmV2VG9DdXJyZW50ID0gY3VycmVudC5zdWIocHJldik7XG4gICAgY29uc3QgcCA9IHByZXZUb0N1cnJlbnQubXVsdChzZWdtZW50SW50ZXJwb2xhdGlvblQpLl9hZGQocHJldik7XG5cbiAgICAvLyBvZmZzZXQgdGhlIHBvaW50IGZyb20gdGhlIGxpbmUgdG8gdGV4dC1vZmZzZXQgYW5kIGljb24tb2Zmc2V0XG4gICAgcC5fYWRkKHByZXZUb0N1cnJlbnQuX3VuaXQoKS5fcGVycCgpLl9tdWx0KGxpbmVPZmZzZXRZICogZGlyKSk7XG5cbiAgICBjb25zdCBzZWdtZW50QW5nbGUgPSBhbmdsZSArIE1hdGguYXRhbjIoY3VycmVudC55IC0gcHJldi55LCBjdXJyZW50LnggLSBwcmV2LngpO1xuXG4gICAgcGF0aFZlcnRpY2VzLnB1c2gocCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwb2ludDogcCxcbiAgICAgICAgYW5nbGU6IHNlZ21lbnRBbmdsZSxcbiAgICAgICAgcGF0aDogcGF0aFZlcnRpY2VzXG4gICAgfTtcbn1cblxuY29uc3QgaGlkZGVuR2x5cGhBdHRyaWJ1dGVzID0gbmV3IEZsb2F0MzJBcnJheShbLUluZmluaXR5LCAtSW5maW5pdHksIDAsIC1JbmZpbml0eSwgLUluZmluaXR5LCAwLCAtSW5maW5pdHksIC1JbmZpbml0eSwgMCwgLUluZmluaXR5LCAtSW5maW5pdHksIDBdKTtcblxuLy8gSGlkZSB0aGVtIGJ5IG1vdmluZyB0aGVtIG9mZnNjcmVlbi4gV2Ugc3RpbGwgbmVlZCB0byBhZGQgdGhlbSB0byB0aGUgYnVmZmVyXG4vLyBiZWNhdXNlIHRoZSBkeW5hbWljIGJ1ZmZlciBpcyBwYWlyZWQgd2l0aCBhIHN0YXRpYyBidWZmZXIgdGhhdCBkb2Vzbid0IGdldCB1cGRhdGVkLlxuZnVuY3Rpb24gaGlkZUdseXBocyhudW06IG51bWJlciwgZHluYW1pY0xheW91dFZlcnRleEFycmF5OiBTeW1ib2xEeW5hbWljTGF5b3V0QXJyYXkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheS5sZW5ndGg7XG4gICAgICAgIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheS5yZXNpemUob2Zmc2V0ICsgNCk7XG4gICAgICAgIC8vIFNpbmNlIGFsbCBoaWRkZW4gZ2x5cGhzIGhhdmUgdGhlIHNhbWUgYXR0cmlidXRlcywgd2UgY2FuIGJ1aWxkIHVwIHRoZSBhcnJheSBmYXN0ZXIgd2l0aCBhIHNpbmdsZSBjYWxsIHRvIEZsb2F0MzJBcnJheS5zZXRcbiAgICAgICAgLy8gZm9yIGVhY2ggc2V0IG9mIGZvdXIgdmVydGljZXMsIGluc3RlYWQgb2YgY2FsbGluZyBhZGREeW5hbWljQXR0cmlidXRlcyBmb3IgZWFjaCB2ZXJ0ZXguXG4gICAgICAgIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheS5mbG9hdDMyLnNldChoaWRkZW5HbHlwaEF0dHJpYnV0ZXMsIG9mZnNldCAqIDMpO1xuICAgIH1cbn1cblxuLy8gRm9yIGxpbmUgbGFiZWwgbGF5b3V0LCB3ZSdyZSBub3QgdXNpbmcgeiBvdXRwdXQgYW5kIG91ciB3IGlucHV0IGlzIGFsd2F5cyAxXG4vLyBUaGlzIGN1c3RvbSBtYXRyaXggdHJhbnNmb3JtYXRpb24gaWdub3JlcyB0aG9zZSBjb21wb25lbnRzIHRvIG1ha2UgcHJvamVjdGlvbiBmYXN0ZXJcbmZ1bmN0aW9uIHh5VHJhbnNmb3JtTWF0NChvdXQ6IHZlYzQsIGE6IHZlYzQsIG06IG1hdDQpIHtcbiAgICBjb25zdCB4ID0gYVswXSwgeSA9IGFbMV07XG4gICAgb3V0WzBdID0gbVswXSAqIHggKyBtWzRdICogeSArIG1bMTJdO1xuICAgIG91dFsxXSA9IG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzEzXTtcbiAgICBvdXRbM10gPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxNV07XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCBjbGlwTGluZSBmcm9tICcuL2NsaXBfbGluZSc7XG5pbXBvcnQgUGF0aEludGVycG9sYXRvciBmcm9tICcuL3BhdGhfaW50ZXJwb2xhdG9yJztcblxuaW1wb3J0ICogYXMgaW50ZXJzZWN0aW9uVGVzdHMgZnJvbSAnLi4vdXRpbC9pbnRlcnNlY3Rpb25fdGVzdHMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnLi9ncmlkX2luZGV4JztcbmltcG9ydCB7bWF0NH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCBPTkVfRU0gZnJvbSAnLi4vc3ltYm9sL29uZV9lbSc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCAqIGFzIHByb2plY3Rpb24gZnJvbSAnLi4vc3ltYm9sL3Byb2plY3Rpb24nO1xuXG5pbXBvcnQgdHlwZSBUcmFuc2Zvcm0gZnJvbSAnLi4vZ2VvL3RyYW5zZm9ybSc7XG5pbXBvcnQgdHlwZSB7U2luZ2xlQ29sbGlzaW9uQm94fSBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcbmltcG9ydCB0eXBlIHtcbiAgICBHbHlwaE9mZnNldEFycmF5LFxuICAgIFN5bWJvbExpbmVWZXJ0ZXhBcnJheVxufSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcblxuLy8gV2hlbiBhIHN5bWJvbCBjcm9zc2VzIHRoZSBlZGdlIHRoYXQgY2F1c2VzIGl0IHRvIGJlIGluY2x1ZGVkIGluXG4vLyBjb2xsaXNpb24gZGV0ZWN0aW9uLCBpdCB3aWxsIGNhdXNlIGNoYW5nZXMgaW4gdGhlIHN5bWJvbHMgYXJvdW5kXG4vLyBpdC4gVGhpcyBjb25zdGFudCBzcGVjaWZpZXMgaG93IG1hbnkgcGl4ZWxzIHRvIHBhZCB0aGUgZWRnZSBvZlxuLy8gdGhlIHZpZXdwb3J0IGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uIHNvIHRoYXQgdGhlIGJ1bGsgb2YgdGhlIGNoYW5nZXNcbi8vIG9jY3VyIG9mZnNjcmVlbi4gTWFraW5nIHRoaXMgY29uc3RhbnQgZ3JlYXRlciBpbmNyZWFzZXMgbGFiZWxcbi8vIHN0YWJpbGl0eSwgYnV0IGl0J3MgZXhwZW5zaXZlLlxuY29uc3Qgdmlld3BvcnRQYWRkaW5nID0gMTAwO1xuXG4vKipcbiAqIEEgY29sbGlzaW9uIGluZGV4IHVzZWQgdG8gcHJldmVudCBzeW1ib2xzIGZyb20gb3ZlcmxhcHBpbmcuIEl0IGtlZXAgdHJhY2tzIG9mXG4gKiB3aGVyZSBwcmV2aW91cyBzeW1ib2xzIGhhdmUgYmVlbiBwbGFjZWQgYW5kIGlzIHVzZWQgdG8gY2hlY2sgaWYgYSBuZXdcbiAqIHN5bWJvbCBvdmVybGFwcyB3aXRoIGFueSBwcmV2aW91c2x5IGFkZGVkIHN5bWJvbHMuXG4gKlxuICogVGhlcmUgYXJlIHR3byBzdGVwcyB0byBpbnNlcnRpb246IGZpcnN0IHBsYWNlQ29sbGlzaW9uQm94L0NpcmNsZXMgY2hlY2tzIGlmXG4gKiB0aGVyZSdzIHJvb20gZm9yIGEgc3ltYm9sLCB0aGVuIGluc2VydENvbGxpc2lvbkJveC9DaXJjbGVzIGFjdHVhbGx5IHB1dHMgdGhlXG4gKiBzeW1ib2wgaW4gdGhlIGluZGV4LiBUaGUgdHdvIHN0ZXAgcHJvY2VzcyBhbGxvd3MgcGFpcmVkIHN5bWJvbHMgdG8gYmUgaW5zZXJ0ZWRcbiAqIHRvZ2V0aGVyIGV2ZW4gaWYgdGhleSBvdmVybGFwLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbGxpc2lvbkluZGV4IHtcbiAgICBncmlkOiBHcmlkO1xuICAgIGlnbm9yZWRHcmlkOiBHcmlkO1xuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgIHBpdGNoZmFjdG9yOiBudW1iZXI7XG4gICAgc2NyZWVuUmlnaHRCb3VuZGFyeTogbnVtYmVyO1xuICAgIHNjcmVlbkJvdHRvbUJvdW5kYXJ5OiBudW1iZXI7XG4gICAgZ3JpZFJpZ2h0Qm91bmRhcnk6IG51bWJlcjtcbiAgICBncmlkQm90dG9tQm91bmRhcnk6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0cmFuc2Zvcm06IFRyYW5zZm9ybSxcbiAgICAgICAgZ3JpZDogR3JpZCA9IG5ldyBHcmlkKHRyYW5zZm9ybS53aWR0aCArIDIgKiB2aWV3cG9ydFBhZGRpbmcsIHRyYW5zZm9ybS5oZWlnaHQgKyAyICogdmlld3BvcnRQYWRkaW5nLCAyNSksXG4gICAgICAgIGlnbm9yZWRHcmlkOiBHcmlkID0gbmV3IEdyaWQodHJhbnNmb3JtLndpZHRoICsgMiAqIHZpZXdwb3J0UGFkZGluZywgdHJhbnNmb3JtLmhlaWdodCArIDIgKiB2aWV3cG9ydFBhZGRpbmcsIDI1KVxuICAgICkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcblxuICAgICAgICB0aGlzLmdyaWQgPSBncmlkO1xuICAgICAgICB0aGlzLmlnbm9yZWRHcmlkID0gaWdub3JlZEdyaWQ7XG4gICAgICAgIHRoaXMucGl0Y2hmYWN0b3IgPSBNYXRoLmNvcyh0cmFuc2Zvcm0uX3BpdGNoKSAqIHRyYW5zZm9ybS5jYW1lcmFUb0NlbnRlckRpc3RhbmNlO1xuXG4gICAgICAgIHRoaXMuc2NyZWVuUmlnaHRCb3VuZGFyeSA9IHRyYW5zZm9ybS53aWR0aCArIHZpZXdwb3J0UGFkZGluZztcbiAgICAgICAgdGhpcy5zY3JlZW5Cb3R0b21Cb3VuZGFyeSA9IHRyYW5zZm9ybS5oZWlnaHQgKyB2aWV3cG9ydFBhZGRpbmc7XG4gICAgICAgIHRoaXMuZ3JpZFJpZ2h0Qm91bmRhcnkgPSB0cmFuc2Zvcm0ud2lkdGggKyAyICogdmlld3BvcnRQYWRkaW5nO1xuICAgICAgICB0aGlzLmdyaWRCb3R0b21Cb3VuZGFyeSA9IHRyYW5zZm9ybS5oZWlnaHQgKyAyICogdmlld3BvcnRQYWRkaW5nO1xuICAgIH1cblxuICAgIHBsYWNlQ29sbGlzaW9uQm94KGNvbGxpc2lvbkJveDogU2luZ2xlQ29sbGlzaW9uQm94LCBhbGxvd092ZXJsYXA6IGJvb2xlYW4sIHRleHRQaXhlbFJhdGlvOiBudW1iZXIsIHBvc01hdHJpeDogbWF0NCwgY29sbGlzaW9uR3JvdXBQcmVkaWNhdGU/OiBhbnkpOiB7IGJveDogQXJyYXk8bnVtYmVyPiwgb2Zmc2NyZWVuOiBib29sZWFuIH0ge1xuICAgICAgICBjb25zdCBwcm9qZWN0ZWRQb2ludCA9IHRoaXMucHJvamVjdEFuZEdldFBlcnNwZWN0aXZlUmF0aW8ocG9zTWF0cml4LCBjb2xsaXNpb25Cb3guYW5jaG9yUG9pbnRYLCBjb2xsaXNpb25Cb3guYW5jaG9yUG9pbnRZKTtcbiAgICAgICAgY29uc3QgdGlsZVRvVmlld3BvcnQgPSB0ZXh0UGl4ZWxSYXRpbyAqIHByb2plY3RlZFBvaW50LnBlcnNwZWN0aXZlUmF0aW87XG4gICAgICAgIGNvbnN0IHRsWCA9IGNvbGxpc2lvbkJveC54MSAqIHRpbGVUb1ZpZXdwb3J0ICsgcHJvamVjdGVkUG9pbnQucG9pbnQueDtcbiAgICAgICAgY29uc3QgdGxZID0gY29sbGlzaW9uQm94LnkxICogdGlsZVRvVmlld3BvcnQgKyBwcm9qZWN0ZWRQb2ludC5wb2ludC55O1xuICAgICAgICBjb25zdCBiclggPSBjb2xsaXNpb25Cb3gueDIgKiB0aWxlVG9WaWV3cG9ydCArIHByb2plY3RlZFBvaW50LnBvaW50Lng7XG4gICAgICAgIGNvbnN0IGJyWSA9IGNvbGxpc2lvbkJveC55MiAqIHRpbGVUb1ZpZXdwb3J0ICsgcHJvamVjdGVkUG9pbnQucG9pbnQueTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNJbnNpZGVHcmlkKHRsWCwgdGxZLCBiclgsIGJyWSkgfHxcbiAgICAgICAgICAgICghYWxsb3dPdmVybGFwICYmIHRoaXMuZ3JpZC5oaXRUZXN0KHRsWCwgdGxZLCBiclgsIGJyWSwgY29sbGlzaW9uR3JvdXBQcmVkaWNhdGUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib3g6IFtdLFxuICAgICAgICAgICAgICAgIG9mZnNjcmVlbjogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYm94OiBbdGxYLCB0bFksIGJyWCwgYnJZXSxcbiAgICAgICAgICAgIG9mZnNjcmVlbjogdGhpcy5pc09mZnNjcmVlbih0bFgsIHRsWSwgYnJYLCBiclkpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcGxhY2VDb2xsaXNpb25DaXJjbGVzKGFsbG93T3ZlcmxhcDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVWZXJ0ZXhBcnJheTogU3ltYm9sTGluZVZlcnRleEFycmF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaE9mZnNldEFycmF5OiBHbHlwaE9mZnNldEFycmF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NNYXRyaXg6IG1hdDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsUGxhbmVNYXRyaXg6IG1hdDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsVG9TY3JlZW5NYXRyaXg/OiBtYXQ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29sbGlzaW9uQ2lyY2xlczogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGl0Y2hXaXRoTWFwOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25Hcm91cFByZWRpY2F0ZT86IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlUGl4ZWxEaWFtZXRlcjogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UGl4ZWxQYWRkaW5nOiBudW1iZXIpOiB7IGNpcmNsZXM6IEFycmF5PG51bWJlcj4sIG9mZnNjcmVlbjogYm9vbGVhbiwgY29sbGlzaW9uRGV0ZWN0ZWQ6IGJvb2xlYW4gfSB7XG4gICAgICAgIGNvbnN0IHBsYWNlZENvbGxpc2lvbkNpcmNsZXMgPSBbXTtcblxuICAgICAgICBjb25zdCB0aWxlVW5pdEFuY2hvclBvaW50ID0gbmV3IFBvaW50KHN5bWJvbC5hbmNob3JYLCBzeW1ib2wuYW5jaG9yWSk7XG4gICAgICAgIGNvbnN0IHNjcmVlbkFuY2hvclBvaW50ID0gcHJvamVjdGlvbi5wcm9qZWN0KHRpbGVVbml0QW5jaG9yUG9pbnQsIHBvc01hdHJpeCk7XG4gICAgICAgIGNvbnN0IHBlcnNwZWN0aXZlUmF0aW8gPSBwcm9qZWN0aW9uLmdldFBlcnNwZWN0aXZlUmF0aW8odGhpcy50cmFuc2Zvcm0uY2FtZXJhVG9DZW50ZXJEaXN0YW5jZSwgc2NyZWVuQW5jaG9yUG9pbnQuc2lnbmVkRGlzdGFuY2VGcm9tQ2FtZXJhKTtcbiAgICAgICAgY29uc3QgbGFiZWxQbGFuZUZvbnRTaXplID0gcGl0Y2hXaXRoTWFwID8gZm9udFNpemUgLyBwZXJzcGVjdGl2ZVJhdGlvIDogZm9udFNpemUgKiBwZXJzcGVjdGl2ZVJhdGlvO1xuICAgICAgICBjb25zdCBsYWJlbFBsYW5lRm9udFNjYWxlID0gbGFiZWxQbGFuZUZvbnRTaXplIC8gT05FX0VNO1xuXG4gICAgICAgIGNvbnN0IGxhYmVsUGxhbmVBbmNob3JQb2ludCA9IHByb2plY3Rpb24ucHJvamVjdCh0aWxlVW5pdEFuY2hvclBvaW50LCBsYWJlbFBsYW5lTWF0cml4KS5wb2ludDtcblxuICAgICAgICBjb25zdCBwcm9qZWN0aW9uQ2FjaGUgPSB7fTtcbiAgICAgICAgY29uc3QgbGluZU9mZnNldFggPSBzeW1ib2wubGluZU9mZnNldFggKiBsYWJlbFBsYW5lRm9udFNjYWxlO1xuICAgICAgICBjb25zdCBsaW5lT2Zmc2V0WSA9IHN5bWJvbC5saW5lT2Zmc2V0WSAqIGxhYmVsUGxhbmVGb250U2NhbGU7XG5cbiAgICAgICAgY29uc3QgZmlyc3RBbmRMYXN0R2x5cGggPSBwcm9qZWN0aW9uLnBsYWNlRmlyc3RBbmRMYXN0R2x5cGgoXG4gICAgICAgICAgICBsYWJlbFBsYW5lRm9udFNjYWxlLFxuICAgICAgICAgICAgZ2x5cGhPZmZzZXRBcnJheSxcbiAgICAgICAgICAgIGxpbmVPZmZzZXRYLFxuICAgICAgICAgICAgbGluZU9mZnNldFksXG4gICAgICAgICAgICAvKmZsaXAqLyBmYWxzZSxcbiAgICAgICAgICAgIGxhYmVsUGxhbmVBbmNob3JQb2ludCxcbiAgICAgICAgICAgIHRpbGVVbml0QW5jaG9yUG9pbnQsXG4gICAgICAgICAgICBzeW1ib2wsXG4gICAgICAgICAgICBsaW5lVmVydGV4QXJyYXksXG4gICAgICAgICAgICBsYWJlbFBsYW5lTWF0cml4LFxuICAgICAgICAgICAgcHJvamVjdGlvbkNhY2hlKTtcblxuICAgICAgICBsZXQgY29sbGlzaW9uRGV0ZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGluR3JpZCA9IGZhbHNlO1xuICAgICAgICBsZXQgZW50aXJlbHlPZmZzY3JlZW4gPSB0cnVlO1xuXG4gICAgICAgIGlmIChmaXJzdEFuZExhc3RHbHlwaCkge1xuICAgICAgICAgICAgY29uc3QgcmFkaXVzID0gY2lyY2xlUGl4ZWxEaWFtZXRlciAqIDAuNSAqIHBlcnNwZWN0aXZlUmF0aW8gKyB0ZXh0UGl4ZWxQYWRkaW5nO1xuICAgICAgICAgICAgY29uc3Qgc2NyZWVuUGxhbmVNaW4gPSBuZXcgUG9pbnQoLXZpZXdwb3J0UGFkZGluZywgLXZpZXdwb3J0UGFkZGluZyk7XG4gICAgICAgICAgICBjb25zdCBzY3JlZW5QbGFuZU1heCA9IG5ldyBQb2ludCh0aGlzLnNjcmVlblJpZ2h0Qm91bmRhcnksIHRoaXMuc2NyZWVuQm90dG9tQm91bmRhcnkpO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9yID0gbmV3IFBhdGhJbnRlcnBvbGF0b3IoKTtcblxuICAgICAgICAgICAgLy8gQ29uc3RydWN0IGEgcHJvamVjdGVkIHBhdGggZnJvbSBwcm9qZWN0ZWQgbGluZSB2ZXJ0aWNlcy4gQW5jaG9yIHBvaW50cyBhcmUgaWdub3JlZCBhbmQgcmVtb3ZlZFxuICAgICAgICAgICAgY29uc3QgZmlyc3QgPSBmaXJzdEFuZExhc3RHbHlwaC5maXJzdDtcbiAgICAgICAgICAgIGNvbnN0IGxhc3QgPSBmaXJzdEFuZExhc3RHbHlwaC5sYXN0O1xuXG4gICAgICAgICAgICBsZXQgcHJvamVjdGVkUGF0aCA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0LnBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0ZWRQYXRoLnB1c2goZmlyc3QucGF0aFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxhc3QucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHByb2plY3RlZFBhdGgucHVzaChsYXN0LnBhdGhbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0KHByb2plY3RlZFBhdGgubGVuZ3RoID49IDIpO1xuXG4gICAgICAgICAgICAvLyBUb2xlcmF0ZSBhIHNsaWdodGx5IGxvbmdlciBkaXN0YW5jZSB0aGFuIG9uZSBkaWFtZXRlciBiZXR3ZWVuIHR3byBhZGphY2VudCBjaXJjbGVzXG4gICAgICAgICAgICBjb25zdCBjaXJjbGVEaXN0ID0gcmFkaXVzICogMi41O1xuXG4gICAgICAgICAgICAvLyBUaGUgcGF0aCBtaWdodCBuZWVkIHRvIGJlIGNvbnZlcnRlZCBpbnRvIHNjcmVlbiBzcGFjZSBpZiBhIHBpdGNoZWQgbWFwIGlzIHVzZWQgYXMgdGhlIGxhYmVsIHNwYWNlXG4gICAgICAgICAgICBpZiAobGFiZWxUb1NjcmVlbk1hdHJpeCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmVlblNwYWNlUGF0aCA9IHByb2plY3RlZFBhdGgubWFwKHAgPT4gcHJvamVjdGlvbi5wcm9qZWN0KHAsIGxhYmVsVG9TY3JlZW5NYXRyaXgpKTtcblxuICAgICAgICAgICAgICAgIC8vIERvIG5vdCB0cnkgdG8gcGxhY2UgY29sbGlzaW9uIGNpcmNsZXMgaWYgZXZlbiBvZiB0aGUgcG9pbnRzIGlzIGJlaGluZCB0aGUgY2FtZXJhLlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBwbGF1c2libGUgc2NlbmFyaW8gd2l0aCBiaWcgY2FtZXJhIHBpdGNoIGFuZ2xlc1xuICAgICAgICAgICAgICAgIGlmIChzY3JlZW5TcGFjZVBhdGguc29tZShwb2ludCA9PiBwb2ludC5zaWduZWREaXN0YW5jZUZyb21DYW1lcmEgPD0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGVkUGF0aCA9IFtdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RlZFBhdGggPSBzY3JlZW5TcGFjZVBhdGgubWFwKHAgPT4gcC5wb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgc2VnbWVudHMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKHByb2plY3RlZFBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFF1aWNrbHkgY2hlY2sgaWYgdGhlIHBhdGggaXMgZnVsbHkgaW5zaWRlIG9yIG91dHNpZGUgb2YgdGhlIHBhZGRlZCBjb2xsaXNpb24gcmVnaW9uLlxuICAgICAgICAgICAgICAgIC8vIEZvciBvdmVybGFwcGluZyBwYXRocyB3ZSdsbCBvbmx5IGNyZWF0ZSBjb2xsaXNpb24gY2lyY2xlcyBmb3IgdGhlIHZpc2libGUgc2VnbWVudHNcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5Qb2ludCA9IHByb2plY3RlZFBhdGhbMF0uY2xvbmUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhQb2ludCA9IHByb2plY3RlZFBhdGhbMF0uY2xvbmUoKTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJvamVjdGVkUGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBtaW5Qb2ludC54ID0gTWF0aC5taW4obWluUG9pbnQueCwgcHJvamVjdGVkUGF0aFtpXS54KTtcbiAgICAgICAgICAgICAgICAgICAgbWluUG9pbnQueSA9IE1hdGgubWluKG1pblBvaW50LnksIHByb2plY3RlZFBhdGhbaV0ueSk7XG4gICAgICAgICAgICAgICAgICAgIG1heFBvaW50LnggPSBNYXRoLm1heChtYXhQb2ludC54LCBwcm9qZWN0ZWRQYXRoW2ldLngpO1xuICAgICAgICAgICAgICAgICAgICBtYXhQb2ludC55ID0gTWF0aC5tYXgobWF4UG9pbnQueSwgcHJvamVjdGVkUGF0aFtpXS55KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWluUG9pbnQueCA+PSBzY3JlZW5QbGFuZU1pbi54ICYmIG1heFBvaW50LnggPD0gc2NyZWVuUGxhbmVNYXgueCAmJlxuICAgICAgICAgICAgICAgICAgICBtaW5Qb2ludC55ID49IHNjcmVlblBsYW5lTWluLnkgJiYgbWF4UG9pbnQueSA8PSBzY3JlZW5QbGFuZU1heC55KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFF1YWQgZnVsbHkgdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50cyA9IFtwcm9qZWN0ZWRQYXRoXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1heFBvaW50LnggPCBzY3JlZW5QbGFuZU1pbi54IHx8IG1pblBvaW50LnggPiBzY3JlZW5QbGFuZU1heC54IHx8XG4gICAgICAgICAgICAgICAgICAgIG1heFBvaW50LnkgPCBzY3JlZW5QbGFuZU1pbi55IHx8IG1pblBvaW50LnkgPiBzY3JlZW5QbGFuZU1heC55KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCB2aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMgPSBjbGlwTGluZShbcHJvamVjdGVkUGF0aF0sIHNjcmVlblBsYW5lTWluLngsIHNjcmVlblBsYW5lTWluLnksIHNjcmVlblBsYW5lTWF4LngsIHNjcmVlblBsYW5lTWF4LnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChjb25zdCBzZWcgb2Ygc2VnbWVudHMpIHtcbiAgICAgICAgICAgICAgICAvLyBpbnRlcnBvbGF0ZSBwb3NpdGlvbnMgZm9yIGNvbGxpc2lvbiBjaXJjbGVzLiBBZGQgYSBzbWFsbCBwYWRkaW5nIHRvIGJvdGggZW5kcyBvZiB0aGUgc2VnbWVudFxuICAgICAgICAgICAgICAgIGFzc2VydChzZWcubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdG9yLnJlc2V0KHNlZywgcmFkaXVzICogMC4yNSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbnVtQ2lyY2xlcyA9IDA7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJwb2xhdG9yLmxlbmd0aCA8PSAwLjUgKiByYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtQ2lyY2xlcyA9IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtQ2lyY2xlcyA9IE1hdGguY2VpbChpbnRlcnBvbGF0b3IucGFkZGVkTGVuZ3RoIC8gY2lyY2xlRGlzdCkgKyAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ2lyY2xlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpIC8gTWF0aC5tYXgobnVtQ2lyY2xlcyAtIDEsIDEpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaXJjbGVQb3NpdGlvbiA9IGludGVycG9sYXRvci5sZXJwKHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCB2aWV3cG9ydCBwYWRkaW5nIHRvIHRoZSBwb3NpdGlvbiBhbmQgcGVyZm9ybSBpbml0aWFsIGNvbGxpc2lvbiBjaGVja1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gY2lyY2xlUG9zaXRpb24ueCArIHZpZXdwb3J0UGFkZGluZztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWSA9IGNpcmNsZVBvc2l0aW9uLnkgKyB2aWV3cG9ydFBhZGRpbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgcGxhY2VkQ29sbGlzaW9uQ2lyY2xlcy5wdXNoKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cywgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeDEgPSBjZW50ZXJYIC0gcmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5MSA9IGNlbnRlclkgLSByYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHgyID0gY2VudGVyWCArIHJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeTIgPSBjZW50ZXJZICsgcmFkaXVzO1xuXG4gICAgICAgICAgICAgICAgICAgIGVudGlyZWx5T2Zmc2NyZWVuID0gZW50aXJlbHlPZmZzY3JlZW4gJiYgdGhpcy5pc09mZnNjcmVlbih4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICAgICAgICAgIGluR3JpZCA9IGluR3JpZCB8fCB0aGlzLmlzSW5zaWRlR3JpZCh4MSwgeTEsIHgyLCB5Mik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd092ZXJsYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyaWQuaGl0VGVzdENpcmNsZShjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIGNvbGxpc2lvbkdyb3VwUHJlZGljYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGVhcmx5IGV4aXQgaWYgd2UncmUgc2hvd2luZyB0aGUgZGVidWcgY2lyY2xlcyBiZWNhdXNlIHdlIHN0aWxsIHdhbnQgdG8gY2FsY3VsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggY2lyY2xlcyBhcmUgaW4gdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uRGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hvd0NvbGxpc2lvbkNpcmNsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2NyZWVuOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbkRldGVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNpcmNsZXM6ICgoIXNob3dDb2xsaXNpb25DaXJjbGVzICYmIGNvbGxpc2lvbkRldGVjdGVkKSB8fCAhaW5HcmlkKSA/IFtdIDogcGxhY2VkQ29sbGlzaW9uQ2lyY2xlcyxcbiAgICAgICAgICAgIG9mZnNjcmVlbjogZW50aXJlbHlPZmZzY3JlZW4sXG4gICAgICAgICAgICBjb2xsaXNpb25EZXRlY3RlZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJlY2F1c2UgdGhlIGdlb21ldHJpZXMgaW4gdGhlIENvbGxpc2lvbkluZGV4IGFyZSBhbiBhcHByb3hpbWF0aW9uIG9mIHRoZSBzaGFwZSBvZlxuICAgICAqIHN5bWJvbHMgb24gdGhlIG1hcCwgd2UgdXNlIHRoZSBDb2xsaXNpb25JbmRleCB0byBsb29rIHVwIHRoZSBzeW1ib2wgcGFydCBvZlxuICAgICAqIGBxdWVyeVJlbmRlcmVkRmVhdHVyZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBxdWVyeVJlbmRlcmVkU3ltYm9scyh2aWV3cG9ydFF1ZXJ5R2VvbWV0cnk6IEFycmF5PFBvaW50Pikge1xuICAgICAgICBpZiAodmlld3BvcnRRdWVyeUdlb21ldHJ5Lmxlbmd0aCA9PT0gMCB8fCAodGhpcy5ncmlkLmtleXNMZW5ndGgoKSA9PT0gMCAmJiB0aGlzLmlnbm9yZWRHcmlkLmtleXNMZW5ndGgoKSA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gW107XG4gICAgICAgIGxldCBtaW5YID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBtaW5ZID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBtYXhYID0gLUluZmluaXR5O1xuICAgICAgICBsZXQgbWF4WSA9IC1JbmZpbml0eTtcbiAgICAgICAgZm9yIChjb25zdCBwb2ludCBvZiB2aWV3cG9ydFF1ZXJ5R2VvbWV0cnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGdyaWRQb2ludCA9IG5ldyBQb2ludChwb2ludC54ICsgdmlld3BvcnRQYWRkaW5nLCBwb2ludC55ICsgdmlld3BvcnRQYWRkaW5nKTtcbiAgICAgICAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBncmlkUG9pbnQueCk7XG4gICAgICAgICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgZ3JpZFBvaW50LnkpO1xuICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIGdyaWRQb2ludC54KTtcbiAgICAgICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBncmlkUG9pbnQueSk7XG4gICAgICAgICAgICBxdWVyeS5wdXNoKGdyaWRQb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHRoaXMuZ3JpZC5xdWVyeShtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZKVxuICAgICAgICAgICAgLmNvbmNhdCh0aGlzLmlnbm9yZWRHcmlkLnF1ZXJ5KG1pblgsIG1pblksIG1heFgsIG1heFkpKTtcblxuICAgICAgICBjb25zdCBzZWVuRmVhdHVyZXMgPSB7fTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBmZWF0dXJlIG9mIGZlYXR1cmVzKSB7XG4gICAgICAgICAgICBjb25zdCBmZWF0dXJlS2V5ID0gZmVhdHVyZS5rZXk7XG4gICAgICAgICAgICAvLyBTa2lwIGFscmVhZHkgc2VlbiBmZWF0dXJlcy5cbiAgICAgICAgICAgIGlmIChzZWVuRmVhdHVyZXNbZmVhdHVyZUtleS5idWNrZXRJbnN0YW5jZUlkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VlbkZlYXR1cmVzW2ZlYXR1cmVLZXkuYnVja2V0SW5zdGFuY2VJZF0gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWVuRmVhdHVyZXNbZmVhdHVyZUtleS5idWNrZXRJbnN0YW5jZUlkXVtmZWF0dXJlS2V5LmZlYXR1cmVJbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcXVlcnkgaW50ZXJzZWN0cyB3aXRoIHRoZSBmZWF0dXJlIGJveFxuICAgICAgICAgICAgLy8gXCJDb2xsaXNpb24gQ2lyY2xlc1wiIGZvciBsaW5lIGxhYmVscyBhcmUgdHJlYXRlZCBhcyBib3hlcyBoZXJlXG4gICAgICAgICAgICAvLyBTaW5jZSB0aGVyZSdzIG5vIGFjdHVhbCBjb2xsaXNpb24gdGFraW5nIHBsYWNlLCB0aGUgY2lyY2xlIHZzLiBzcXVhcmVcbiAgICAgICAgICAgIC8vIGRpc3RpbmN0aW9uIGRvZXNuJ3QgbWF0dGVyIGFzIG11Y2gsIGFuZCBib3ggZ2VvbWV0cnkgaXMgZWFzaWVyXG4gICAgICAgICAgICAvLyB0byB3b3JrIHdpdGguXG4gICAgICAgICAgICBjb25zdCBiYm94ID0gW1xuICAgICAgICAgICAgICAgIG5ldyBQb2ludChmZWF0dXJlLngxLCBmZWF0dXJlLnkxKSxcbiAgICAgICAgICAgICAgICBuZXcgUG9pbnQoZmVhdHVyZS54MiwgZmVhdHVyZS55MSksXG4gICAgICAgICAgICAgICAgbmV3IFBvaW50KGZlYXR1cmUueDIsIGZlYXR1cmUueTIpLFxuICAgICAgICAgICAgICAgIG5ldyBQb2ludChmZWF0dXJlLngxLCBmZWF0dXJlLnkyKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmICghaW50ZXJzZWN0aW9uVGVzdHMucG9seWdvbkludGVyc2VjdHNQb2x5Z29uKHF1ZXJ5LCBiYm94KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWVuRmVhdHVyZXNbZmVhdHVyZUtleS5idWNrZXRJbnN0YW5jZUlkXVtmZWF0dXJlS2V5LmZlYXR1cmVJbmRleF0gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHJlc3VsdFtmZWF0dXJlS2V5LmJ1Y2tldEluc3RhbmNlSWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbZmVhdHVyZUtleS5idWNrZXRJbnN0YW5jZUlkXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W2ZlYXR1cmVLZXkuYnVja2V0SW5zdGFuY2VJZF0ucHVzaChmZWF0dXJlS2V5LmZlYXR1cmVJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGluc2VydENvbGxpc2lvbkJveChjb2xsaXNpb25Cb3g6IEFycmF5PG51bWJlcj4sIGlnbm9yZVBsYWNlbWVudDogYm9vbGVhbiwgYnVja2V0SW5zdGFuY2VJZDogbnVtYmVyLCBmZWF0dXJlSW5kZXg6IG51bWJlciwgY29sbGlzaW9uR3JvdXBJRDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSBpZ25vcmVQbGFjZW1lbnQgPyB0aGlzLmlnbm9yZWRHcmlkIDogdGhpcy5ncmlkO1xuXG4gICAgICAgIGNvbnN0IGtleSA9IHtidWNrZXRJbnN0YW5jZUlkLCBmZWF0dXJlSW5kZXgsIGNvbGxpc2lvbkdyb3VwSUR9O1xuICAgICAgICBncmlkLmluc2VydChrZXksIGNvbGxpc2lvbkJveFswXSwgY29sbGlzaW9uQm94WzFdLCBjb2xsaXNpb25Cb3hbMl0sIGNvbGxpc2lvbkJveFszXSk7XG4gICAgfVxuXG4gICAgaW5zZXJ0Q29sbGlzaW9uQ2lyY2xlcyhjb2xsaXNpb25DaXJjbGVzOiBBcnJheTxudW1iZXI+LCBpZ25vcmVQbGFjZW1lbnQ6IGJvb2xlYW4sIGJ1Y2tldEluc3RhbmNlSWQ6IG51bWJlciwgZmVhdHVyZUluZGV4OiBudW1iZXIsIGNvbGxpc2lvbkdyb3VwSUQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBncmlkID0gaWdub3JlUGxhY2VtZW50ID8gdGhpcy5pZ25vcmVkR3JpZCA6IHRoaXMuZ3JpZDtcblxuICAgICAgICBjb25zdCBrZXkgPSB7YnVja2V0SW5zdGFuY2VJZCwgZmVhdHVyZUluZGV4LCBjb2xsaXNpb25Hcm91cElEfTtcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBjb2xsaXNpb25DaXJjbGVzLmxlbmd0aDsgayArPSA0KSB7XG4gICAgICAgICAgICBncmlkLmluc2VydENpcmNsZShrZXksIGNvbGxpc2lvbkNpcmNsZXNba10sIGNvbGxpc2lvbkNpcmNsZXNbayArIDFdLCBjb2xsaXNpb25DaXJjbGVzW2sgKyAyXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9qZWN0QW5kR2V0UGVyc3BlY3RpdmVSYXRpbyhwb3NNYXRyaXg6IG1hdDQsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHAgPSBbeCwgeSwgMCwgMV07XG4gICAgICAgIHByb2plY3Rpb24ueHlUcmFuc2Zvcm1NYXQ0KHAsIHAsIHBvc01hdHJpeCk7XG4gICAgICAgIGNvbnN0IGEgPSBuZXcgUG9pbnQoXG4gICAgICAgICAgICAoKChwWzBdIC8gcFszXSArIDEpIC8gMikgKiB0aGlzLnRyYW5zZm9ybS53aWR0aCkgKyB2aWV3cG9ydFBhZGRpbmcsXG4gICAgICAgICAgICAoKCgtcFsxXSAvIHBbM10gKyAxKSAvIDIpICogdGhpcy50cmFuc2Zvcm0uaGVpZ2h0KSArIHZpZXdwb3J0UGFkZGluZ1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9pbnQ6IGEsXG4gICAgICAgICAgICAvLyBTZWUgcGVyc3BlY3RpdmUgcmF0aW8gY29tbWVudCBpbiBzeW1ib2xfc2RmLnZlcnRleFxuICAgICAgICAgICAgLy8gV2UncmUgZG9pbmcgY29sbGlzaW9uIGRldGVjdGlvbiBpbiB2aWV3cG9ydCBzcGFjZSBzbyB3ZSBuZWVkXG4gICAgICAgICAgICAvLyB0byBzY2FsZSBkb3duIGJveGVzIGluIHRoZSBkaXN0YW5jZVxuICAgICAgICAgICAgcGVyc3BlY3RpdmVSYXRpbzogMC41ICsgMC41ICogKHRoaXMudHJhbnNmb3JtLmNhbWVyYVRvQ2VudGVyRGlzdGFuY2UgLyBwWzNdKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlzT2Zmc2NyZWVuKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHgyIDwgdmlld3BvcnRQYWRkaW5nIHx8IHgxID49IHRoaXMuc2NyZWVuUmlnaHRCb3VuZGFyeSB8fCB5MiA8IHZpZXdwb3J0UGFkZGluZyB8fCB5MSA+IHRoaXMuc2NyZWVuQm90dG9tQm91bmRhcnk7XG4gICAgfVxuXG4gICAgaXNJbnNpZGVHcmlkKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHgyID49IDAgJiYgeDEgPCB0aGlzLmdyaWRSaWdodEJvdW5kYXJ5ICYmIHkyID49IDAgJiYgeTEgPCB0aGlzLmdyaWRCb3R0b21Cb3VuZGFyeTtcbiAgICB9XG5cbiAgICAvKlxuICAgICogUmV0dXJucyBhIG1hdHJpeCBmb3IgdHJhbnNmb3JtaW5nIGNvbGxpc2lvbiBzaGFwZXMgdG8gdmlld3BvcnQgY29vcmRpbmF0ZSBzcGFjZS5cbiAgICAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHJlbmRlciBlLmcuIGNvbGxpc2lvbiBjaXJjbGVzIG9uIHRoZSBzY3JlZW4uXG4gICAgKiAgIGV4YW1wbGUgdHJhbnNmb3JtYXRpb246IGNsaXBQb3MgPSBnbENvb3JkTWF0cml4ICogdmlld3BvcnRNYXRyaXggKiBjaXJjbGVfcG9zXG4gICAgKi9cbiAgICBnZXRWaWV3cG9ydE1hdHJpeCgpOiBtYXQ0IHtcbiAgICAgICAgY29uc3QgbSA9IG1hdDQuaWRlbnRpdHkoW10pO1xuICAgICAgICBtYXQ0LnRyYW5zbGF0ZShtLCBtLCBbLXZpZXdwb3J0UGFkZGluZywgLXZpZXdwb3J0UGFkZGluZywgMC4wXSk7XG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sbGlzaW9uSW5kZXg7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcblxuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4vdGlsZV9pZCc7XG5cbi8qKlxuICogQ29udmVydHMgYSBwaXhlbCB2YWx1ZSBhdCBhIHRoZSBnaXZlbiB6b29tIGxldmVsIHRvIHRpbGUgdW5pdHMuXG4gKlxuICogVGhlIHNoYWRlcnMgbW9zdGx5IGNhbGN1bGF0ZSBldmVyeXRoaW5nIGluIHRpbGUgdW5pdHMgc28gc3R5bGVcbiAqIHByb3BlcnRpZXMgbmVlZCB0byBiZSBjb252ZXJ0ZWQgZnJvbSBwaXhlbHMgdG8gdGlsZSB1bml0cyB1c2luZyB0aGlzLlxuICpcbiAqIEZvciBleGFtcGxlLCBhIHRyYW5zbGF0aW9uIGJ5IDMwIHBpeGVscyBhdCB6b29tIDYuNSB3aWxsIGJlIGFcbiAqIHRyYW5zbGF0aW9uIGJ5IHBpeGVsc1RvVGlsZVVuaXRzKDMwLCA2LjUpIHRpbGUgdW5pdHMuXG4gKlxuICogQHJldHVybnMgdmFsdWUgaW4gdGlsZSB1bml0c1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGlsZToge3RpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgdGlsZVNpemU6IG51bWJlcn0sIHBpeGVsVmFsdWU6IG51bWJlciwgejogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGl4ZWxWYWx1ZSAqIChFWFRFTlQgLyAodGlsZS50aWxlU2l6ZSAqIE1hdGgucG93KDIsIHogLSB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWikpKTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBDb2xsaXNpb25JbmRleCBmcm9tICcuL2NvbGxpc2lvbl9pbmRleCc7XG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcbmltcG9ydCAqIGFzIHN5bWJvbFNpemUgZnJvbSAnLi9zeW1ib2xfc2l6ZSc7XG5pbXBvcnQgKiBhcyBwcm9qZWN0aW9uIGZyb20gJy4vcHJvamVjdGlvbic7XG5pbXBvcnQge2dldEFuY2hvckp1c3RpZmljYXRpb24sIGV2YWx1YXRlVmFyaWFibGVPZmZzZXR9IGZyb20gJy4vc3ltYm9sX2xheW91dCc7XG5pbXBvcnQge2dldEFuY2hvckFsaWdubWVudCwgV3JpdGluZ01vZGV9IGZyb20gJy4vc2hhcGluZyc7XG5pbXBvcnQge21hdDR9IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQgcGl4ZWxzVG9UaWxlVW5pdHMgZnJvbSAnLi4vc291cmNlL3BpeGVsc190b190aWxlX3VuaXRzJztcbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXInO1xuXG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4uL3NvdXJjZS90aWxlJztcbmltcG9ydCB0eXBlIFN5bWJvbEJ1Y2tldCwge0NvbGxpc2lvbkFycmF5cywgU2luZ2xlQ29sbGlzaW9uQm94fSBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcbmltcG9ydCB0eXBlIHtDb2xsaXNpb25Cb3hBcnJheSwgQ29sbGlzaW9uVmVydGV4QXJyYXksIFN5bWJvbEluc3RhbmNlfSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcbmltcG9ydCB0eXBlIEZlYXR1cmVJbmRleCBmcm9tICcuLi9kYXRhL2ZlYXR1cmVfaW5kZXgnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcbmltcG9ydCB0eXBlIHtUZXh0QW5jaG9yfSBmcm9tICcuL3N5bWJvbF9sYXlvdXQnO1xuXG5jbGFzcyBPcGFjaXR5U3RhdGUge1xuICAgIG9wYWNpdHk6IG51bWJlcjtcbiAgICBwbGFjZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IocHJldlN0YXRlOiA/T3BhY2l0eVN0YXRlLCBpbmNyZW1lbnQ6IG51bWJlciwgcGxhY2VkOiBib29sZWFuLCBza2lwRmFkZTogP2Jvb2xlYW4pIHtcbiAgICAgICAgaWYgKHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcHJldlN0YXRlLm9wYWNpdHkgKyAocHJldlN0YXRlLnBsYWNlZCA/IGluY3JlbWVudCA6IC1pbmNyZW1lbnQpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wYWNpdHkgPSAoc2tpcEZhZGUgJiYgcGxhY2VkKSA/IDEgOiAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGxhY2VkID0gcGxhY2VkO1xuICAgIH1cbiAgICBpc0hpZGRlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BhY2l0eSA9PT0gMCAmJiAhdGhpcy5wbGFjZWQ7XG4gICAgfVxufVxuXG5jbGFzcyBKb2ludE9wYWNpdHlTdGF0ZSB7XG4gICAgdGV4dDogT3BhY2l0eVN0YXRlO1xuICAgIGljb246IE9wYWNpdHlTdGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihwcmV2U3RhdGU6ID9Kb2ludE9wYWNpdHlTdGF0ZSwgaW5jcmVtZW50OiBudW1iZXIsIHBsYWNlZFRleHQ6IGJvb2xlYW4sIHBsYWNlZEljb246IGJvb2xlYW4sIHNraXBGYWRlOiA/Ym9vbGVhbikge1xuICAgICAgICB0aGlzLnRleHQgPSBuZXcgT3BhY2l0eVN0YXRlKHByZXZTdGF0ZSA/IHByZXZTdGF0ZS50ZXh0IDogbnVsbCwgaW5jcmVtZW50LCBwbGFjZWRUZXh0LCBza2lwRmFkZSk7XG4gICAgICAgIHRoaXMuaWNvbiA9IG5ldyBPcGFjaXR5U3RhdGUocHJldlN0YXRlID8gcHJldlN0YXRlLmljb24gOiBudWxsLCBpbmNyZW1lbnQsIHBsYWNlZEljb24sIHNraXBGYWRlKTtcbiAgICB9XG4gICAgaXNIaWRkZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQuaXNIaWRkZW4oKSAmJiB0aGlzLmljb24uaXNIaWRkZW4oKTtcbiAgICB9XG59XG5cbmNsYXNzIEpvaW50UGxhY2VtZW50IHtcbiAgICB0ZXh0OiBib29sZWFuO1xuICAgIGljb246IGJvb2xlYW47XG4gICAgLy8gc2tpcEZhZGUgPSBvdXRzaWRlIHZpZXdwb3J0LCBidXQgd2l0aGluIENvbGxpc2lvbkluZGV4Ojp2aWV3cG9ydFBhZGRpbmcgcHggb2YgdGhlIGVkZ2VcbiAgICAvLyBCZWNhdXNlIHRoZXNlIHN5bWJvbHMgYXJlbid0IG9uc2NyZWVuIHlldCwgd2UgY2FuIHNraXAgdGhlIFwiZmFkZSBpblwiIGFuaW1hdGlvbixcbiAgICAvLyBhbmQgaWYgYSBzdWJzZXF1ZW50IHZpZXdwb3J0IGNoYW5nZSBicmluZ3MgdGhlbSBpbnRvIHZpZXcsIHRoZXknbGwgYmUgZnVsbHlcbiAgICAvLyB2aXNpYmxlIHJpZ2h0IGF3YXkuXG4gICAgc2tpcEZhZGU6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IodGV4dDogYm9vbGVhbiwgaWNvbjogYm9vbGVhbiwgc2tpcEZhZGU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgdGhpcy5pY29uID0gaWNvbjtcbiAgICAgICAgdGhpcy5za2lwRmFkZSA9IHNraXBGYWRlO1xuICAgIH1cbn1cblxuY2xhc3MgQ29sbGlzaW9uQ2lyY2xlQXJyYXkge1xuICAgIC8vIFN0b3JlcyBjb2xsaXNpb24gY2lyY2xlcyBhbmQgcGxhY2VtZW50IG1hdHJpY2VzIG9mIGEgYnVja2V0IGZvciBkZWJ1ZyByZW5kZXJpbmcuXG4gICAgaW52UHJvak1hdHJpeDogbWF0NDtcbiAgICB2aWV3cG9ydE1hdHJpeDogbWF0NDtcbiAgICBjaXJjbGVzOiBBcnJheTxudW1iZXI+O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW52UHJvak1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XG4gICAgICAgIHRoaXMudmlld3BvcnRNYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xuICAgICAgICB0aGlzLmNpcmNsZXMgPSBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXRhaW5lZFF1ZXJ5RGF0YSB7XG4gICAgYnVja2V0SW5zdGFuY2VJZDogbnVtYmVyO1xuICAgIGZlYXR1cmVJbmRleDogRmVhdHVyZUluZGV4O1xuICAgIHNvdXJjZUxheWVySW5kZXg6IG51bWJlcjtcbiAgICBidWNrZXRJbmRleDogbnVtYmVyO1xuICAgIHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRDtcbiAgICBmZWF0dXJlU29ydE9yZGVyOiA/QXJyYXk8bnVtYmVyPlxuICAgIGNvbnN0cnVjdG9yKGJ1Y2tldEluc3RhbmNlSWQ6IG51bWJlcixcbiAgICAgICAgICAgICAgICBmZWF0dXJlSW5kZXg6IEZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgICAgICBzb3VyY2VMYXllckluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgYnVja2V0SW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgICAgICB0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpIHtcbiAgICAgICAgdGhpcy5idWNrZXRJbnN0YW5jZUlkID0gYnVja2V0SW5zdGFuY2VJZDtcbiAgICAgICAgdGhpcy5mZWF0dXJlSW5kZXggPSBmZWF0dXJlSW5kZXg7XG4gICAgICAgIHRoaXMuc291cmNlTGF5ZXJJbmRleCA9IHNvdXJjZUxheWVySW5kZXg7XG4gICAgICAgIHRoaXMuYnVja2V0SW5kZXggPSBidWNrZXRJbmRleDtcbiAgICAgICAgdGhpcy50aWxlSUQgPSB0aWxlSUQ7XG4gICAgfVxufVxuXG50eXBlIENvbGxpc2lvbkdyb3VwID0geyBJRDogbnVtYmVyLCBwcmVkaWNhdGU/OiBhbnkgfTtcblxuY2xhc3MgQ29sbGlzaW9uR3JvdXBzIHtcbiAgICBjb2xsaXNpb25Hcm91cHM6IHtbZ3JvdXBOYW1lOiBzdHJpbmddOiBDb2xsaXNpb25Hcm91cH07XG4gICAgbWF4R3JvdXBJRDogbnVtYmVyO1xuICAgIGNyb3NzU291cmNlQ29sbGlzaW9uczogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGNyb3NzU291cmNlQ29sbGlzaW9uczogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmNyb3NzU291cmNlQ29sbGlzaW9ucyA9IGNyb3NzU291cmNlQ29sbGlzaW9ucztcbiAgICAgICAgdGhpcy5tYXhHcm91cElEID0gMDtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25Hcm91cHMgPSB7fTtcbiAgICB9XG5cbiAgICBnZXQoc291cmNlSUQ6IHN0cmluZykge1xuICAgICAgICAvLyBUaGUgcHJlZGljYXRlL2dyb3VwSUQgbWVjaGFuaXNtIGFsbG93cyBmb3IgYXJiaXRyYXJ5IGdyb3VwaW5nLFxuICAgICAgICAvLyBidXQgdGhlIGN1cnJlbnQgaW50ZXJmYWNlIGRlZmluZXMgb25lIHNvdXJjZSA9PSBvbmUgZ3JvdXAgd2hlblxuICAgICAgICAvLyBjcm9zc1NvdXJjZUNvbGxpc2lvbnMgPT0gdHJ1ZS5cbiAgICAgICAgaWYgKCF0aGlzLmNyb3NzU291cmNlQ29sbGlzaW9ucykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbGxpc2lvbkdyb3Vwc1tzb3VyY2VJRF0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0R3JvdXBJRCA9ICsrdGhpcy5tYXhHcm91cElEO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uR3JvdXBzW3NvdXJjZUlEXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgSUQ6IG5leHRHcm91cElELFxuICAgICAgICAgICAgICAgICAgICBwcmVkaWNhdGU6IChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXkuY29sbGlzaW9uR3JvdXBJRCA9PT0gbmV4dEdyb3VwSUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sbGlzaW9uR3JvdXBzW3NvdXJjZUlEXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7SUQ6IDAsIHByZWRpY2F0ZTogbnVsbH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVZhcmlhYmxlTGF5b3V0U2hpZnQoYW5jaG9yOiBUZXh0QW5jaG9yLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgdGV4dE9mZnNldDogW251bWJlciwgbnVtYmVyXSwgdGV4dEJveFNjYWxlOiBudW1iZXIpOiBQb2ludCB7XG4gICAgY29uc3Qge2hvcml6b250YWxBbGlnbiwgdmVydGljYWxBbGlnbn0gPSBnZXRBbmNob3JBbGlnbm1lbnQoYW5jaG9yKTtcbiAgICBjb25zdCBzaGlmdFggPSAtKGhvcml6b250YWxBbGlnbiAtIDAuNSkgKiB3aWR0aDtcbiAgICBjb25zdCBzaGlmdFkgPSAtKHZlcnRpY2FsQWxpZ24gLSAwLjUpICogaGVpZ2h0O1xuICAgIGNvbnN0IG9mZnNldCA9IGV2YWx1YXRlVmFyaWFibGVPZmZzZXQoYW5jaG9yLCB0ZXh0T2Zmc2V0KTtcbiAgICByZXR1cm4gbmV3IFBvaW50KFxuICAgICAgICBzaGlmdFggKyBvZmZzZXRbMF0gKiB0ZXh0Qm94U2NhbGUsXG4gICAgICAgIHNoaWZ0WSArIG9mZnNldFsxXSAqIHRleHRCb3hTY2FsZVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIHNoaWZ0VmFyaWFibGVDb2xsaXNpb25Cb3goY29sbGlzaW9uQm94OiBTaW5nbGVDb2xsaXNpb25Cb3gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hpZnRYOiBudW1iZXIsIHNoaWZ0WTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVdpdGhNYXA6IGJvb2xlYW4sIHBpdGNoV2l0aE1hcDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmdsZTogbnVtYmVyKSB7XG4gICAgY29uc3Qge3gxLCB4MiwgeTEsIHkyLCBhbmNob3JQb2ludFgsIGFuY2hvclBvaW50WX0gPSBjb2xsaXNpb25Cb3g7XG4gICAgY29uc3Qgcm90YXRlZE9mZnNldCA9IG5ldyBQb2ludChzaGlmdFgsIHNoaWZ0WSk7XG4gICAgaWYgKHJvdGF0ZVdpdGhNYXApIHtcbiAgICAgICAgcm90YXRlZE9mZnNldC5fcm90YXRlKHBpdGNoV2l0aE1hcCA/IGFuZ2xlIDogLWFuZ2xlKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDE6IHgxICsgcm90YXRlZE9mZnNldC54LFxuICAgICAgICB5MTogeTEgKyByb3RhdGVkT2Zmc2V0LnksXG4gICAgICAgIHgyOiB4MiArIHJvdGF0ZWRPZmZzZXQueCxcbiAgICAgICAgeTI6IHkyICsgcm90YXRlZE9mZnNldC55LFxuICAgICAgICAvLyBzeW1ib2wgYW5jaG9yIHBvaW50IHN0YXlzIHRoZSBzYW1lIHJlZ2FyZGxlc3Mgb2YgdGV4dC1hbmNob3JcbiAgICAgICAgYW5jaG9yUG9pbnRYLFxuICAgICAgICBhbmNob3JQb2ludFlcbiAgICB9O1xufVxuXG5leHBvcnQgdHlwZSBWYXJpYWJsZU9mZnNldCA9IHtcbiAgICB0ZXh0T2Zmc2V0OiBbbnVtYmVyLCBudW1iZXJdLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgYW5jaG9yOiBUZXh0QW5jaG9yLFxuICAgIHRleHRCb3hTY2FsZTogbnVtYmVyLFxuICAgIHByZXZBbmNob3I/OiBUZXh0QW5jaG9yXG59O1xuXG50eXBlIFRpbGVMYXllclBhcmFtZXRlcnMgPSB7XG4gICAgYnVja2V0OiBTeW1ib2xCdWNrZXQsXG4gICAgbGF5b3V0OiBhbnksXG4gICAgcG9zTWF0cml4OiBtYXQ0LFxuICAgIHRleHRMYWJlbFBsYW5lTWF0cml4OiBtYXQ0LFxuICAgIGxhYmVsVG9TY3JlZW5NYXRyaXg6IG1hdDQsXG4gICAgc2NhbGU6IG51bWJlcixcbiAgICB0ZXh0UGl4ZWxSYXRpbzogbnVtYmVyLFxuICAgIGhvbGRpbmdGb3JGYWRlOiBib29sZWFuLFxuICAgIGNvbGxpc2lvbkJveEFycmF5OiA/Q29sbGlzaW9uQm94QXJyYXksXG4gICAgcGFydGlhbGx5RXZhbHVhdGVkVGV4dFNpemU6IGFueSxcbiAgICBjb2xsaXNpb25Hcm91cDogYW55XG59O1xuXG5leHBvcnQgdHlwZSBCdWNrZXRQYXJ0ID0ge1xuICAgIHNvcnRLZXk/OiBudW1iZXIgfCB2b2lkLFxuICAgIHN5bWJvbEluc3RhbmNlU3RhcnQ6IG51bWJlcixcbiAgICBzeW1ib2xJbnN0YW5jZUVuZDogbnVtYmVyLFxuICAgIHBhcmFtZXRlcnM6IFRpbGVMYXllclBhcmFtZXRlcnNcbn07XG5cbmV4cG9ydCB0eXBlIENyb3NzVGlsZUlEID0gc3RyaW5nIHwgbnVtYmVyO1xuXG5leHBvcnQgY2xhc3MgUGxhY2VtZW50IHtcbiAgICB0cmFuc2Zvcm06IFRyYW5zZm9ybTtcbiAgICBjb2xsaXNpb25JbmRleDogQ29sbGlzaW9uSW5kZXg7XG4gICAgcGxhY2VtZW50czogeyBbXzogQ3Jvc3NUaWxlSURdOiBKb2ludFBsYWNlbWVudCB9O1xuICAgIG9wYWNpdGllczogeyBbXzogQ3Jvc3NUaWxlSURdOiBKb2ludE9wYWNpdHlTdGF0ZSB9O1xuICAgIHZhcmlhYmxlT2Zmc2V0czoge1tfOiBDcm9zc1RpbGVJRF06IFZhcmlhYmxlT2Zmc2V0IH07XG4gICAgcGxhY2VkT3JpZW50YXRpb25zOiB7W186IENyb3NzVGlsZUlEXTogbnVtYmVyIH07XG4gICAgY29tbWl0VGltZTogbnVtYmVyO1xuICAgIHByZXZab29tQWRqdXN0bWVudDogbnVtYmVyO1xuICAgIGxhc3RQbGFjZW1lbnRDaGFuZ2VUaW1lOiBudW1iZXI7XG4gICAgc3RhbGU6IGJvb2xlYW47XG4gICAgZmFkZUR1cmF0aW9uOiBudW1iZXI7XG4gICAgcmV0YWluZWRRdWVyeURhdGE6IHtbXzogbnVtYmVyXTogUmV0YWluZWRRdWVyeURhdGF9O1xuICAgIGNvbGxpc2lvbkdyb3VwczogQ29sbGlzaW9uR3JvdXBzO1xuICAgIHByZXZQbGFjZW1lbnQ6ID9QbGFjZW1lbnQ7XG4gICAgem9vbUF0TGFzdFJlY2VuY3lDaGVjazogbnVtYmVyO1xuICAgIGNvbGxpc2lvbkNpcmNsZUFycmF5czoge1thbnldOiBDb2xsaXNpb25DaXJjbGVBcnJheX07XG5cbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm06IFRyYW5zZm9ybSwgZmFkZUR1cmF0aW9uOiBudW1iZXIsIGNyb3NzU291cmNlQ29sbGlzaW9uczogYm9vbGVhbiwgcHJldlBsYWNlbWVudD86IFBsYWNlbWVudCkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybS5jbG9uZSgpO1xuICAgICAgICB0aGlzLmNvbGxpc2lvbkluZGV4ID0gbmV3IENvbGxpc2lvbkluZGV4KHRoaXMudHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5wbGFjZW1lbnRzID0ge307XG4gICAgICAgIHRoaXMub3BhY2l0aWVzID0ge307XG4gICAgICAgIHRoaXMudmFyaWFibGVPZmZzZXRzID0ge307XG4gICAgICAgIHRoaXMuc3RhbGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb21taXRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5mYWRlRHVyYXRpb24gPSBmYWRlRHVyYXRpb247XG4gICAgICAgIHRoaXMucmV0YWluZWRRdWVyeURhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5jb2xsaXNpb25Hcm91cHMgPSBuZXcgQ29sbGlzaW9uR3JvdXBzKGNyb3NzU291cmNlQ29sbGlzaW9ucyk7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uQ2lyY2xlQXJyYXlzID0ge307XG5cbiAgICAgICAgdGhpcy5wcmV2UGxhY2VtZW50ID0gcHJldlBsYWNlbWVudDtcbiAgICAgICAgaWYgKHByZXZQbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZQbGFjZW1lbnQucHJldlBsYWNlbWVudCA9IHVuZGVmaW5lZDsgLy8gT25seSBob2xkIG9uIHRvIG9uZSBwbGFjZW1lbnQgYmFja1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wbGFjZWRPcmllbnRhdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBnZXRCdWNrZXRQYXJ0cyhyZXN1bHRzOiBBcnJheTxCdWNrZXRQYXJ0Piwgc3R5bGVMYXllcjogU3R5bGVMYXllciwgdGlsZTogVGlsZSwgc29ydEFjcm9zc1RpbGVzOiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IHN5bWJvbEJ1Y2tldCA9ICgodGlsZS5nZXRCdWNrZXQoc3R5bGVMYXllcik6IGFueSk6IFN5bWJvbEJ1Y2tldCk7XG4gICAgICAgIGNvbnN0IGJ1Y2tldEZlYXR1cmVJbmRleCA9IHRpbGUubGF0ZXN0RmVhdHVyZUluZGV4O1xuICAgICAgICBpZiAoIXN5bWJvbEJ1Y2tldCB8fCAhYnVja2V0RmVhdHVyZUluZGV4IHx8IHN0eWxlTGF5ZXIuaWQgIT09IHN5bWJvbEJ1Y2tldC5sYXllcklkc1swXSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjb25zdCBjb2xsaXNpb25Cb3hBcnJheSA9IHRpbGUuY29sbGlzaW9uQm94QXJyYXk7XG5cbiAgICAgICAgY29uc3QgbGF5b3V0ID0gc3ltYm9sQnVja2V0LmxheWVyc1swXS5sYXlvdXQ7XG5cbiAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCB0aGlzLnRyYW5zZm9ybS56b29tIC0gdGlsZS50aWxlSUQub3ZlcnNjYWxlZFopO1xuICAgICAgICBjb25zdCB0ZXh0UGl4ZWxSYXRpbyA9IHRpbGUudGlsZVNpemUgLyBFWFRFTlQ7XG5cbiAgICAgICAgY29uc3QgcG9zTWF0cml4ID0gdGhpcy50cmFuc2Zvcm0uY2FsY3VsYXRlUG9zTWF0cml4KHRpbGUudGlsZUlELnRvVW53cmFwcGVkKCkpO1xuXG4gICAgICAgIGNvbnN0IHBpdGNoV2l0aE1hcCA9IGxheW91dC5nZXQoJ3RleHQtcGl0Y2gtYWxpZ25tZW50JykgPT09ICdtYXAnO1xuICAgICAgICBjb25zdCByb3RhdGVXaXRoTWFwID0gbGF5b3V0LmdldCgndGV4dC1yb3RhdGlvbi1hbGlnbm1lbnQnKSA9PT0gJ21hcCc7XG4gICAgICAgIGNvbnN0IHBpeGVsc1RvVGlsZXMgPSBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCAxLCB0aGlzLnRyYW5zZm9ybS56b29tKTtcblxuICAgICAgICBjb25zdCB0ZXh0TGFiZWxQbGFuZU1hdHJpeCA9IHByb2plY3Rpb24uZ2V0TGFiZWxQbGFuZU1hdHJpeChwb3NNYXRyaXgsXG4gICAgICAgICAgICAgICAgcGl0Y2hXaXRoTWFwLFxuICAgICAgICAgICAgICAgIHJvdGF0ZVdpdGhNYXAsXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgcGl4ZWxzVG9UaWxlcyk7XG5cbiAgICAgICAgbGV0IGxhYmVsVG9TY3JlZW5NYXRyaXggPSBudWxsO1xuXG4gICAgICAgIGlmIChwaXRjaFdpdGhNYXApIHtcbiAgICAgICAgICAgIGNvbnN0IGdsTWF0cml4ID0gcHJvamVjdGlvbi5nZXRHbENvb3JkTWF0cml4KFxuICAgICAgICAgICAgICAgIHBvc01hdHJpeCxcbiAgICAgICAgICAgICAgICBwaXRjaFdpdGhNYXAsXG4gICAgICAgICAgICAgICAgcm90YXRlV2l0aE1hcCxcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICBwaXhlbHNUb1RpbGVzKTtcblxuICAgICAgICAgICAgbGFiZWxUb1NjcmVlbk1hdHJpeCA9IG1hdDQubXVsdGlwbHkoW10sIHRoaXMudHJhbnNmb3JtLmxhYmVsUGxhbmVNYXRyaXgsIGdsTWF0cml4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFzIGxvbmcgYXMgdGhpcyBwbGFjZW1lbnQgbGl2ZXMsIHdlIGhhdmUgdG8gaG9sZCBvbnRvIHRoaXMgYnVja2V0J3NcbiAgICAgICAgLy8gbWF0Y2hpbmcgRmVhdHVyZUluZGV4L2RhdGEgZm9yIHF1ZXJ5aW5nIHB1cnBvc2VzXG4gICAgICAgIHRoaXMucmV0YWluZWRRdWVyeURhdGFbc3ltYm9sQnVja2V0LmJ1Y2tldEluc3RhbmNlSWRdID0gbmV3IFJldGFpbmVkUXVlcnlEYXRhKFxuICAgICAgICAgICAgc3ltYm9sQnVja2V0LmJ1Y2tldEluc3RhbmNlSWQsXG4gICAgICAgICAgICBidWNrZXRGZWF0dXJlSW5kZXgsXG4gICAgICAgICAgICBzeW1ib2xCdWNrZXQuc291cmNlTGF5ZXJJbmRleCxcbiAgICAgICAgICAgIHN5bWJvbEJ1Y2tldC5pbmRleCxcbiAgICAgICAgICAgIHRpbGUudGlsZUlEXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgIGJ1Y2tldDogc3ltYm9sQnVja2V0LFxuICAgICAgICAgICAgbGF5b3V0LFxuICAgICAgICAgICAgcG9zTWF0cml4LFxuICAgICAgICAgICAgdGV4dExhYmVsUGxhbmVNYXRyaXgsXG4gICAgICAgICAgICBsYWJlbFRvU2NyZWVuTWF0cml4LFxuICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICB0ZXh0UGl4ZWxSYXRpbyxcbiAgICAgICAgICAgIGhvbGRpbmdGb3JGYWRlOiB0aWxlLmhvbGRpbmdGb3JGYWRlKCksXG4gICAgICAgICAgICBjb2xsaXNpb25Cb3hBcnJheSxcbiAgICAgICAgICAgIHBhcnRpYWxseUV2YWx1YXRlZFRleHRTaXplOiBzeW1ib2xTaXplLmV2YWx1YXRlU2l6ZUZvclpvb20oc3ltYm9sQnVja2V0LnRleHRTaXplRGF0YSwgdGhpcy50cmFuc2Zvcm0uem9vbSksXG4gICAgICAgICAgICBjb2xsaXNpb25Hcm91cDogdGhpcy5jb2xsaXNpb25Hcm91cHMuZ2V0KHN5bWJvbEJ1Y2tldC5zb3VyY2VJRClcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoc29ydEFjcm9zc1RpbGVzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJhbmdlIG9mIHN5bWJvbEJ1Y2tldC5zb3J0S2V5UmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qge3NvcnRLZXksIHN5bWJvbEluc3RhbmNlU3RhcnQsIHN5bWJvbEluc3RhbmNlRW5kfSA9IHJhbmdlO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7c29ydEtleSwgc3ltYm9sSW5zdGFuY2VTdGFydCwgc3ltYm9sSW5zdGFuY2VFbmQsIHBhcmFtZXRlcnN9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc3ltYm9sSW5zdGFuY2VTdGFydDogMCxcbiAgICAgICAgICAgICAgICBzeW1ib2xJbnN0YW5jZUVuZDogc3ltYm9sQnVja2V0LnN5bWJvbEluc3RhbmNlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhdHRlbXB0QW5jaG9yUGxhY2VtZW50KGFuY2hvcjogVGV4dEFuY2hvciwgdGV4dEJveDogU2luZ2xlQ29sbGlzaW9uQm94LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRCb3hTY2FsZTogbnVtYmVyLCByb3RhdGVXaXRoTWFwOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcGl0Y2hXaXRoTWFwOiBib29sZWFuLCB0ZXh0UGl4ZWxSYXRpbzogbnVtYmVyLCBwb3NNYXRyaXg6IG1hdDQsIGNvbGxpc2lvbkdyb3VwOiBDb2xsaXNpb25Hcm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGxvd092ZXJsYXA6IGJvb2xlYW4sIHN5bWJvbEluc3RhbmNlOiBTeW1ib2xJbnN0YW5jZSwgYnVja2V0OiBTeW1ib2xCdWNrZXQsIG9yaWVudGF0aW9uOiBudW1iZXIsIGljb25Cb3g6ID9TaW5nbGVDb2xsaXNpb25Cb3gpOiA/eyBzaGlmdDogUG9pbnQsIHBsYWNlZEdseXBoQm94ZXM6IHsgYm94OiBBcnJheTxudW1iZXI+LCBvZmZzY3JlZW46IGJvb2xlYW4gfSB9ICB7XG5cbiAgICAgICAgY29uc3QgdGV4dE9mZnNldCA9IFtzeW1ib2xJbnN0YW5jZS50ZXh0T2Zmc2V0MCwgc3ltYm9sSW5zdGFuY2UudGV4dE9mZnNldDFdO1xuICAgICAgICBjb25zdCBzaGlmdCA9IGNhbGN1bGF0ZVZhcmlhYmxlTGF5b3V0U2hpZnQoYW5jaG9yLCB3aWR0aCwgaGVpZ2h0LCB0ZXh0T2Zmc2V0LCB0ZXh0Qm94U2NhbGUpO1xuXG4gICAgICAgIGNvbnN0IHBsYWNlZEdseXBoQm94ZXMgPSB0aGlzLmNvbGxpc2lvbkluZGV4LnBsYWNlQ29sbGlzaW9uQm94KFxuICAgICAgICAgICAgc2hpZnRWYXJpYWJsZUNvbGxpc2lvbkJveChcbiAgICAgICAgICAgICAgICB0ZXh0Qm94LCBzaGlmdC54LCBzaGlmdC55LFxuICAgICAgICAgICAgICAgIHJvdGF0ZVdpdGhNYXAsIHBpdGNoV2l0aE1hcCwgdGhpcy50cmFuc2Zvcm0uYW5nbGUpLFxuICAgICAgICAgICAgdGV4dEFsbG93T3ZlcmxhcCwgdGV4dFBpeGVsUmF0aW8sIHBvc01hdHJpeCwgY29sbGlzaW9uR3JvdXAucHJlZGljYXRlKTtcblxuICAgICAgICBpZiAoaWNvbkJveCkge1xuICAgICAgICAgICAgY29uc3QgcGxhY2VkSWNvbkJveGVzID0gdGhpcy5jb2xsaXNpb25JbmRleC5wbGFjZUNvbGxpc2lvbkJveChcbiAgICAgICAgICAgICAgICBzaGlmdFZhcmlhYmxlQ29sbGlzaW9uQm94KFxuICAgICAgICAgICAgICAgICAgICBpY29uQm94LCBzaGlmdC54LCBzaGlmdC55LFxuICAgICAgICAgICAgICAgICAgICByb3RhdGVXaXRoTWFwLCBwaXRjaFdpdGhNYXAsIHRoaXMudHJhbnNmb3JtLmFuZ2xlKSxcbiAgICAgICAgICAgICAgICB0ZXh0QWxsb3dPdmVybGFwLCB0ZXh0UGl4ZWxSYXRpbywgcG9zTWF0cml4LCBjb2xsaXNpb25Hcm91cC5wcmVkaWNhdGUpO1xuICAgICAgICAgICAgaWYgKHBsYWNlZEljb25Cb3hlcy5ib3gubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGxhY2VkR2x5cGhCb3hlcy5ib3gubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IHByZXZBbmNob3I7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGxhYmVsIHdhcyBwbGFjZWQgaW4gdGhlIHByZXZpb3VzIHBsYWNlbWVudCwgcmVjb3JkIHRoZSBhbmNob3IgcG9zaXRpb25cbiAgICAgICAgICAgIC8vIHRvIGFsbG93IHVzIHRvIGFuaW1hdGUgdGhlIHRyYW5zaXRpb25cbiAgICAgICAgICAgIGlmICh0aGlzLnByZXZQbGFjZW1lbnQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZQbGFjZW1lbnQudmFyaWFibGVPZmZzZXRzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXSAmJlxuICAgICAgICAgICAgICAgIHRoaXMucHJldlBsYWNlbWVudC5wbGFjZW1lbnRzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXSAmJlxuICAgICAgICAgICAgICAgIHRoaXMucHJldlBsYWNlbWVudC5wbGFjZW1lbnRzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXS50ZXh0KSB7XG4gICAgICAgICAgICAgICAgcHJldkFuY2hvciA9IHRoaXMucHJldlBsYWNlbWVudC52YXJpYWJsZU9mZnNldHNbc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdLmFuY2hvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzc2VydChzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRCAhPT0gMCk7XG4gICAgICAgICAgICB0aGlzLnZhcmlhYmxlT2Zmc2V0c1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF0gPSB7XG4gICAgICAgICAgICAgICAgdGV4dE9mZnNldCxcbiAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgICAgIHRleHRCb3hTY2FsZSxcbiAgICAgICAgICAgICAgICBwcmV2QW5jaG9yXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5tYXJrVXNlZEp1c3RpZmljYXRpb24oYnVja2V0LCBhbmNob3IsIHN5bWJvbEluc3RhbmNlLCBvcmllbnRhdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChidWNrZXQuYWxsb3dWZXJ0aWNhbFBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFya1VzZWRPcmllbnRhdGlvbihidWNrZXQsIG9yaWVudGF0aW9uLCBzeW1ib2xJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZWRPcmllbnRhdGlvbnNbc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdID0gb3JpZW50YXRpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7c2hpZnQsIHBsYWNlZEdseXBoQm94ZXN9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxhY2VMYXllckJ1Y2tldFBhcnQoYnVja2V0UGFydDogT2JqZWN0LCBzZWVuQ3Jvc3NUaWxlSURzOiB7IFtzdHJpbmcgfCBudW1iZXJdOiBib29sZWFuIH0sIHNob3dDb2xsaXNpb25Cb3hlczogYm9vbGVhbikge1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGJ1Y2tldCxcbiAgICAgICAgICAgIGxheW91dCxcbiAgICAgICAgICAgIHBvc01hdHJpeCxcbiAgICAgICAgICAgIHRleHRMYWJlbFBsYW5lTWF0cml4LFxuICAgICAgICAgICAgbGFiZWxUb1NjcmVlbk1hdHJpeCxcbiAgICAgICAgICAgIHRleHRQaXhlbFJhdGlvLFxuICAgICAgICAgICAgaG9sZGluZ0ZvckZhZGUsXG4gICAgICAgICAgICBjb2xsaXNpb25Cb3hBcnJheSxcbiAgICAgICAgICAgIHBhcnRpYWxseUV2YWx1YXRlZFRleHRTaXplLFxuICAgICAgICAgICAgY29sbGlzaW9uR3JvdXBcbiAgICAgICAgfSA9IGJ1Y2tldFBhcnQucGFyYW1ldGVycztcblxuICAgICAgICBjb25zdCB0ZXh0T3B0aW9uYWwgPSBsYXlvdXQuZ2V0KCd0ZXh0LW9wdGlvbmFsJyk7XG4gICAgICAgIGNvbnN0IGljb25PcHRpb25hbCA9IGxheW91dC5nZXQoJ2ljb24tb3B0aW9uYWwnKTtcbiAgICAgICAgY29uc3QgdGV4dEFsbG93T3ZlcmxhcCA9IGxheW91dC5nZXQoJ3RleHQtYWxsb3ctb3ZlcmxhcCcpO1xuICAgICAgICBjb25zdCBpY29uQWxsb3dPdmVybGFwID0gbGF5b3V0LmdldCgnaWNvbi1hbGxvdy1vdmVybGFwJyk7XG4gICAgICAgIGNvbnN0IHJvdGF0ZVdpdGhNYXAgPSBsYXlvdXQuZ2V0KCd0ZXh0LXJvdGF0aW9uLWFsaWdubWVudCcpID09PSAnbWFwJztcbiAgICAgICAgY29uc3QgcGl0Y2hXaXRoTWFwID0gbGF5b3V0LmdldCgndGV4dC1waXRjaC1hbGlnbm1lbnQnKSA9PT0gJ21hcCc7XG4gICAgICAgIGNvbnN0IGhhc0ljb25UZXh0Rml0ID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdCcpICE9PSAnbm9uZSc7XG4gICAgICAgIGNvbnN0IHpPcmRlckJ5Vmlld3BvcnRZID0gbGF5b3V0LmdldCgnc3ltYm9sLXotb3JkZXInKSA9PT0gJ3ZpZXdwb3J0LXknO1xuXG4gICAgICAgIC8vIFRoaXMgbG9naWMgaXMgc2ltaWxhciB0byB0aGUgXCJkZWZhdWx0T3BhY2l0eVN0YXRlXCIgbG9naWMgYmVsb3cgaW4gdXBkYXRlQnVja2V0T3BhY2l0aWVzXG4gICAgICAgIC8vIElmIHdlIGtub3cgYSBzeW1ib2wgaXMgYWx3YXlzIHN1cHBvc2VkIHRvIHNob3csIGZvcmNlIGl0IHRvIGJlIG1hcmtlZCB2aXNpYmxlIGV2ZW4gaWZcbiAgICAgICAgLy8gaXQgd2Fzbid0IHBsYWNlZCBpbnRvIHRoZSBjb2xsaXNpb24gaW5kZXggKGJlY2F1c2Ugc29tZSBvciBhbGwgb2YgaXQgd2FzIG91dHNpZGUgdGhlIHJhbmdlXG4gICAgICAgIC8vIG9mIHRoZSBjb2xsaXNpb24gZ3JpZCkuXG4gICAgICAgIC8vIFRoZXJlIGlzIGEgc3VidGxlIGVkZ2UgY2FzZSBoZXJlIHdlJ3JlIGFjY2VwdGluZzpcbiAgICAgICAgLy8gIFN5bWJvbCBBIGhhcyB0ZXh0LWFsbG93LW92ZXJsYXA6IHRydWUsIGljb24tYWxsb3ctb3ZlcmxhcDogdHJ1ZSwgaWNvbi1vcHRpb25hbDogZmFsc2VcbiAgICAgICAgLy8gIEEncyBpY29uIGlzIG91dHNpZGUgdGhlIGdyaWQsIHNvIGRvZXNuJ3QgZ2V0IHBsYWNlZFxuICAgICAgICAvLyAgQSdzIHRleHQgd291bGQgYmUgaW5zaWRlIGdyaWQsIGJ1dCBkb2Vzbid0IGdldCBwbGFjZWQgYmVjYXVzZSBvZiBpY29uLW9wdGlvbmFsOiBmYWxzZVxuICAgICAgICAvLyAgV2Ugc3RpbGwgc2hvdyBBIGJlY2F1c2Ugb2YgdGhlIGFsbG93LW92ZXJsYXAgc2V0dGluZ3MuXG4gICAgICAgIC8vICBTeW1ib2wgQiBoYXMgYWxsb3ctb3ZlcmxhcDogZmFsc2UsIGFuZCBnZXRzIHBsYWNlZCB3aGVyZSBBJ3MgdGV4dCB3b3VsZCBiZVxuICAgICAgICAvLyAgT24gcGFubmluZyBpbiwgdGhlcmUgaXMgYSBzaG9ydCBwZXJpb2Qgd2hlbiBTeW1ib2wgQiBhbmQgU3ltYm9sIEEgd2lsbCBvdmVybGFwXG4gICAgICAgIC8vICBUaGlzIGlzIHRoZSByZXZlcnNlIG9mIG91ciBub3JtYWwgcG9saWN5IG9mIFwiZmFkZSBpbiBvbiBwYW5cIiwgYnV0IHNob3VsZCBsb29rIGxpa2UgYW55IG90aGVyXG4gICAgICAgIC8vICBjb2xsaXNpb24gYW5kIGhvcGVmdWxseSBub3QgYmUgdG9vIG5vdGljZWFibGUuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvNzE3MlxuICAgICAgICBjb25zdCBhbHdheXNTaG93VGV4dCA9IHRleHRBbGxvd092ZXJsYXAgJiYgKGljb25BbGxvd092ZXJsYXAgfHwgIWJ1Y2tldC5oYXNJY29uRGF0YSgpIHx8IGljb25PcHRpb25hbCk7XG4gICAgICAgIGNvbnN0IGFsd2F5c1Nob3dJY29uID0gaWNvbkFsbG93T3ZlcmxhcCAmJiAodGV4dEFsbG93T3ZlcmxhcCB8fCAhYnVja2V0Lmhhc1RleHREYXRhKCkgfHwgdGV4dE9wdGlvbmFsKTtcblxuICAgICAgICBpZiAoIWJ1Y2tldC5jb2xsaXNpb25BcnJheXMgJiYgY29sbGlzaW9uQm94QXJyYXkpIHtcbiAgICAgICAgICAgIGJ1Y2tldC5kZXNlcmlhbGl6ZUNvbGxpc2lvbkJveGVzKGNvbGxpc2lvbkJveEFycmF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBsYWNlU3ltYm9sID0gKHN5bWJvbEluc3RhbmNlOiBTeW1ib2xJbnN0YW5jZSwgY29sbGlzaW9uQXJyYXlzOiBDb2xsaXNpb25BcnJheXMpID0+IHtcbiAgICAgICAgICAgIGlmIChzZWVuQ3Jvc3NUaWxlSURzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGhvbGRpbmdGb3JGYWRlKSB7XG4gICAgICAgICAgICAgICAgLy8gTWFyayBhbGwgc3ltYm9scyBmcm9tIHRoaXMgdGlsZSBhcyBcIm5vdCBwbGFjZWRcIiwgYnV0IGRvbid0IGFkZCB0byBzZWVuQ3Jvc3NUaWxlSURzLCBiZWNhdXNlIHdlIGRvbid0XG4gICAgICAgICAgICAgICAgLy8ga25vdyB5ZXQgaWYgd2UgaGF2ZSBhIGR1cGxpY2F0ZSBpbiBhIHBhcmVudCB0aWxlIHRoYXQgX3Nob3VsZF8gYmUgcGxhY2VkLlxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2VtZW50c1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF0gPSBuZXcgSm9pbnRQbGFjZW1lbnQoZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcGxhY2VUZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgcGxhY2VJY29uID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgb2Zmc2NyZWVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBzaGlmdCA9IG51bGw7XG5cbiAgICAgICAgICAgIGxldCBwbGFjZWQgPSB7Ym94OiBudWxsLCBvZmZzY3JlZW46IG51bGx9O1xuICAgICAgICAgICAgbGV0IHBsYWNlZFZlcnRpY2FsVGV4dCA9IHtib3g6IG51bGwsIG9mZnNjcmVlbjogbnVsbH07XG5cbiAgICAgICAgICAgIGxldCBwbGFjZWRHbHlwaEJveGVzID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBwbGFjZWRHbHlwaENpcmNsZXMgPSBudWxsO1xuICAgICAgICAgICAgbGV0IHBsYWNlZEljb25Cb3hlcyA9IG51bGw7XG4gICAgICAgICAgICBsZXQgdGV4dEZlYXR1cmVJbmRleCA9IDA7XG4gICAgICAgICAgICBsZXQgdmVydGljYWxUZXh0RmVhdHVyZUluZGV4ID0gMDtcbiAgICAgICAgICAgIGxldCBpY29uRmVhdHVyZUluZGV4ID0gMDtcblxuICAgICAgICAgICAgaWYgKGNvbGxpc2lvbkFycmF5cy50ZXh0RmVhdHVyZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGV4dEZlYXR1cmVJbmRleCA9IGNvbGxpc2lvbkFycmF5cy50ZXh0RmVhdHVyZUluZGV4O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzeW1ib2xJbnN0YW5jZS51c2VSdW50aW1lQ29sbGlzaW9uQ2lyY2xlcykge1xuICAgICAgICAgICAgICAgIHRleHRGZWF0dXJlSW5kZXggPSBzeW1ib2xJbnN0YW5jZS5mZWF0dXJlSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29sbGlzaW9uQXJyYXlzLnZlcnRpY2FsVGV4dEZlYXR1cmVJbmRleCkge1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsVGV4dEZlYXR1cmVJbmRleCA9IGNvbGxpc2lvbkFycmF5cy52ZXJ0aWNhbFRleHRGZWF0dXJlSW5kZXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRleHRCb3ggPSBjb2xsaXNpb25BcnJheXMudGV4dEJveDtcbiAgICAgICAgICAgIGlmICh0ZXh0Qm94KSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVQcmV2aW91c09yaWVudGF0aW9uSWZOb3RQbGFjZWQgPSAoaXNQbGFjZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXZpb3VzT3JpZW50YXRpb24gPSBXcml0aW5nTW9kZS5ob3Jpem9udGFsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVja2V0LmFsbG93VmVydGljYWxQbGFjZW1lbnQgJiYgIWlzUGxhY2VkICYmIHRoaXMucHJldlBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldlBsYWNlZE9yaWVudGF0aW9uID0gdGhpcy5wcmV2UGxhY2VtZW50LnBsYWNlZE9yaWVudGF0aW9uc1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldlBsYWNlZE9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGFjZWRPcmllbnRhdGlvbnNbc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdID0gcHJldlBsYWNlZE9yaWVudGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzT3JpZW50YXRpb24gPSBwcmV2UGxhY2VkT3JpZW50YXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrVXNlZE9yaWVudGF0aW9uKGJ1Y2tldCwgcHJldmlvdXNPcmllbnRhdGlvbiwgc3ltYm9sSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c09yaWVudGF0aW9uO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZVRleHRGb3JQbGFjZW1lbnRNb2RlcyA9IChwbGFjZUhvcml6b250YWxGbiwgcGxhY2VWZXJ0aWNhbEZuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWNrZXQuYWxsb3dWZXJ0aWNhbFBsYWNlbWVudCAmJiBzeW1ib2xJbnN0YW5jZS5udW1WZXJ0aWNhbEdseXBoVmVydGljZXMgPiAwICYmIGNvbGxpc2lvbkFycmF5cy52ZXJ0aWNhbFRleHRCb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGxhY2VtZW50TW9kZSBvZiBidWNrZXQud3JpdGluZ01vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlbWVudE1vZGUgPT09IFdyaXRpbmdNb2RlLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlZCA9IHBsYWNlVmVydGljYWxGbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWRWZXJ0aWNhbFRleHQgPSBwbGFjZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VkID0gcGxhY2VIb3Jpem9udGFsRm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlZCAmJiBwbGFjZWQuYm94ICYmIHBsYWNlZC5ib3gubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlZCA9IHBsYWNlSG9yaXpvbnRhbEZuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKCFsYXlvdXQuZ2V0KCd0ZXh0LXZhcmlhYmxlLWFuY2hvcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlQm94ID0gKGNvbGxpc2lvblRleHRCb3gsIG9yaWVudGF0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWRGZWF0dXJlID0gdGhpcy5jb2xsaXNpb25JbmRleC5wbGFjZUNvbGxpc2lvbkJveChjb2xsaXNpb25UZXh0Qm94LCB0ZXh0QWxsb3dPdmVybGFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRQaXhlbFJhdGlvLCBwb3NNYXRyaXgsIGNvbGxpc2lvbkdyb3VwLnByZWRpY2F0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2VkRmVhdHVyZSAmJiBwbGFjZWRGZWF0dXJlLmJveCAmJiBwbGFjZWRGZWF0dXJlLmJveC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtVc2VkT3JpZW50YXRpb24oYnVja2V0LCBvcmllbnRhdGlvbiwgc3ltYm9sSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxhY2VkT3JpZW50YXRpb25zW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXSA9IG9yaWVudGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlZEZlYXR1cmU7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxhY2VIb3Jpem9udGFsID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlQm94KHRleHRCb3gsIFdyaXRpbmdNb2RlLmhvcml6b250YWwpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlVmVydGljYWwgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbFRleHRCb3ggPSBjb2xsaXNpb25BcnJheXMudmVydGljYWxUZXh0Qm94O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1Y2tldC5hbGxvd1ZlcnRpY2FsUGxhY2VtZW50ICYmIHN5bWJvbEluc3RhbmNlLm51bVZlcnRpY2FsR2x5cGhWZXJ0aWNlcyA+IDAgJiYgdmVydGljYWxUZXh0Qm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlQm94KHZlcnRpY2FsVGV4dEJveCwgV3JpdGluZ01vZGUudmVydGljYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtib3g6IG51bGwsIG9mZnNjcmVlbjogbnVsbH07XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcGxhY2VUZXh0Rm9yUGxhY2VtZW50TW9kZXMocGxhY2VIb3Jpem9udGFsLCBwbGFjZVZlcnRpY2FsKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUHJldmlvdXNPcmllbnRhdGlvbklmTm90UGxhY2VkKHBsYWNlZCAmJiBwbGFjZWQuYm94ICYmIHBsYWNlZC5ib3gubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmNob3JzID0gbGF5b3V0LmdldCgndGV4dC12YXJpYWJsZS1hbmNob3InKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIHN5bWJvbCB3YXMgaW4gdGhlIGxhc3QgcGxhY2VtZW50LCBzaGlmdCB0aGUgcHJldmlvdXNseSB1c2VkXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuY2hvciB0byB0aGUgZnJvbnQgb2YgdGhlIGFuY2hvciBsaXN0LCBvbmx5IGlmIHRoZSBwcmV2aW91cyBhbmNob3JcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgc3RpbGwgaW4gdGhlIGFuY2hvciBsaXN0XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByZXZQbGFjZW1lbnQgJiYgdGhpcy5wcmV2UGxhY2VtZW50LnZhcmlhYmxlT2Zmc2V0c1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZPZmZzZXRzID0gdGhpcy5wcmV2UGxhY2VtZW50LnZhcmlhYmxlT2Zmc2V0c1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jaG9ycy5pbmRleE9mKHByZXZPZmZzZXRzLmFuY2hvcikgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9ycyA9IGFuY2hvcnMuZmlsdGVyKGFuY2hvciA9PiBhbmNob3IgIT09IHByZXZPZmZzZXRzLmFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9ycy51bnNoaWZ0KHByZXZPZmZzZXRzLmFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFjZUJveEZvclZhcmlhYmxlQW5jaG9ycyA9IChjb2xsaXNpb25UZXh0Qm94LCBjb2xsaXNpb25JY29uQm94LCBvcmllbnRhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjb2xsaXNpb25UZXh0Qm94LngyIC0gY29sbGlzaW9uVGV4dEJveC54MTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGNvbGxpc2lvblRleHRCb3gueTIgLSBjb2xsaXNpb25UZXh0Qm94LnkxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dEJveFNjYWxlID0gc3ltYm9sSW5zdGFuY2UudGV4dEJveFNjYWxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YXJpYWJsZUljb25Cb3ggPSBoYXNJY29uVGV4dEZpdCAmJiAhaWNvbkFsbG93T3ZlcmxhcCA/IGNvbGxpc2lvbkljb25Cb3ggOiBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGxhY2VkQm94OiA/eyBib3g6IEFycmF5PG51bWJlcj4sIG9mZnNjcmVlbjogYm9vbGVhbiB9ICA9IHtib3g6IFtdLCBvZmZzY3JlZW46IGZhbHNlfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlbWVudEF0dGVtcHRzID0gdGV4dEFsbG93T3ZlcmxhcCA/IGFuY2hvcnMubGVuZ3RoICogMiA6IGFuY2hvcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFjZW1lbnRBdHRlbXB0czsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gYW5jaG9yc1tpICUgYW5jaG9ycy5sZW5ndGhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbG93T3ZlcmxhcCA9IChpID49IGFuY2hvcnMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmF0dGVtcHRBbmNob3JQbGFjZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvciwgY29sbGlzaW9uVGV4dEJveCwgd2lkdGgsIGhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEJveFNjYWxlLCByb3RhdGVXaXRoTWFwLCBwaXRjaFdpdGhNYXAsIHRleHRQaXhlbFJhdGlvLCBwb3NNYXRyaXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbkdyb3VwLCBhbGxvd092ZXJsYXAsIHN5bWJvbEluc3RhbmNlLCBidWNrZXQsIG9yaWVudGF0aW9uLCB2YXJpYWJsZUljb25Cb3gpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWRCb3ggPSByZXN1bHQucGxhY2VkR2x5cGhCb3hlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlZEJveCAmJiBwbGFjZWRCb3guYm94ICYmIHBsYWNlZEJveC5ib3gubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZVRleHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hpZnQgPSByZXN1bHQuc2hpZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlZEJveDtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFjZUhvcml6b250YWwgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGxhY2VCb3hGb3JWYXJpYWJsZUFuY2hvcnModGV4dEJveCwgY29sbGlzaW9uQXJyYXlzLmljb25Cb3gsIFdyaXRpbmdNb2RlLmhvcml6b250YWwpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlVmVydGljYWwgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbFRleHRCb3ggPSBjb2xsaXNpb25BcnJheXMudmVydGljYWxUZXh0Qm94O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2FzUGxhY2VkID0gcGxhY2VkICYmIHBsYWNlZC5ib3ggJiYgcGxhY2VkLmJveC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVja2V0LmFsbG93VmVydGljYWxQbGFjZW1lbnQgJiYgIXdhc1BsYWNlZCAmJiBzeW1ib2xJbnN0YW5jZS5udW1WZXJ0aWNhbEdseXBoVmVydGljZXMgPiAwICYmIHZlcnRpY2FsVGV4dEJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGFjZUJveEZvclZhcmlhYmxlQW5jaG9ycyh2ZXJ0aWNhbFRleHRCb3gsIGNvbGxpc2lvbkFycmF5cy52ZXJ0aWNhbEljb25Cb3gsIFdyaXRpbmdNb2RlLnZlcnRpY2FsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7Ym94OiBudWxsLCBvZmZzY3JlZW46IG51bGx9O1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlVGV4dEZvclBsYWNlbWVudE1vZGVzKHBsYWNlSG9yaXpvbnRhbCwgcGxhY2VWZXJ0aWNhbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYWNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VUZXh0ID0gcGxhY2VkLmJveDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNjcmVlbiA9IHBsYWNlZC5vZmZzY3JlZW47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2T3JpZW50YXRpb24gPSB1cGRhdGVQcmV2aW91c09yaWVudGF0aW9uSWZOb3RQbGFjZWQocGxhY2VkICYmIHBsYWNlZC5ib3gpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGRpZG4ndCBnZXQgcGxhY2VkLCB3ZSBzdGlsbCBuZWVkIHRvIGNvcHkgb3VyIHBvc2l0aW9uIGZyb20gdGhlIGxhc3QgcGxhY2VtZW50IGZvclxuICAgICAgICAgICAgICAgICAgICAvLyBmYWRlIGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGFjZVRleHQgJiYgdGhpcy5wcmV2UGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2T2Zmc2V0ID0gdGhpcy5wcmV2UGxhY2VtZW50LnZhcmlhYmxlT2Zmc2V0c1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldk9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFyaWFibGVPZmZzZXRzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXSA9IHByZXZPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrVXNlZEp1c3RpZmljYXRpb24oYnVja2V0LCBwcmV2T2Zmc2V0LmFuY2hvciwgc3ltYm9sSW5zdGFuY2UsIHByZXZPcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGxhY2VkR2x5cGhCb3hlcyA9IHBsYWNlZDtcbiAgICAgICAgICAgIHBsYWNlVGV4dCA9IHBsYWNlZEdseXBoQm94ZXMgJiYgcGxhY2VkR2x5cGhCb3hlcy5ib3ggJiYgcGxhY2VkR2x5cGhCb3hlcy5ib3gubGVuZ3RoID4gMDtcblxuICAgICAgICAgICAgb2Zmc2NyZWVuID0gcGxhY2VkR2x5cGhCb3hlcyAmJiBwbGFjZWRHbHlwaEJveGVzLm9mZnNjcmVlbjtcblxuICAgICAgICAgICAgaWYgKHN5bWJvbEluc3RhbmNlLnVzZVJ1bnRpbWVDb2xsaXNpb25DaXJjbGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2VkU3ltYm9sID0gYnVja2V0LnRleHQucGxhY2VkU3ltYm9sQXJyYXkuZ2V0KHN5bWJvbEluc3RhbmNlLmNlbnRlckp1c3RpZmllZFRleHRTeW1ib2xJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSBzeW1ib2xTaXplLmV2YWx1YXRlU2l6ZUZvckZlYXR1cmUoYnVja2V0LnRleHRTaXplRGF0YSwgcGFydGlhbGx5RXZhbHVhdGVkVGV4dFNpemUsIHBsYWNlZFN5bWJvbCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0UGl4ZWxQYWRkaW5nID0gbGF5b3V0LmdldCgndGV4dC1wYWRkaW5nJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2lyY2xlUGl4ZWxEaWFtZXRlciA9IHN5bWJvbEluc3RhbmNlLmNvbGxpc2lvbkNpcmNsZURpYW1ldGVyO1xuXG4gICAgICAgICAgICAgICAgcGxhY2VkR2x5cGhDaXJjbGVzID0gdGhpcy5jb2xsaXNpb25JbmRleC5wbGFjZUNvbGxpc2lvbkNpcmNsZXModGV4dEFsbG93T3ZlcmxhcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlZFN5bWJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5saW5lVmVydGV4QXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICBidWNrZXQuZ2x5cGhPZmZzZXRBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zTWF0cml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dExhYmVsUGxhbmVNYXRyaXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFRvU2NyZWVuTWF0cml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbGxpc2lvbkJveGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGl0Y2hXaXRoTWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uR3JvdXAucHJlZGljYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlUGl4ZWxEaWFtZXRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRQaXhlbFBhZGRpbmcpO1xuXG4gICAgICAgICAgICAgICAgYXNzZXJ0KCFwbGFjZWRHbHlwaENpcmNsZXMuY2lyY2xlcy5sZW5ndGggfHwgKCFwbGFjZWRHbHlwaENpcmNsZXMuY29sbGlzaW9uRGV0ZWN0ZWQgfHwgc2hvd0NvbGxpc2lvbkJveGVzKSk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGV4dC1hbGxvdy1vdmVybGFwIGlzIHNldCwgZm9yY2UgXCJwbGFjZWRDaXJjbGVzXCIgdG8gdHJ1ZVxuICAgICAgICAgICAgICAgIC8vIEluIHRoZW9yeSB0aGVyZSBzaG91bGQgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBjaXJjbGUgcGxhY2VkXG4gICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBjYXNlLCBidXQgZm9yIG5vdyBxdWlya3MgaW4gdGV4dC1hbmNob3JcbiAgICAgICAgICAgICAgICAvLyBhbmQgdGV4dC1vZmZzZXQgbWF5IHByZXZlbnQgdGhhdCBmcm9tIGJlaW5nIHRydWUuXG4gICAgICAgICAgICAgICAgcGxhY2VUZXh0ID0gdGV4dEFsbG93T3ZlcmxhcCB8fCAocGxhY2VkR2x5cGhDaXJjbGVzLmNpcmNsZXMubGVuZ3RoID4gMCAmJiAhcGxhY2VkR2x5cGhDaXJjbGVzLmNvbGxpc2lvbkRldGVjdGVkKTtcbiAgICAgICAgICAgICAgICBvZmZzY3JlZW4gPSBvZmZzY3JlZW4gJiYgcGxhY2VkR2x5cGhDaXJjbGVzLm9mZnNjcmVlbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbGxpc2lvbkFycmF5cy5pY29uRmVhdHVyZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWNvbkZlYXR1cmVJbmRleCA9IGNvbGxpc2lvbkFycmF5cy5pY29uRmVhdHVyZUluZGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29sbGlzaW9uQXJyYXlzLmljb25Cb3gpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlSWNvbkZlYXR1cmUgPSBpY29uQm94ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hpZnRlZEljb25Cb3ggPSBoYXNJY29uVGV4dEZpdCAmJiBzaGlmdCA/XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlmdFZhcmlhYmxlQ29sbGlzaW9uQm94KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25Cb3gsIHNoaWZ0LngsIHNoaWZ0LnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlV2l0aE1hcCwgcGl0Y2hXaXRoTWFwLCB0aGlzLnRyYW5zZm9ybS5hbmdsZSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbkJveDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sbGlzaW9uSW5kZXgucGxhY2VDb2xsaXNpb25Cb3goc2hpZnRlZEljb25Cb3gsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uQWxsb3dPdmVybGFwLCB0ZXh0UGl4ZWxSYXRpbywgcG9zTWF0cml4LCBjb2xsaXNpb25Hcm91cC5wcmVkaWNhdGUpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAocGxhY2VkVmVydGljYWxUZXh0ICYmIHBsYWNlZFZlcnRpY2FsVGV4dC5ib3ggJiYgcGxhY2VkVmVydGljYWxUZXh0LmJveC5sZW5ndGggJiYgY29sbGlzaW9uQXJyYXlzLnZlcnRpY2FsSWNvbkJveCkge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZWRJY29uQm94ZXMgPSBwbGFjZUljb25GZWF0dXJlKGNvbGxpc2lvbkFycmF5cy52ZXJ0aWNhbEljb25Cb3gpO1xuICAgICAgICAgICAgICAgICAgICBwbGFjZUljb24gPSBwbGFjZWRJY29uQm94ZXMuYm94Lmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VkSWNvbkJveGVzID0gcGxhY2VJY29uRmVhdHVyZShjb2xsaXNpb25BcnJheXMuaWNvbkJveCk7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlSWNvbiA9IHBsYWNlZEljb25Cb3hlcy5ib3gubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2Zmc2NyZWVuID0gb2Zmc2NyZWVuICYmIHBsYWNlZEljb25Cb3hlcy5vZmZzY3JlZW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGljb25XaXRob3V0VGV4dCA9IHRleHRPcHRpb25hbCB8fFxuICAgICAgICAgICAgICAgIChzeW1ib2xJbnN0YW5jZS5udW1Ib3Jpem9udGFsR2x5cGhWZXJ0aWNlcyA9PT0gMCAmJiBzeW1ib2xJbnN0YW5jZS5udW1WZXJ0aWNhbEdseXBoVmVydGljZXMgPT09IDApO1xuICAgICAgICAgICAgY29uc3QgdGV4dFdpdGhvdXRJY29uID0gaWNvbk9wdGlvbmFsIHx8IHN5bWJvbEluc3RhbmNlLm51bUljb25WZXJ0aWNlcyA9PT0gMDtcblxuICAgICAgICAgICAgLy8gQ29tYmluZSB0aGUgc2NhbGVzIGZvciBpY29ucyBhbmQgdGV4dC5cbiAgICAgICAgICAgIGlmICghaWNvbldpdGhvdXRUZXh0ICYmICF0ZXh0V2l0aG91dEljb24pIHtcbiAgICAgICAgICAgICAgICBwbGFjZUljb24gPSBwbGFjZVRleHQgPSBwbGFjZUljb24gJiYgcGxhY2VUZXh0O1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGV4dFdpdGhvdXRJY29uKSB7XG4gICAgICAgICAgICAgICAgcGxhY2VUZXh0ID0gcGxhY2VJY29uICYmIHBsYWNlVGV4dDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWljb25XaXRob3V0VGV4dCkge1xuICAgICAgICAgICAgICAgIHBsYWNlSWNvbiA9IHBsYWNlSWNvbiAmJiBwbGFjZVRleHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwbGFjZVRleHQgJiYgcGxhY2VkR2x5cGhCb3hlcyAmJiBwbGFjZWRHbHlwaEJveGVzLmJveCkge1xuICAgICAgICAgICAgICAgIGlmIChwbGFjZWRWZXJ0aWNhbFRleHQgJiYgcGxhY2VkVmVydGljYWxUZXh0LmJveCAmJiB2ZXJ0aWNhbFRleHRGZWF0dXJlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25JbmRleC5pbnNlcnRDb2xsaXNpb25Cb3gocGxhY2VkR2x5cGhCb3hlcy5ib3gsIGxheW91dC5nZXQoJ3RleHQtaWdub3JlLXBsYWNlbWVudCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0LmJ1Y2tldEluc3RhbmNlSWQsIHZlcnRpY2FsVGV4dEZlYXR1cmVJbmRleCwgY29sbGlzaW9uR3JvdXAuSUQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uSW5kZXguaW5zZXJ0Q29sbGlzaW9uQm94KHBsYWNlZEdseXBoQm94ZXMuYm94LCBsYXlvdXQuZ2V0KCd0ZXh0LWlnbm9yZS1wbGFjZW1lbnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5idWNrZXRJbnN0YW5jZUlkLCB0ZXh0RmVhdHVyZUluZGV4LCBjb2xsaXNpb25Hcm91cC5JRCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGxhY2VJY29uICYmIHBsYWNlZEljb25Cb3hlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uSW5kZXguaW5zZXJ0Q29sbGlzaW9uQm94KHBsYWNlZEljb25Cb3hlcy5ib3gsIGxheW91dC5nZXQoJ2ljb24taWdub3JlLXBsYWNlbWVudCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0LmJ1Y2tldEluc3RhbmNlSWQsIGljb25GZWF0dXJlSW5kZXgsIGNvbGxpc2lvbkdyb3VwLklEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwbGFjZWRHbHlwaENpcmNsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocGxhY2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uSW5kZXguaW5zZXJ0Q29sbGlzaW9uQ2lyY2xlcyhwbGFjZWRHbHlwaENpcmNsZXMuY2lyY2xlcywgbGF5b3V0LmdldCgndGV4dC1pZ25vcmUtcGxhY2VtZW50JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBidWNrZXQuYnVja2V0SW5zdGFuY2VJZCwgdGV4dEZlYXR1cmVJbmRleCwgY29sbGlzaW9uR3JvdXAuSUQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzaG93Q29sbGlzaW9uQm94ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBidWNrZXQuYnVja2V0SW5zdGFuY2VJZDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNpcmNsZUFycmF5ID0gdGhpcy5jb2xsaXNpb25DaXJjbGVBcnJheXNbaWRdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEdyb3VwIGNvbGxpc2lvbiBjaXJjbGVzIHRvZ2V0aGVyIGJ5IGJ1Y2tldC4gQ2lyY2xlcyBjYW4ndCBiZSBwdXNoZWQgZm9yd2FyZCBmb3IgcmVuZGVyaW5nIHlldCBhcyB0aGUgc3ltYm9sIHBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgYSBidWNrZXQgaXMgbm90IGd1YXJhbnRlZWQgdG8gYmUgY29tcGxldGUgYmVmb3JlIHRoZSBjb21taXQtZnVuY3Rpb24gaGFzIGJlZW4gY2FsbGVkXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaXJjbGVBcnJheSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlQXJyYXkgPSB0aGlzLmNvbGxpc2lvbkNpcmNsZUFycmF5c1tpZF0gPSBuZXcgQ29sbGlzaW9uQ2lyY2xlQXJyYXkoKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYWNlZEdseXBoQ2lyY2xlcy5jaXJjbGVzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGVBcnJheS5jaXJjbGVzLnB1c2gocGxhY2VkR2x5cGhDaXJjbGVzLmNpcmNsZXNbaSArIDBdKTsgICAgICAgICAgICAgIC8vIHhcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZUFycmF5LmNpcmNsZXMucHVzaChwbGFjZWRHbHlwaENpcmNsZXMuY2lyY2xlc1tpICsgMV0pOyAgICAgICAgICAgICAgLy8geVxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlQXJyYXkuY2lyY2xlcy5wdXNoKHBsYWNlZEdseXBoQ2lyY2xlcy5jaXJjbGVzW2kgKyAyXSk7ICAgICAgICAgICAgICAvLyByYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZUFycmF5LmNpcmNsZXMucHVzaChwbGFjZWRHbHlwaENpcmNsZXMuY29sbGlzaW9uRGV0ZWN0ZWQgPyAxIDogMCk7ICAgLy8gY29sbGlzaW9uRGV0ZWN0ZWQtZmxhZ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3NlcnQoc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSUQgIT09IDApO1xuICAgICAgICAgICAgYXNzZXJ0KGJ1Y2tldC5idWNrZXRJbnN0YW5jZUlkICE9PSAwKTtcblxuICAgICAgICAgICAgdGhpcy5wbGFjZW1lbnRzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXSA9IG5ldyBKb2ludFBsYWNlbWVudChwbGFjZVRleHQgfHwgYWx3YXlzU2hvd1RleHQsIHBsYWNlSWNvbiB8fCBhbHdheXNTaG93SWNvbiwgb2Zmc2NyZWVuIHx8IGJ1Y2tldC5qdXN0UmVsb2FkZWQpO1xuICAgICAgICAgICAgc2VlbkNyb3NzVGlsZUlEc1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF0gPSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh6T3JkZXJCeVZpZXdwb3J0WSkge1xuICAgICAgICAgICAgYXNzZXJ0KGJ1Y2tldFBhcnQuc3ltYm9sSW5zdGFuY2VTdGFydCA9PT0gMCk7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xJbmRleGVzID0gYnVja2V0LmdldFNvcnRlZFN5bWJvbEluZGV4ZXModGhpcy50cmFuc2Zvcm0uYW5nbGUpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHN5bWJvbEluZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzeW1ib2xJbmRleCA9IHN5bWJvbEluZGV4ZXNbaV07XG4gICAgICAgICAgICAgICAgcGxhY2VTeW1ib2woYnVja2V0LnN5bWJvbEluc3RhbmNlcy5nZXQoc3ltYm9sSW5kZXgpLCBidWNrZXQuY29sbGlzaW9uQXJyYXlzW3N5bWJvbEluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gYnVja2V0UGFydC5zeW1ib2xJbnN0YW5jZVN0YXJ0OyBpIDwgYnVja2V0UGFydC5zeW1ib2xJbnN0YW5jZUVuZDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGxhY2VTeW1ib2woYnVja2V0LnN5bWJvbEluc3RhbmNlcy5nZXQoaSksIGJ1Y2tldC5jb2xsaXNpb25BcnJheXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNob3dDb2xsaXNpb25Cb3hlcyAmJiBidWNrZXQuYnVja2V0SW5zdGFuY2VJZCBpbiB0aGlzLmNvbGxpc2lvbkNpcmNsZUFycmF5cykge1xuICAgICAgICAgICAgY29uc3QgY2lyY2xlQXJyYXkgPSB0aGlzLmNvbGxpc2lvbkNpcmNsZUFycmF5c1tidWNrZXQuYnVja2V0SW5zdGFuY2VJZF07XG5cbiAgICAgICAgICAgIC8vIFN0b3JlIHZpZXdwb3J0IGFuZCBpbnZlcnNlIHByb2plY3Rpb24gbWF0cmljZXMgcGVyIGJ1Y2tldFxuICAgICAgICAgICAgbWF0NC5pbnZlcnQoY2lyY2xlQXJyYXkuaW52UHJvak1hdHJpeCwgcG9zTWF0cml4KTtcbiAgICAgICAgICAgIGNpcmNsZUFycmF5LnZpZXdwb3J0TWF0cml4ID0gdGhpcy5jb2xsaXNpb25JbmRleC5nZXRWaWV3cG9ydE1hdHJpeCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnVja2V0Lmp1c3RSZWxvYWRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIG1hcmtVc2VkSnVzdGlmaWNhdGlvbihidWNrZXQ6IFN5bWJvbEJ1Y2tldCwgcGxhY2VkQW5jaG9yOiBUZXh0QW5jaG9yLCBzeW1ib2xJbnN0YW5jZTogU3ltYm9sSW5zdGFuY2UsIG9yaWVudGF0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QganVzdGlmaWNhdGlvbnMgPSB7XG4gICAgICAgICAgICBcImxlZnRcIjogc3ltYm9sSW5zdGFuY2UubGVmdEp1c3RpZmllZFRleHRTeW1ib2xJbmRleCxcbiAgICAgICAgICAgIFwiY2VudGVyXCI6IHN5bWJvbEluc3RhbmNlLmNlbnRlckp1c3RpZmllZFRleHRTeW1ib2xJbmRleCxcbiAgICAgICAgICAgIFwicmlnaHRcIjogc3ltYm9sSW5zdGFuY2UucmlnaHRKdXN0aWZpZWRUZXh0U3ltYm9sSW5kZXhcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgYXV0b0luZGV4O1xuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09IFdyaXRpbmdNb2RlLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICBhdXRvSW5kZXggPSBzeW1ib2xJbnN0YW5jZS52ZXJ0aWNhbFBsYWNlZFRleHRTeW1ib2xJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF1dG9JbmRleCA9IGp1c3RpZmljYXRpb25zW2dldEFuY2hvckp1c3RpZmljYXRpb24ocGxhY2VkQW5jaG9yKV07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbmRleGVzID0gW1xuICAgICAgICAgICAgc3ltYm9sSW5zdGFuY2UubGVmdEp1c3RpZmllZFRleHRTeW1ib2xJbmRleCxcbiAgICAgICAgICAgIHN5bWJvbEluc3RhbmNlLmNlbnRlckp1c3RpZmllZFRleHRTeW1ib2xJbmRleCxcbiAgICAgICAgICAgIHN5bWJvbEluc3RhbmNlLnJpZ2h0SnVzdGlmaWVkVGV4dFN5bWJvbEluZGV4LFxuICAgICAgICAgICAgc3ltYm9sSW5zdGFuY2UudmVydGljYWxQbGFjZWRUZXh0U3ltYm9sSW5kZXhcbiAgICAgICAgXTtcblxuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXMpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF1dG9JbmRleCA+PSAwICYmIGluZGV4ICE9PSBhdXRvSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgYXJlIG11bHRpcGxlIGp1c3RpZmljYXRpb25zIGFuZCB0aGlzIG9uZSBpc24ndCBpdDogc2hpZnQgb2Zmc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldC50ZXh0LnBsYWNlZFN5bWJvbEFycmF5LmdldChpbmRleCkuY3Jvc3NUaWxlSUQgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBjaG9zZW4ganVzdGlmaWNhdGlvbiBvciB0aGUganVzdGlmaWNhdGlvbiBpcyBoYXJkd2lyZWQ6IHVzZSB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBidWNrZXQudGV4dC5wbGFjZWRTeW1ib2xBcnJheS5nZXQoaW5kZXgpLmNyb3NzVGlsZUlEID0gc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbWFya1VzZWRPcmllbnRhdGlvbihidWNrZXQ6IFN5bWJvbEJ1Y2tldCwgb3JpZW50YXRpb246IG51bWJlciwgc3ltYm9sSW5zdGFuY2U6IFN5bWJvbEluc3RhbmNlKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSAob3JpZW50YXRpb24gPT09IFdyaXRpbmdNb2RlLmhvcml6b250YWwgfHwgb3JpZW50YXRpb24gPT09IFdyaXRpbmdNb2RlLmhvcml6b250YWxPbmx5KSA/IG9yaWVudGF0aW9uIDogMDtcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSBvcmllbnRhdGlvbiA9PT0gV3JpdGluZ01vZGUudmVydGljYWwgPyBvcmllbnRhdGlvbiA6IDA7XG5cbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbEluZGV4ZXMgPSBbXG4gICAgICAgICAgICBzeW1ib2xJbnN0YW5jZS5sZWZ0SnVzdGlmaWVkVGV4dFN5bWJvbEluZGV4LFxuICAgICAgICAgICAgc3ltYm9sSW5zdGFuY2UuY2VudGVySnVzdGlmaWVkVGV4dFN5bWJvbEluZGV4LFxuICAgICAgICAgICAgc3ltYm9sSW5zdGFuY2UucmlnaHRKdXN0aWZpZWRUZXh0U3ltYm9sSW5kZXhcbiAgICAgICAgXTtcblxuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGhvcml6b250YWxJbmRleGVzKSB7XG4gICAgICAgICAgICBidWNrZXQudGV4dC5wbGFjZWRTeW1ib2xBcnJheS5nZXQoaW5kZXgpLnBsYWNlZE9yaWVudGF0aW9uID0gaG9yaXpvbnRhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW1ib2xJbnN0YW5jZS52ZXJ0aWNhbFBsYWNlZFRleHRTeW1ib2xJbmRleCkge1xuICAgICAgICAgICAgYnVja2V0LnRleHQucGxhY2VkU3ltYm9sQXJyYXkuZ2V0KHN5bWJvbEluc3RhbmNlLnZlcnRpY2FsUGxhY2VkVGV4dFN5bWJvbEluZGV4KS5wbGFjZWRPcmllbnRhdGlvbiA9IHZlcnRpY2FsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tbWl0KG5vdzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tbWl0VGltZSA9IG5vdztcbiAgICAgICAgdGhpcy56b29tQXRMYXN0UmVjZW5jeUNoZWNrID0gdGhpcy50cmFuc2Zvcm0uem9vbTtcblxuICAgICAgICBjb25zdCBwcmV2UGxhY2VtZW50ID0gdGhpcy5wcmV2UGxhY2VtZW50O1xuICAgICAgICBsZXQgcGxhY2VtZW50Q2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMucHJldlpvb21BZGp1c3RtZW50ID0gcHJldlBsYWNlbWVudCA/IHByZXZQbGFjZW1lbnQuem9vbUFkanVzdG1lbnQodGhpcy50cmFuc2Zvcm0uem9vbSkgOiAwO1xuICAgICAgICBjb25zdCBpbmNyZW1lbnQgPSBwcmV2UGxhY2VtZW50ID8gcHJldlBsYWNlbWVudC5zeW1ib2xGYWRlQ2hhbmdlKG5vdykgOiAxO1xuXG4gICAgICAgIGNvbnN0IHByZXZPcGFjaXRpZXMgPSBwcmV2UGxhY2VtZW50ID8gcHJldlBsYWNlbWVudC5vcGFjaXRpZXMgOiB7fTtcbiAgICAgICAgY29uc3QgcHJldk9mZnNldHMgPSBwcmV2UGxhY2VtZW50ID8gcHJldlBsYWNlbWVudC52YXJpYWJsZU9mZnNldHMgOiB7fTtcbiAgICAgICAgY29uc3QgcHJldk9yaWVudGF0aW9ucyA9IHByZXZQbGFjZW1lbnQgPyBwcmV2UGxhY2VtZW50LnBsYWNlZE9yaWVudGF0aW9ucyA6IHt9O1xuXG4gICAgICAgIC8vIGFkZCB0aGUgb3BhY2l0aWVzIGZyb20gdGhlIGN1cnJlbnQgcGxhY2VtZW50LCBhbmQgY29weSB0aGVpciBjdXJyZW50IHZhbHVlcyBmcm9tIHRoZSBwcmV2aW91cyBwbGFjZW1lbnRcbiAgICAgICAgZm9yIChjb25zdCBjcm9zc1RpbGVJRCBpbiB0aGlzLnBsYWNlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGpvaW50UGxhY2VtZW50ID0gdGhpcy5wbGFjZW1lbnRzW2Nyb3NzVGlsZUlEXTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZPcGFjaXR5ID0gcHJldk9wYWNpdGllc1tjcm9zc1RpbGVJRF07XG4gICAgICAgICAgICBpZiAocHJldk9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdGllc1tjcm9zc1RpbGVJRF0gPSBuZXcgSm9pbnRPcGFjaXR5U3RhdGUocHJldk9wYWNpdHksIGluY3JlbWVudCwgam9pbnRQbGFjZW1lbnQudGV4dCwgam9pbnRQbGFjZW1lbnQuaWNvbik7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50Q2hhbmdlZCA9IHBsYWNlbWVudENoYW5nZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgam9pbnRQbGFjZW1lbnQudGV4dCAhPT0gcHJldk9wYWNpdHkudGV4dC5wbGFjZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgam9pbnRQbGFjZW1lbnQuaWNvbiAhPT0gcHJldk9wYWNpdHkuaWNvbi5wbGFjZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub3BhY2l0aWVzW2Nyb3NzVGlsZUlEXSA9IG5ldyBKb2ludE9wYWNpdHlTdGF0ZShudWxsLCBpbmNyZW1lbnQsIGpvaW50UGxhY2VtZW50LnRleHQsIGpvaW50UGxhY2VtZW50Lmljb24sIGpvaW50UGxhY2VtZW50LnNraXBGYWRlKTtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRDaGFuZ2VkID0gcGxhY2VtZW50Q2hhbmdlZCB8fCBqb2ludFBsYWNlbWVudC50ZXh0IHx8IGpvaW50UGxhY2VtZW50Lmljb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb3B5IGFuZCB1cGRhdGUgdmFsdWVzIGZyb20gdGhlIHByZXZpb3VzIHBsYWNlbWVudCB0aGF0IGFyZW4ndCBpbiB0aGUgY3VycmVudCBwbGFjZW1lbnQgYnV0IGhhdmVuJ3QgZmluaXNoZWQgZmFkaW5nXG4gICAgICAgIGZvciAoY29uc3QgY3Jvc3NUaWxlSUQgaW4gcHJldk9wYWNpdGllcykge1xuICAgICAgICAgICAgY29uc3QgcHJldk9wYWNpdHkgPSBwcmV2T3BhY2l0aWVzW2Nyb3NzVGlsZUlEXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcGFjaXRpZXNbY3Jvc3NUaWxlSURdKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgam9pbnRPcGFjaXR5ID0gbmV3IEpvaW50T3BhY2l0eVN0YXRlKHByZXZPcGFjaXR5LCBpbmNyZW1lbnQsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFqb2ludE9wYWNpdHkuaXNIaWRkZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdGllc1tjcm9zc1RpbGVJRF0gPSBqb2ludE9wYWNpdHk7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudENoYW5nZWQgPSBwbGFjZW1lbnRDaGFuZ2VkIHx8IHByZXZPcGFjaXR5LnRleHQucGxhY2VkIHx8IHByZXZPcGFjaXR5Lmljb24ucGxhY2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGNyb3NzVGlsZUlEIGluIHByZXZPZmZzZXRzKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmFyaWFibGVPZmZzZXRzW2Nyb3NzVGlsZUlEXSAmJiB0aGlzLm9wYWNpdGllc1tjcm9zc1RpbGVJRF0gJiYgIXRoaXMub3BhY2l0aWVzW2Nyb3NzVGlsZUlEXS5pc0hpZGRlbigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YXJpYWJsZU9mZnNldHNbY3Jvc3NUaWxlSURdID0gcHJldk9mZnNldHNbY3Jvc3NUaWxlSURdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBjcm9zc1RpbGVJRCBpbiBwcmV2T3JpZW50YXRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGxhY2VkT3JpZW50YXRpb25zW2Nyb3NzVGlsZUlEXSAmJiB0aGlzLm9wYWNpdGllc1tjcm9zc1RpbGVJRF0gJiYgIXRoaXMub3BhY2l0aWVzW2Nyb3NzVGlsZUlEXS5pc0hpZGRlbigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZWRPcmllbnRhdGlvbnNbY3Jvc3NUaWxlSURdID0gcHJldk9yaWVudGF0aW9uc1tjcm9zc1RpbGVJRF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzLmxhc3RQbGFjZW1lbnRDaGFuZ2VUaW1lIGlzIHRoZSB0aW1lIG9mIHRoZSBsYXN0IGNvbW1pdCgpIHRoYXRcbiAgICAgICAgLy8gcmVzdWx0ZWQgaW4gYSBwbGFjZW1lbnQgY2hhbmdlIC0tIGluIG90aGVyIHdvcmRzLCB0aGUgc3RhcnQgdGltZSBvZlxuICAgICAgICAvLyB0aGUgbGFzdCBzeW1ib2wgZmFkZSBhbmltYXRpb25cbiAgICAgICAgYXNzZXJ0KCFwcmV2UGxhY2VtZW50IHx8IHByZXZQbGFjZW1lbnQubGFzdFBsYWNlbWVudENoYW5nZVRpbWUgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChwbGFjZW1lbnRDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RQbGFjZW1lbnRDaGFuZ2VUaW1lID0gbm93O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmxhc3RQbGFjZW1lbnRDaGFuZ2VUaW1lICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5sYXN0UGxhY2VtZW50Q2hhbmdlVGltZSA9IHByZXZQbGFjZW1lbnQgPyBwcmV2UGxhY2VtZW50Lmxhc3RQbGFjZW1lbnRDaGFuZ2VUaW1lIDogbm93O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlTGF5ZXJPcGFjaXRpZXMoc3R5bGVMYXllcjogU3R5bGVMYXllciwgdGlsZXM6IEFycmF5PFRpbGU+KSB7XG4gICAgICAgIGNvbnN0IHNlZW5Dcm9zc1RpbGVJRHMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB0aWxlIG9mIHRpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xCdWNrZXQgPSAoKHRpbGUuZ2V0QnVja2V0KHN0eWxlTGF5ZXIpOiBhbnkpOiBTeW1ib2xCdWNrZXQpO1xuICAgICAgICAgICAgaWYgKHN5bWJvbEJ1Y2tldCAmJiB0aWxlLmxhdGVzdEZlYXR1cmVJbmRleCAmJiBzdHlsZUxheWVyLmlkID09PSBzeW1ib2xCdWNrZXQubGF5ZXJJZHNbMF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUJ1Y2tldE9wYWNpdGllcyhzeW1ib2xCdWNrZXQsIHNlZW5Dcm9zc1RpbGVJRHMsIHRpbGUuY29sbGlzaW9uQm94QXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQnVja2V0T3BhY2l0aWVzKGJ1Y2tldDogU3ltYm9sQnVja2V0LCBzZWVuQ3Jvc3NUaWxlSURzOiB7IFtzdHJpbmcgfCBudW1iZXJdOiBib29sZWFuIH0sIGNvbGxpc2lvbkJveEFycmF5OiA/Q29sbGlzaW9uQm94QXJyYXkpIHtcbiAgICAgICAgaWYgKGJ1Y2tldC5oYXNUZXh0RGF0YSgpKSBidWNrZXQudGV4dC5vcGFjaXR5VmVydGV4QXJyYXkuY2xlYXIoKTtcbiAgICAgICAgaWYgKGJ1Y2tldC5oYXNJY29uRGF0YSgpKSBidWNrZXQuaWNvbi5vcGFjaXR5VmVydGV4QXJyYXkuY2xlYXIoKTtcbiAgICAgICAgaWYgKGJ1Y2tldC5oYXNJY29uQ29sbGlzaW9uQm94RGF0YSgpKSBidWNrZXQuaWNvbkNvbGxpc2lvbkJveC5jb2xsaXNpb25WZXJ0ZXhBcnJheS5jbGVhcigpO1xuICAgICAgICBpZiAoYnVja2V0Lmhhc1RleHRDb2xsaXNpb25Cb3hEYXRhKCkpIGJ1Y2tldC50ZXh0Q29sbGlzaW9uQm94LmNvbGxpc2lvblZlcnRleEFycmF5LmNsZWFyKCk7XG5cbiAgICAgICAgY29uc3QgbGF5b3V0ID0gYnVja2V0LmxheWVyc1swXS5sYXlvdXQ7XG4gICAgICAgIGNvbnN0IGR1cGxpY2F0ZU9wYWNpdHlTdGF0ZSA9IG5ldyBKb2ludE9wYWNpdHlTdGF0ZShudWxsLCAwLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICBjb25zdCB0ZXh0QWxsb3dPdmVybGFwID0gbGF5b3V0LmdldCgndGV4dC1hbGxvdy1vdmVybGFwJyk7XG4gICAgICAgIGNvbnN0IGljb25BbGxvd092ZXJsYXAgPSBsYXlvdXQuZ2V0KCdpY29uLWFsbG93LW92ZXJsYXAnKTtcbiAgICAgICAgY29uc3QgdmFyaWFibGVQbGFjZW1lbnQgPSBsYXlvdXQuZ2V0KCd0ZXh0LXZhcmlhYmxlLWFuY2hvcicpO1xuICAgICAgICBjb25zdCByb3RhdGVXaXRoTWFwID0gbGF5b3V0LmdldCgndGV4dC1yb3RhdGlvbi1hbGlnbm1lbnQnKSA9PT0gJ21hcCc7XG4gICAgICAgIGNvbnN0IHBpdGNoV2l0aE1hcCA9IGxheW91dC5nZXQoJ3RleHQtcGl0Y2gtYWxpZ25tZW50JykgPT09ICdtYXAnO1xuICAgICAgICBjb25zdCBoYXNJY29uVGV4dEZpdCA9IGxheW91dC5nZXQoJ2ljb24tdGV4dC1maXQnKSAhPT0gJ25vbmUnO1xuICAgICAgICAvLyBJZiBhbGxvdy1vdmVybGFwIGlzIHRydWUsIHdlIGNhbiBzaG93IHN5bWJvbHMgYmVmb3JlIHBsYWNlbWVudCBydW5zIG9uIHRoZW1cbiAgICAgICAgLy8gQnV0IHdlIGhhdmUgdG8gd2FpdCBmb3IgcGxhY2VtZW50IGlmIHdlIHBvdGVudGlhbGx5IGRlcGVuZCBvbiBhIHBhaXJlZCBpY29uL3RleHRcbiAgICAgICAgLy8gd2l0aCBhbGxvdy1vdmVybGFwOiBmYWxzZS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy83MDMyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcGFjaXR5U3RhdGUgPSBuZXcgSm9pbnRPcGFjaXR5U3RhdGUobnVsbCwgMCxcbiAgICAgICAgICAgICAgICB0ZXh0QWxsb3dPdmVybGFwICYmIChpY29uQWxsb3dPdmVybGFwIHx8ICFidWNrZXQuaGFzSWNvbkRhdGEoKSB8fCBsYXlvdXQuZ2V0KCdpY29uLW9wdGlvbmFsJykpLFxuICAgICAgICAgICAgICAgIGljb25BbGxvd092ZXJsYXAgJiYgKHRleHRBbGxvd092ZXJsYXAgfHwgIWJ1Y2tldC5oYXNUZXh0RGF0YSgpIHx8IGxheW91dC5nZXQoJ3RleHQtb3B0aW9uYWwnKSksXG4gICAgICAgICAgICAgICAgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKCFidWNrZXQuY29sbGlzaW9uQXJyYXlzICYmIGNvbGxpc2lvbkJveEFycmF5ICYmICgoYnVja2V0Lmhhc0ljb25Db2xsaXNpb25Cb3hEYXRhKCkgfHwgYnVja2V0Lmhhc1RleHRDb2xsaXNpb25Cb3hEYXRhKCkpKSkge1xuICAgICAgICAgICAgYnVja2V0LmRlc2VyaWFsaXplQ29sbGlzaW9uQm94ZXMoY29sbGlzaW9uQm94QXJyYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWRkT3BhY2l0aWVzID0gKGljb25PclRleHQsIG51bVZlcnRpY2VzOiBudW1iZXIsIG9wYWNpdHk6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WZXJ0aWNlcyAvIDQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGljb25PclRleHQub3BhY2l0eVZlcnRleEFycmF5LmVtcGxhY2VCYWNrKG9wYWNpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgYnVja2V0LnN5bWJvbEluc3RhbmNlcy5sZW5ndGg7IHMrKykge1xuICAgICAgICAgICAgY29uc3Qgc3ltYm9sSW5zdGFuY2UgPSBidWNrZXQuc3ltYm9sSW5zdGFuY2VzLmdldChzKTtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBudW1Ib3Jpem9udGFsR2x5cGhWZXJ0aWNlcyxcbiAgICAgICAgICAgICAgICBudW1WZXJ0aWNhbEdseXBoVmVydGljZXMsXG4gICAgICAgICAgICAgICAgY3Jvc3NUaWxlSURcbiAgICAgICAgICAgIH0gPSBzeW1ib2xJbnN0YW5jZTtcblxuICAgICAgICAgICAgY29uc3QgaXNEdXBsaWNhdGUgPSBzZWVuQ3Jvc3NUaWxlSURzW2Nyb3NzVGlsZUlEXTtcblxuICAgICAgICAgICAgbGV0IG9wYWNpdHlTdGF0ZSA9IHRoaXMub3BhY2l0aWVzW2Nyb3NzVGlsZUlEXTtcbiAgICAgICAgICAgIGlmIChpc0R1cGxpY2F0ZSkge1xuICAgICAgICAgICAgICAgIG9wYWNpdHlTdGF0ZSA9IGR1cGxpY2F0ZU9wYWNpdHlTdGF0ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW9wYWNpdHlTdGF0ZSkge1xuICAgICAgICAgICAgICAgIG9wYWNpdHlTdGF0ZSA9IGRlZmF1bHRPcGFjaXR5U3RhdGU7XG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgdGhlIHN0YXRlIHNvIHRoYXQgZnV0dXJlIHBsYWNlbWVudHMgdXNlIGl0IGFzIGEgc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdGllc1tjcm9zc1RpbGVJRF0gPSBvcGFjaXR5U3RhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlZW5Dcm9zc1RpbGVJRHNbY3Jvc3NUaWxlSURdID0gdHJ1ZTtcblxuICAgICAgICAgICAgY29uc3QgaGFzVGV4dCA9IG51bUhvcml6b250YWxHbHlwaFZlcnRpY2VzID4gMCB8fCBudW1WZXJ0aWNhbEdseXBoVmVydGljZXMgPiAwO1xuICAgICAgICAgICAgY29uc3QgaGFzSWNvbiA9IHN5bWJvbEluc3RhbmNlLm51bUljb25WZXJ0aWNlcyA+IDA7XG5cbiAgICAgICAgICAgIGNvbnN0IHBsYWNlZE9yaWVudGF0aW9uID0gdGhpcy5wbGFjZWRPcmllbnRhdGlvbnNbc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdO1xuICAgICAgICAgICAgY29uc3QgaG9yaXpvbnRhbEhpZGRlbiA9IHBsYWNlZE9yaWVudGF0aW9uID09PSBXcml0aW5nTW9kZS52ZXJ0aWNhbDtcbiAgICAgICAgICAgIGNvbnN0IHZlcnRpY2FsSGlkZGVuID0gcGxhY2VkT3JpZW50YXRpb24gPT09IFdyaXRpbmdNb2RlLmhvcml6b250YWwgfHwgcGxhY2VkT3JpZW50YXRpb24gPT09IFdyaXRpbmdNb2RlLmhvcml6b250YWxPbmx5O1xuXG4gICAgICAgICAgICBpZiAoaGFzVGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhY2tlZE9wYWNpdHkgPSBwYWNrT3BhY2l0eShvcGFjaXR5U3RhdGUudGV4dCk7XG4gICAgICAgICAgICAgICAgLy8gVmVydGljYWwgdGV4dCBmYWRlcyBpbi9vdXQgb24gY29sbGlzaW9uIHRoZSBzYW1lIHdheSBhcyBjb3JyZXNwb25kaW5nXG4gICAgICAgICAgICAgICAgLy8gaG9yaXpvbnRhbCB0ZXh0LiBTd2l0Y2ggYmV0d2VlbiB2ZXJ0aWNhbC9ob3Jpem9udGFsIHNob3VsZCBiZSBpbnN0YW50YW5lb3VzXG4gICAgICAgICAgICAgICAgY29uc3QgaG9yaXpvbnRhbE9wYWNpdHkgPSBob3Jpem9udGFsSGlkZGVuID8gUEFDS0VEX0hJRERFTl9PUEFDSVRZIDogcGFja2VkT3BhY2l0eTtcbiAgICAgICAgICAgICAgICBhZGRPcGFjaXRpZXMoYnVja2V0LnRleHQsIG51bUhvcml6b250YWxHbHlwaFZlcnRpY2VzLCBob3Jpem9udGFsT3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVydGljYWxPcGFjaXR5ID0gdmVydGljYWxIaWRkZW4gPyBQQUNLRURfSElEREVOX09QQUNJVFkgOiBwYWNrZWRPcGFjaXR5O1xuICAgICAgICAgICAgICAgIGFkZE9wYWNpdGllcyhidWNrZXQudGV4dCwgbnVtVmVydGljYWxHbHlwaFZlcnRpY2VzLCB2ZXJ0aWNhbE9wYWNpdHkpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBsYWJlbCBpcyBjb21wbGV0ZWx5IGZhZGVkLCBtYXJrIGl0IHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byBjYWxjdWxhdGVcbiAgICAgICAgICAgICAgICAvLyBpdHMgcG9zaXRpb24gYXQgcmVuZGVyIHRpbWUuIElmIHRoaXMgbGF5ZXIgaGFzIHZhcmlhYmxlIHBsYWNlbWVudCwgc2hpZnQgdGhlIHZhcmlvdXNcbiAgICAgICAgICAgICAgICAvLyBzeW1ib2wgaW5zdGFuY2VzIGFwcHJvcHJpYXRlbHkgc28gdGhhdCBzeW1ib2xzIGZyb20gYnVja2V0cyB0aGF0IGhhdmUgeWV0IHRvIGJlIHBsYWNlZFxuICAgICAgICAgICAgICAgIC8vIG9mZnNldCBhcHByb3ByaWF0ZWx5LlxuICAgICAgICAgICAgICAgIGNvbnN0IHN5bWJvbEhpZGRlbiA9IG9wYWNpdHlTdGF0ZS50ZXh0LmlzSGlkZGVuKCk7XG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBzeW1ib2xJbnN0YW5jZS5yaWdodEp1c3RpZmllZFRleHRTeW1ib2xJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sSW5zdGFuY2UuY2VudGVySnVzdGlmaWVkVGV4dFN5bWJvbEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBzeW1ib2xJbnN0YW5jZS5sZWZ0SnVzdGlmaWVkVGV4dFN5bWJvbEluZGV4XG4gICAgICAgICAgICAgICAgXS5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldC50ZXh0LnBsYWNlZFN5bWJvbEFycmF5LmdldChpbmRleCkuaGlkZGVuID0gc3ltYm9sSGlkZGVuIHx8IGhvcml6b250YWxIaWRkZW4gPyAxIDogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN5bWJvbEluc3RhbmNlLnZlcnRpY2FsUGxhY2VkVGV4dFN5bWJvbEluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnVja2V0LnRleHQucGxhY2VkU3ltYm9sQXJyYXkuZ2V0KHN5bWJvbEluc3RhbmNlLnZlcnRpY2FsUGxhY2VkVGV4dFN5bWJvbEluZGV4KS5oaWRkZW4gPSBzeW1ib2xIaWRkZW4gfHwgdmVydGljYWxIaWRkZW4gPyAxIDogMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2T2Zmc2V0ID0gdGhpcy52YXJpYWJsZU9mZnNldHNbc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2T2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFya1VzZWRKdXN0aWZpY2F0aW9uKGJ1Y2tldCwgcHJldk9mZnNldC5hbmNob3IsIHN5bWJvbEluc3RhbmNlLCBwbGFjZWRPcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldk9yaWVudGF0aW9uID0gdGhpcy5wbGFjZWRPcmllbnRhdGlvbnNbc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2T3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrVXNlZEp1c3RpZmljYXRpb24oYnVja2V0LCAnbGVmdCcsIHN5bWJvbEluc3RhbmNlLCBwcmV2T3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtVc2VkT3JpZW50YXRpb24oYnVja2V0LCBwcmV2T3JpZW50YXRpb24sIHN5bWJvbEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNJY29uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFja2VkT3BhY2l0eSA9IHBhY2tPcGFjaXR5KG9wYWNpdHlTdGF0ZS5pY29uKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZUhvcml6b250YWwgPSAhKGhhc0ljb25UZXh0Rml0ICYmIHN5bWJvbEluc3RhbmNlLnZlcnRpY2FsUGxhY2VkSWNvblN5bWJvbEluZGV4ICYmIGhvcml6b250YWxIaWRkZW4pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN5bWJvbEluc3RhbmNlLnBsYWNlZEljb25TeW1ib2xJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvcml6b250YWxPcGFjaXR5ID0gdXNlSG9yaXpvbnRhbCA/IHBhY2tlZE9wYWNpdHkgOiBQQUNLRURfSElEREVOX09QQUNJVFk7XG4gICAgICAgICAgICAgICAgICAgIGFkZE9wYWNpdGllcyhidWNrZXQuaWNvbiwgc3ltYm9sSW5zdGFuY2UubnVtSWNvblZlcnRpY2VzLCBob3Jpem9udGFsT3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5pY29uLnBsYWNlZFN5bWJvbEFycmF5LmdldChzeW1ib2xJbnN0YW5jZS5wbGFjZWRJY29uU3ltYm9sSW5kZXgpLmhpZGRlbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAob3BhY2l0eVN0YXRlLmljb24uaXNIaWRkZW4oKTogYW55KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3ltYm9sSW5zdGFuY2UudmVydGljYWxQbGFjZWRJY29uU3ltYm9sSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbE9wYWNpdHkgPSAhdXNlSG9yaXpvbnRhbCA/IHBhY2tlZE9wYWNpdHkgOiBQQUNLRURfSElEREVOX09QQUNJVFk7XG4gICAgICAgICAgICAgICAgICAgIGFkZE9wYWNpdGllcyhidWNrZXQuaWNvbiwgc3ltYm9sSW5zdGFuY2UubnVtVmVydGljYWxJY29uVmVydGljZXMsIHZlcnRpY2FsT3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5pY29uLnBsYWNlZFN5bWJvbEFycmF5LmdldChzeW1ib2xJbnN0YW5jZS52ZXJ0aWNhbFBsYWNlZEljb25TeW1ib2xJbmRleCkuaGlkZGVuID1cbiAgICAgICAgICAgICAgICAgICAgICAgIChvcGFjaXR5U3RhdGUuaWNvbi5pc0hpZGRlbigpOiBhbnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJ1Y2tldC5oYXNJY29uQ29sbGlzaW9uQm94RGF0YSgpIHx8IGJ1Y2tldC5oYXNUZXh0Q29sbGlzaW9uQm94RGF0YSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uQXJyYXlzID0gYnVja2V0LmNvbGxpc2lvbkFycmF5c1tzXTtcbiAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uQXJyYXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaGlmdCA9IG5ldyBQb2ludCgwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbkFycmF5cy50ZXh0Qm94IHx8IGNvbGxpc2lvbkFycmF5cy52ZXJ0aWNhbFRleHRCb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZVBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhcmlhYmxlT2Zmc2V0ID0gdGhpcy52YXJpYWJsZU9mZnNldHNbY3Jvc3NUaWxlSURdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZU9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgc2hvdyBlaXRoZXIgdGhlIGN1cnJlbnRseSBwbGFjZWQgcG9zaXRpb24gb3IgdGhlIGxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2Vzc2Z1bGx5IHBsYWNlZCBwb3NpdGlvbiAoc28geW91IGNhbiB2aXN1YWxpemUgd2hhdCBjb2xsaXNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBtYWRlIHRoZSBzeW1ib2wgZGlzYXBwZWFyLCBhbmQgdGhlIG1vc3QgbGlrZWx5IHBsYWNlIGZvciB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3ltYm9sIHRvIGNvbWUgYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hpZnQgPSBjYWxjdWxhdGVWYXJpYWJsZUxheW91dFNoaWZ0KHZhcmlhYmxlT2Zmc2V0LmFuY2hvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVPZmZzZXQud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlT2Zmc2V0LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVPZmZzZXQudGV4dE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVPZmZzZXQudGV4dEJveFNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdGF0ZVdpdGhNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoaWZ0Ll9yb3RhdGUocGl0Y2hXaXRoTWFwID8gdGhpcy50cmFuc2Zvcm0uYW5nbGUgOiAtdGhpcy50cmFuc2Zvcm0uYW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gb2Zmc2V0IC0+IHRoaXMgc3ltYm9sIGhhc24ndCBiZWVuIHBsYWNlZCBzaW5jZSBjb21pbmcgb24tc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIHNpbmdsZSBib3ggaXMgcGFydGljdWxhcmx5IG1lYW5pbmdmdWwgYW5kIGFsbCBvZiB0aGVtIHdvdWxkIGJlIHRvbyBub2lzeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIGNlbnRlciBib3gganVzdCB0byBzaG93IHNvbWV0aGluZydzIHRoZXJlLCBidXQgbWFyayBpdCBcIm5vdCB1c2VkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbkFycmF5cy50ZXh0Qm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29sbGlzaW9uVmVydGljZXMoYnVja2V0LnRleHRDb2xsaXNpb25Cb3guY29sbGlzaW9uVmVydGV4QXJyYXksIG9wYWNpdHlTdGF0ZS50ZXh0LnBsYWNlZCwgIXVzZWQgfHwgaG9yaXpvbnRhbEhpZGRlbiwgc2hpZnQueCwgc2hpZnQueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uQXJyYXlzLnZlcnRpY2FsVGV4dEJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbGxpc2lvblZlcnRpY2VzKGJ1Y2tldC50ZXh0Q29sbGlzaW9uQm94LmNvbGxpc2lvblZlcnRleEFycmF5LCBvcGFjaXR5U3RhdGUudGV4dC5wbGFjZWQsICF1c2VkIHx8IHZlcnRpY2FsSGlkZGVuLCBzaGlmdC54LCBzaGlmdC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlcnRpY2FsSWNvblVzZWQgPSBCb29sZWFuKCF2ZXJ0aWNhbEhpZGRlbiAmJiBjb2xsaXNpb25BcnJheXMudmVydGljYWxJY29uQm94KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uQXJyYXlzLmljb25Cb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbGxpc2lvblZlcnRpY2VzKGJ1Y2tldC5pY29uQ29sbGlzaW9uQm94LmNvbGxpc2lvblZlcnRleEFycmF5LCBvcGFjaXR5U3RhdGUuaWNvbi5wbGFjZWQsIHZlcnRpY2FsSWNvblVzZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzSWNvblRleHRGaXQgPyBzaGlmdC54IDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNJY29uVGV4dEZpdCA/IHNoaWZ0LnkgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb25BcnJheXMudmVydGljYWxJY29uQm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb2xsaXNpb25WZXJ0aWNlcyhidWNrZXQuaWNvbkNvbGxpc2lvbkJveC5jb2xsaXNpb25WZXJ0ZXhBcnJheSwgb3BhY2l0eVN0YXRlLmljb24ucGxhY2VkLCAhdmVydGljYWxJY29uVXNlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNJY29uVGV4dEZpdCA/IHNoaWZ0LnggOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0ljb25UZXh0Rml0ID8gc2hpZnQueSA6IDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnVja2V0LnNvcnRGZWF0dXJlcyh0aGlzLnRyYW5zZm9ybS5hbmdsZSk7XG4gICAgICAgIGlmICh0aGlzLnJldGFpbmVkUXVlcnlEYXRhW2J1Y2tldC5idWNrZXRJbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgdGhpcy5yZXRhaW5lZFF1ZXJ5RGF0YVtidWNrZXQuYnVja2V0SW5zdGFuY2VJZF0uZmVhdHVyZVNvcnRPcmRlciA9IGJ1Y2tldC5mZWF0dXJlU29ydE9yZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJ1Y2tldC5oYXNUZXh0RGF0YSgpICYmIGJ1Y2tldC50ZXh0Lm9wYWNpdHlWZXJ0ZXhCdWZmZXIpIHtcbiAgICAgICAgICAgIGJ1Y2tldC50ZXh0Lm9wYWNpdHlWZXJ0ZXhCdWZmZXIudXBkYXRlRGF0YShidWNrZXQudGV4dC5vcGFjaXR5VmVydGV4QXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWNrZXQuaGFzSWNvbkRhdGEoKSAmJiBidWNrZXQuaWNvbi5vcGFjaXR5VmVydGV4QnVmZmVyKSB7XG4gICAgICAgICAgICBidWNrZXQuaWNvbi5vcGFjaXR5VmVydGV4QnVmZmVyLnVwZGF0ZURhdGEoYnVja2V0Lmljb24ub3BhY2l0eVZlcnRleEFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVja2V0Lmhhc0ljb25Db2xsaXNpb25Cb3hEYXRhKCkgJiYgYnVja2V0Lmljb25Db2xsaXNpb25Cb3guY29sbGlzaW9uVmVydGV4QnVmZmVyKSB7XG4gICAgICAgICAgICBidWNrZXQuaWNvbkNvbGxpc2lvbkJveC5jb2xsaXNpb25WZXJ0ZXhCdWZmZXIudXBkYXRlRGF0YShidWNrZXQuaWNvbkNvbGxpc2lvbkJveC5jb2xsaXNpb25WZXJ0ZXhBcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1Y2tldC5oYXNUZXh0Q29sbGlzaW9uQm94RGF0YSgpICYmIGJ1Y2tldC50ZXh0Q29sbGlzaW9uQm94LmNvbGxpc2lvblZlcnRleEJ1ZmZlcikge1xuICAgICAgICAgICAgYnVja2V0LnRleHRDb2xsaXNpb25Cb3guY29sbGlzaW9uVmVydGV4QnVmZmVyLnVwZGF0ZURhdGEoYnVja2V0LnRleHRDb2xsaXNpb25Cb3guY29sbGlzaW9uVmVydGV4QXJyYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXNzZXJ0KGJ1Y2tldC50ZXh0Lm9wYWNpdHlWZXJ0ZXhBcnJheS5sZW5ndGggPT09IGJ1Y2tldC50ZXh0LmxheW91dFZlcnRleEFycmF5Lmxlbmd0aCAvIDQpO1xuICAgICAgICBhc3NlcnQoYnVja2V0Lmljb24ub3BhY2l0eVZlcnRleEFycmF5Lmxlbmd0aCA9PT0gYnVja2V0Lmljb24ubGF5b3V0VmVydGV4QXJyYXkubGVuZ3RoIC8gNCk7XG5cbiAgICAgICAgLy8gUHVzaCBnZW5lcmF0ZWQgY29sbGlzaW9uIGNpcmNsZXMgdG8gdGhlIGJ1Y2tldCBmb3IgZGVidWcgcmVuZGVyaW5nXG4gICAgICAgIGlmIChidWNrZXQuYnVja2V0SW5zdGFuY2VJZCBpbiB0aGlzLmNvbGxpc2lvbkNpcmNsZUFycmF5cykge1xuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmNvbGxpc2lvbkNpcmNsZUFycmF5c1tidWNrZXQuYnVja2V0SW5zdGFuY2VJZF07XG5cbiAgICAgICAgICAgIGJ1Y2tldC5wbGFjZW1lbnRJbnZQcm9qTWF0cml4ID0gaW5zdGFuY2UuaW52UHJvak1hdHJpeDtcbiAgICAgICAgICAgIGJ1Y2tldC5wbGFjZW1lbnRWaWV3cG9ydE1hdHJpeCA9IGluc3RhbmNlLnZpZXdwb3J0TWF0cml4O1xuICAgICAgICAgICAgYnVja2V0LmNvbGxpc2lvbkNpcmNsZUFycmF5ID0gaW5zdGFuY2UuY2lyY2xlcztcblxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29sbGlzaW9uQ2lyY2xlQXJyYXlzW2J1Y2tldC5idWNrZXRJbnN0YW5jZUlkXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN5bWJvbEZhZGVDaGFuZ2Uobm93OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmFkZUR1cmF0aW9uID09PSAwID9cbiAgICAgICAgICAgIDEgOlxuICAgICAgICAgICAgKChub3cgLSB0aGlzLmNvbW1pdFRpbWUpIC8gdGhpcy5mYWRlRHVyYXRpb24gKyB0aGlzLnByZXZab29tQWRqdXN0bWVudCk7XG4gICAgfVxuXG4gICAgem9vbUFkanVzdG1lbnQoem9vbTogbnVtYmVyKSB7XG4gICAgICAgIC8vIFdoZW4gem9vbWluZyBvdXQgcXVpY2tseSwgbGFiZWxzIGNhbiBvdmVybGFwIGVhY2ggb3RoZXIuIFRoaXNcbiAgICAgICAgLy8gYWRqdXN0bWVudCBpcyB1c2VkIHRvIHJlZHVjZSB0aGUgaW50ZXJ2YWwgYmV0d2VlbiBwbGFjZW1lbnQgY2FsY3VsYXRpb25zXG4gICAgICAgIC8vIGFuZCB0byByZWR1Y2UgdGhlIGZhZGUgZHVyYXRpb24gd2hlbiB6b29taW5nIG91dCBxdWlja2x5LiBEaXNjb3ZlcmluZyB0aGVcbiAgICAgICAgLy8gY29sbGlzaW9ucyBtb3JlIHF1aWNrbHkgYW5kIGZhZGluZyB0aGVtIG1vcmUgcXVpY2tseSByZWR1Y2VzIHRoZSB1bndhbnRlZCBlZmZlY3QuXG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCAodGhpcy50cmFuc2Zvcm0uem9vbSAtIHpvb20pIC8gMS41KTtcbiAgICB9XG5cbiAgICBoYXNUcmFuc2l0aW9ucyhub3c6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFsZSB8fFxuICAgICAgICAgICAgbm93IC0gdGhpcy5sYXN0UGxhY2VtZW50Q2hhbmdlVGltZSA8IHRoaXMuZmFkZUR1cmF0aW9uO1xuICAgIH1cblxuICAgIHN0aWxsUmVjZW50KG5vdzogbnVtYmVyLCB6b29tOiBudW1iZXIpIHtcbiAgICAgICAgLy8gVGhlIGFkanVzdG1lbnQgbWFrZXMgcGxhY2VtZW50IG1vcmUgZnJlcXVlbnQgd2hlbiB6b29taW5nLlxuICAgICAgICAvLyBUaGlzIGNvbmRpdGlvbiBhcHBsaWVzIHRoZSBhZGp1c3RtZW50IG9ubHkgYWZ0ZXIgdGhlIG1hcCBoYXNcbiAgICAgICAgLy8gc3RvcHBlZCB6b29taW5nLiBUaGlzIGF2b2lkcyBhZGRpbmcgZXh0cmEgamFuayB3aGlsZSB6b29taW5nLlxuICAgICAgICBjb25zdCBkdXJhdGlvbkFkanVzdG1lbnQgPSB0aGlzLnpvb21BdExhc3RSZWNlbmN5Q2hlY2sgPT09IHpvb20gP1xuICAgICAgICAgICAgKDEgLSB0aGlzLnpvb21BZGp1c3RtZW50KHpvb20pKSA6XG4gICAgICAgICAgICAxO1xuICAgICAgICB0aGlzLnpvb21BdExhc3RSZWNlbmN5Q2hlY2sgPSB6b29tO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1pdFRpbWUgKyB0aGlzLmZhZGVEdXJhdGlvbiAqIGR1cmF0aW9uQWRqdXN0bWVudCA+IG5vdztcbiAgICB9XG5cbiAgICBzZXRTdGFsZSgpIHtcbiAgICAgICAgdGhpcy5zdGFsZSA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb2xsaXNpb25WZXJ0aWNlcyhjb2xsaXNpb25WZXJ0ZXhBcnJheTogQ29sbGlzaW9uVmVydGV4QXJyYXksIHBsYWNlZDogYm9vbGVhbiwgbm90VXNlZDogYm9vbGVhbiB8IG51bWJlciwgc2hpZnRYPzogbnVtYmVyLCBzaGlmdFk/OiBudW1iZXIpIHtcbiAgICBjb2xsaXNpb25WZXJ0ZXhBcnJheS5lbXBsYWNlQmFjayhwbGFjZWQgPyAxIDogMCwgbm90VXNlZCA/IDEgOiAwLCBzaGlmdFggfHwgMCwgc2hpZnRZIHx8IDApO1xuICAgIGNvbGxpc2lvblZlcnRleEFycmF5LmVtcGxhY2VCYWNrKHBsYWNlZCA/IDEgOiAwLCBub3RVc2VkID8gMSA6IDAsIHNoaWZ0WCB8fCAwLCBzaGlmdFkgfHwgMCk7XG4gICAgY29sbGlzaW9uVmVydGV4QXJyYXkuZW1wbGFjZUJhY2socGxhY2VkID8gMSA6IDAsIG5vdFVzZWQgPyAxIDogMCwgc2hpZnRYIHx8IDAsIHNoaWZ0WSB8fCAwKTtcbiAgICBjb2xsaXNpb25WZXJ0ZXhBcnJheS5lbXBsYWNlQmFjayhwbGFjZWQgPyAxIDogMCwgbm90VXNlZCA/IDEgOiAwLCBzaGlmdFggfHwgMCwgc2hpZnRZIHx8IDApO1xufVxuXG4vLyBBbGwgZm91ciB2ZXJ0aWNlcyBmb3IgYSBnbHlwaCB3aWxsIGhhdmUgdGhlIHNhbWUgb3BhY2l0eSBzdGF0ZVxuLy8gU28gd2UgcGFjayB0aGUgb3BhY2l0eSBpbnRvIGEgdWludDgsIGFuZCB0aGVuIHJlcGVhdCBpdCBmb3VyIHRpbWVzXG4vLyB0byBtYWtlIGEgc2luZ2xlIHVpbnQzMiB0aGF0IHdlIGNhbiB1cGxvYWQgZm9yIGVhY2ggZ2x5cGggaW4gdGhlXG4vLyBsYWJlbC5cbmNvbnN0IHNoaWZ0MjUgPSBNYXRoLnBvdygyLCAyNSk7XG5jb25zdCBzaGlmdDI0ID0gTWF0aC5wb3coMiwgMjQpO1xuY29uc3Qgc2hpZnQxNyA9IE1hdGgucG93KDIsIDE3KTtcbmNvbnN0IHNoaWZ0MTYgPSBNYXRoLnBvdygyLCAxNik7XG5jb25zdCBzaGlmdDkgPSBNYXRoLnBvdygyLCA5KTtcbmNvbnN0IHNoaWZ0OCA9IE1hdGgucG93KDIsIDgpO1xuY29uc3Qgc2hpZnQxID0gTWF0aC5wb3coMiwgMSk7XG5mdW5jdGlvbiBwYWNrT3BhY2l0eShvcGFjaXR5U3RhdGU6IE9wYWNpdHlTdGF0ZSk6IG51bWJlciB7XG4gICAgaWYgKG9wYWNpdHlTdGF0ZS5vcGFjaXR5ID09PSAwICYmICFvcGFjaXR5U3RhdGUucGxhY2VkKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAob3BhY2l0eVN0YXRlLm9wYWNpdHkgPT09IDEgJiYgb3BhY2l0eVN0YXRlLnBsYWNlZCkge1xuICAgICAgICByZXR1cm4gNDI5NDk2NzI5NTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0Qml0ID0gb3BhY2l0eVN0YXRlLnBsYWNlZCA/IDEgOiAwO1xuICAgIGNvbnN0IG9wYWNpdHlCaXRzID0gTWF0aC5mbG9vcihvcGFjaXR5U3RhdGUub3BhY2l0eSAqIDEyNyk7XG4gICAgcmV0dXJuIG9wYWNpdHlCaXRzICogc2hpZnQyNSArIHRhcmdldEJpdCAqIHNoaWZ0MjQgK1xuICAgICAgICBvcGFjaXR5Qml0cyAqIHNoaWZ0MTcgKyB0YXJnZXRCaXQgKiBzaGlmdDE2ICtcbiAgICAgICAgb3BhY2l0eUJpdHMgKiBzaGlmdDkgKyB0YXJnZXRCaXQgKiBzaGlmdDggK1xuICAgICAgICBvcGFjaXR5Qml0cyAqIHNoaWZ0MSArIHRhcmdldEJpdDtcbn1cblxuY29uc3QgUEFDS0VEX0hJRERFTl9PUEFDSVRZID0gMDtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5cbmltcG9ydCB7UGxhY2VtZW50fSBmcm9tICcuLi9zeW1ib2wvcGxhY2VtZW50JztcblxuaW1wb3J0IHR5cGUgVHJhbnNmb3JtIGZyb20gJy4uL2dlby90cmFuc2Zvcm0nO1xuaW1wb3J0IHR5cGUgU3R5bGVMYXllciBmcm9tICcuL3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIFN5bWJvbFN0eWxlTGF5ZXIgZnJvbSAnLi9zdHlsZV9sYXllci9zeW1ib2xfc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLi9zb3VyY2UvdGlsZSc7XG5pbXBvcnQgdHlwZSB7QnVja2V0UGFydH0gZnJvbSAnLi4vc3ltYm9sL3BsYWNlbWVudCc7XG5cbmNsYXNzIExheWVyUGxhY2VtZW50IHtcbiAgICBfc29ydEFjcm9zc1RpbGVzOiBib29sZWFuO1xuICAgIF9jdXJyZW50VGlsZUluZGV4OiBudW1iZXI7XG4gICAgX2N1cnJlbnRQYXJ0SW5kZXg6IG51bWJlcjtcbiAgICBfc2VlbkNyb3NzVGlsZUlEczogeyBbc3RyaW5nIHwgbnVtYmVyXTogYm9vbGVhbiB9O1xuICAgIF9idWNrZXRQYXJ0czogQXJyYXk8QnVja2V0UGFydD47XG5cbiAgICBjb25zdHJ1Y3RvcihzdHlsZUxheWVyOiBTeW1ib2xTdHlsZUxheWVyKSB7XG4gICAgICAgIHRoaXMuX3NvcnRBY3Jvc3NUaWxlcyA9IHN0eWxlTGF5ZXIubGF5b3V0LmdldCgnc3ltYm9sLXotb3JkZXInKSAhPT0gJ3ZpZXdwb3J0LXknICYmXG4gICAgICAgICAgICBzdHlsZUxheWVyLmxheW91dC5nZXQoJ3N5bWJvbC1zb3J0LWtleScpLmNvbnN0YW50T3IoMSkgIT09IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLl9jdXJyZW50VGlsZUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5fY3VycmVudFBhcnRJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX3NlZW5Dcm9zc1RpbGVJRHMgPSB7fTtcbiAgICAgICAgdGhpcy5fYnVja2V0UGFydHMgPSBbXTtcbiAgICB9XG5cbiAgICBjb250aW51ZVBsYWNlbWVudCh0aWxlczogQXJyYXk8VGlsZT4sIHBsYWNlbWVudDogUGxhY2VtZW50LCBzaG93Q29sbGlzaW9uQm94ZXM6IGJvb2xlYW4sIHN0eWxlTGF5ZXI6IFN0eWxlTGF5ZXIsIHNob3VsZFBhdXNlUGxhY2VtZW50OiAoKSA9PiBib29sZWFuKSB7XG5cbiAgICAgICAgY29uc3QgYnVja2V0UGFydHMgPSB0aGlzLl9idWNrZXRQYXJ0cztcblxuICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudFRpbGVJbmRleCA8IHRpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRpbGVzW3RoaXMuX2N1cnJlbnRUaWxlSW5kZXhdO1xuICAgICAgICAgICAgcGxhY2VtZW50LmdldEJ1Y2tldFBhcnRzKGJ1Y2tldFBhcnRzLCBzdHlsZUxheWVyLCB0aWxlLCB0aGlzLl9zb3J0QWNyb3NzVGlsZXMpO1xuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGlsZUluZGV4Kys7XG4gICAgICAgICAgICBpZiAoc2hvdWxkUGF1c2VQbGFjZW1lbnQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3NvcnRBY3Jvc3NUaWxlcykge1xuICAgICAgICAgICAgdGhpcy5fc29ydEFjcm9zc1RpbGVzID0gZmFsc2U7XG4gICAgICAgICAgICBidWNrZXRQYXJ0cy5zb3J0KChhLCBiKSA9PiAoKGEuc29ydEtleTogYW55KTogbnVtYmVyKSAtICgoYi5zb3J0S2V5OiBhbnkpOiBudW1iZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlICh0aGlzLl9jdXJyZW50UGFydEluZGV4IDwgYnVja2V0UGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBidWNrZXRQYXJ0ID0gYnVja2V0UGFydHNbdGhpcy5fY3VycmVudFBhcnRJbmRleF07XG4gICAgICAgICAgICBwbGFjZW1lbnQucGxhY2VMYXllckJ1Y2tldFBhcnQoYnVja2V0UGFydCwgdGhpcy5fc2VlbkNyb3NzVGlsZUlEcywgc2hvd0NvbGxpc2lvbkJveGVzKTtcblxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFBhcnRJbmRleCsrO1xuICAgICAgICAgICAgaWYgKHNob3VsZFBhdXNlUGxhY2VtZW50KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5jbGFzcyBQYXVzZWFibGVQbGFjZW1lbnQge1xuICAgIHBsYWNlbWVudDogUGxhY2VtZW50O1xuICAgIF9kb25lOiBib29sZWFuO1xuICAgIF9jdXJyZW50UGxhY2VtZW50SW5kZXg6IG51bWJlcjtcbiAgICBfZm9yY2VGdWxsUGxhY2VtZW50OiBib29sZWFuO1xuICAgIF9zaG93Q29sbGlzaW9uQm94ZXM6IGJvb2xlYW47XG4gICAgX2luUHJvZ3Jlc3NMYXllcjogP0xheWVyUGxhY2VtZW50O1xuXG4gICAgY29uc3RydWN0b3IodHJhbnNmb3JtOiBUcmFuc2Zvcm0sIG9yZGVyOiBBcnJheTxzdHJpbmc+LFxuICAgICAgICAgICAgICAgIGZvcmNlRnVsbFBsYWNlbWVudDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICBzaG93Q29sbGlzaW9uQm94ZXM6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgZmFkZUR1cmF0aW9uOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgY3Jvc3NTb3VyY2VDb2xsaXNpb25zOiBib29sZWFuLFxuICAgICAgICAgICAgICAgIHByZXZQbGFjZW1lbnQ/OiBQbGFjZW1lbnQpIHtcblxuICAgICAgICB0aGlzLnBsYWNlbWVudCA9IG5ldyBQbGFjZW1lbnQodHJhbnNmb3JtLCBmYWRlRHVyYXRpb24sIGNyb3NzU291cmNlQ29sbGlzaW9ucywgcHJldlBsYWNlbWVudCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRQbGFjZW1lbnRJbmRleCA9IG9yZGVyLmxlbmd0aCAtIDE7XG4gICAgICAgIHRoaXMuX2ZvcmNlRnVsbFBsYWNlbWVudCA9IGZvcmNlRnVsbFBsYWNlbWVudDtcbiAgICAgICAgdGhpcy5fc2hvd0NvbGxpc2lvbkJveGVzID0gc2hvd0NvbGxpc2lvbkJveGVzO1xuICAgICAgICB0aGlzLl9kb25lID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaXNEb25lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZG9uZTtcbiAgICB9XG5cbiAgICBjb250aW51ZVBsYWNlbWVudChvcmRlcjogQXJyYXk8c3RyaW5nPiwgbGF5ZXJzOiB7W186IHN0cmluZ106IFN0eWxlTGF5ZXJ9LCBsYXllclRpbGVzOiB7W186IHN0cmluZ106IEFycmF5PFRpbGU+fSkge1xuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBicm93c2VyLm5vdygpO1xuXG4gICAgICAgIGNvbnN0IHNob3VsZFBhdXNlUGxhY2VtZW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxhcHNlZFRpbWUgPSBicm93c2VyLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcmNlRnVsbFBsYWNlbWVudCA/IGZhbHNlIDogZWxhcHNlZFRpbWUgPiAyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdoaWxlICh0aGlzLl9jdXJyZW50UGxhY2VtZW50SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgbGF5ZXJJZCA9IG9yZGVyW3RoaXMuX2N1cnJlbnRQbGFjZW1lbnRJbmRleF07XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IGxheWVyc1tsYXllcklkXTtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlbWVudFpvb20gPSB0aGlzLnBsYWNlbWVudC5jb2xsaXNpb25JbmRleC50cmFuc2Zvcm0uem9vbTtcbiAgICAgICAgICAgIGlmIChsYXllci50eXBlID09PSAnc3ltYm9sJyAmJlxuICAgICAgICAgICAgICAgICghbGF5ZXIubWluem9vbSB8fCBsYXllci5taW56b29tIDw9IHBsYWNlbWVudFpvb20pICYmXG4gICAgICAgICAgICAgICAgKCFsYXllci5tYXh6b29tIHx8IGxheWVyLm1heHpvb20gPiBwbGFjZW1lbnRab29tKSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pblByb2dyZXNzTGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5Qcm9ncmVzc0xheWVyID0gbmV3IExheWVyUGxhY2VtZW50KCgobGF5ZXI6IGFueSk6IFN5bWJvbFN0eWxlTGF5ZXIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXVzZVBsYWNlbWVudCA9IHRoaXMuX2luUHJvZ3Jlc3NMYXllci5jb250aW51ZVBsYWNlbWVudChsYXllclRpbGVzW2xheWVyLnNvdXJjZV0sIHRoaXMucGxhY2VtZW50LCB0aGlzLl9zaG93Q29sbGlzaW9uQm94ZXMsIGxheWVyLCBzaG91bGRQYXVzZVBsYWNlbWVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGF1c2VQbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZGlkbid0IGZpbmlzaCBwbGFjaW5nIGFsbCBsYXllcnMgd2l0aGluIDJtcyxcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IHdlIGNhbiBrZWVwIHJlbmRlcmluZyB3aXRoIGEgcGFydGlhbCBwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UnbGwgcmVzdW1lIGhlcmUgb24gdGhlIG5leHQgZnJhbWVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9pblByb2dyZXNzTGF5ZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQbGFjZW1lbnRJbmRleC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG4gICAgfVxuXG4gICAgY29tbWl0KG5vdzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucGxhY2VtZW50LmNvbW1pdChub3cpO1xuICAgICAgICByZXR1cm4gdGhpcy5wbGFjZW1lbnQ7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXVzZWFibGVQbGFjZW1lbnQ7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcblxuaW1wb3J0IHtTeW1ib2xJbnN0YW5jZUFycmF5fSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcblxuaW1wb3J0IHR5cGUge1N5bWJvbEluc3RhbmNlfSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5pbXBvcnQgdHlwZSBTeW1ib2xCdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvc3ltYm9sX2J1Y2tldCc7XG5pbXBvcnQgdHlwZSBTdHlsZUxheWVyIGZyb20gJy4uL3N0eWxlL3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi4vc291cmNlL3RpbGUnO1xuXG4vKlxuICAgIFRoZSBDcm9zc1RpbGVTeW1ib2xJbmRleCBnZW5lcmFsbHkgd29ya3Mgb24gdGhlIGFzc3VtcHRpb24gdGhhdFxuICAgIGEgY29uY2VwdHVhbCBcInVuaXF1ZSBzeW1ib2xcIiBjYW4gYmUgaWRlbnRpZmllZCBieSB0aGUgdGV4dCBvZlxuICAgIHRoZSBsYWJlbCBjb21iaW5lZCB3aXRoIHRoZSBhbmNob3IgcG9pbnQuIFRoZSBnb2FsIGlzIHRvIGFzc2lnblxuICAgIHRoZXNlIGNvbmNlcHR1YWwgXCJ1bmlxdWUgc3ltYm9sc1wiIGEgc2hhcmVkIGNyb3NzVGlsZUlEIHRoYXQgY2FuIGJlXG4gICAgdXNlZCBieSBQbGFjZW1lbnQgdG8ga2VlcCBmYWRpbmcgb3BhY2l0eSBzdGF0ZXMgY29uc2lzdGVudCBhbmQgdG9cbiAgICBkZWR1cGxpY2F0ZSBsYWJlbHMuXG5cbiAgICBUaGUgQ3Jvc3NUaWxlU3ltYm9sSW5kZXggaW5kZXhlcyBhbGwgdGhlIGN1cnJlbnQgc3ltYm9sIGluc3RhbmNlcyBhbmRcbiAgICB0aGVpciBjcm9zc1RpbGVJRHMuIFdoZW4gYSBzeW1ib2wgYnVja2V0IGdldHMgYWRkZWQgb3IgdXBkYXRlZCwgdGhlXG4gICAgaW5kZXggYXNzaWducyBhIGNyb3NzVGlsZUlEIHRvIGVhY2ggb2YgaXQncyBzeW1ib2wgaW5zdGFuY2VzIGJ5IGVpdGhlclxuICAgIG1hdGNoaW5nIGl0IHdpdGggYW4gZXhpc3RpbmcgaWQgb3IgYXNzaWduaW5nIGEgbmV3IG9uZS5cbiovXG5cbi8vIFJvdW5kIGFuY2hvciBwb3NpdGlvbnMgdG8gcm91Z2hseSA0IHBpeGVsIGdyaWRcbmNvbnN0IHJvdW5kaW5nRmFjdG9yID0gNTEyIC8gRVhURU5UIC8gMjtcblxuY2xhc3MgVGlsZUxheWVySW5kZXgge1xuICAgIHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRDtcbiAgICBpbmRleGVkU3ltYm9sSW5zdGFuY2VzOiB7W186IG51bWJlcl06IEFycmF5PHtcbiAgICAgICAgY3Jvc3NUaWxlSUQ6IG51bWJlcixcbiAgICAgICAgY29vcmQ6IHtcbiAgICAgICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgICAgIHk6IG51bWJlclxuICAgICAgICB9XG4gICAgfT59O1xuICAgIGJ1Y2tldEluc3RhbmNlSWQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgc3ltYm9sSW5zdGFuY2VzOiBTeW1ib2xJbnN0YW5jZUFycmF5LCBidWNrZXRJbnN0YW5jZUlkOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy50aWxlSUQgPSB0aWxlSUQ7XG4gICAgICAgIHRoaXMuaW5kZXhlZFN5bWJvbEluc3RhbmNlcyA9IHt9O1xuICAgICAgICB0aGlzLmJ1Y2tldEluc3RhbmNlSWQgPSBidWNrZXRJbnN0YW5jZUlkO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ltYm9sSW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xJbnN0YW5jZSA9IHN5bWJvbEluc3RhbmNlcy5nZXQoaSk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBzeW1ib2xJbnN0YW5jZS5rZXk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5kZXhlZFN5bWJvbEluc3RhbmNlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleGVkU3ltYm9sSW5zdGFuY2VzW2tleV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoaXMgdGlsZSBtYXkgaGF2ZSBtdWx0aXBsZSBzeW1ib2wgaW5zdGFuY2VzIHdpdGggdGhlIHNhbWUga2V5XG4gICAgICAgICAgICAvLyBTdG9yZSBlYWNoIG9uZSBhbG9uZyB3aXRoIGl0cyBjb29yZGluYXRlc1xuICAgICAgICAgICAgdGhpcy5pbmRleGVkU3ltYm9sSW5zdGFuY2VzW2tleV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgY3Jvc3NUaWxlSUQ6IHN5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlELFxuICAgICAgICAgICAgICAgIGNvb3JkOiB0aGlzLmdldFNjYWxlZENvb3JkaW5hdGVzKHN5bWJvbEluc3RhbmNlLCB0aWxlSUQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgaW5wdXQgc3ltYm9sIGluc3RhbmNlIGludG8gY29vcmRpbmF0ZXMgdGhhdCBiZSBjYW4gY29tcGFyZWRcbiAgICAvLyBhZ2FpbnN0IG90aGVyIHN5bWJvbHMgaW4gdGhpcyBpbmRleC4gQ29vcmRpbmF0ZXMgYXJlOlxuICAgIC8vICgxKSB3b3JsZC1iYXNlZCAoc28gYWZ0ZXIgY29udmVyc2lvbiB0aGUgc291cmNlIHRpbGUgaXMgaXJyZWxldmFudClcbiAgICAvLyAoMikgY29udmVydGVkIHRvIHRoZSB6LXNjYWxlIG9mIHRoaXMgVGlsZUxheWVySW5kZXhcbiAgICAvLyAoMykgZG93bi1zYW1wbGVkIGJ5IFwicm91bmRpbmdGYWN0b3JcIiBmcm9tIHRpbGUgY29vcmRpbmF0ZSBwcmVjaXNpb24gaW4gb3JkZXIgdG8gYmVcbiAgICAvLyAgICAgbW9yZSB0b2xlcmFudCBvZiBzbWFsbCBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRpbGVzLlxuICAgIGdldFNjYWxlZENvb3JkaW5hdGVzKHN5bWJvbEluc3RhbmNlOiBTeW1ib2xJbnN0YW5jZSwgY2hpbGRUaWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpIHtcbiAgICAgICAgY29uc3QgekRpZmZlcmVuY2UgPSBjaGlsZFRpbGVJRC5jYW5vbmljYWwueiAtIHRoaXMudGlsZUlELmNhbm9uaWNhbC56O1xuICAgICAgICBjb25zdCBzY2FsZSA9IHJvdW5kaW5nRmFjdG9yIC8gTWF0aC5wb3coMiwgekRpZmZlcmVuY2UpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogTWF0aC5mbG9vcigoY2hpbGRUaWxlSUQuY2Fub25pY2FsLnggKiBFWFRFTlQgKyBzeW1ib2xJbnN0YW5jZS5hbmNob3JYKSAqIHNjYWxlKSxcbiAgICAgICAgICAgIHk6IE1hdGguZmxvb3IoKGNoaWxkVGlsZUlELmNhbm9uaWNhbC55ICogRVhURU5UICsgc3ltYm9sSW5zdGFuY2UuYW5jaG9yWSkgKiBzY2FsZSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmaW5kTWF0Y2hlcyhzeW1ib2xJbnN0YW5jZXM6IFN5bWJvbEluc3RhbmNlQXJyYXksIG5ld1RpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgem9vbUNyb3NzVGlsZUlEczoge1tjcm9zc1RpbGVJRDogbnVtYmVyXTogYm9vbGVhbn0pIHtcbiAgICAgICAgY29uc3QgdG9sZXJhbmNlID0gdGhpcy50aWxlSUQuY2Fub25pY2FsLnogPCBuZXdUaWxlSUQuY2Fub25pY2FsLnogPyAxIDogTWF0aC5wb3coMiwgdGhpcy50aWxlSUQuY2Fub25pY2FsLnogLSBuZXdUaWxlSUQuY2Fub25pY2FsLnopO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ltYm9sSW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xJbnN0YW5jZSA9IHN5bWJvbEluc3RhbmNlcy5nZXQoaSk7XG4gICAgICAgICAgICBpZiAoc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSUQpIHtcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGhhcyBhIG1hdGNoLCBza2lwXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGluZGV4ZWRJbnN0YW5jZXMgPSB0aGlzLmluZGV4ZWRTeW1ib2xJbnN0YW5jZXNbc3ltYm9sSW5zdGFuY2Uua2V5XTtcbiAgICAgICAgICAgIGlmICghaW5kZXhlZEluc3RhbmNlcykge1xuICAgICAgICAgICAgICAgIC8vIE5vIHN5bWJvbCB3aXRoIHRoaXMga2V5IGluIHRoaXMgYnVja2V0XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNjYWxlZFN5bWJvbENvb3JkID0gdGhpcy5nZXRTY2FsZWRDb29yZGluYXRlcyhzeW1ib2xJbnN0YW5jZSwgbmV3VGlsZUlEKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCB0aGlzVGlsZVN5bWJvbCBvZiBpbmRleGVkSW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGFueSBzeW1ib2wgd2l0aCB0aGUgc2FtZSBrZXlzIHdob3NlIGNvb3JkaW5hdGVzIGFyZSB3aXRoaW4gMVxuICAgICAgICAgICAgICAgIC8vIGdyaWQgdW5pdC4gKHdpdGggYSA0cHggZ3JpZCwgdGhpcyBjb3ZlcnMgYSAxMnB4IGJ5IDEycHggYXJlYSlcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModGhpc1RpbGVTeW1ib2wuY29vcmQueCAtIHNjYWxlZFN5bWJvbENvb3JkLngpIDw9IHRvbGVyYW5jZSAmJlxuICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyh0aGlzVGlsZVN5bWJvbC5jb29yZC55IC0gc2NhbGVkU3ltYm9sQ29vcmQueSkgPD0gdG9sZXJhbmNlICYmXG4gICAgICAgICAgICAgICAgICAgICF6b29tQ3Jvc3NUaWxlSURzW3RoaXNUaWxlU3ltYm9sLmNyb3NzVGlsZUlEXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmNlIHdlJ3ZlIG1hcmtlZCBvdXJzZWx2ZXMgZHVwbGljYXRlIGFnYWluc3QgdGhpcyBwYXJlbnQgc3ltYm9sLFxuICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBsZXQgYW55IG90aGVyIHN5bWJvbHMgYXQgdGhlIHNhbWUgem9vbSBsZXZlbCBkdXBsaWNhdGUgYWdhaW5zdFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2FtZSBwYXJlbnQgKHNlZSBpc3N1ZSAjNTk5MylcbiAgICAgICAgICAgICAgICAgICAgem9vbUNyb3NzVGlsZUlEc1t0aGlzVGlsZVN5bWJvbC5jcm9zc1RpbGVJRF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRCA9IHRoaXNUaWxlU3ltYm9sLmNyb3NzVGlsZUlEO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIENyb3NzVGlsZUlEcyB7XG4gICAgbWF4Q3Jvc3NUaWxlSUQ6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYXhDcm9zc1RpbGVJRCA9IDA7XG4gICAgfVxuICAgIGdlbmVyYXRlKCkge1xuICAgICAgICByZXR1cm4gKyt0aGlzLm1heENyb3NzVGlsZUlEO1xuICAgIH1cbn1cblxuY2xhc3MgQ3Jvc3NUaWxlU3ltYm9sTGF5ZXJJbmRleCB7XG4gICAgaW5kZXhlczoge1t6b29tOiBzdHJpbmcgfCBudW1iZXJdOiB7W3RpbGVJZDogc3RyaW5nIHwgbnVtYmVyXTogVGlsZUxheWVySW5kZXh9fTtcbiAgICB1c2VkQ3Jvc3NUaWxlSURzOiB7W3pvb206IHN0cmluZyB8IG51bWJlcl06IHtbY3Jvc3NUaWxlSUQ6IG51bWJlcl06IGJvb2xlYW59fTtcbiAgICBsbmc6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluZGV4ZXMgPSB7fTtcbiAgICAgICAgdGhpcy51c2VkQ3Jvc3NUaWxlSURzID0ge307XG4gICAgICAgIHRoaXMubG5nID0gMDtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFNvbWV0aW1lcyB3aGVuIGEgdXNlciBwYW5zIGFjcm9zcyB0aGUgYW50aW1lcmlkaWFuIHRoZSBsb25naXR1ZGUgdmFsdWUgZ2V0cyB3cmFwcGVkLlxuICAgICAqIFRvIHByZXZlbnQgbGFiZWxzIGZyb20gZmxhc2hpbmcgb3V0IGFuZCBpbiB3ZSBhZGp1c3QgdGhlIHRpbGVJRCB2YWx1ZXMgaW4gdGhlIGluZGV4ZXNcbiAgICAgKiBzbyB0aGF0IHRoZXkgbWF0Y2ggdGhlIG5ldyB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIG1hcC5cbiAgICAgKi9cbiAgICBoYW5kbGVXcmFwSnVtcChsbmc6IG51bWJlcikge1xuICAgICAgICBjb25zdCB3cmFwRGVsdGEgPSBNYXRoLnJvdW5kKChsbmcgLSB0aGlzLmxuZykgLyAzNjApO1xuICAgICAgICBpZiAod3JhcERlbHRhICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHpvb20gaW4gdGhpcy5pbmRleGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgem9vbUluZGV4ZXMgPSB0aGlzLmluZGV4ZXNbem9vbV07XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Wm9vbUluZGV4ID0ge307XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gem9vbUluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhbmdlIHRoZSB0aWxlSUQncyB3cmFwIGFuZCBhZGQgaXQgdG8gYSBuZXcgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB6b29tSW5kZXhlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBpbmRleC50aWxlSUQgPSBpbmRleC50aWxlSUQudW53cmFwVG8oaW5kZXgudGlsZUlELndyYXAgKyB3cmFwRGVsdGEpO1xuICAgICAgICAgICAgICAgICAgICBuZXdab29tSW5kZXhbaW5kZXgudGlsZUlELmtleV0gPSBpbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRleGVzW3pvb21dID0gbmV3Wm9vbUluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubG5nID0gbG5nO1xuICAgIH1cblxuICAgIGFkZEJ1Y2tldCh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQsIGJ1Y2tldDogU3ltYm9sQnVja2V0LCBjcm9zc1RpbGVJRHM6IENyb3NzVGlsZUlEcykge1xuICAgICAgICBpZiAodGhpcy5pbmRleGVzW3RpbGVJRC5vdmVyc2NhbGVkWl0gJiZcbiAgICAgICAgICAgIHRoaXMuaW5kZXhlc1t0aWxlSUQub3ZlcnNjYWxlZFpdW3RpbGVJRC5rZXldKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleGVzW3RpbGVJRC5vdmVyc2NhbGVkWl1bdGlsZUlELmtleV0uYnVja2V0SW5zdGFuY2VJZCA9PT1cbiAgICAgICAgICAgICAgICBidWNrZXQuYnVja2V0SW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2UncmUgcmVwbGFjaW5nIHRoaXMgYnVja2V0IHdpdGggYW4gdXBkYXRlZCB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBvbGQgYnVja2V0J3MgXCJ1c2VkIGNyb3NzVGlsZUlEc1wiIG5vdyBzbyB0aGF0XG4gICAgICAgICAgICAgICAgLy8gdGhlIG5ldyBidWNrZXQgY2FuIGNsYWltIHRoZW0uXG4gICAgICAgICAgICAgICAgLy8gVGhlIG9sZCBpbmRleCBlbnRyaWVzIHRoZW1zZWx2ZXMgc3RpY2sgYXJvdW5kIHVudGlsXG4gICAgICAgICAgICAgICAgLy8gJ3JlbW92ZVN0YWxlQnVja2V0cycgaXMgY2FsbGVkLlxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQnVja2V0Q3Jvc3NUaWxlSURzKHRpbGVJRC5vdmVyc2NhbGVkWixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleGVzW3RpbGVJRC5vdmVyc2NhbGVkWl1bdGlsZUlELmtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWNrZXQuc3ltYm9sSW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xJbnN0YW5jZSA9IGJ1Y2tldC5zeW1ib2xJbnN0YW5jZXMuZ2V0KGkpO1xuICAgICAgICAgICAgc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSUQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnVzZWRDcm9zc1RpbGVJRHNbdGlsZUlELm92ZXJzY2FsZWRaXSkge1xuICAgICAgICAgICAgdGhpcy51c2VkQ3Jvc3NUaWxlSURzW3RpbGVJRC5vdmVyc2NhbGVkWl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB6b29tQ3Jvc3NUaWxlSURzID0gdGhpcy51c2VkQ3Jvc3NUaWxlSURzW3RpbGVJRC5vdmVyc2NhbGVkWl07XG5cbiAgICAgICAgZm9yIChjb25zdCB6b29tIGluIHRoaXMuaW5kZXhlcykge1xuICAgICAgICAgICAgY29uc3Qgem9vbUluZGV4ZXMgPSB0aGlzLmluZGV4ZXNbem9vbV07XG4gICAgICAgICAgICBpZiAoTnVtYmVyKHpvb20pID4gdGlsZUlELm92ZXJzY2FsZWRaKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiB6b29tSW5kZXhlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEluZGV4ID0gem9vbUluZGV4ZXNbaWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRJbmRleC50aWxlSUQuaXNDaGlsZE9mKHRpbGVJRCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkSW5kZXguZmluZE1hdGNoZXMoYnVja2V0LnN5bWJvbEluc3RhbmNlcywgdGlsZUlELCB6b29tQ3Jvc3NUaWxlSURzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50Q29vcmQgPSB0aWxlSUQuc2NhbGVkVG8oTnVtYmVyKHpvb20pKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJbmRleCA9IHpvb21JbmRleGVzW3BhcmVudENvb3JkLmtleV07XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudEluZGV4LmZpbmRNYXRjaGVzKGJ1Y2tldC5zeW1ib2xJbnN0YW5jZXMsIHRpbGVJRCwgem9vbUNyb3NzVGlsZUlEcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWNrZXQuc3ltYm9sSW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xJbnN0YW5jZSA9IGJ1Y2tldC5zeW1ib2xJbnN0YW5jZXMuZ2V0KGkpO1xuICAgICAgICAgICAgaWYgKCFzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRCkge1xuICAgICAgICAgICAgICAgIC8vIHN5bWJvbCBkaWQgbm90IG1hdGNoIGFueSBrbm93biBzeW1ib2wsIGFzc2lnbiBhIG5ldyBpZFxuICAgICAgICAgICAgICAgIHN5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEID0gY3Jvc3NUaWxlSURzLmdlbmVyYXRlKCk7XG4gICAgICAgICAgICAgICAgem9vbUNyb3NzVGlsZUlEc1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaW5kZXhlc1t0aWxlSUQub3ZlcnNjYWxlZFpdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhlc1t0aWxlSUQub3ZlcnNjYWxlZFpdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmRleGVzW3RpbGVJRC5vdmVyc2NhbGVkWl1bdGlsZUlELmtleV0gPSBuZXcgVGlsZUxheWVySW5kZXgodGlsZUlELCBidWNrZXQuc3ltYm9sSW5zdGFuY2VzLCBidWNrZXQuYnVja2V0SW5zdGFuY2VJZCk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmVtb3ZlQnVja2V0Q3Jvc3NUaWxlSURzKHpvb206IHN0cmluZyB8IG51bWJlciwgcmVtb3ZlZEJ1Y2tldDogVGlsZUxheWVySW5kZXgpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmVtb3ZlZEJ1Y2tldC5pbmRleGVkU3ltYm9sSW5zdGFuY2VzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN5bWJvbEluc3RhbmNlIG9mIHJlbW92ZWRCdWNrZXQuaW5kZXhlZFN5bWJvbEluc3RhbmNlc1soa2V5OiBhbnkpXSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVzZWRDcm9zc1RpbGVJRHNbem9vbV1bc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlU3RhbGVCdWNrZXRzKGN1cnJlbnRJRHM6IHsgW3N0cmluZyB8IG51bWJlcl06IGJvb2xlYW4gfSkge1xuICAgICAgICBsZXQgdGlsZXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgeiBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHpvb21JbmRleGVzID0gdGhpcy5pbmRleGVzW3pdO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0aWxlS2V5IGluIHpvb21JbmRleGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50SURzW3pvb21JbmRleGVzW3RpbGVLZXldLmJ1Y2tldEluc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQnVja2V0Q3Jvc3NUaWxlSURzKHosIHpvb21JbmRleGVzW3RpbGVLZXldKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHpvb21JbmRleGVzW3RpbGVLZXldO1xuICAgICAgICAgICAgICAgICAgICB0aWxlc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlsZXNDaGFuZ2VkO1xuICAgIH1cbn1cblxuY2xhc3MgQ3Jvc3NUaWxlU3ltYm9sSW5kZXgge1xuICAgIGxheWVySW5kZXhlczoge1tsYXllcklkOiBzdHJpbmddOiBDcm9zc1RpbGVTeW1ib2xMYXllckluZGV4fTtcbiAgICBjcm9zc1RpbGVJRHM6IENyb3NzVGlsZUlEcztcbiAgICBtYXhCdWNrZXRJbnN0YW5jZUlkOiBudW1iZXI7XG4gICAgYnVja2V0c0luQ3VycmVudFBsYWNlbWVudDoge1tfOiBudW1iZXJdOiBib29sZWFufTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxheWVySW5kZXhlcyA9IHt9O1xuICAgICAgICB0aGlzLmNyb3NzVGlsZUlEcyA9IG5ldyBDcm9zc1RpbGVJRHMoKTtcbiAgICAgICAgdGhpcy5tYXhCdWNrZXRJbnN0YW5jZUlkID0gMDtcbiAgICAgICAgdGhpcy5idWNrZXRzSW5DdXJyZW50UGxhY2VtZW50ID0ge307XG4gICAgfVxuXG4gICAgYWRkTGF5ZXIoc3R5bGVMYXllcjogU3R5bGVMYXllciwgdGlsZXM6IEFycmF5PFRpbGU+LCBsbmc6IG51bWJlcikge1xuICAgICAgICBsZXQgbGF5ZXJJbmRleCA9IHRoaXMubGF5ZXJJbmRleGVzW3N0eWxlTGF5ZXIuaWRdO1xuICAgICAgICBpZiAobGF5ZXJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsYXllckluZGV4ID0gdGhpcy5sYXllckluZGV4ZXNbc3R5bGVMYXllci5pZF0gPSBuZXcgQ3Jvc3NUaWxlU3ltYm9sTGF5ZXJJbmRleCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN5bWJvbEJ1Y2tldHNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRCdWNrZXRJRHMgPSB7fTtcblxuICAgICAgICBsYXllckluZGV4LmhhbmRsZVdyYXBKdW1wKGxuZyk7XG5cbiAgICAgICAgZm9yIChjb25zdCB0aWxlIG9mIHRpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xCdWNrZXQgPSAoKHRpbGUuZ2V0QnVja2V0KHN0eWxlTGF5ZXIpOiBhbnkpOiBTeW1ib2xCdWNrZXQpO1xuICAgICAgICAgICAgaWYgKCFzeW1ib2xCdWNrZXQgfHwgc3R5bGVMYXllci5pZCAhPT0gc3ltYm9sQnVja2V0LmxheWVySWRzWzBdKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoIXN5bWJvbEJ1Y2tldC5idWNrZXRJbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sQnVja2V0LmJ1Y2tldEluc3RhbmNlSWQgPSArK3RoaXMubWF4QnVja2V0SW5zdGFuY2VJZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxheWVySW5kZXguYWRkQnVja2V0KHRpbGUudGlsZUlELCBzeW1ib2xCdWNrZXQsIHRoaXMuY3Jvc3NUaWxlSURzKSkge1xuICAgICAgICAgICAgICAgIHN5bWJvbEJ1Y2tldHNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRCdWNrZXRJRHNbc3ltYm9sQnVja2V0LmJ1Y2tldEluc3RhbmNlSWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXllckluZGV4LnJlbW92ZVN0YWxlQnVja2V0cyhjdXJyZW50QnVja2V0SURzKSkge1xuICAgICAgICAgICAgc3ltYm9sQnVja2V0c0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN5bWJvbEJ1Y2tldHNDaGFuZ2VkO1xuICAgIH1cblxuICAgIHBydW5lVW51c2VkTGF5ZXJzKHVzZWRMYXllcnM6IEFycmF5PHN0cmluZz4pIHtcbiAgICAgICAgY29uc3QgdXNlZExheWVyTWFwID0ge307XG4gICAgICAgIHVzZWRMYXllcnMuZm9yRWFjaCgodXNlZExheWVyKSA9PiB7XG4gICAgICAgICAgICB1c2VkTGF5ZXJNYXBbdXNlZExheWVyXSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IGxheWVySWQgaW4gdGhpcy5sYXllckluZGV4ZXMpIHtcbiAgICAgICAgICAgIGlmICghdXNlZExheWVyTWFwW2xheWVySWRdKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubGF5ZXJJbmRleGVzW2xheWVySWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDcm9zc1RpbGVTeW1ib2xJbmRleDtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuaW1wb3J0IHtFdmVudCwgRXJyb3JFdmVudCwgRXZlbnRlZH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcbmltcG9ydCBTdHlsZUxheWVyIGZyb20gJy4vc3R5bGVfbGF5ZXInO1xuaW1wb3J0IGNyZWF0ZVN0eWxlTGF5ZXIgZnJvbSAnLi9jcmVhdGVfc3R5bGVfbGF5ZXInO1xuaW1wb3J0IGxvYWRTcHJpdGUgZnJvbSAnLi9sb2FkX3Nwcml0ZSc7XG5pbXBvcnQgSW1hZ2VNYW5hZ2VyIGZyb20gJy4uL3JlbmRlci9pbWFnZV9tYW5hZ2VyJztcbmltcG9ydCBHbHlwaE1hbmFnZXIgZnJvbSAnLi4vcmVuZGVyL2dseXBoX21hbmFnZXInO1xuaW1wb3J0IExpZ2h0IGZyb20gJy4vbGlnaHQnO1xuaW1wb3J0IExpbmVBdGxhcyBmcm9tICcuLi9yZW5kZXIvbGluZV9hdGxhcyc7XG5pbXBvcnQge3BpY2ssIGNsb25lLCBleHRlbmQsIGRlZXBFcXVhbCwgZmlsdGVyT2JqZWN0LCBtYXBPYmplY3R9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQge2dldEpTT04sIGdldFJlZmVycmVyLCBtYWtlUmVxdWVzdCwgUmVzb3VyY2VUeXBlfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuaW1wb3J0IHtpc01hcGJveFVSTH0gZnJvbSAnLi4vdXRpbC9tYXBib3gnO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi4vdXRpbC9icm93c2VyJztcbmltcG9ydCBEaXNwYXRjaGVyIGZyb20gJy4uL3V0aWwvZGlzcGF0Y2hlcic7XG5pbXBvcnQge3ZhbGlkYXRlU3R5bGUsIGVtaXRWYWxpZGF0aW9uRXJyb3JzIGFzIF9lbWl0VmFsaWRhdGlvbkVycm9yc30gZnJvbSAnLi92YWxpZGF0ZV9zdHlsZSc7XG5pbXBvcnQge1xuICAgIGdldFR5cGUgYXMgZ2V0U291cmNlVHlwZSxcbiAgICBzZXRUeXBlIGFzIHNldFNvdXJjZVR5cGUsXG4gICAgdHlwZSBTb3VyY2VDbGFzc1xufSBmcm9tICcuLi9zb3VyY2Uvc291cmNlJztcbmltcG9ydCB7cXVlcnlSZW5kZXJlZEZlYXR1cmVzLCBxdWVyeVJlbmRlcmVkU3ltYm9scywgcXVlcnlTb3VyY2VGZWF0dXJlc30gZnJvbSAnLi4vc291cmNlL3F1ZXJ5X2ZlYXR1cmVzJztcbmltcG9ydCBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCBHZW9KU09OU291cmNlIGZyb20gJy4uL3NvdXJjZS9nZW9qc29uX3NvdXJjZSc7XG5pbXBvcnQgc3R5bGVTcGVjIGZyb20gJy4uL3N0eWxlLXNwZWMvcmVmZXJlbmNlL2xhdGVzdCc7XG5pbXBvcnQgZ2V0V29ya2VyUG9vbCBmcm9tICcuLi91dGlsL2dsb2JhbF93b3JrZXJfcG9vbCc7XG5pbXBvcnQgZGVyZWYgZnJvbSAnLi4vc3R5bGUtc3BlYy9kZXJlZic7XG5pbXBvcnQgZW1wdHlTdHlsZSBmcm9tICcuLi9zdHlsZS1zcGVjL2VtcHR5JztcbmltcG9ydCBkaWZmU3R5bGVzLCB7b3BlcmF0aW9ucyBhcyBkaWZmT3BlcmF0aW9uc30gZnJvbSAnLi4vc3R5bGUtc3BlYy9kaWZmJztcbmltcG9ydCB7XG4gICAgcmVnaXN0ZXJGb3JQbHVnaW5TdGF0ZUNoYW5nZSxcbiAgICBldmVudGVkIGFzIHJ0bFRleHRQbHVnaW5FdmVudGVkLFxuICAgIHRyaWdnZXJQbHVnaW5Db21wbGV0aW9uRXZlbnRcbn0gZnJvbSAnLi4vc291cmNlL3J0bF90ZXh0X3BsdWdpbic7XG5pbXBvcnQgUGF1c2VhYmxlUGxhY2VtZW50IGZyb20gJy4vcGF1c2VhYmxlX3BsYWNlbWVudCc7XG5pbXBvcnQgWm9vbUhpc3RvcnkgZnJvbSAnLi96b29tX2hpc3RvcnknO1xuaW1wb3J0IENyb3NzVGlsZVN5bWJvbEluZGV4IGZyb20gJy4uL3N5bWJvbC9jcm9zc190aWxlX3N5bWJvbF9pbmRleCc7XG5pbXBvcnQge3ZhbGlkYXRlQ3VzdG9tU3R5bGVMYXllcn0gZnJvbSAnLi9zdHlsZV9sYXllci9jdXN0b21fc3R5bGVfbGF5ZXInO1xuXG4vLyBXZSdyZSBza2lwcGluZyB2YWxpZGF0aW9uIGVycm9ycyB3aXRoIHRoZSBgc291cmNlLmNhbnZhc2AgaWRlbnRpZmllciBpbiBvcmRlclxuLy8gdG8gY29udGludWUgdG8gYWxsb3cgY2FudmFzIHNvdXJjZXMgdG8gYmUgYWRkZWQgYXQgcnVudGltZS91cGRhdGVkIGluXG4vLyBzbWFydCBzZXRTdHlsZSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL3B1bGwvNjQyNCk6XG5jb25zdCBlbWl0VmFsaWRhdGlvbkVycm9ycyA9IChldmVudGVkOiBFdmVudGVkLCBlcnJvcnM6ID8kUmVhZE9ubHlBcnJheTx7bWVzc2FnZTogc3RyaW5nLCBpZGVudGlmaWVyPzogc3RyaW5nfT4pID0+XG4gICAgX2VtaXRWYWxpZGF0aW9uRXJyb3JzKGV2ZW50ZWQsIGVycm9ycyAmJiBlcnJvcnMuZmlsdGVyKGVycm9yID0+IGVycm9yLmlkZW50aWZpZXIgIT09ICdzb3VyY2UuY2FudmFzJykpO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vdWkvbWFwJztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIHtTdHlsZUltYWdlfSBmcm9tICcuL3N0eWxlX2ltYWdlJztcbmltcG9ydCB0eXBlIHtTdHlsZUdseXBofSBmcm9tICcuL3N0eWxlX2dseXBoJztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuaW1wb3J0IHR5cGUgRXZhbHVhdGlvblBhcmFtZXRlcnMgZnJvbSAnLi9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuaW1wb3J0IHR5cGUge1BsYWNlbWVudH0gZnJvbSAnLi4vc3ltYm9sL3BsYWNlbWVudCc7XG5pbXBvcnQgdHlwZSB7Q2FuY2VsYWJsZX0gZnJvbSAnLi4vdHlwZXMvY2FuY2VsYWJsZSc7XG5pbXBvcnQgdHlwZSB7UmVxdWVzdFBhcmFtZXRlcnMsIFJlc3BvbnNlQ2FsbGJhY2t9IGZyb20gJy4uL3V0aWwvYWpheCc7XG5pbXBvcnQgdHlwZSB7R2VvSlNPTn0gZnJvbSAnQG1hcGJveC9nZW9qc29uLXR5cGVzJztcbmltcG9ydCB0eXBlIHtcbiAgICBMYXllclNwZWNpZmljYXRpb24sXG4gICAgRmlsdGVyU3BlY2lmaWNhdGlvbixcbiAgICBTdHlsZVNwZWNpZmljYXRpb24sXG4gICAgTGlnaHRTcGVjaWZpY2F0aW9uLFxuICAgIFNvdXJjZVNwZWNpZmljYXRpb25cbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5pbXBvcnQgdHlwZSB7Q3VzdG9tTGF5ZXJJbnRlcmZhY2V9IGZyb20gJy4vc3R5bGVfbGF5ZXIvY3VzdG9tX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIHtWYWxpZGF0b3J9IGZyb20gJy4vdmFsaWRhdGVfc3R5bGUnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuY29uc3Qgc3VwcG9ydGVkRGlmZk9wZXJhdGlvbnMgPSBwaWNrKGRpZmZPcGVyYXRpb25zLCBbXG4gICAgJ2FkZExheWVyJyxcbiAgICAncmVtb3ZlTGF5ZXInLFxuICAgICdzZXRQYWludFByb3BlcnR5JyxcbiAgICAnc2V0TGF5b3V0UHJvcGVydHknLFxuICAgICdzZXRGaWx0ZXInLFxuICAgICdhZGRTb3VyY2UnLFxuICAgICdyZW1vdmVTb3VyY2UnLFxuICAgICdzZXRMYXllclpvb21SYW5nZScsXG4gICAgJ3NldExpZ2h0JyxcbiAgICAnc2V0VHJhbnNpdGlvbicsXG4gICAgJ3NldEdlb0pTT05Tb3VyY2VEYXRhJ1xuICAgIC8vICdzZXRHbHlwaHMnLFxuICAgIC8vICdzZXRTcHJpdGUnLFxuXSk7XG5cbmNvbnN0IGlnbm9yZWREaWZmT3BlcmF0aW9ucyA9IHBpY2soZGlmZk9wZXJhdGlvbnMsIFtcbiAgICAnc2V0Q2VudGVyJyxcbiAgICAnc2V0Wm9vbScsXG4gICAgJ3NldEJlYXJpbmcnLFxuICAgICdzZXRQaXRjaCdcbl0pO1xuXG5jb25zdCBlbXB0eSA9IGVtcHR5U3R5bGUoKTtcblxuZXhwb3J0IHR5cGUgU3R5bGVPcHRpb25zID0ge1xuICAgIHZhbGlkYXRlPzogYm9vbGVhbixcbiAgICBsb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk/OiBzdHJpbmdcbn07XG5cbmV4cG9ydCB0eXBlIFN0eWxlU2V0dGVyT3B0aW9ucyA9IHtcbiAgICB2YWxpZGF0ZT86IGJvb2xlYW5cbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFN0eWxlIGV4dGVuZHMgRXZlbnRlZCB7XG4gICAgbWFwOiBNYXA7XG4gICAgc3R5bGVzaGVldDogU3R5bGVTcGVjaWZpY2F0aW9uO1xuICAgIGRpc3BhdGNoZXI6IERpc3BhdGNoZXI7XG4gICAgaW1hZ2VNYW5hZ2VyOiBJbWFnZU1hbmFnZXI7XG4gICAgZ2x5cGhNYW5hZ2VyOiBHbHlwaE1hbmFnZXI7XG4gICAgbGluZUF0bGFzOiBMaW5lQXRsYXM7XG4gICAgbGlnaHQ6IExpZ2h0O1xuXG4gICAgX3JlcXVlc3Q6ID9DYW5jZWxhYmxlO1xuICAgIF9zcHJpdGVSZXF1ZXN0OiA/Q2FuY2VsYWJsZTtcbiAgICBfbGF5ZXJzOiB7W186IHN0cmluZ106IFN0eWxlTGF5ZXJ9O1xuICAgIF9zZXJpYWxpemVkTGF5ZXJzOiB7W186IHN0cmluZ106IE9iamVjdH07XG4gICAgX29yZGVyOiBBcnJheTxzdHJpbmc+O1xuICAgIHNvdXJjZUNhY2hlczoge1tfOiBzdHJpbmddOiBTb3VyY2VDYWNoZX07XG4gICAgem9vbUhpc3Rvcnk6IFpvb21IaXN0b3J5O1xuICAgIF9sb2FkZWQ6IGJvb2xlYW47XG4gICAgX3J0bFRleHRQbHVnaW5DYWxsYmFjazogRnVuY3Rpb247XG4gICAgX2NoYW5nZWQ6IGJvb2xlYW47XG4gICAgX3VwZGF0ZWRTb3VyY2VzOiB7W186IHN0cmluZ106ICdjbGVhcicgfCAncmVsb2FkJ307XG4gICAgX3VwZGF0ZWRMYXllcnM6IHtbXzogc3RyaW5nXTogdHJ1ZX07XG4gICAgX3JlbW92ZWRMYXllcnM6IHtbXzogc3RyaW5nXTogU3R5bGVMYXllcn07XG4gICAgX2NoYW5nZWRJbWFnZXM6IHtbXzogc3RyaW5nXTogdHJ1ZX07XG4gICAgX3VwZGF0ZWRQYWludFByb3BzOiB7W2xheWVyOiBzdHJpbmddOiB0cnVlfTtcbiAgICBfbGF5ZXJPcmRlckNoYW5nZWQ6IGJvb2xlYW47XG4gICAgX2F2YWlsYWJsZUltYWdlczogQXJyYXk8c3RyaW5nPjtcblxuICAgIGNyb3NzVGlsZVN5bWJvbEluZGV4OiBDcm9zc1RpbGVTeW1ib2xJbmRleDtcbiAgICBwYXVzZWFibGVQbGFjZW1lbnQ6IFBhdXNlYWJsZVBsYWNlbWVudDtcbiAgICBwbGFjZW1lbnQ6IFBsYWNlbWVudDtcbiAgICB6OiBudW1iZXI7XG5cbiAgICAvLyBleHBvc2VkIHRvIGFsbG93IHN0dWJiaW5nIGJ5IHVuaXQgdGVzdHNcbiAgICBzdGF0aWMgZ2V0U291cmNlVHlwZTogdHlwZW9mIGdldFNvdXJjZVR5cGU7XG4gICAgc3RhdGljIHNldFNvdXJjZVR5cGU6IHR5cGVvZiBzZXRTb3VyY2VUeXBlO1xuICAgIHN0YXRpYyByZWdpc3RlckZvclBsdWdpblN0YXRlQ2hhbmdlOiB0eXBlb2YgcmVnaXN0ZXJGb3JQbHVnaW5TdGF0ZUNoYW5nZTtcblxuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwLCBvcHRpb25zOiBTdHlsZU9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcihnZXRXb3JrZXJQb29sKCksIHRoaXMpO1xuICAgICAgICB0aGlzLmltYWdlTWFuYWdlciA9IG5ldyBJbWFnZU1hbmFnZXIoKTtcbiAgICAgICAgdGhpcy5pbWFnZU1hbmFnZXIuc2V0RXZlbnRlZFBhcmVudCh0aGlzKTtcbiAgICAgICAgdGhpcy5nbHlwaE1hbmFnZXIgPSBuZXcgR2x5cGhNYW5hZ2VyKG1hcC5fcmVxdWVzdE1hbmFnZXIsIG9wdGlvbnMubG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5KTtcbiAgICAgICAgdGhpcy5saW5lQXRsYXMgPSBuZXcgTGluZUF0bGFzKDI1NiwgNTEyKTtcbiAgICAgICAgdGhpcy5jcm9zc1RpbGVTeW1ib2xJbmRleCA9IG5ldyBDcm9zc1RpbGVTeW1ib2xJbmRleCgpO1xuXG4gICAgICAgIHRoaXMuX2xheWVycyA9IHt9O1xuICAgICAgICB0aGlzLl9zZXJpYWxpemVkTGF5ZXJzID0ge307XG4gICAgICAgIHRoaXMuX29yZGVyICA9IFtdO1xuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlcyA9IHt9O1xuICAgICAgICB0aGlzLnpvb21IaXN0b3J5ID0gbmV3IFpvb21IaXN0b3J5KCk7XG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hdmFpbGFibGVJbWFnZXMgPSBbXTtcblxuICAgICAgICB0aGlzLl9yZXNldFVwZGF0ZXMoKTtcblxuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuYnJvYWRjYXN0KCdzZXRSZWZlcnJlcicsIGdldFJlZmVycmVyKCkpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLl9ydGxUZXh0UGx1Z2luQ2FsbGJhY2sgPSBTdHlsZS5yZWdpc3RlckZvclBsdWdpblN0YXRlQ2hhbmdlKChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgcGx1Z2luU3RhdHVzOiBldmVudC5wbHVnaW5TdGF0dXMsXG4gICAgICAgICAgICAgICAgcGx1Z2luVVJMOiBldmVudC5wbHVnaW5VUkxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZWxmLmRpc3BhdGNoZXIuYnJvYWRjYXN0KCdzeW5jUlRMUGx1Z2luU3RhdGUnLCBzdGF0ZSwgKGVyciwgcmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJQbHVnaW5Db21wbGV0aW9uRXZlbnQoZXJyKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxDb21wbGV0ZSA9IHJlc3VsdHMuZXZlcnkoKGVsZW0pID0+IGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gc2VsZi5zb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNvdXJjZUNhY2hlc1tpZF0ucmVsb2FkKCk7IC8vIFNob3VsZCBiZSBhIG5vLW9wIGlmIHRoZSBwbHVnaW4gbG9hZHMgYmVmb3JlIGFueSB0aWxlcyBsb2FkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm9uKCdkYXRhJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YVR5cGUgIT09ICdzb3VyY2UnIHx8IGV2ZW50LnNvdXJjZURhdGFUeXBlICE9PSAnbWV0YWRhdGEnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHRoaXMuc291cmNlQ2FjaGVzW2V2ZW50LnNvdXJjZUlkXTtcbiAgICAgICAgICAgIGlmICghc291cmNlQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZUNhY2hlLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UgfHwgIXNvdXJjZS52ZWN0b3JMYXllcklkcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChjb25zdCBsYXllcklkIGluIHRoaXMuX2xheWVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVySWRdO1xuICAgICAgICAgICAgICAgIGlmIChsYXllci5zb3VyY2UgPT09IHNvdXJjZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWxpZGF0ZUxheWVyKGxheWVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvYWRVUkwodXJsOiBzdHJpbmcsIG9wdGlvbnM6IHtcbiAgICAgICAgdmFsaWRhdGU/OiBib29sZWFuLFxuICAgICAgICBhY2Nlc3NUb2tlbj86IHN0cmluZ1xuICAgIH0gPSB7fSkge1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhbG9hZGluZycsIHtkYXRhVHlwZTogJ3N0eWxlJ30pKTtcblxuICAgICAgICBjb25zdCB2YWxpZGF0ZSA9IHR5cGVvZiBvcHRpb25zLnZhbGlkYXRlID09PSAnYm9vbGVhbicgP1xuICAgICAgICAgICAgb3B0aW9ucy52YWxpZGF0ZSA6ICFpc01hcGJveFVSTCh1cmwpO1xuXG4gICAgICAgIHVybCA9IHRoaXMubWFwLl9yZXF1ZXN0TWFuYWdlci5ub3JtYWxpemVTdHlsZVVSTCh1cmwsIG9wdGlvbnMuYWNjZXNzVG9rZW4pO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5tYXAuX3JlcXVlc3RNYW5hZ2VyLnRyYW5zZm9ybVJlcXVlc3QodXJsLCBSZXNvdXJjZVR5cGUuU3R5bGUpO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gZ2V0SlNPTihyZXF1ZXN0LCAoZXJyb3I6ID9FcnJvciwganNvbjogP09iamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQoZXJyb3IpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWQoanNvbiwgdmFsaWRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkSlNPTihqc29uOiBTdHlsZVNwZWNpZmljYXRpb24sIG9wdGlvbnM6IFN0eWxlU2V0dGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGFsb2FkaW5nJywge2RhdGFUeXBlOiAnc3R5bGUnfSkpO1xuXG4gICAgICAgIHRoaXMuX3JlcXVlc3QgPSBicm93c2VyLmZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fbG9hZChqc29uLCBvcHRpb25zLnZhbGlkYXRlICE9PSBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvYWRFbXB0eSgpIHtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7ZGF0YVR5cGU6ICdzdHlsZSd9KSk7XG4gICAgICAgIHRoaXMuX2xvYWQoZW1wdHksIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfbG9hZChqc29uOiBTdHlsZVNwZWNpZmljYXRpb24sIHZhbGlkYXRlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2YWxpZGF0ZSAmJiBlbWl0VmFsaWRhdGlvbkVycm9ycyh0aGlzLCB2YWxpZGF0ZVN0eWxlKGpzb24pKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdHlsZXNoZWV0ID0ganNvbjtcblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIGpzb24uc291cmNlcykge1xuICAgICAgICAgICAgdGhpcy5hZGRTb3VyY2UoaWQsIGpzb24uc291cmNlc1tpZF0sIHt2YWxpZGF0ZTogZmFsc2V9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqc29uLnNwcml0ZSkge1xuICAgICAgICAgICAgdGhpcy5fbG9hZFNwcml0ZShqc29uLnNwcml0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlTWFuYWdlci5zZXRMb2FkZWQodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdseXBoTWFuYWdlci5zZXRVUkwoanNvbi5nbHlwaHMpO1xuXG4gICAgICAgIGNvbnN0IGxheWVycyA9IGRlcmVmKHRoaXMuc3R5bGVzaGVldC5sYXllcnMpO1xuXG4gICAgICAgIHRoaXMuX29yZGVyID0gbGF5ZXJzLm1hcCgobGF5ZXIpID0+IGxheWVyLmlkKTtcblxuICAgICAgICB0aGlzLl9sYXllcnMgPSB7fTtcbiAgICAgICAgdGhpcy5fc2VyaWFsaXplZExheWVycyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBsYXllciBvZiBsYXllcnMpIHtcbiAgICAgICAgICAgIGxheWVyID0gY3JlYXRlU3R5bGVMYXllcihsYXllcik7XG4gICAgICAgICAgICBsYXllci5zZXRFdmVudGVkUGFyZW50KHRoaXMsIHtsYXllcjoge2lkOiBsYXllci5pZH19KTtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyc1tsYXllci5pZF0gPSBsYXllcjtcbiAgICAgICAgICAgIHRoaXMuX3NlcmlhbGl6ZWRMYXllcnNbbGF5ZXIuaWRdID0gbGF5ZXIuc2VyaWFsaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLmJyb2FkY2FzdCgnc2V0TGF5ZXJzJywgdGhpcy5fc2VyaWFsaXplTGF5ZXJzKHRoaXMuX29yZGVyKSk7XG5cbiAgICAgICAgdGhpcy5saWdodCA9IG5ldyBMaWdodCh0aGlzLnN0eWxlc2hlZXQubGlnaHQpO1xuXG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCB7ZGF0YVR5cGU6ICdzdHlsZSd9KSk7XG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3N0eWxlLmxvYWQnKSk7XG4gICAgfVxuXG4gICAgX2xvYWRTcHJpdGUodXJsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fc3ByaXRlUmVxdWVzdCA9IGxvYWRTcHJpdGUodXJsLCB0aGlzLm1hcC5fcmVxdWVzdE1hbmFnZXIsIChlcnIsIGltYWdlcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3ByaXRlUmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KGVycikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbWFnZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIGltYWdlcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlTWFuYWdlci5hZGRJbWFnZShpZCwgaW1hZ2VzW2lkXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmltYWdlTWFuYWdlci5zZXRMb2FkZWQodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9hdmFpbGFibGVJbWFnZXMgPSB0aGlzLmltYWdlTWFuYWdlci5saXN0SW1hZ2VzKCk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoZXIuYnJvYWRjYXN0KCdzZXRJbWFnZXMnLCB0aGlzLl9hdmFpbGFibGVJbWFnZXMpO1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTogJ3N0eWxlJ30pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlTGF5ZXIobGF5ZXI6IFN0eWxlTGF5ZXIpIHtcbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tsYXllci5zb3VyY2VdO1xuICAgICAgICBpZiAoIXNvdXJjZUNhY2hlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzb3VyY2VMYXllciA9IGxheWVyLnNvdXJjZUxheWVyO1xuICAgICAgICBpZiAoIXNvdXJjZUxheWVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VDYWNoZS5nZXRTb3VyY2UoKTtcbiAgICAgICAgaWYgKHNvdXJjZS50eXBlID09PSAnZ2VvanNvbicgfHwgKHNvdXJjZS52ZWN0b3JMYXllcklkcyAmJiBzb3VyY2UudmVjdG9yTGF5ZXJJZHMuaW5kZXhPZihzb3VyY2VMYXllcikgPT09IC0xKSkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgU291cmNlIGxheWVyIFwiJHtzb3VyY2VMYXllcn1cIiBgICtcbiAgICAgICAgICAgICAgICBgZG9lcyBub3QgZXhpc3Qgb24gc291cmNlIFwiJHtzb3VyY2UuaWR9XCIgYCArXG4gICAgICAgICAgICAgICAgYGFzIHNwZWNpZmllZCBieSBzdHlsZSBsYXllciBcIiR7bGF5ZXIuaWR9XCJgXG4gICAgICAgICAgICApKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9hZGVkKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl91cGRhdGVkU291cmNlcykubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5zb3VyY2VDYWNoZXMpXG4gICAgICAgICAgICBpZiAoIXRoaXMuc291cmNlQ2FjaGVzW2lkXS5sb2FkZWQoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKCF0aGlzLmltYWdlTWFuYWdlci5pc0xvYWRlZCgpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIF9zZXJpYWxpemVMYXllcnMoaWRzOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8T2JqZWN0PiB7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRMYXllcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJzW2lkXTtcbiAgICAgICAgICAgIGlmIChsYXllci50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWRMYXllcnMucHVzaChsYXllci5zZXJpYWxpemUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZWRMYXllcnM7XG4gICAgfVxuXG4gICAgaGFzVHJhbnNpdGlvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmxpZ2h0ICYmIHRoaXMubGlnaHQuaGFzVHJhbnNpdGlvbigpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5zb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZUNhY2hlc1tpZF0uaGFzVHJhbnNpdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuX2xheWVycykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xheWVyc1tpZF0uaGFzVHJhbnNpdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgX2NoZWNrTG9hZGVkKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvYWRlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHlsZSBpcyBub3QgZG9uZSBsb2FkaW5nJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBxdWV1ZWQgc3R5bGUgdXBkYXRlcyBpbiBhIGJhdGNoIGFuZCByZWNhbGN1bGF0ZSB6b29tLWRlcGVuZGVudCBwYWludCBwcm9wZXJ0aWVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdXBkYXRlKHBhcmFtZXRlcnM6IEV2YWx1YXRpb25QYXJhbWV0ZXJzKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9hZGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5fY2hhbmdlZDtcbiAgICAgICAgaWYgKHRoaXMuX2NoYW5nZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRJZHMgPSBPYmplY3Qua2V5cyh0aGlzLl91cGRhdGVkTGF5ZXJzKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRJZHMgPSBPYmplY3Qua2V5cyh0aGlzLl9yZW1vdmVkTGF5ZXJzKTtcblxuICAgICAgICAgICAgaWYgKHVwZGF0ZWRJZHMubGVuZ3RoIHx8IHJlbW92ZWRJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlV29ya2VyTGF5ZXJzKHVwZGF0ZWRJZHMsIHJlbW92ZWRJZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLl91cGRhdGVkU291cmNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuX3VwZGF0ZWRTb3VyY2VzW2lkXTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYWN0aW9uID09PSAncmVsb2FkJyB8fCBhY3Rpb24gPT09ICdjbGVhcicpO1xuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdyZWxvYWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbG9hZFNvdXJjZShpZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICdjbGVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJTb3VyY2UoaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGlsZXNGb3JDaGFuZ2VkSW1hZ2VzKCk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fdXBkYXRlZFBhaW50UHJvcHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXllcnNbaWRdLnVwZGF0ZVRyYW5zaXRpb25zKHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxpZ2h0LnVwZGF0ZVRyYW5zaXRpb25zKHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICB0aGlzLl9yZXNldFVwZGF0ZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNvdXJjZXNVc2VkQmVmb3JlID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBzb3VyY2VJZCBpbiB0aGlzLnNvdXJjZUNhY2hlcykge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tzb3VyY2VJZF07XG4gICAgICAgICAgICBzb3VyY2VzVXNlZEJlZm9yZVtzb3VyY2VJZF0gPSBzb3VyY2VDYWNoZS51c2VkO1xuICAgICAgICAgICAgc291cmNlQ2FjaGUudXNlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBsYXllcklkIG9mIHRoaXMuX29yZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuX2xheWVyc1tsYXllcklkXTtcblxuICAgICAgICAgICAgbGF5ZXIucmVjYWxjdWxhdGUocGFyYW1ldGVycywgdGhpcy5fYXZhaWxhYmxlSW1hZ2VzKTtcbiAgICAgICAgICAgIGlmICghbGF5ZXIuaXNIaWRkZW4ocGFyYW1ldGVycy56b29tKSAmJiBsYXllci5zb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tsYXllci5zb3VyY2VdLnVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBzb3VyY2VJZCBpbiBzb3VyY2VzVXNlZEJlZm9yZSkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tzb3VyY2VJZF07XG4gICAgICAgICAgICBpZiAoc291cmNlc1VzZWRCZWZvcmVbc291cmNlSWRdICE9PSBzb3VyY2VDYWNoZS51c2VkKSB7XG4gICAgICAgICAgICAgICAgc291cmNlQ2FjaGUuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCB7c291cmNlRGF0YVR5cGU6ICd2aXNpYmlsaXR5JywgZGF0YVR5cGU6J3NvdXJjZScsIHNvdXJjZUlkfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5saWdodC5yZWNhbGN1bGF0ZShwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy56ID0gcGFyYW1ldGVycy56b29tO1xuXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhJywge2RhdGFUeXBlOiAnc3R5bGUnfSkpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKlxuICAgICAqIEFwcGx5IGFueSBxdWV1ZWQgaW1hZ2UgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBfdXBkYXRlVGlsZXNGb3JDaGFuZ2VkSW1hZ2VzKCkge1xuICAgICAgICBjb25zdCBjaGFuZ2VkSW1hZ2VzID0gT2JqZWN0LmtleXModGhpcy5fY2hhbmdlZEltYWdlcyk7XG4gICAgICAgIGlmIChjaGFuZ2VkSW1hZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMuc291cmNlQ2FjaGVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VDYWNoZXNbbmFtZV0ucmVsb2FkVGlsZXNGb3JEZXBlbmRlbmNpZXMoWydpY29ucycsICdwYXR0ZXJucyddLCBjaGFuZ2VkSW1hZ2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZWRJbWFnZXMgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVXb3JrZXJMYXllcnModXBkYXRlZElkczogQXJyYXk8c3RyaW5nPiwgcmVtb3ZlZElkczogQXJyYXk8c3RyaW5nPikge1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuYnJvYWRjYXN0KCd1cGRhdGVMYXllcnMnLCB7XG4gICAgICAgICAgICBsYXllcnM6IHRoaXMuX3NlcmlhbGl6ZUxheWVycyh1cGRhdGVkSWRzKSxcbiAgICAgICAgICAgIHJlbW92ZWRJZHNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3Jlc2V0VXBkYXRlcygpIHtcbiAgICAgICAgdGhpcy5fY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZWRMYXllcnMgPSB7fTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlZExheWVycyA9IHt9O1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZWRTb3VyY2VzID0ge307XG4gICAgICAgIHRoaXMuX3VwZGF0ZWRQYWludFByb3BzID0ge307XG5cbiAgICAgICAgdGhpcy5fY2hhbmdlZEltYWdlcyA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGlzIHN0eWxlJ3Mgc3RhdGUgdG8gbWF0Y2ggdGhlIGdpdmVuIHN0eWxlIEpTT04sIHBlcmZvcm1pbmcgb25seVxuICAgICAqIHRoZSBuZWNlc3NhcnkgbXV0YXRpb25zLlxuICAgICAqXG4gICAgICogTWF5IHRocm93IGFuIEVycm9yICgnVW5pbXBsZW1lbnRlZDogTUVUSE9EJykgaWYgdGhlIG1hcGJveC1nbC1zdHlsZS1zcGVjXG4gICAgICogZGlmZiBhbGdvcml0aG0gcHJvZHVjZXMgYW4gb3BlcmF0aW9uIHRoYXQgaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGFueSBjaGFuZ2VzIHdlcmUgbWFkZTsgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzZXRTdGF0ZShuZXh0U3RhdGU6IFN0eWxlU3BlY2lmaWNhdGlvbikge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGlmIChlbWl0VmFsaWRhdGlvbkVycm9ycyh0aGlzLCB2YWxpZGF0ZVN0eWxlKG5leHRTdGF0ZSkpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgbmV4dFN0YXRlID0gY2xvbmUobmV4dFN0YXRlKTtcbiAgICAgICAgbmV4dFN0YXRlLmxheWVycyA9IGRlcmVmKG5leHRTdGF0ZS5sYXllcnMpO1xuXG4gICAgICAgIGNvbnN0IGNoYW5nZXMgPSBkaWZmU3R5bGVzKHRoaXMuc2VyaWFsaXplKCksIG5leHRTdGF0ZSlcbiAgICAgICAgICAgIC5maWx0ZXIob3AgPT4gIShvcC5jb21tYW5kIGluIGlnbm9yZWREaWZmT3BlcmF0aW9ucykpO1xuXG4gICAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdW5pbXBsZW1lbnRlZE9wcyA9IGNoYW5nZXMuZmlsdGVyKG9wID0+ICEob3AuY29tbWFuZCBpbiBzdXBwb3J0ZWREaWZmT3BlcmF0aW9ucykpO1xuICAgICAgICBpZiAodW5pbXBsZW1lbnRlZE9wcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaW1wbGVtZW50ZWQ6ICR7dW5pbXBsZW1lbnRlZE9wcy5tYXAob3AgPT4gb3AuY29tbWFuZCkuam9pbignLCAnKX0uYCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFuZ2VzLmZvckVhY2goKG9wKSA9PiB7XG4gICAgICAgICAgICBpZiAob3AuY29tbWFuZCA9PT0gJ3NldFRyYW5zaXRpb24nKSB7XG4gICAgICAgICAgICAgICAgLy8gYHRyYW5zaXRpb25gIGlzIGFsd2F5cyByZWFkIGRpcmVjdGx5IG9mZiBvZlxuICAgICAgICAgICAgICAgIC8vIGB0aGlzLnN0eWxlc2hlZXRgLCB3aGljaCB3ZSB1cGRhdGUgYmVsb3dcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAodGhpczogYW55KVtvcC5jb21tYW5kXS5hcHBseSh0aGlzLCBvcC5hcmdzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdHlsZXNoZWV0ID0gbmV4dFN0YXRlO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGFkZEltYWdlKGlkOiBzdHJpbmcsIGltYWdlOiBTdHlsZUltYWdlKSB7XG4gICAgICAgIGlmICh0aGlzLmdldEltYWdlKGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoJ0FuIGltYWdlIHdpdGggdGhpcyBuYW1lIGFscmVhZHkgZXhpc3RzLicpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbWFnZU1hbmFnZXIuYWRkSW1hZ2UoaWQsIGltYWdlKTtcbiAgICAgICAgdGhpcy5fYWZ0ZXJJbWFnZVVwZGF0ZWQoaWQpO1xuICAgIH1cblxuICAgIHVwZGF0ZUltYWdlKGlkOiBzdHJpbmcsIGltYWdlOiBTdHlsZUltYWdlKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VNYW5hZ2VyLnVwZGF0ZUltYWdlKGlkLCBpbWFnZSk7XG4gICAgfVxuXG4gICAgZ2V0SW1hZ2UoaWQ6IHN0cmluZyk6ID9TdHlsZUltYWdlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VNYW5hZ2VyLmdldEltYWdlKGlkKTtcbiAgICB9XG5cbiAgICByZW1vdmVJbWFnZShpZDogc3RyaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5nZXRJbWFnZShpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKCdObyBpbWFnZSB3aXRoIHRoaXMgbmFtZSBleGlzdHMuJykpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmltYWdlTWFuYWdlci5yZW1vdmVJbWFnZShpZCk7XG4gICAgICAgIHRoaXMuX2FmdGVySW1hZ2VVcGRhdGVkKGlkKTtcbiAgICB9XG5cbiAgICBfYWZ0ZXJJbWFnZVVwZGF0ZWQoaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9hdmFpbGFibGVJbWFnZXMgPSB0aGlzLmltYWdlTWFuYWdlci5saXN0SW1hZ2VzKCk7XG4gICAgICAgIHRoaXMuX2NoYW5nZWRJbWFnZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5icm9hZGNhc3QoJ3NldEltYWdlcycsIHRoaXMuX2F2YWlsYWJsZUltYWdlcyk7XG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCB7ZGF0YVR5cGU6ICdzdHlsZSd9KSk7XG4gICAgfVxuXG4gICAgbGlzdEltYWdlcygpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tMb2FkZWQoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZU1hbmFnZXIubGlzdEltYWdlcygpO1xuICAgIH1cblxuICAgIGFkZFNvdXJjZShpZDogc3RyaW5nLCBzb3VyY2U6IFNvdXJjZVNwZWNpZmljYXRpb24sIG9wdGlvbnM6IFN0eWxlU2V0dGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc291cmNlQ2FjaGVzW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIGFscmVhZHkgYSBzb3VyY2Ugd2l0aCB0aGlzIElEJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNvdXJjZS50eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSB0eXBlIHByb3BlcnR5IG11c3QgYmUgZGVmaW5lZCwgYnV0IG9ubHkgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIHdlcmUgZ2l2ZW46ICR7T2JqZWN0LmtleXMoc291cmNlKS5qb2luKCcsICcpfS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ1aWx0SW5zID0gWyd2ZWN0b3InLCAncmFzdGVyJywgJ2dlb2pzb24nLCAndmlkZW8nLCAnaW1hZ2UnXTtcbiAgICAgICAgY29uc3Qgc2hvdWxkVmFsaWRhdGUgPSBidWlsdElucy5pbmRleE9mKHNvdXJjZS50eXBlKSA+PSAwO1xuICAgICAgICBpZiAoc2hvdWxkVmFsaWRhdGUgJiYgdGhpcy5fdmFsaWRhdGUodmFsaWRhdGVTdHlsZS5zb3VyY2UsIGBzb3VyY2VzLiR7aWR9YCwgc291cmNlLCBudWxsLCBvcHRpb25zKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLm1hcCAmJiB0aGlzLm1hcC5fY29sbGVjdFJlc291cmNlVGltaW5nKSAoc291cmNlOiBhbnkpLmNvbGxlY3RSZXNvdXJjZVRpbWluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlID0gdGhpcy5zb3VyY2VDYWNoZXNbaWRdID0gbmV3IFNvdXJjZUNhY2hlKGlkLCBzb3VyY2UsIHRoaXMuZGlzcGF0Y2hlcik7XG4gICAgICAgIHNvdXJjZUNhY2hlLnN0eWxlID0gdGhpcztcbiAgICAgICAgc291cmNlQ2FjaGUuc2V0RXZlbnRlZFBhcmVudCh0aGlzLCAoKSA9PiAoe1xuICAgICAgICAgICAgaXNTb3VyY2VMb2FkZWQ6IHRoaXMubG9hZGVkKCksXG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZUNhY2hlLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgc291cmNlSWQ6IGlkXG4gICAgICAgIH0pKTtcblxuICAgICAgICBzb3VyY2VDYWNoZS5vbkFkZCh0aGlzLm1hcCk7XG4gICAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHNvdXJjZSBmcm9tIHRoaXMgc3R5bGVzaGVldCwgZ2l2ZW4gaXRzIGlkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBpZCBvZiB0aGUgc291cmNlIHRvIHJlbW92ZVxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBzb3VyY2UgaXMgZm91bmQgd2l0aCB0aGUgZ2l2ZW4gSURcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBUaGUge0BsaW5rIE1hcH0gb2JqZWN0LlxuICAgICAqL1xuICAgIHJlbW92ZVNvdXJjZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc291cmNlQ2FjaGVzW2lkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIG5vIHNvdXJjZSB3aXRoIHRoaXMgSUQnKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGxheWVySWQgaW4gdGhpcy5fbGF5ZXJzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGF5ZXJzW2xheWVySWRdLnNvdXJjZSA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgU291cmNlIFwiJHtpZH1cIiBjYW5ub3QgYmUgcmVtb3ZlZCB3aGlsZSBsYXllciBcIiR7bGF5ZXJJZH1cIiBpcyB1c2luZyBpdC5gKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tpZF07XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNvdXJjZUNhY2hlc1tpZF07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl91cGRhdGVkU291cmNlc1tpZF07XG4gICAgICAgIHNvdXJjZUNhY2hlLmZpcmUobmV3IEV2ZW50KCdkYXRhJywge3NvdXJjZURhdGFUeXBlOiAnbWV0YWRhdGEnLCBkYXRhVHlwZTonc291cmNlJywgc291cmNlSWQ6IGlkfSkpO1xuICAgICAgICBzb3VyY2VDYWNoZS5zZXRFdmVudGVkUGFyZW50KG51bGwpO1xuICAgICAgICBzb3VyY2VDYWNoZS5jbGVhclRpbGVzKCk7XG5cbiAgICAgICAgaWYgKHNvdXJjZUNhY2hlLm9uUmVtb3ZlKSBzb3VyY2VDYWNoZS5vblJlbW92ZSh0aGlzLm1hcCk7XG4gICAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogU2V0IHRoZSBkYXRhIG9mIGEgR2VvSlNPTiBzb3VyY2UsIGdpdmVuIGl0cyBpZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBpZCBvZiB0aGUgc291cmNlXG4gICAgKiBAcGFyYW0ge0dlb0pTT058c3RyaW5nfSBkYXRhIEdlb0pTT04gc291cmNlXG4gICAgKi9cbiAgICBzZXRHZW9KU09OU291cmNlRGF0YShpZDogc3RyaW5nLCBkYXRhOiBHZW9KU09OIHwgc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgYXNzZXJ0KHRoaXMuc291cmNlQ2FjaGVzW2lkXSAhPT0gdW5kZWZpbmVkLCAnVGhlcmUgaXMgbm8gc291cmNlIHdpdGggdGhpcyBJRCcpO1xuICAgICAgICBjb25zdCBnZW9qc29uU291cmNlOiBHZW9KU09OU291cmNlID0gKHRoaXMuc291cmNlQ2FjaGVzW2lkXS5nZXRTb3VyY2UoKTogYW55KTtcbiAgICAgICAgYXNzZXJ0KGdlb2pzb25Tb3VyY2UudHlwZSA9PT0gJ2dlb2pzb24nKTtcblxuICAgICAgICBnZW9qc29uU291cmNlLnNldERhdGEoZGF0YSk7XG4gICAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHNvdXJjZSBieSBpZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgaWQgb2YgdGhlIGRlc2lyZWQgc291cmNlXG4gICAgICogQHJldHVybnMge09iamVjdH0gc291cmNlXG4gICAgICovXG4gICAgZ2V0U291cmNlKGlkOiBzdHJpbmcpOiBPYmplY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VDYWNoZXNbaWRdICYmIHRoaXMuc291cmNlQ2FjaGVzW2lkXS5nZXRTb3VyY2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBsYXllciB0byB0aGUgbWFwIHN0eWxlLiBUaGUgbGF5ZXIgd2lsbCBiZSBpbnNlcnRlZCBiZWZvcmUgdGhlIGxheWVyIHdpdGhcbiAgICAgKiBJRCBgYmVmb3JlYCwgb3IgYXBwZW5kZWQgaWYgYGJlZm9yZWAgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdCB8IEN1c3RvbUxheWVySW50ZXJmYWNlfSBsYXllck9iamVjdCBUaGUgc3R5bGUgbGF5ZXIgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYmVmb3JlXSBJRCBvZiBhbiBleGlzdGluZyBsYXllciB0byBpbnNlcnQgYmVmb3JlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU3R5bGUgc2V0dGVyIG9wdGlvbnMuXG4gICAgICogQHJldHVybnMge01hcH0gVGhlIHtAbGluayBNYXB9IG9iamVjdC5cbiAgICAgKi9cbiAgICBhZGRMYXllcihsYXllck9iamVjdDogTGF5ZXJTcGVjaWZpY2F0aW9uIHwgQ3VzdG9tTGF5ZXJJbnRlcmZhY2UsIGJlZm9yZT86IHN0cmluZywgb3B0aW9uczogU3R5bGVTZXR0ZXJPcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5fY2hlY2tMb2FkZWQoKTtcblxuICAgICAgICBjb25zdCBpZCA9IGxheWVyT2JqZWN0LmlkO1xuXG4gICAgICAgIGlmICh0aGlzLmdldExheWVyKGlkKSkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgTGF5ZXIgd2l0aCBpZCBcIiR7aWR9XCIgYWxyZWFkeSBleGlzdHMgb24gdGhpcyBtYXBgKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxheWVyO1xuICAgICAgICBpZiAobGF5ZXJPYmplY3QudHlwZSA9PT0gJ2N1c3RvbScpIHtcblxuICAgICAgICAgICAgaWYgKGVtaXRWYWxpZGF0aW9uRXJyb3JzKHRoaXMsIHZhbGlkYXRlQ3VzdG9tU3R5bGVMYXllcihsYXllck9iamVjdCkpKSByZXR1cm47XG5cbiAgICAgICAgICAgIGxheWVyID0gY3JlYXRlU3R5bGVMYXllcihsYXllck9iamVjdCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGF5ZXJPYmplY3Quc291cmNlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkU291cmNlKGlkLCBsYXllck9iamVjdC5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIGxheWVyT2JqZWN0ID0gY2xvbmUobGF5ZXJPYmplY3QpO1xuICAgICAgICAgICAgICAgIGxheWVyT2JqZWN0ID0gKGV4dGVuZChsYXllck9iamVjdCwge3NvdXJjZTogaWR9KTogYW55KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdGhpcyBsYXllciBpcyBub3QgaW4gdGhlIHN0eWxlLmxheWVycyBhcnJheSwgc28gd2UgcGFzcyBhbiBpbXBvc3NpYmxlIGFycmF5IGluZGV4XG4gICAgICAgICAgICBpZiAodGhpcy5fdmFsaWRhdGUodmFsaWRhdGVTdHlsZS5sYXllcixcbiAgICAgICAgICAgICAgICBgbGF5ZXJzLiR7aWR9YCwgbGF5ZXJPYmplY3QsIHthcnJheUluZGV4OiAtMX0sIG9wdGlvbnMpKSByZXR1cm47XG5cbiAgICAgICAgICAgIGxheWVyID0gY3JlYXRlU3R5bGVMYXllcihsYXllck9iamVjdCk7XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0ZUxheWVyKGxheWVyKTtcblxuICAgICAgICAgICAgbGF5ZXIuc2V0RXZlbnRlZFBhcmVudCh0aGlzLCB7bGF5ZXI6IHtpZH19KTtcbiAgICAgICAgICAgIHRoaXMuX3NlcmlhbGl6ZWRMYXllcnNbbGF5ZXIuaWRdID0gbGF5ZXIuc2VyaWFsaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbmRleCA9IGJlZm9yZSA/IHRoaXMuX29yZGVyLmluZGV4T2YoYmVmb3JlKSA6IHRoaXMuX29yZGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKGJlZm9yZSAmJiBpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYExheWVyIHdpdGggaWQgXCIke2JlZm9yZX1cIiBkb2VzIG5vdCBleGlzdCBvbiB0aGlzIG1hcC5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3JkZXIuc3BsaWNlKGluZGV4LCAwLCBpZCk7XG4gICAgICAgIHRoaXMuX2xheWVyT3JkZXJDaGFuZ2VkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9sYXllcnNbaWRdID0gbGF5ZXI7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlbW92ZWRMYXllcnNbaWRdICYmIGxheWVyLnNvdXJjZSAmJiBsYXllci50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICAgICAgLy8gSWYsIGluIHRoZSBjdXJyZW50IGJhdGNoLCB3ZSBoYXZlIGFscmVhZHkgcmVtb3ZlZCB0aGlzIGxheWVyXG4gICAgICAgICAgICAvLyBhbmQgd2UgYXJlIG5vdyByZS1hZGRpbmcgaXQgd2l0aCBhIGRpZmZlcmVudCBgdHlwZWAsIHRoZW4gd2VcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gY2xlYXIgKHJhdGhlciB0aGFuIGp1c3QgcmVsb2FkKSB0aGUgdW5kZXJ5bGluZyBzb3VyY2Unc1xuICAgICAgICAgICAgLy8gdGlsZXMuICBPdGhlcndpc2UsIHRpbGVzIG1hcmtlZCAncmVsb2FkaW5nJyB3aWxsIGhhdmUgYnVja2V0cyAvXG4gICAgICAgICAgICAvLyBidWZmZXJzIHRoYXQgYXJlIHNldCB1cCBmb3IgdGhlIF9wcmV2aW91c18gdmVyc2lvbiBvZiB0aGlzXG4gICAgICAgICAgICAvLyBsYXllciwgY2F1c2luZywgZS5nLjpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy8zNjMzXG4gICAgICAgICAgICBjb25zdCByZW1vdmVkID0gdGhpcy5fcmVtb3ZlZExheWVyc1tpZF07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fcmVtb3ZlZExheWVyc1tpZF07XG4gICAgICAgICAgICBpZiAocmVtb3ZlZC50eXBlICE9PSBsYXllci50eXBlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlZFNvdXJjZXNbbGF5ZXIuc291cmNlXSA9ICdjbGVhcic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWRTb3VyY2VzW2xheWVyLnNvdXJjZV0gPSAncmVsb2FkJztcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tsYXllci5zb3VyY2VdLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlTGF5ZXIobGF5ZXIpO1xuXG4gICAgICAgIGlmIChsYXllci5vbkFkZCkge1xuICAgICAgICAgICAgbGF5ZXIub25BZGQodGhpcy5tYXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBsYXllciB0byBhIGRpZmZlcmVudCB6LXBvc2l0aW9uLiBUaGUgbGF5ZXIgd2lsbCBiZSBpbnNlcnRlZCBiZWZvcmUgdGhlIGxheWVyIHdpdGhcbiAgICAgKiBJRCBgYmVmb3JlYCwgb3IgYXBwZW5kZWQgaWYgYGJlZm9yZWAgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgIElEIG9mIHRoZSBsYXllciB0byBtb3ZlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtiZWZvcmVdIElEIG9mIGFuIGV4aXN0aW5nIGxheWVyIHRvIGluc2VydCBiZWZvcmVcbiAgICAgKi9cbiAgICBtb3ZlTGF5ZXIoaWQ6IHN0cmluZywgYmVmb3JlPzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG4gICAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJzW2lkXTtcbiAgICAgICAgaWYgKCFsYXllcikge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIGxheWVyICcke2lkfScgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG1hcCdzIHN0eWxlIGFuZCBjYW5ub3QgYmUgbW92ZWQuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZCA9PT0gYmVmb3JlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX29yZGVyLmluZGV4T2YoaWQpO1xuICAgICAgICB0aGlzLl9vcmRlci5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIGNvbnN0IG5ld0luZGV4ID0gYmVmb3JlID8gdGhpcy5fb3JkZXIuaW5kZXhPZihiZWZvcmUpIDogdGhpcy5fb3JkZXIubGVuZ3RoO1xuICAgICAgICBpZiAoYmVmb3JlICYmIG5ld0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgTGF5ZXIgd2l0aCBpZCBcIiR7YmVmb3JlfVwiIGRvZXMgbm90IGV4aXN0IG9uIHRoaXMgbWFwLmApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3JkZXIuc3BsaWNlKG5ld0luZGV4LCAwLCBpZCk7XG5cbiAgICAgICAgdGhpcy5fbGF5ZXJPcmRlckNoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgbGF5ZXIgd2l0aCB0aGUgZ2l2ZW4gaWQgZnJvbSB0aGUgc3R5bGUuXG4gICAgICpcbiAgICAgKiBJZiBubyBzdWNoIGxheWVyIGV4aXN0cywgYW4gYGVycm9yYCBldmVudCBpcyBmaXJlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBpZCBvZiB0aGUgbGF5ZXIgdG8gcmVtb3ZlXG4gICAgICogQGZpcmVzIGVycm9yXG4gICAgICovXG4gICAgcmVtb3ZlTGF5ZXIoaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJzW2lkXTtcbiAgICAgICAgaWYgKCFsYXllcikge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIGxheWVyICcke2lkfScgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG1hcCdzIHN0eWxlIGFuZCBjYW5ub3QgYmUgcmVtb3ZlZC5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF5ZXIuc2V0RXZlbnRlZFBhcmVudChudWxsKTtcblxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX29yZGVyLmluZGV4T2YoaWQpO1xuICAgICAgICB0aGlzLl9vcmRlci5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIHRoaXMuX2xheWVyT3JkZXJDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlbW92ZWRMYXllcnNbaWRdID0gbGF5ZXI7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9sYXllcnNbaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5fc2VyaWFsaXplZExheWVyc1tpZF07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl91cGRhdGVkTGF5ZXJzW2lkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3VwZGF0ZWRQYWludFByb3BzW2lkXTtcblxuICAgICAgICBpZiAobGF5ZXIub25SZW1vdmUpIHtcbiAgICAgICAgICAgIGxheWVyLm9uUmVtb3ZlKHRoaXMubWFwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgc3R5bGUgbGF5ZXIgb2JqZWN0IHdpdGggdGhlIGdpdmVuIGBpZGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpZCBvZiB0aGUgZGVzaXJlZCBsYXllclxuICAgICAqIEByZXR1cm5zIHs/T2JqZWN0fSBhIGxheWVyLCBpZiBvbmUgd2l0aCB0aGUgZ2l2ZW4gYGlkYCBleGlzdHNcbiAgICAgKi9cbiAgICBnZXRMYXllcihpZDogc3RyaW5nKTogT2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheWVyc1tpZF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2tzIGlmIGEgc3BlY2lmaWMgbGF5ZXIgaXMgcHJlc2VudCB3aXRoaW4gdGhlIHN0eWxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gaWQgb2YgdGhlIGRlc2lyZWQgbGF5ZXJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYSBib29sZWFuIHNwZWNpZnlpbmcgaWYgdGhlIGdpdmVuIGxheWVyIGlzIHByZXNlbnRcbiAgICAgKi9cbiAgICBoYXNMYXllcihpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpZCBpbiB0aGlzLl9sYXllcnM7XG4gICAgfVxuXG4gICAgc2V0TGF5ZXJab29tUmFuZ2UobGF5ZXJJZDogc3RyaW5nLCBtaW56b29tOiA/bnVtYmVyLCBtYXh6b29tOiA/bnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmdldExheWVyKGxheWVySWQpO1xuICAgICAgICBpZiAoIWxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgbGF5ZXIgJyR7bGF5ZXJJZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZSBhbmQgY2Fubm90IGhhdmUgem9vbSBleHRlbnQuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXllci5taW56b29tID09PSBtaW56b29tICYmIGxheWVyLm1heHpvb20gPT09IG1heHpvb20pIHJldHVybjtcblxuICAgICAgICBpZiAobWluem9vbSAhPSBudWxsKSB7XG4gICAgICAgICAgICBsYXllci5taW56b29tID0gbWluem9vbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4em9vbSAhPSBudWxsKSB7XG4gICAgICAgICAgICBsYXllci5tYXh6b29tID0gbWF4em9vbTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVMYXllcihsYXllcik7XG4gICAgfVxuXG4gICAgc2V0RmlsdGVyKGxheWVySWQ6IHN0cmluZywgZmlsdGVyOiA/RmlsdGVyU3BlY2lmaWNhdGlvbiwgIG9wdGlvbnM6IFN0eWxlU2V0dGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmdldExheWVyKGxheWVySWQpO1xuICAgICAgICBpZiAoIWxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgbGF5ZXIgJyR7bGF5ZXJJZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZSBhbmQgY2Fubm90IGJlIGZpbHRlcmVkLmApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVlcEVxdWFsKGxheWVyLmZpbHRlciwgZmlsdGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbHRlciA9PT0gbnVsbCB8fCBmaWx0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGF5ZXIuZmlsdGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlTGF5ZXIobGF5ZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3ZhbGlkYXRlKHZhbGlkYXRlU3R5bGUuZmlsdGVyLCBgbGF5ZXJzLiR7bGF5ZXIuaWR9LmZpbHRlcmAsIGZpbHRlciwgbnVsbCwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxheWVyLmZpbHRlciA9IGNsb25lKGZpbHRlcik7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUxheWVyKGxheWVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBsYXllcidzIGZpbHRlciBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXIgdGhlIGxheWVyIHRvIGluc3BlY3RcbiAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIGxheWVyJ3MgZmlsdGVyLCBpZiBhbnlcbiAgICAgKi9cbiAgICBnZXRGaWx0ZXIobGF5ZXI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gY2xvbmUodGhpcy5nZXRMYXllcihsYXllcikuZmlsdGVyKTtcbiAgICB9XG5cbiAgICBzZXRMYXlvdXRQcm9wZXJ0eShsYXllcklkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgIG9wdGlvbnM6IFN0eWxlU2V0dGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmdldExheWVyKGxheWVySWQpO1xuICAgICAgICBpZiAoIWxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgbGF5ZXIgJyR7bGF5ZXJJZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZSBhbmQgY2Fubm90IGJlIHN0eWxlZC5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZXBFcXVhbChsYXllci5nZXRMYXlvdXRQcm9wZXJ0eShuYW1lKSwgdmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgbGF5ZXIuc2V0TGF5b3V0UHJvcGVydHkobmFtZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl91cGRhdGVMYXllcihsYXllcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgbGF5b3V0IHByb3BlcnR5J3MgdmFsdWUgZnJvbSBhIGdpdmVuIGxheWVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVySWQgdGhlIGxheWVyIHRvIGluc3BlY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgbGF5b3V0IHByb3BlcnR5XG4gICAgICogQHJldHVybnMgeyp9IHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqL1xuICAgIGdldExheW91dFByb3BlcnR5KGxheWVySWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5nZXRMYXllcihsYXllcklkKTtcbiAgICAgICAgaWYgKCFsYXllcikge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIGxheWVyICcke2xheWVySWR9JyBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbWFwJ3Mgc3R5bGUuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXllci5nZXRMYXlvdXRQcm9wZXJ0eShuYW1lKTtcbiAgICB9XG5cbiAgICBzZXRQYWludFByb3BlcnR5KGxheWVySWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCB2YWx1ZTogYW55LCBvcHRpb25zOiBTdHlsZVNldHRlck9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5nZXRMYXllcihsYXllcklkKTtcbiAgICAgICAgaWYgKCFsYXllcikge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIGxheWVyICcke2xheWVySWR9JyBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbWFwJ3Mgc3R5bGUgYW5kIGNhbm5vdCBiZSBzdHlsZWQuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWVwRXF1YWwobGF5ZXIuZ2V0UGFpbnRQcm9wZXJ0eShuYW1lKSwgdmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcmVxdWlyZXNSZWxheW91dCA9IGxheWVyLnNldFBhaW50UHJvcGVydHkobmFtZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICBpZiAocmVxdWlyZXNSZWxheW91dCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlTGF5ZXIobGF5ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3VwZGF0ZWRQYWludFByb3BzW2xheWVySWRdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXRQYWludFByb3BlcnR5KGxheWVyOiBzdHJpbmcsIG5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllcihsYXllcikuZ2V0UGFpbnRQcm9wZXJ0eShuYW1lKTtcbiAgICB9XG5cbiAgICBzZXRGZWF0dXJlU3RhdGUodGFyZ2V0OiB7IHNvdXJjZTogc3RyaW5nOyBzb3VyY2VMYXllcj86IHN0cmluZzsgaWQ6IHN0cmluZyB8IG51bWJlcjsgfSwgc3RhdGU6IE9iamVjdCkge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuICAgICAgICBjb25zdCBzb3VyY2VJZCA9IHRhcmdldC5zb3VyY2U7XG4gICAgICAgIGNvbnN0IHNvdXJjZUxheWVyID0gdGFyZ2V0LnNvdXJjZUxheWVyO1xuICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHRoaXMuc291cmNlQ2FjaGVzW3NvdXJjZUlkXTtcblxuICAgICAgICBpZiAoc291cmNlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIHNvdXJjZSAnJHtzb3VyY2VJZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZS5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNvdXJjZVR5cGUgPSBzb3VyY2VDYWNoZS5nZXRTb3VyY2UoKS50eXBlO1xuICAgICAgICBpZiAoc291cmNlVHlwZSA9PT0gJ2dlb2pzb24nICYmIHNvdXJjZUxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBHZW9KU09OIHNvdXJjZXMgY2Fubm90IGhhdmUgYSBzb3VyY2VMYXllciBwYXJhbWV0ZXIuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlVHlwZSA9PT0gJ3ZlY3RvcicgJiYgIXNvdXJjZUxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgc291cmNlTGF5ZXIgcGFyYW1ldGVyIG11c3QgYmUgcHJvdmlkZWQgZm9yIHZlY3RvciBzb3VyY2UgdHlwZXMuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0LmlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBmZWF0dXJlIGlkIHBhcmFtZXRlciBtdXN0IGJlIHByb3ZpZGVkLmApKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzb3VyY2VDYWNoZS5zZXRGZWF0dXJlU3RhdGUoc291cmNlTGF5ZXIsIHRhcmdldC5pZCwgc3RhdGUpO1xuICAgIH1cblxuICAgIHJlbW92ZUZlYXR1cmVTdGF0ZSh0YXJnZXQ6IHsgc291cmNlOiBzdHJpbmc7IHNvdXJjZUxheWVyPzogc3RyaW5nOyBpZD86IHN0cmluZyB8IG51bWJlcjsgfSwga2V5Pzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZUlkID0gdGFyZ2V0LnNvdXJjZTtcbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tzb3VyY2VJZF07XG5cbiAgICAgICAgaWYgKHNvdXJjZUNhY2hlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBzb3VyY2UgJyR7c291cmNlSWR9JyBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbWFwJ3Mgc3R5bGUuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNvdXJjZVR5cGUgPSBzb3VyY2VDYWNoZS5nZXRTb3VyY2UoKS50eXBlO1xuICAgICAgICBjb25zdCBzb3VyY2VMYXllciA9IHNvdXJjZVR5cGUgPT09ICd2ZWN0b3InID8gdGFyZ2V0LnNvdXJjZUxheWVyIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChzb3VyY2VUeXBlID09PSAndmVjdG9yJyAmJiAhc291cmNlTGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBzb3VyY2VMYXllciBwYXJhbWV0ZXIgbXVzdCBiZSBwcm92aWRlZCBmb3IgdmVjdG9yIHNvdXJjZSB0eXBlcy5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleSAmJiAodHlwZW9mIHRhcmdldC5pZCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHRhcmdldC5pZCAhPT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBBIGZlYXR1cmUgaWQgaXMgcmVxdWlyZWQgdG8gcmVtb3ZlIGl0cyBzcGVjaWZpYyBzdGF0ZSBwcm9wZXJ0eS5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc291cmNlQ2FjaGUucmVtb3ZlRmVhdHVyZVN0YXRlKHNvdXJjZUxheWVyLCB0YXJnZXQuaWQsIGtleSk7XG4gICAgfVxuXG4gICAgZ2V0RmVhdHVyZVN0YXRlKHRhcmdldDogeyBzb3VyY2U6IHN0cmluZzsgc291cmNlTGF5ZXI/OiBzdHJpbmc7IGlkOiBzdHJpbmcgfCBudW1iZXI7IH0pIHtcbiAgICAgICAgdGhpcy5fY2hlY2tMb2FkZWQoKTtcbiAgICAgICAgY29uc3Qgc291cmNlSWQgPSB0YXJnZXQuc291cmNlO1xuICAgICAgICBjb25zdCBzb3VyY2VMYXllciA9IHRhcmdldC5zb3VyY2VMYXllcjtcbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tzb3VyY2VJZF07XG5cbiAgICAgICAgaWYgKHNvdXJjZUNhY2hlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBzb3VyY2UgJyR7c291cmNlSWR9JyBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbWFwJ3Mgc3R5bGUuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzb3VyY2VUeXBlID0gc291cmNlQ2FjaGUuZ2V0U291cmNlKCkudHlwZTtcbiAgICAgICAgaWYgKHNvdXJjZVR5cGUgPT09ICd2ZWN0b3InICYmICFzb3VyY2VMYXllcikge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIHNvdXJjZUxheWVyIHBhcmFtZXRlciBtdXN0IGJlIHByb3ZpZGVkIGZvciB2ZWN0b3Igc291cmNlIHR5cGVzLmApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldC5pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgZmVhdHVyZSBpZCBwYXJhbWV0ZXIgbXVzdCBiZSBwcm92aWRlZC5gKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNvdXJjZUNhY2hlLmdldEZlYXR1cmVTdGF0ZShzb3VyY2VMYXllciwgdGFyZ2V0LmlkKTtcbiAgICB9XG5cbiAgICBnZXRUcmFuc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHtkdXJhdGlvbjogMzAwLCBkZWxheTogMH0sIHRoaXMuc3R5bGVzaGVldCAmJiB0aGlzLnN0eWxlc2hlZXQudHJhbnNpdGlvbik7XG4gICAgfVxuXG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4gZmlsdGVyT2JqZWN0KHtcbiAgICAgICAgICAgIHZlcnNpb246IHRoaXMuc3R5bGVzaGVldC52ZXJzaW9uLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5zdHlsZXNoZWV0Lm5hbWUsXG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5zdHlsZXNoZWV0Lm1ldGFkYXRhLFxuICAgICAgICAgICAgbGlnaHQ6IHRoaXMuc3R5bGVzaGVldC5saWdodCxcbiAgICAgICAgICAgIGNlbnRlcjogdGhpcy5zdHlsZXNoZWV0LmNlbnRlcixcbiAgICAgICAgICAgIHpvb206IHRoaXMuc3R5bGVzaGVldC56b29tLFxuICAgICAgICAgICAgYmVhcmluZzogdGhpcy5zdHlsZXNoZWV0LmJlYXJpbmcsXG4gICAgICAgICAgICBwaXRjaDogdGhpcy5zdHlsZXNoZWV0LnBpdGNoLFxuICAgICAgICAgICAgc3ByaXRlOiB0aGlzLnN0eWxlc2hlZXQuc3ByaXRlLFxuICAgICAgICAgICAgZ2x5cGhzOiB0aGlzLnN0eWxlc2hlZXQuZ2x5cGhzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogdGhpcy5zdHlsZXNoZWV0LnRyYW5zaXRpb24sXG4gICAgICAgICAgICBzb3VyY2VzOiBtYXBPYmplY3QodGhpcy5zb3VyY2VDYWNoZXMsIChzb3VyY2UpID0+IHNvdXJjZS5zZXJpYWxpemUoKSksXG4gICAgICAgICAgICBsYXllcnM6IHRoaXMuX3NlcmlhbGl6ZUxheWVycyh0aGlzLl9vcmRlcilcbiAgICAgICAgfSwgKHZhbHVlKSA9PiB7IHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkOyB9KTtcbiAgICB9XG5cbiAgICBfdXBkYXRlTGF5ZXIobGF5ZXI6IFN0eWxlTGF5ZXIpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlZExheWVyc1tsYXllci5pZF0gPSB0cnVlO1xuICAgICAgICBpZiAobGF5ZXIuc291cmNlICYmICF0aGlzLl91cGRhdGVkU291cmNlc1tsYXllci5zb3VyY2VdICYmXG4gICAgICAgICAgICAvL1NraXAgZm9yIHJhc3RlciBsYXllcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy83ODY1KVxuICAgICAgICAgICAgdGhpcy5zb3VyY2VDYWNoZXNbbGF5ZXIuc291cmNlXS5nZXRTb3VyY2UoKS50eXBlICE9PSAncmFzdGVyJykge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlZFNvdXJjZXNbbGF5ZXIuc291cmNlXSA9ICdyZWxvYWQnO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VDYWNoZXNbbGF5ZXIuc291cmNlXS5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIF9mbGF0dGVuQW5kU29ydFJlbmRlcmVkRmVhdHVyZXMoc291cmNlUmVzdWx0czogQXJyYXk8YW55Pikge1xuICAgICAgICAvLyBGZWF0dXJlIG9yZGVyIGlzIGNvbXBsaWNhdGVkLlxuICAgICAgICAvLyBUaGUgb3JkZXIgYmV0d2VlbiBmZWF0dXJlcyBpbiB0d28gMkQgbGF5ZXJzIGlzIGFsd2F5cyBkZXRlcm1pbmVkIGJ5IGxheWVyIG9yZGVyLlxuICAgICAgICAvLyBUaGUgb3JkZXIgYmV0d2VlbiBmZWF0dXJlcyBpbiB0d28gM0QgbGF5ZXJzIGlzIGFsd2F5cyBkZXRlcm1pbmVkIGJ5IGRlcHRoLlxuICAgICAgICAvLyBUaGUgb3JkZXIgYmV0d2VlbiBhIGZlYXR1cmUgaW4gYSAyRCBsYXllciBhbmQgYSAzRCBsYXllciBpcyB0cmlja3k6XG4gICAgICAgIC8vICAgICAgTW9zdCBvZnRlbiBsYXllciBvcmRlciBkZXRlcm1pbmVzIHRoZSBmZWF0dXJlIG9yZGVyIGluIHRoaXMgY2FzZS4gSWZcbiAgICAgICAgLy8gICAgICBhIGxpbmUgbGF5ZXIgaXMgYWJvdmUgYSBleHRydXNpb24gbGF5ZXIgdGhlIGxpbmUgZmVhdHVyZSB3aWxsIGJlIHJlbmRlcmVkXG4gICAgICAgIC8vICAgICAgYWJvdmUgdGhlIGV4dHJ1c2lvbi4gSWYgdGhlIGxpbmUgbGF5ZXIgaXMgYmVsb3cgdGhlIGV4dHJ1c2lvbiBsYXllcixcbiAgICAgICAgLy8gICAgICBpdCB3aWxsIGJlIHJlbmRlcmVkIGJlbG93IGl0LlxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgIFRoZXJlIGlzIGEgd2VpcmQgY2FzZSB0aG91Z2guXG4gICAgICAgIC8vICAgICAgWW91IGhhdmUgbGF5ZXJzIGluIHRoaXMgb3JkZXI6IGV4dHJ1c2lvbl9sYXllcl9hLCBsaW5lX2xheWVyLCBleHRydXNpb25fbGF5ZXJfYlxuICAgICAgICAvLyAgICAgIEVhY2ggbGF5ZXIgaGFzIGEgZmVhdHVyZSB0aGF0IG92ZXJsYXBzIHRoZSBvdGhlciBmZWF0dXJlcy5cbiAgICAgICAgLy8gICAgICBUaGUgZmVhdHVyZSBpbiBleHRydXNpb25fbGF5ZXJfYSBpcyBjbG9zZXIgdGhhbiB0aGUgZmVhdHVyZSBpbiBleHRydXNpb25fbGF5ZXJfYiBzbyBpdCBpcyByZW5kZXJlZCBhYm92ZS5cbiAgICAgICAgLy8gICAgICBUaGUgZmVhdHVyZSBpbiBsaW5lX2xheWVyIGlzIHJlbmRlcmVkIGFib3ZlIGV4dHJ1c2lvbl9sYXllcl9hLlxuICAgICAgICAvLyAgICAgIFRoaXMgbWVhbnMgdGhhdCB0aGF0IHRoZSBsaW5lX2xheWVyIGZlYXR1cmUgaXMgYWJvdmUgdGhlIGV4dHJ1c2lvbl9sYXllcl9iIGZlYXR1cmUgZGVzcGl0ZVxuICAgICAgICAvLyAgICAgIGl0IGJlaW5nIGluIGFuIGVhcmxpZXIgbGF5ZXIuXG5cbiAgICAgICAgY29uc3QgaXNMYXllcjNEID0gbGF5ZXJJZCA9PiB0aGlzLl9sYXllcnNbbGF5ZXJJZF0udHlwZSA9PT0gJ2ZpbGwtZXh0cnVzaW9uJztcblxuICAgICAgICBjb25zdCBsYXllckluZGV4ID0ge307XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzM0QgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbCA9IHRoaXMuX29yZGVyLmxlbmd0aCAtIDE7IGwgPj0gMDsgbC0tKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllcklkID0gdGhpcy5fb3JkZXJbbF07XG4gICAgICAgICAgICBpZiAoaXNMYXllcjNEKGxheWVySWQpKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJJbmRleFtsYXllcklkXSA9IGw7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzb3VyY2VSZXN1bHQgb2Ygc291cmNlUmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXllckZlYXR1cmVzID0gc291cmNlUmVzdWx0W2xheWVySWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJGZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmZWF0dXJlV3JhcHBlciBvZiBsYXllckZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMzRC5wdXNoKGZlYXR1cmVXcmFwcGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZlYXR1cmVzM0Quc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGIuaW50ZXJzZWN0aW9uWiAtIGEuaW50ZXJzZWN0aW9uWjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgbCA9IHRoaXMuX29yZGVyLmxlbmd0aCAtIDE7IGwgPj0gMDsgbC0tKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllcklkID0gdGhpcy5fb3JkZXJbbF07XG5cbiAgICAgICAgICAgIGlmIChpc0xheWVyM0QobGF5ZXJJZCkpIHtcbiAgICAgICAgICAgICAgICAvLyBhZGQgYWxsIDNEIGZlYXR1cmVzIHRoYXQgYXJlIGluIG9yIGFib3ZlIHRoZSBjdXJyZW50IGxheWVyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGZlYXR1cmVzM0QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9wbW9zdDNEID0gZmVhdHVyZXMzRFtpXS5mZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJJbmRleFt0b3Btb3N0M0QubGF5ZXIuaWRdIDwgbCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2godG9wbW9zdDNEKTtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMzRC5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlUmVzdWx0IG9mIHNvdXJjZVJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJGZWF0dXJlcyA9IHNvdXJjZVJlc3VsdFtsYXllcklkXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyRmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmVhdHVyZVdyYXBwZXIgb2YgbGF5ZXJGZWF0dXJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZmVhdHVyZVdyYXBwZXIuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmVhdHVyZXM7XG4gICAgfVxuXG4gICAgcXVlcnlSZW5kZXJlZEZlYXR1cmVzKHF1ZXJ5R2VvbWV0cnk6IGFueSwgcGFyYW1zOiBhbnksIHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdGUodmFsaWRhdGVTdHlsZS5maWx0ZXIsICdxdWVyeVJlbmRlcmVkRmVhdHVyZXMuZmlsdGVyJywgcGFyYW1zLmZpbHRlciwgbnVsbCwgcGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluY2x1ZGVkU291cmNlcyA9IHt9O1xuICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5sYXllcnMpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJhbXMubGF5ZXJzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoJ3BhcmFtZXRlcnMubGF5ZXJzIG11c3QgYmUgYW4gQXJyYXkuJykpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxheWVySWQgb2YgcGFyYW1zLmxheWVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVySWRdO1xuICAgICAgICAgICAgICAgIGlmICghbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBsYXllciBpcyBub3QgaW4gdGhlIHN0eWxlLmxheWVycyBhcnJheVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgbGF5ZXIgJyR7bGF5ZXJJZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZSBhbmQgY2Fubm90IGJlIHF1ZXJpZWQgZm9yIGZlYXR1cmVzLmApKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5jbHVkZWRTb3VyY2VzW2xheWVyLnNvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc291cmNlUmVzdWx0cyA9IFtdO1xuXG4gICAgICAgIHBhcmFtcy5hdmFpbGFibGVJbWFnZXMgPSB0aGlzLl9hdmFpbGFibGVJbWFnZXM7XG5cbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLnNvdXJjZUNhY2hlcykge1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5sYXllcnMgJiYgIWluY2x1ZGVkU291cmNlc1tpZF0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgc291cmNlUmVzdWx0cy5wdXNoKFxuICAgICAgICAgICAgICAgIHF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VDYWNoZXNbaWRdLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXllcnMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlcmlhbGl6ZWRMYXllcnMsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5R2VvbWV0cnksXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgLy8gSWYgYSBwbGFjZW1lbnQgaGFzIHJ1biwgcXVlcnkgYWdhaW5zdCBpdHMgQ29sbGlzaW9uSW5kZXhcbiAgICAgICAgICAgIC8vIGZvciBzeW1ib2wgcmVzdWx0cywgYW5kIHRyZWF0IGl0IGFzIGFuIGV4dHJhIHNvdXJjZSB0byBtZXJnZVxuICAgICAgICAgICAgc291cmNlUmVzdWx0cy5wdXNoKFxuICAgICAgICAgICAgICAgIHF1ZXJ5UmVuZGVyZWRTeW1ib2xzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXllcnMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlcmlhbGl6ZWRMYXllcnMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlQ2FjaGVzLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUdlb21ldHJ5LFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhY2VtZW50LmNvbGxpc2lvbkluZGV4LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlbWVudC5yZXRhaW5lZFF1ZXJ5RGF0YSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fZmxhdHRlbkFuZFNvcnRSZW5kZXJlZEZlYXR1cmVzKHNvdXJjZVJlc3VsdHMpO1xuICAgIH1cblxuICAgIHF1ZXJ5U291cmNlRmVhdHVyZXMoc291cmNlSUQ6IHN0cmluZywgcGFyYW1zOiA/e3NvdXJjZUxheWVyOiA/c3RyaW5nLCBmaWx0ZXI6ID9BcnJheTxhbnk+LCB2YWxpZGF0ZT86IGJvb2xlYW59KSB7XG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdGUodmFsaWRhdGVTdHlsZS5maWx0ZXIsICdxdWVyeVNvdXJjZUZlYXR1cmVzLmZpbHRlcicsIHBhcmFtcy5maWx0ZXIsIG51bGwsIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tzb3VyY2VJRF07XG4gICAgICAgIHJldHVybiBzb3VyY2VDYWNoZSA/IHF1ZXJ5U291cmNlRmVhdHVyZXMoc291cmNlQ2FjaGUsIHBhcmFtcykgOiBbXTtcbiAgICB9XG5cbiAgICBhZGRTb3VyY2VUeXBlKG5hbWU6IHN0cmluZywgU291cmNlVHlwZTogU291cmNlQ2xhc3MsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikge1xuICAgICAgICBpZiAoU3R5bGUuZ2V0U291cmNlVHlwZShuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihgQSBzb3VyY2UgdHlwZSBjYWxsZWQgXCIke25hbWV9XCIgYWxyZWFkeSBleGlzdHMuYCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgU3R5bGUuc2V0U291cmNlVHlwZShuYW1lLCBTb3VyY2VUeXBlKTtcblxuICAgICAgICBpZiAoIVNvdXJjZVR5cGUud29ya2VyU291cmNlVVJMKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuYnJvYWRjYXN0KCdsb2FkV29ya2VyU291cmNlJywge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHVybDogU291cmNlVHlwZS53b3JrZXJTb3VyY2VVUkxcbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGdldExpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saWdodC5nZXRMaWdodCgpO1xuICAgIH1cblxuICAgIHNldExpZ2h0KGxpZ2h0T3B0aW9uczogTGlnaHRTcGVjaWZpY2F0aW9uLCBvcHRpb25zOiBTdHlsZVNldHRlck9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGNvbnN0IGxpZ2h0ID0gdGhpcy5saWdodC5nZXRMaWdodCgpO1xuICAgICAgICBsZXQgX3VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBsaWdodE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghZGVlcEVxdWFsKGxpZ2h0T3B0aW9uc1trZXldLCBsaWdodFtrZXldKSkge1xuICAgICAgICAgICAgICAgIF91cGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghX3VwZGF0ZSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICBub3c6IGJyb3dzZXIubm93KCksXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBleHRlbmQoe1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICAgICAgZGVsYXk6IDBcbiAgICAgICAgICAgIH0sIHRoaXMuc3R5bGVzaGVldC50cmFuc2l0aW9uKVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubGlnaHQuc2V0TGlnaHQobGlnaHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5saWdodC51cGRhdGVUcmFuc2l0aW9ucyhwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICBfdmFsaWRhdGUodmFsaWRhdGU6IFZhbGlkYXRvciwga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIHByb3BzOiBhbnksIG9wdGlvbnM6IHsgdmFsaWRhdGU/OiBib29sZWFuIH0gPSB7fSkge1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnZhbGlkYXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbWl0VmFsaWRhdGlvbkVycm9ycyh0aGlzLCB2YWxpZGF0ZS5jYWxsKHZhbGlkYXRlU3R5bGUsIGV4dGVuZCh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5zZXJpYWxpemUoKSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgc3R5bGVTcGVjXG4gICAgICAgIH0sIHByb3BzKSkpO1xuICAgIH1cblxuICAgIF9yZW1vdmUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Nwcml0ZVJlcXVlc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nwcml0ZVJlcXVlc3QuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl9zcHJpdGVSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBydGxUZXh0UGx1Z2luRXZlbnRlZC5vZmYoJ3BsdWdpblN0YXRlQ2hhbmdlJywgdGhpcy5fcnRsVGV4dFBsdWdpbkNhbGxiYWNrKTtcbiAgICAgICAgZm9yIChjb25zdCBsYXllcklkIGluIHRoaXMuX2xheWVycykge1xuICAgICAgICAgICAgY29uc3QgbGF5ZXI6IFN0eWxlTGF5ZXIgPSB0aGlzLl9sYXllcnNbbGF5ZXJJZF07XG4gICAgICAgICAgICBsYXllci5zZXRFdmVudGVkUGFyZW50KG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5zb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlQ2FjaGVzW2lkXS5jbGVhclRpbGVzKCk7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tpZF0uc2V0RXZlbnRlZFBhcmVudChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmltYWdlTWFuYWdlci5zZXRFdmVudGVkUGFyZW50KG51bGwpO1xuICAgICAgICB0aGlzLnNldEV2ZW50ZWRQYXJlbnQobnVsbCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBfY2xlYXJTb3VyY2UoaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tpZF0uY2xlYXJUaWxlcygpO1xuICAgIH1cblxuICAgIF9yZWxvYWRTb3VyY2UoaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tpZF0ucmVzdW1lKCk7XG4gICAgICAgIHRoaXMuc291cmNlQ2FjaGVzW2lkXS5yZWxvYWQoKTtcbiAgICB9XG5cbiAgICBfdXBkYXRlU291cmNlcyh0cmFuc2Zvcm06IFRyYW5zZm9ybSkge1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuc291cmNlQ2FjaGVzKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tpZF0udXBkYXRlKHRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVDb2xsaXNpb25Cb3hlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLnNvdXJjZUNhY2hlcykge1xuICAgICAgICAgICAgdGhpcy5fcmVsb2FkU291cmNlKGlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVQbGFjZW1lbnQodHJhbnNmb3JtOiBUcmFuc2Zvcm0sIHNob3dDb2xsaXNpb25Cb3hlczogYm9vbGVhbiwgZmFkZUR1cmF0aW9uOiBudW1iZXIsIGNyb3NzU291cmNlQ29sbGlzaW9uczogYm9vbGVhbiwgZm9yY2VGdWxsUGxhY2VtZW50OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IHN5bWJvbEJ1Y2tldHNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGxldCBwbGFjZW1lbnRDb21taXR0ZWQgPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBsYXllclRpbGVzID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBsYXllcklEIG9mIHRoaXMuX29yZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBzdHlsZUxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVySURdO1xuICAgICAgICAgICAgaWYgKHN0eWxlTGF5ZXIudHlwZSAhPT0gJ3N5bWJvbCcpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoIWxheWVyVGlsZXNbc3R5bGVMYXllci5zb3VyY2VdKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tzdHlsZUxheWVyLnNvdXJjZV07XG4gICAgICAgICAgICAgICAgbGF5ZXJUaWxlc1tzdHlsZUxheWVyLnNvdXJjZV0gPSBzb3VyY2VDYWNoZS5nZXRSZW5kZXJhYmxlSWRzKHRydWUpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGlkKSA9PiBzb3VyY2VDYWNoZS5nZXRUaWxlQnlJRChpZCkpXG4gICAgICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiAoYi50aWxlSUQub3ZlcnNjYWxlZFogLSBhLnRpbGVJRC5vdmVyc2NhbGVkWikgfHwgKGEudGlsZUlELmlzTGVzc1RoYW4oYi50aWxlSUQpID8gLTEgOiAxKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGxheWVyQnVja2V0c0NoYW5nZWQgPSB0aGlzLmNyb3NzVGlsZVN5bWJvbEluZGV4LmFkZExheWVyKHN0eWxlTGF5ZXIsIGxheWVyVGlsZXNbc3R5bGVMYXllci5zb3VyY2VdLCB0cmFuc2Zvcm0uY2VudGVyLmxuZyk7XG4gICAgICAgICAgICBzeW1ib2xCdWNrZXRzQ2hhbmdlZCA9IHN5bWJvbEJ1Y2tldHNDaGFuZ2VkIHx8IGxheWVyQnVja2V0c0NoYW5nZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcm9zc1RpbGVTeW1ib2xJbmRleC5wcnVuZVVudXNlZExheWVycyh0aGlzLl9vcmRlcik7XG5cbiAgICAgICAgLy8gQW55dGhpbmcgdGhhdCBjaGFuZ2VzIG91ciBcImluIHByb2dyZXNzXCIgbGF5ZXIgYW5kIHRpbGUgaW5kaWNlcyByZXF1aXJlcyB1c1xuICAgICAgICAvLyB0byBzdGFydCBvdmVyLiBXaGVuIHdlIHN0YXJ0IG92ZXIsIHdlIGRvIGEgZnVsbCBwbGFjZW1lbnQgaW5zdGVhZCBvZiBpbmNyZW1lbnRhbFxuICAgICAgICAvLyB0byBwcmV2ZW50IHN0YXJ2YXRpb24uXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gcmVzdGFydCBwbGFjZW1lbnQgdG8ga2VlcCBsYXllciBpbmRpY2VzIGluIHN5bmMuXG4gICAgICAgIC8vIEFsc28gZm9yY2UgZnVsbCBwbGFjZW1lbnQgd2hlbiBmYWRlRHVyYXRpb24gPT09IDAgdG8gZW5zdXJlIHRoYXQgbmV3bHkgbG9hZGVkXG4gICAgICAgIC8vIHRpbGVzIHdpbGwgZnVsbHkgZGlzcGxheSBzeW1ib2xzIGluIHRoZWlyIGZpcnN0IGZyYW1lXG4gICAgICAgIGZvcmNlRnVsbFBsYWNlbWVudCA9IGZvcmNlRnVsbFBsYWNlbWVudCB8fCB0aGlzLl9sYXllck9yZGVyQ2hhbmdlZCB8fCBmYWRlRHVyYXRpb24gPT09IDA7XG5cbiAgICAgICAgaWYgKGZvcmNlRnVsbFBsYWNlbWVudCB8fCAhdGhpcy5wYXVzZWFibGVQbGFjZW1lbnQgfHwgKHRoaXMucGF1c2VhYmxlUGxhY2VtZW50LmlzRG9uZSgpICYmICF0aGlzLnBsYWNlbWVudC5zdGlsbFJlY2VudChicm93c2VyLm5vdygpLCB0cmFuc2Zvcm0uem9vbSkpKSB7XG4gICAgICAgICAgICB0aGlzLnBhdXNlYWJsZVBsYWNlbWVudCA9IG5ldyBQYXVzZWFibGVQbGFjZW1lbnQodHJhbnNmb3JtLCB0aGlzLl9vcmRlciwgZm9yY2VGdWxsUGxhY2VtZW50LCBzaG93Q29sbGlzaW9uQm94ZXMsIGZhZGVEdXJhdGlvbiwgY3Jvc3NTb3VyY2VDb2xsaXNpb25zLCB0aGlzLnBsYWNlbWVudCk7XG4gICAgICAgICAgICB0aGlzLl9sYXllck9yZGVyQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucGF1c2VhYmxlUGxhY2VtZW50LmlzRG9uZSgpKSB7XG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBwbGFjZW1lbnQgZmluaXNoZWQgcnVubmluZywgYnV0IHRoZSBuZXh0IG9uZSBoYXNu4oCZdFxuICAgICAgICAgICAgLy8gc3RhcnRlZCB5ZXQgYmVjYXVzZSBvZiB0aGUgYHN0aWxsUmVjZW50YCBjaGVjayBpbW1lZGlhdGVseVxuICAgICAgICAgICAgLy8gYWJvdmUsIHNvIG1hcmsgaXQgc3RhbGUgdG8gZW5zdXJlIHRoYXQgd2UgcmVxdWVzdCBhbm90aGVyXG4gICAgICAgICAgICAvLyByZW5kZXIgZnJhbWVcbiAgICAgICAgICAgIHRoaXMucGxhY2VtZW50LnNldFN0YWxlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhdXNlYWJsZVBsYWNlbWVudC5jb250aW51ZVBsYWNlbWVudCh0aGlzLl9vcmRlciwgdGhpcy5fbGF5ZXJzLCBsYXllclRpbGVzKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucGF1c2VhYmxlUGxhY2VtZW50LmlzRG9uZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZW1lbnQgPSB0aGlzLnBhdXNlYWJsZVBsYWNlbWVudC5jb21taXQoYnJvd3Nlci5ub3coKSk7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50Q29tbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN5bWJvbEJ1Y2tldHNDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhlIHBsYWNlbWVudCBnZXRzIHNwbGl0IG92ZXIgbXVsdGlwbGUgZnJhbWVzIGl0IGlzIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgLy8gdGhlc2UgYnVja2V0cyB3ZXJlIHByb2Nlc3NlZCBiZWZvcmUgdGhleSB3ZXJlIGNoYW5nZWQgYW5kIHNvIHRoZVxuICAgICAgICAgICAgICAgIC8vIHBsYWNlbWVudCBpcyBhbHJlYWR5IHN0YWxlIHdoaWxlIGl0IGlzIGluIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgdGhpcy5wYXVzZWFibGVQbGFjZW1lbnQucGxhY2VtZW50LnNldFN0YWxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGxhY2VtZW50Q29tbWl0dGVkIHx8IHN5bWJvbEJ1Y2tldHNDaGFuZ2VkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxheWVySUQgb2YgdGhpcy5fb3JkZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZUxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVySURdO1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZUxheWVyLnR5cGUgIT09ICdzeW1ib2wnKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlbWVudC51cGRhdGVMYXllck9wYWNpdGllcyhzdHlsZUxheWVyLCBsYXllclRpbGVzW3N0eWxlTGF5ZXIuc291cmNlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBuZWVkc1JlbmRlciBpcyBmYWxzZSB3aGVuIHdlIGhhdmUganVzdCBmaW5pc2hlZCBhIHBsYWNlbWVudCB0aGF0IGRpZG4ndCBjaGFuZ2UgdGhlIHZpc2liaWxpdHkgb2YgYW55IHN5bWJvbHNcbiAgICAgICAgY29uc3QgbmVlZHNSZXJlbmRlciA9ICF0aGlzLnBhdXNlYWJsZVBsYWNlbWVudC5pc0RvbmUoKSB8fCB0aGlzLnBsYWNlbWVudC5oYXNUcmFuc2l0aW9ucyhicm93c2VyLm5vdygpKTtcbiAgICAgICAgcmV0dXJuIG5lZWRzUmVyZW5kZXI7XG4gICAgfVxuXG4gICAgX3JlbGVhc2VTeW1ib2xGYWRlVGlsZXMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5zb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlQ2FjaGVzW2lkXS5yZWxlYXNlU3ltYm9sRmFkZVRpbGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYWxsYmFja3MgZnJvbSB3ZWIgd29ya2Vyc1xuXG4gICAgZ2V0SW1hZ2VzKG1hcElkOiBzdHJpbmcsIHBhcmFtczoge2ljb25zOiBBcnJheTxzdHJpbmc+LCBzb3VyY2U6IHN0cmluZywgdGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlELCB0eXBlOiBzdHJpbmd9LCBjYWxsYmFjazogQ2FsbGJhY2s8e1tfOiBzdHJpbmddOiBTdHlsZUltYWdlfT4pIHtcblxuICAgICAgICB0aGlzLmltYWdlTWFuYWdlci5nZXRJbWFnZXMocGFyYW1zLmljb25zLCBjYWxsYmFjayk7XG5cbiAgICAgICAgLy8gQXBwbHkgcXVldWVkIGltYWdlIGNoYW5nZXMgYmVmb3JlIHNldHRpbmcgdGhlIHRpbGUncyBkZXBlbmRlbmNpZXMgc28gdGhhdCB0aGUgdGlsZVxuICAgICAgICAvLyBpcyBub3QgcmVsb2FkZWQgdW5lY2Vzc2FyaWx5LiBXaXRob3V0IHRoaXMgZm9yY2VkIHVwZGF0ZSB0aGUgcmVsb2FkIGNvdWxkIGhhcHBlbiBpbiBjYXNlc1xuICAgICAgICAvLyBsaWtlIHRoaXMgb25lOlxuICAgICAgICAvLyAtIGljb25zIGNvbnRhaW5zIFwibXktaW1hZ2VcIlxuICAgICAgICAvLyAtIGltYWdlTWFuYWdlci5nZXRJbWFnZXMoLi4uKSB0cmlnZ2VycyBgb25zdHlsZWltYWdlbWlzc2luZ2BcbiAgICAgICAgLy8gLSB0aGUgdXNlciBhZGRzIFwibXktaW1hZ2VcIiB3aXRoaW4gdGhlIGNhbGxiYWNrXG4gICAgICAgIC8vIC0gYWRkSW1hZ2UgYWRkcyBcIm15LWltYWdlXCIgdG8gdGhpcy5fY2hhbmdlZEltYWdlc1xuICAgICAgICAvLyAtIHRoZSBuZXh0IGZyYW1lIHRyaWdnZXJzIGEgcmVsb2FkIG9mIHRoaXMgdGlsZSBldmVuIHRob3VnaCBpdCBhbHJlYWR5IGhhcyB0aGUgbGF0ZXN0IHZlcnNpb25cbiAgICAgICAgdGhpcy5fdXBkYXRlVGlsZXNGb3JDaGFuZ2VkSW1hZ2VzKCk7XG5cbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1twYXJhbXMuc291cmNlXTtcbiAgICAgICAgaWYgKHNvdXJjZUNhY2hlKSB7XG4gICAgICAgICAgICBzb3VyY2VDYWNoZS5zZXREZXBlbmRlbmNpZXMocGFyYW1zLnRpbGVJRC5rZXksIHBhcmFtcy50eXBlLCBwYXJhbXMuaWNvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0R2x5cGhzKG1hcElkOiBzdHJpbmcsIHBhcmFtczoge3N0YWNrczoge1tfOiBzdHJpbmddOiBBcnJheTxudW1iZXI+fX0sIGNhbGxiYWNrOiBDYWxsYmFjazx7W186IHN0cmluZ106IHtbXzogbnVtYmVyXTogP1N0eWxlR2x5cGh9fT4pIHtcbiAgICAgICAgdGhpcy5nbHlwaE1hbmFnZXIuZ2V0R2x5cGhzKHBhcmFtcy5zdGFja3MsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBnZXRSZXNvdXJjZShtYXBJZDogc3RyaW5nLCBwYXJhbXM6IFJlcXVlc3RQYXJhbWV0ZXJzLCBjYWxsYmFjazogUmVzcG9uc2VDYWxsYmFjazxhbnk+KTogQ2FuY2VsYWJsZSB7XG4gICAgICAgIHJldHVybiBtYWtlUmVxdWVzdChwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICB9XG59XG5cblN0eWxlLmdldFNvdXJjZVR5cGUgPSBnZXRTb3VyY2VUeXBlO1xuU3R5bGUuc2V0U291cmNlVHlwZSA9IHNldFNvdXJjZVR5cGU7XG5TdHlsZS5yZWdpc3RlckZvclBsdWdpblN0YXRlQ2hhbmdlID0gcmVnaXN0ZXJGb3JQbHVnaW5TdGF0ZUNoYW5nZTtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGU7XG4iLCJpbXBvcnQgbGF0ZXN0IGZyb20gJy4vcmVmZXJlbmNlL2xhdGVzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVtcHR5U3R5bGUoKSB7XG4gICAgY29uc3Qgc3R5bGUgPSB7fTtcblxuICAgIGNvbnN0IHZlcnNpb24gPSBsYXRlc3RbJyR2ZXJzaW9uJ107XG4gICAgZm9yIChjb25zdCBzdHlsZUtleSBpbiBsYXRlc3RbJyRyb290J10pIHtcbiAgICAgICAgY29uc3Qgc3BlYyA9IGxhdGVzdFsnJHJvb3QnXVtzdHlsZUtleV07XG5cbiAgICAgICAgaWYgKHNwZWMucmVxdWlyZWQpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoc3R5bGVLZXkgPT09ICd2ZXJzaW9uJykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmVyc2lvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwZWMudHlwZSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN0eWxlW3N0eWxlS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtnZXRKU09OLCBnZXRJbWFnZSwgUmVzb3VyY2VUeXBlfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuXG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IHtSR0JBSW1hZ2V9IGZyb20gJy4uL3V0aWwvaW1hZ2UnO1xuXG5pbXBvcnQgdHlwZSB7U3R5bGVJbWFnZX0gZnJvbSAnLi9zdHlsZV9pbWFnZSc7XG5pbXBvcnQgdHlwZSB7UmVxdWVzdE1hbmFnZXJ9IGZyb20gJy4uL3V0aWwvbWFwYm94JztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuaW1wb3J0IHR5cGUge0NhbmNlbGFibGV9IGZyb20gJy4uL3R5cGVzL2NhbmNlbGFibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihiYXNlVVJMOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyOiBSZXF1ZXN0TWFuYWdlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IENhbGxiYWNrPHtbXzogc3RyaW5nXTogU3R5bGVJbWFnZX0+KTogQ2FuY2VsYWJsZSB7XG4gICAgbGV0IGpzb246IGFueSwgaW1hZ2UsIGVycm9yO1xuICAgIGNvbnN0IGZvcm1hdCA9IGJyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpbyA+IDEgPyAnQDJ4JyA6ICcnO1xuXG4gICAgbGV0IGpzb25SZXF1ZXN0ID0gZ2V0SlNPTihyZXF1ZXN0TWFuYWdlci50cmFuc2Zvcm1SZXF1ZXN0KHJlcXVlc3RNYW5hZ2VyLm5vcm1hbGl6ZVNwcml0ZVVSTChiYXNlVVJMLCBmb3JtYXQsICcuanNvbicpLCBSZXNvdXJjZVR5cGUuU3ByaXRlSlNPTiksIChlcnI6ID9FcnJvciwgZGF0YTogP09iamVjdCkgPT4ge1xuICAgICAgICBqc29uUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICAgICAganNvbiA9IGRhdGE7XG4gICAgICAgICAgICBtYXliZUNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBpbWFnZVJlcXVlc3QgPSBnZXRJbWFnZShyZXF1ZXN0TWFuYWdlci50cmFuc2Zvcm1SZXF1ZXN0KHJlcXVlc3RNYW5hZ2VyLm5vcm1hbGl6ZVNwcml0ZVVSTChiYXNlVVJMLCBmb3JtYXQsICcucG5nJyksIFJlc291cmNlVHlwZS5TcHJpdGVJbWFnZSksIChlcnIsIGltZykgPT4ge1xuICAgICAgICBpbWFnZVJlcXVlc3QgPSBudWxsO1xuICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgICAgIGltYWdlID0gaW1nO1xuICAgICAgICAgICAgbWF5YmVDb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtYXliZUNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChqc29uICYmIGltYWdlKSB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZURhdGEgPSBicm93c2VyLmdldEltYWdlRGF0YShpbWFnZSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiBqc29uKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHQsIHgsIHksIHNkZiwgcGl4ZWxSYXRpbywgc3RyZXRjaFgsIHN0cmV0Y2hZLCBjb250ZW50fSA9IGpzb25baWRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgUkdCQUltYWdlKHt3aWR0aCwgaGVpZ2h0fSk7XG4gICAgICAgICAgICAgICAgUkdCQUltYWdlLmNvcHkoaW1hZ2VEYXRhLCBkYXRhLCB7eCwgeX0sIHt4OiAwLCB5OiAwfSwge3dpZHRoLCBoZWlnaHR9KTtcbiAgICAgICAgICAgICAgICByZXN1bHRbaWRdID0ge2RhdGEsIHBpeGVsUmF0aW8sIHNkZiwgc3RyZXRjaFgsIHN0cmV0Y2hZLCBjb250ZW50fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgICAgIGlmIChqc29uUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGpzb25SZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIGpzb25SZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbWFnZVJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBpbWFnZVJlcXVlc3QuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgaW1hZ2VSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHtjcmVhdGVMYXlvdXR9IGZyb20gJy4uL3V0aWwvc3RydWN0X2FycmF5JztcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTGF5b3V0KFtcbiAgICB7bmFtZTogJ2FfcG9zJywgdHlwZTogJ0ludDE2JywgY29tcG9uZW50czogMn1cbl0pO1xuIiwiXG4vLyBEaXNhYmxlIEZsb3cgYW5ub3RhdGlvbnMgaGVyZSBiZWNhdXNlIEZsb3cgZG9lc24ndCBzdXBwb3J0IGltcG9ydGluZyBHTFNMIGZpbGVzXG4vKiBlc2xpbnQtZGlzYWJsZSBmbG93dHlwZS9yZXF1aXJlLXZhbGlkLWZpbGUtYW5ub3RhdGlvbiAqL1xuXG5pbXBvcnQgcHJlbHVkZUZyYWcgZnJvbSAnLi9fcHJlbHVkZS5mcmFnbWVudC5nbHNsJztcbmltcG9ydCBwcmVsdWRlVmVydCBmcm9tICcuL19wcmVsdWRlLnZlcnRleC5nbHNsJztcbmltcG9ydCBiYWNrZ3JvdW5kRnJhZyBmcm9tICcuL2JhY2tncm91bmQuZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgYmFja2dyb3VuZFZlcnQgZnJvbSAnLi9iYWNrZ3JvdW5kLnZlcnRleC5nbHNsJztcbmltcG9ydCBiYWNrZ3JvdW5kUGF0dGVybkZyYWcgZnJvbSAnLi9iYWNrZ3JvdW5kX3BhdHRlcm4uZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgYmFja2dyb3VuZFBhdHRlcm5WZXJ0IGZyb20gJy4vYmFja2dyb3VuZF9wYXR0ZXJuLnZlcnRleC5nbHNsJztcbmltcG9ydCBjaXJjbGVGcmFnIGZyb20gJy4vY2lyY2xlLmZyYWdtZW50Lmdsc2wnO1xuaW1wb3J0IGNpcmNsZVZlcnQgZnJvbSAnLi9jaXJjbGUudmVydGV4Lmdsc2wnO1xuaW1wb3J0IGNsaXBwaW5nTWFza0ZyYWcgZnJvbSAnLi9jbGlwcGluZ19tYXNrLmZyYWdtZW50Lmdsc2wnO1xuaW1wb3J0IGNsaXBwaW5nTWFza1ZlcnQgZnJvbSAnLi9jbGlwcGluZ19tYXNrLnZlcnRleC5nbHNsJztcbmltcG9ydCBoZWF0bWFwRnJhZyBmcm9tICcuL2hlYXRtYXAuZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgaGVhdG1hcFZlcnQgZnJvbSAnLi9oZWF0bWFwLnZlcnRleC5nbHNsJztcbmltcG9ydCBoZWF0bWFwVGV4dHVyZUZyYWcgZnJvbSAnLi9oZWF0bWFwX3RleHR1cmUuZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgaGVhdG1hcFRleHR1cmVWZXJ0IGZyb20gJy4vaGVhdG1hcF90ZXh0dXJlLnZlcnRleC5nbHNsJztcbmltcG9ydCBjb2xsaXNpb25Cb3hGcmFnIGZyb20gJy4vY29sbGlzaW9uX2JveC5mcmFnbWVudC5nbHNsJztcbmltcG9ydCBjb2xsaXNpb25Cb3hWZXJ0IGZyb20gJy4vY29sbGlzaW9uX2JveC52ZXJ0ZXguZ2xzbCc7XG5pbXBvcnQgY29sbGlzaW9uQ2lyY2xlRnJhZyBmcm9tICcuL2NvbGxpc2lvbl9jaXJjbGUuZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgY29sbGlzaW9uQ2lyY2xlVmVydCBmcm9tICcuL2NvbGxpc2lvbl9jaXJjbGUudmVydGV4Lmdsc2wnO1xuaW1wb3J0IGRlYnVnRnJhZyBmcm9tICcuL2RlYnVnLmZyYWdtZW50Lmdsc2wnO1xuaW1wb3J0IGRlYnVnVmVydCBmcm9tICcuL2RlYnVnLnZlcnRleC5nbHNsJztcbmltcG9ydCBmaWxsRnJhZyBmcm9tICcuL2ZpbGwuZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgZmlsbFZlcnQgZnJvbSAnLi9maWxsLnZlcnRleC5nbHNsJztcbmltcG9ydCBmaWxsT3V0bGluZUZyYWcgZnJvbSAnLi9maWxsX291dGxpbmUuZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgZmlsbE91dGxpbmVWZXJ0IGZyb20gJy4vZmlsbF9vdXRsaW5lLnZlcnRleC5nbHNsJztcbmltcG9ydCBmaWxsT3V0bGluZVBhdHRlcm5GcmFnIGZyb20gJy4vZmlsbF9vdXRsaW5lX3BhdHRlcm4uZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgZmlsbE91dGxpbmVQYXR0ZXJuVmVydCBmcm9tICcuL2ZpbGxfb3V0bGluZV9wYXR0ZXJuLnZlcnRleC5nbHNsJztcbmltcG9ydCBmaWxsUGF0dGVybkZyYWcgZnJvbSAnLi9maWxsX3BhdHRlcm4uZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgZmlsbFBhdHRlcm5WZXJ0IGZyb20gJy4vZmlsbF9wYXR0ZXJuLnZlcnRleC5nbHNsJztcbmltcG9ydCBmaWxsRXh0cnVzaW9uRnJhZyBmcm9tICcuL2ZpbGxfZXh0cnVzaW9uLmZyYWdtZW50Lmdsc2wnO1xuaW1wb3J0IGZpbGxFeHRydXNpb25WZXJ0IGZyb20gJy4vZmlsbF9leHRydXNpb24udmVydGV4Lmdsc2wnO1xuaW1wb3J0IGZpbGxFeHRydXNpb25QYXR0ZXJuRnJhZyBmcm9tICcuL2ZpbGxfZXh0cnVzaW9uX3BhdHRlcm4uZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgZmlsbEV4dHJ1c2lvblBhdHRlcm5WZXJ0IGZyb20gJy4vZmlsbF9leHRydXNpb25fcGF0dGVybi52ZXJ0ZXguZ2xzbCc7XG5pbXBvcnQgaGlsbHNoYWRlUHJlcGFyZUZyYWcgZnJvbSAnLi9oaWxsc2hhZGVfcHJlcGFyZS5mcmFnbWVudC5nbHNsJztcbmltcG9ydCBoaWxsc2hhZGVQcmVwYXJlVmVydCBmcm9tICcuL2hpbGxzaGFkZV9wcmVwYXJlLnZlcnRleC5nbHNsJztcbmltcG9ydCBoaWxsc2hhZGVGcmFnIGZyb20gJy4vaGlsbHNoYWRlLmZyYWdtZW50Lmdsc2wnO1xuaW1wb3J0IGhpbGxzaGFkZVZlcnQgZnJvbSAnLi9oaWxsc2hhZGUudmVydGV4Lmdsc2wnO1xuaW1wb3J0IGxpbmVGcmFnIGZyb20gJy4vbGluZS5mcmFnbWVudC5nbHNsJztcbmltcG9ydCBsaW5lVmVydCBmcm9tICcuL2xpbmUudmVydGV4Lmdsc2wnO1xuaW1wb3J0IGxpbmVHcmFkaWVudEZyYWcgZnJvbSAnLi9saW5lX2dyYWRpZW50LmZyYWdtZW50Lmdsc2wnO1xuaW1wb3J0IGxpbmVHcmFkaWVudFZlcnQgZnJvbSAnLi9saW5lX2dyYWRpZW50LnZlcnRleC5nbHNsJztcbmltcG9ydCBsaW5lUGF0dGVybkZyYWcgZnJvbSAnLi9saW5lX3BhdHRlcm4uZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgbGluZVBhdHRlcm5WZXJ0IGZyb20gJy4vbGluZV9wYXR0ZXJuLnZlcnRleC5nbHNsJztcbmltcG9ydCBsaW5lU0RGRnJhZyBmcm9tICcuL2xpbmVfc2RmLmZyYWdtZW50Lmdsc2wnO1xuaW1wb3J0IGxpbmVTREZWZXJ0IGZyb20gJy4vbGluZV9zZGYudmVydGV4Lmdsc2wnO1xuaW1wb3J0IHJhc3RlckZyYWcgZnJvbSAnLi9yYXN0ZXIuZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgcmFzdGVyVmVydCBmcm9tICcuL3Jhc3Rlci52ZXJ0ZXguZ2xzbCc7XG5pbXBvcnQgc3ltYm9sSWNvbkZyYWcgZnJvbSAnLi9zeW1ib2xfaWNvbi5mcmFnbWVudC5nbHNsJztcbmltcG9ydCBzeW1ib2xJY29uVmVydCBmcm9tICcuL3N5bWJvbF9pY29uLnZlcnRleC5nbHNsJztcbmltcG9ydCBzeW1ib2xTREZGcmFnIGZyb20gJy4vc3ltYm9sX3NkZi5mcmFnbWVudC5nbHNsJztcbmltcG9ydCBzeW1ib2xTREZWZXJ0IGZyb20gJy4vc3ltYm9sX3NkZi52ZXJ0ZXguZ2xzbCc7XG5pbXBvcnQgc3ltYm9sVGV4dEFuZEljb25GcmFnIGZyb20gJy4vc3ltYm9sX3RleHRfYW5kX2ljb24uZnJhZ21lbnQuZ2xzbCc7XG5pbXBvcnQgc3ltYm9sVGV4dEFuZEljb25WZXJ0IGZyb20gJy4vc3ltYm9sX3RleHRfYW5kX2ljb24udmVydGV4Lmdsc2wnO1xuXG5leHBvcnQgY29uc3QgcHJlbHVkZSA9IGNvbXBpbGUocHJlbHVkZUZyYWcsIHByZWx1ZGVWZXJ0KTtcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kID0gY29tcGlsZShiYWNrZ3JvdW5kRnJhZywgYmFja2dyb3VuZFZlcnQpO1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRQYXR0ZXJuID0gY29tcGlsZShiYWNrZ3JvdW5kUGF0dGVybkZyYWcsIGJhY2tncm91bmRQYXR0ZXJuVmVydCk7XG5leHBvcnQgY29uc3QgY2lyY2xlID0gY29tcGlsZShjaXJjbGVGcmFnLCBjaXJjbGVWZXJ0KTtcbmV4cG9ydCBjb25zdCBjbGlwcGluZ01hc2sgPSBjb21waWxlKGNsaXBwaW5nTWFza0ZyYWcsIGNsaXBwaW5nTWFza1ZlcnQpO1xuZXhwb3J0IGNvbnN0IGhlYXRtYXAgPSBjb21waWxlKGhlYXRtYXBGcmFnLCBoZWF0bWFwVmVydCk7XG5leHBvcnQgY29uc3QgaGVhdG1hcFRleHR1cmUgPSBjb21waWxlKGhlYXRtYXBUZXh0dXJlRnJhZywgaGVhdG1hcFRleHR1cmVWZXJ0KTtcbmV4cG9ydCBjb25zdCBjb2xsaXNpb25Cb3ggPSBjb21waWxlKGNvbGxpc2lvbkJveEZyYWcsIGNvbGxpc2lvbkJveFZlcnQpO1xuZXhwb3J0IGNvbnN0IGNvbGxpc2lvbkNpcmNsZSA9IGNvbXBpbGUoY29sbGlzaW9uQ2lyY2xlRnJhZywgY29sbGlzaW9uQ2lyY2xlVmVydCk7XG5leHBvcnQgY29uc3QgZGVidWcgPSBjb21waWxlKGRlYnVnRnJhZywgZGVidWdWZXJ0KTtcbmV4cG9ydCBjb25zdCBmaWxsID0gY29tcGlsZShmaWxsRnJhZywgZmlsbFZlcnQpO1xuZXhwb3J0IGNvbnN0IGZpbGxPdXRsaW5lID0gY29tcGlsZShmaWxsT3V0bGluZUZyYWcsIGZpbGxPdXRsaW5lVmVydCk7XG5leHBvcnQgY29uc3QgZmlsbE91dGxpbmVQYXR0ZXJuID0gY29tcGlsZShmaWxsT3V0bGluZVBhdHRlcm5GcmFnLCBmaWxsT3V0bGluZVBhdHRlcm5WZXJ0KTtcbmV4cG9ydCBjb25zdCBmaWxsUGF0dGVybiA9IGNvbXBpbGUoZmlsbFBhdHRlcm5GcmFnLCBmaWxsUGF0dGVyblZlcnQpO1xuZXhwb3J0IGNvbnN0IGZpbGxFeHRydXNpb24gPSBjb21waWxlKGZpbGxFeHRydXNpb25GcmFnLCBmaWxsRXh0cnVzaW9uVmVydCk7XG5leHBvcnQgY29uc3QgZmlsbEV4dHJ1c2lvblBhdHRlcm4gPSBjb21waWxlKGZpbGxFeHRydXNpb25QYXR0ZXJuRnJhZywgZmlsbEV4dHJ1c2lvblBhdHRlcm5WZXJ0KTtcbmV4cG9ydCBjb25zdCBoaWxsc2hhZGVQcmVwYXJlID0gY29tcGlsZShoaWxsc2hhZGVQcmVwYXJlRnJhZywgaGlsbHNoYWRlUHJlcGFyZVZlcnQpO1xuZXhwb3J0IGNvbnN0IGhpbGxzaGFkZSA9IGNvbXBpbGUoaGlsbHNoYWRlRnJhZywgaGlsbHNoYWRlVmVydCk7XG5leHBvcnQgY29uc3QgbGluZSA9IGNvbXBpbGUobGluZUZyYWcsIGxpbmVWZXJ0KTtcbmV4cG9ydCBjb25zdCBsaW5lR3JhZGllbnQgPSBjb21waWxlKGxpbmVHcmFkaWVudEZyYWcsIGxpbmVHcmFkaWVudFZlcnQpO1xuZXhwb3J0IGNvbnN0IGxpbmVQYXR0ZXJuID0gY29tcGlsZShsaW5lUGF0dGVybkZyYWcsIGxpbmVQYXR0ZXJuVmVydCk7XG5leHBvcnQgY29uc3QgbGluZVNERiA9IGNvbXBpbGUobGluZVNERkZyYWcsIGxpbmVTREZWZXJ0KTtcbmV4cG9ydCBjb25zdCByYXN0ZXIgPSBjb21waWxlKHJhc3RlckZyYWcsIHJhc3RlclZlcnQpO1xuZXhwb3J0IGNvbnN0IHN5bWJvbEljb24gPSBjb21waWxlKHN5bWJvbEljb25GcmFnLCBzeW1ib2xJY29uVmVydCk7XG5leHBvcnQgY29uc3Qgc3ltYm9sU0RGID0gY29tcGlsZShzeW1ib2xTREZGcmFnLCBzeW1ib2xTREZWZXJ0KTtcbmV4cG9ydCBjb25zdCBzeW1ib2xUZXh0QW5kSWNvbiA9IGNvbXBpbGUoc3ltYm9sVGV4dEFuZEljb25GcmFnLCBzeW1ib2xUZXh0QW5kSWNvblZlcnQpO1xuXG4vLyBFeHBhbmQgI3ByYWdtYXMgdG8gI2lmZGVmcy5cblxuZnVuY3Rpb24gY29tcGlsZShmcmFnbWVudFNvdXJjZSwgdmVydGV4U291cmNlKSB7XG4gICAgY29uc3QgcmUgPSAvI3ByYWdtYSBtYXBib3g6IChbXFx3XSspIChbXFx3XSspIChbXFx3XSspIChbXFx3XSspL2c7XG5cbiAgICBjb25zdCBzdGF0aWNBdHRyaWJ1dGVzID0gdmVydGV4U291cmNlLm1hdGNoKC9hdHRyaWJ1dGUgKFtcXHddKykgKFtcXHddKykvZyk7XG4gICAgY29uc3QgZnJhZ21lbnRVbmlmb3JtcyA9IGZyYWdtZW50U291cmNlLm1hdGNoKC91bmlmb3JtIChbXFx3XSspIChbXFx3XSspKFtcXHNdKikoW1xcd10qKS9nKTtcbiAgICBjb25zdCB2ZXJ0ZXhVbmlmb3JtcyA9IHZlcnRleFNvdXJjZS5tYXRjaCgvdW5pZm9ybSAoW1xcd10rKSAoW1xcd10rKShbXFxzXSopKFtcXHddKikvZyk7XG4gICAgY29uc3Qgc3RhdGljVW5pZm9ybXMgPSB2ZXJ0ZXhVbmlmb3JtcyA/IHZlcnRleFVuaWZvcm1zLmNvbmNhdChmcmFnbWVudFVuaWZvcm1zKSA6IGZyYWdtZW50VW5pZm9ybXM7XG5cbiAgICBjb25zdCBmcmFnbWVudFByYWdtYXMgPSB7fTtcblxuICAgIGZyYWdtZW50U291cmNlID0gZnJhZ21lbnRTb3VyY2UucmVwbGFjZShyZSwgKG1hdGNoLCBvcGVyYXRpb24sIHByZWNpc2lvbiwgdHlwZSwgbmFtZSkgPT4ge1xuICAgICAgICBmcmFnbWVudFByYWdtYXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICBpZiAob3BlcmF0aW9uID09PSAnZGVmaW5lJykge1xuICAgICAgICAgICAgcmV0dXJuIGBcbiNpZm5kZWYgSEFTX1VOSUZPUk1fdV8ke25hbWV9XG52YXJ5aW5nICR7cHJlY2lzaW9ufSAke3R5cGV9ICR7bmFtZX07XG4jZWxzZVxudW5pZm9ybSAke3ByZWNpc2lvbn0gJHt0eXBlfSB1XyR7bmFtZX07XG4jZW5kaWZcbmA7XG4gICAgICAgIH0gZWxzZSAvKiBpZiAob3BlcmF0aW9uID09PSAnaW5pdGlhbGl6ZScpICovIHtcbiAgICAgICAgICAgIHJldHVybiBgXG4jaWZkZWYgSEFTX1VOSUZPUk1fdV8ke25hbWV9XG4gICAgJHtwcmVjaXNpb259ICR7dHlwZX0gJHtuYW1lfSA9IHVfJHtuYW1lfTtcbiNlbmRpZlxuYDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmVydGV4U291cmNlID0gdmVydGV4U291cmNlLnJlcGxhY2UocmUsIChtYXRjaCwgb3BlcmF0aW9uLCBwcmVjaXNpb24sIHR5cGUsIG5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgYXR0clR5cGUgPSB0eXBlID09PSAnZmxvYXQnID8gJ3ZlYzInIDogJ3ZlYzQnO1xuICAgICAgICBjb25zdCB1bnBhY2tUeXBlID0gbmFtZS5tYXRjaCgvY29sb3IvKSA/ICdjb2xvcicgOiBhdHRyVHlwZTtcblxuICAgICAgICBpZiAoZnJhZ21lbnRQcmFnbWFzW25hbWVdKSB7XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uID09PSAnZGVmaW5lJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgXG4jaWZuZGVmIEhBU19VTklGT1JNX3VfJHtuYW1lfVxudW5pZm9ybSBsb3dwIGZsb2F0IHVfJHtuYW1lfV90O1xuYXR0cmlidXRlICR7cHJlY2lzaW9ufSAke2F0dHJUeXBlfSBhXyR7bmFtZX07XG52YXJ5aW5nICR7cHJlY2lzaW9ufSAke3R5cGV9ICR7bmFtZX07XG4jZWxzZVxudW5pZm9ybSAke3ByZWNpc2lvbn0gJHt0eXBlfSB1XyR7bmFtZX07XG4jZW5kaWZcbmA7XG4gICAgICAgICAgICB9IGVsc2UgLyogaWYgKG9wZXJhdGlvbiA9PT0gJ2luaXRpYWxpemUnKSAqLyB7XG4gICAgICAgICAgICAgICAgaWYgKHVucGFja1R5cGUgPT09ICd2ZWM0Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyB2ZWM0IGF0dHJpYnV0ZXMgYXJlIG9ubHkgdXNlZCBmb3IgY3Jvc3MtZmFkZWQgcHJvcGVydGllcywgYW5kIGFyZSBub3QgcGFja2VkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgXG4jaWZuZGVmIEhBU19VTklGT1JNX3VfJHtuYW1lfVxuICAgICR7bmFtZX0gPSBhXyR7bmFtZX07XG4jZWxzZVxuICAgICR7cHJlY2lzaW9ufSAke3R5cGV9ICR7bmFtZX0gPSB1XyR7bmFtZX07XG4jZW5kaWZcbmA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiNpZm5kZWYgSEFTX1VOSUZPUk1fdV8ke25hbWV9XG4gICAgJHtuYW1lfSA9IHVucGFja19taXhfJHt1bnBhY2tUeXBlfShhXyR7bmFtZX0sIHVfJHtuYW1lfV90KTtcbiNlbHNlXG4gICAgJHtwcmVjaXNpb259ICR7dHlwZX0gJHtuYW1lfSA9IHVfJHtuYW1lfTtcbiNlbmRpZlxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uID09PSAnZGVmaW5lJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgXG4jaWZuZGVmIEhBU19VTklGT1JNX3VfJHtuYW1lfVxudW5pZm9ybSBsb3dwIGZsb2F0IHVfJHtuYW1lfV90O1xuYXR0cmlidXRlICR7cHJlY2lzaW9ufSAke2F0dHJUeXBlfSBhXyR7bmFtZX07XG4jZWxzZVxudW5pZm9ybSAke3ByZWNpc2lvbn0gJHt0eXBlfSB1XyR7bmFtZX07XG4jZW5kaWZcbmA7XG4gICAgICAgICAgICB9IGVsc2UgLyogaWYgKG9wZXJhdGlvbiA9PT0gJ2luaXRpYWxpemUnKSAqLyB7XG4gICAgICAgICAgICAgICAgaWYgKHVucGFja1R5cGUgPT09ICd2ZWM0Jykge1xuICAgICAgICAgICAgICAgICAgICAvLyB2ZWM0IGF0dHJpYnV0ZXMgYXJlIG9ubHkgdXNlZCBmb3IgY3Jvc3MtZmFkZWQgcHJvcGVydGllcywgYW5kIGFyZSBub3QgcGFja2VkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgXG4jaWZuZGVmIEhBU19VTklGT1JNX3VfJHtuYW1lfVxuICAgICR7cHJlY2lzaW9ufSAke3R5cGV9ICR7bmFtZX0gPSBhXyR7bmFtZX07XG4jZWxzZVxuICAgICR7cHJlY2lzaW9ufSAke3R5cGV9ICR7bmFtZX0gPSB1XyR7bmFtZX07XG4jZW5kaWZcbmA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIC8qICove1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxuI2lmbmRlZiBIQVNfVU5JRk9STV91XyR7bmFtZX1cbiAgICAke3ByZWNpc2lvbn0gJHt0eXBlfSAke25hbWV9ID0gdW5wYWNrX21peF8ke3VucGFja1R5cGV9KGFfJHtuYW1lfSwgdV8ke25hbWV9X3QpO1xuI2Vsc2VcbiAgICAke3ByZWNpc2lvbn0gJHt0eXBlfSAke25hbWV9ID0gdV8ke25hbWV9O1xuI2VuZGlmXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtmcmFnbWVudFNvdXJjZSwgdmVydGV4U291cmNlLCBzdGF0aWNBdHRyaWJ1dGVzLCBzdGF0aWNVbmlmb3Jtc307XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB0eXBlIFByb2dyYW0gZnJvbSAnLi9wcm9ncmFtJztcbmltcG9ydCB0eXBlIFZlcnRleEJ1ZmZlciBmcm9tICcuLi9nbC92ZXJ0ZXhfYnVmZmVyJztcbmltcG9ydCB0eXBlIEluZGV4QnVmZmVyIGZyb20gJy4uL2dsL2luZGV4X2J1ZmZlcic7XG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uL2dsL2NvbnRleHQnO1xuXG5jbGFzcyBWZXJ0ZXhBcnJheU9iamVjdCB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBib3VuZFByb2dyYW06ID9Qcm9ncmFtPCo+O1xuICAgIGJvdW5kTGF5b3V0VmVydGV4QnVmZmVyOiA/VmVydGV4QnVmZmVyO1xuICAgIGJvdW5kUGFpbnRWZXJ0ZXhCdWZmZXJzOiBBcnJheTxWZXJ0ZXhCdWZmZXI+O1xuICAgIGJvdW5kSW5kZXhCdWZmZXI6ID9JbmRleEJ1ZmZlcjtcbiAgICBib3VuZFZlcnRleE9mZnNldDogP251bWJlcjtcbiAgICBib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXI6ID9WZXJ0ZXhCdWZmZXI7XG4gICAgYm91bmREeW5hbWljVmVydGV4QnVmZmVyMjogP1ZlcnRleEJ1ZmZlcjtcbiAgICB2YW86IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJvdW5kUHJvZ3JhbSA9IG51bGw7XG4gICAgICAgIHRoaXMuYm91bmRMYXlvdXRWZXJ0ZXhCdWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmJvdW5kUGFpbnRWZXJ0ZXhCdWZmZXJzID0gW107XG4gICAgICAgIHRoaXMuYm91bmRJbmRleEJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMuYm91bmRWZXJ0ZXhPZmZzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLmJvdW5kRHluYW1pY1ZlcnRleEJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMudmFvID0gbnVsbDtcbiAgICB9XG5cbiAgICBiaW5kKGNvbnRleHQ6IENvbnRleHQsXG4gICAgICAgICBwcm9ncmFtOiBQcm9ncmFtPCo+LFxuICAgICAgICAgbGF5b3V0VmVydGV4QnVmZmVyOiBWZXJ0ZXhCdWZmZXIsXG4gICAgICAgICBwYWludFZlcnRleEJ1ZmZlcnM6IEFycmF5PFZlcnRleEJ1ZmZlcj4sXG4gICAgICAgICBpbmRleEJ1ZmZlcjogP0luZGV4QnVmZmVyLFxuICAgICAgICAgdmVydGV4T2Zmc2V0OiA/bnVtYmVyLFxuICAgICAgICAgZHluYW1pY1ZlcnRleEJ1ZmZlcjogP1ZlcnRleEJ1ZmZlcixcbiAgICAgICAgIGR5bmFtaWNWZXJ0ZXhCdWZmZXIyOiA/VmVydGV4QnVmZmVyKSB7XG5cbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuICAgICAgICBsZXQgcGFpbnRCdWZmZXJzRGlmZmVyID0gdGhpcy5ib3VuZFBhaW50VmVydGV4QnVmZmVycy5sZW5ndGggIT09IHBhaW50VmVydGV4QnVmZmVycy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyAhcGFpbnRCdWZmZXJzRGlmZmVyICYmIGkgPCBwYWludFZlcnRleEJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJvdW5kUGFpbnRWZXJ0ZXhCdWZmZXJzW2ldICE9PSBwYWludFZlcnRleEJ1ZmZlcnNbaV0pIHtcbiAgICAgICAgICAgICAgICBwYWludEJ1ZmZlcnNEaWZmZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNGcmVzaEJpbmRSZXF1aXJlZCA9IChcbiAgICAgICAgICAgICF0aGlzLnZhbyB8fFxuICAgICAgICAgICAgdGhpcy5ib3VuZFByb2dyYW0gIT09IHByb2dyYW0gfHxcbiAgICAgICAgICAgIHRoaXMuYm91bmRMYXlvdXRWZXJ0ZXhCdWZmZXIgIT09IGxheW91dFZlcnRleEJ1ZmZlciB8fFxuICAgICAgICAgICAgcGFpbnRCdWZmZXJzRGlmZmVyIHx8XG4gICAgICAgICAgICB0aGlzLmJvdW5kSW5kZXhCdWZmZXIgIT09IGluZGV4QnVmZmVyIHx8XG4gICAgICAgICAgICB0aGlzLmJvdW5kVmVydGV4T2Zmc2V0ICE9PSB2ZXJ0ZXhPZmZzZXQgfHxcbiAgICAgICAgICAgIHRoaXMuYm91bmREeW5hbWljVmVydGV4QnVmZmVyICE9PSBkeW5hbWljVmVydGV4QnVmZmVyIHx8XG4gICAgICAgICAgICB0aGlzLmJvdW5kRHluYW1pY1ZlcnRleEJ1ZmZlcjIgIT09IGR5bmFtaWNWZXJ0ZXhCdWZmZXIyXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCFjb250ZXh0LmV4dFZlcnRleEFycmF5T2JqZWN0IHx8IGlzRnJlc2hCaW5kUmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZnJlc2hCaW5kKHByb2dyYW0sIGxheW91dFZlcnRleEJ1ZmZlciwgcGFpbnRWZXJ0ZXhCdWZmZXJzLCBpbmRleEJ1ZmZlciwgdmVydGV4T2Zmc2V0LCBkeW5hbWljVmVydGV4QnVmZmVyLCBkeW5hbWljVmVydGV4QnVmZmVyMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0LmJpbmRWZXJ0ZXhBcnJheU9FUy5zZXQodGhpcy52YW8pO1xuXG4gICAgICAgICAgICBpZiAoZHluYW1pY1ZlcnRleEJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBidWZmZXIgbWF5IGhhdmUgYmVlbiB1cGRhdGVkLiBSZWJpbmQgdG8gdXBsb2FkIGRhdGEuXG4gICAgICAgICAgICAgICAgZHluYW1pY1ZlcnRleEJ1ZmZlci5iaW5kKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmRleEJ1ZmZlciAmJiBpbmRleEJ1ZmZlci5keW5hbWljRHJhdykge1xuICAgICAgICAgICAgICAgIGluZGV4QnVmZmVyLmJpbmQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGR5bmFtaWNWZXJ0ZXhCdWZmZXIyKSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1ZlcnRleEJ1ZmZlcjIuYmluZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnJlc2hCaW5kKHByb2dyYW06IFByb2dyYW08Kj4sXG4gICAgICAgICAgICAgIGxheW91dFZlcnRleEJ1ZmZlcjogVmVydGV4QnVmZmVyLFxuICAgICAgICAgICAgICBwYWludFZlcnRleEJ1ZmZlcnM6IEFycmF5PFZlcnRleEJ1ZmZlcj4sXG4gICAgICAgICAgICAgIGluZGV4QnVmZmVyOiA/SW5kZXhCdWZmZXIsXG4gICAgICAgICAgICAgIHZlcnRleE9mZnNldDogP251bWJlcixcbiAgICAgICAgICAgICAgZHluYW1pY1ZlcnRleEJ1ZmZlcjogP1ZlcnRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgZHluYW1pY1ZlcnRleEJ1ZmZlcjI6ID9WZXJ0ZXhCdWZmZXIpIHtcbiAgICAgICAgbGV0IG51bVByZXZBdHRyaWJ1dGVzO1xuICAgICAgICBjb25zdCBudW1OZXh0QXR0cmlidXRlcyA9IHByb2dyYW0ubnVtQXR0cmlidXRlcztcblxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG5cbiAgICAgICAgaWYgKGNvbnRleHQuZXh0VmVydGV4QXJyYXlPYmplY3QpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbykgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnZhbyA9IGNvbnRleHQuZXh0VmVydGV4QXJyYXlPYmplY3QuY3JlYXRlVmVydGV4QXJyYXlPRVMoKTtcbiAgICAgICAgICAgIGNvbnRleHQuYmluZFZlcnRleEFycmF5T0VTLnNldCh0aGlzLnZhbyk7XG4gICAgICAgICAgICBudW1QcmV2QXR0cmlidXRlcyA9IDA7XG5cbiAgICAgICAgICAgIC8vIHN0b3JlIHRoZSBhcmd1bWVudHMgc28gdGhhdCB3ZSBjYW4gdmVyaWZ5IHRoZW0gd2hlbiB0aGUgdmFvIGlzIGJvdW5kIGFnYWluXG4gICAgICAgICAgICB0aGlzLmJvdW5kUHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgICAgICB0aGlzLmJvdW5kTGF5b3V0VmVydGV4QnVmZmVyID0gbGF5b3V0VmVydGV4QnVmZmVyO1xuICAgICAgICAgICAgdGhpcy5ib3VuZFBhaW50VmVydGV4QnVmZmVycyA9IHBhaW50VmVydGV4QnVmZmVycztcbiAgICAgICAgICAgIHRoaXMuYm91bmRJbmRleEJ1ZmZlciA9IGluZGV4QnVmZmVyO1xuICAgICAgICAgICAgdGhpcy5ib3VuZFZlcnRleE9mZnNldCA9IHZlcnRleE9mZnNldDtcbiAgICAgICAgICAgIHRoaXMuYm91bmREeW5hbWljVmVydGV4QnVmZmVyID0gZHluYW1pY1ZlcnRleEJ1ZmZlcjtcbiAgICAgICAgICAgIHRoaXMuYm91bmREeW5hbWljVmVydGV4QnVmZmVyMiA9IGR5bmFtaWNWZXJ0ZXhCdWZmZXIyO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBudW1QcmV2QXR0cmlidXRlcyA9IGNvbnRleHQuY3VycmVudE51bUF0dHJpYnV0ZXMgfHwgMDtcblxuICAgICAgICAgICAgLy8gRGlzYWJsZSBhbGwgYXR0cmlidXRlcyBmcm9tIHRoZSBwcmV2aW91cyBwcm9ncmFtIHRoYXQgYXJlbid0IHVzZWQgaW5cbiAgICAgICAgICAgIC8vIHRoZSBuZXcgcHJvZ3JhbS4gTm90ZTogYXR0cmlidXRlIGluZGljZXMgYXJlICpub3QqIHByb2dyYW0gc3BlY2lmaWMhXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gbnVtTmV4dEF0dHJpYnV0ZXM7IGkgPCBudW1QcmV2QXR0cmlidXRlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gV2ViR0wgYnJlYWtzIGlmIHlvdSBkaXNhYmxlIGF0dHJpYnV0ZSAwLlxuICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjAzMDUyMzFcbiAgICAgICAgICAgICAgICBhc3NlcnQoaSAhPT0gMCk7XG4gICAgICAgICAgICAgICAgZ2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGF5b3V0VmVydGV4QnVmZmVyLmVuYWJsZUF0dHJpYnV0ZXMoZ2wsIHByb2dyYW0pO1xuICAgICAgICBmb3IgKGNvbnN0IHZlcnRleEJ1ZmZlciBvZiBwYWludFZlcnRleEJ1ZmZlcnMpIHtcbiAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5lbmFibGVBdHRyaWJ1dGVzKGdsLCBwcm9ncmFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkeW5hbWljVmVydGV4QnVmZmVyKSB7XG4gICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyLmVuYWJsZUF0dHJpYnV0ZXMoZ2wsIHByb2dyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkeW5hbWljVmVydGV4QnVmZmVyMikge1xuICAgICAgICAgICAgZHluYW1pY1ZlcnRleEJ1ZmZlcjIuZW5hYmxlQXR0cmlidXRlcyhnbCwgcHJvZ3JhbSk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXlvdXRWZXJ0ZXhCdWZmZXIuYmluZCgpO1xuICAgICAgICBsYXlvdXRWZXJ0ZXhCdWZmZXIuc2V0VmVydGV4QXR0cmliUG9pbnRlcnMoZ2wsIHByb2dyYW0sIHZlcnRleE9mZnNldCk7XG4gICAgICAgIGZvciAoY29uc3QgdmVydGV4QnVmZmVyIG9mIHBhaW50VmVydGV4QnVmZmVycykge1xuICAgICAgICAgICAgdmVydGV4QnVmZmVyLmJpbmQoKTtcbiAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5zZXRWZXJ0ZXhBdHRyaWJQb2ludGVycyhnbCwgcHJvZ3JhbSwgdmVydGV4T2Zmc2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkeW5hbWljVmVydGV4QnVmZmVyKSB7XG4gICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyLmJpbmQoKTtcbiAgICAgICAgICAgIGR5bmFtaWNWZXJ0ZXhCdWZmZXIuc2V0VmVydGV4QXR0cmliUG9pbnRlcnMoZ2wsIHByb2dyYW0sIHZlcnRleE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4QnVmZmVyKSB7XG4gICAgICAgICAgICBpbmRleEJ1ZmZlci5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR5bmFtaWNWZXJ0ZXhCdWZmZXIyKSB7XG4gICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyMi5iaW5kKCk7XG4gICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyMi5zZXRWZXJ0ZXhBdHRyaWJQb2ludGVycyhnbCwgcHJvZ3JhbSwgdmVydGV4T2Zmc2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuY3VycmVudE51bUF0dHJpYnV0ZXMgPSBudW1OZXh0QXR0cmlidXRlcztcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy52YW8pIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5leHRWZXJ0ZXhBcnJheU9iamVjdC5kZWxldGVWZXJ0ZXhBcnJheU9FUyh0aGlzLnZhbyk7XG4gICAgICAgICAgICB0aGlzLnZhbyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZlcnRleEFycmF5T2JqZWN0O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtwcmVsdWRlfSBmcm9tICcuLi9zaGFkZXJzJztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBQcm9ncmFtQ29uZmlndXJhdGlvbiBmcm9tICcuLi9kYXRhL3Byb2dyYW1fY29uZmlndXJhdGlvbic7XG5pbXBvcnQgVmVydGV4QXJyYXlPYmplY3QgZnJvbSAnLi92ZXJ0ZXhfYXJyYXlfb2JqZWN0JztcbmltcG9ydCBDb250ZXh0IGZyb20gJy4uL2dsL2NvbnRleHQnO1xuXG5pbXBvcnQgdHlwZSBTZWdtZW50VmVjdG9yIGZyb20gJy4uL2RhdGEvc2VnbWVudCc7XG5pbXBvcnQgdHlwZSBWZXJ0ZXhCdWZmZXIgZnJvbSAnLi4vZ2wvdmVydGV4X2J1ZmZlcic7XG5pbXBvcnQgdHlwZSBJbmRleEJ1ZmZlciBmcm9tICcuLi9nbC9pbmRleF9idWZmZXInO1xuaW1wb3J0IHR5cGUgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IHR5cGUgU3RlbmNpbE1vZGUgZnJvbSAnLi4vZ2wvc3RlbmNpbF9tb2RlJztcbmltcG9ydCB0eXBlIENvbG9yTW9kZSBmcm9tICcuLi9nbC9jb2xvcl9tb2RlJztcbmltcG9ydCB0eXBlIEN1bGxGYWNlTW9kZSBmcm9tICcuLi9nbC9jdWxsX2ZhY2VfbW9kZSc7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybUJpbmRpbmdzLCBVbmlmb3JtVmFsdWVzLCBVbmlmb3JtTG9jYXRpb25zfSBmcm9tICcuL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgdHlwZSB7QmluZGVyVW5pZm9ybX0gZnJvbSAnLi4vZGF0YS9wcm9ncmFtX2NvbmZpZ3VyYXRpb24nO1xuXG5leHBvcnQgdHlwZSBEcmF3TW9kZSA9XG4gICAgfCAkUHJvcGVydHlUeXBlPFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgJ0xJTkVTJz5cbiAgICB8ICRQcm9wZXJ0eVR5cGU8V2ViR0xSZW5kZXJpbmdDb250ZXh0LCAnVFJJQU5HTEVTJz5cbiAgICB8ICRQcm9wZXJ0eVR5cGU8V2ViR0xSZW5kZXJpbmdDb250ZXh0LCAnTElORV9TVFJJUCc+O1xuXG5mdW5jdGlvbiBnZXRUb2tlbml6ZWRBdHRyaWJ1dGVzQW5kVW5pZm9ybXMgKGFycmF5OiBBcnJheTxzdHJpbmc+KTogQXJyYXk8c3RyaW5nPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gbnVsbCkgY29udGludWU7XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXJyYXlbaV0uc3BsaXQoJyAnKTtcbiAgICAgICAgcmVzdWx0LnB1c2godG9rZW4ucG9wKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY2xhc3MgUHJvZ3JhbTxVczogVW5pZm9ybUJpbmRpbmdzPiB7XG4gICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtO1xuICAgIGF0dHJpYnV0ZXM6IHtbXzogc3RyaW5nXTogbnVtYmVyfTtcbiAgICBudW1BdHRyaWJ1dGVzOiBudW1iZXI7XG4gICAgZml4ZWRVbmlmb3JtczogVXM7XG4gICAgYmluZGVyVW5pZm9ybXM6IEFycmF5PEJpbmRlclVuaWZvcm0+O1xuICAgIGZhaWxlZFRvQ3JlYXRlOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgICAgICAgIHNvdXJjZToge2ZyYWdtZW50U291cmNlOiBzdHJpbmcsIHZlcnRleFNvdXJjZTogc3RyaW5nLCBzdGF0aWNBdHRyaWJ1dGVzOiBBcnJheTxzdHJpbmc+LCBzdGF0aWNVbmlmb3JtczogQXJyYXk8c3RyaW5nPn0sXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uOiA/UHJvZ3JhbUNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICBmaXhlZFVuaWZvcm1zOiAoQ29udGV4dCwgVW5pZm9ybUxvY2F0aW9ucykgPT4gVXMsXG4gICAgICAgICAgICBzaG93T3ZlcmRyYXdJbnNwZWN0b3I6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGljQXR0ckluZm8gPSBnZXRUb2tlbml6ZWRBdHRyaWJ1dGVzQW5kVW5pZm9ybXMoc291cmNlLnN0YXRpY0F0dHJpYnV0ZXMpO1xuICAgICAgICBjb25zdCBkeW5hbWljQXR0ckluZm8gPSBjb25maWd1cmF0aW9uID8gY29uZmlndXJhdGlvbi5nZXRCaW5kZXJBdHRyaWJ1dGVzKCkgOiBbXTtcbiAgICAgICAgY29uc3QgYWxsQXR0ckluZm8gPSBzdGF0aWNBdHRySW5mby5jb25jYXQoZHluYW1pY0F0dHJJbmZvKTtcblxuICAgICAgICBjb25zdCBzdGF0aWNVbmlmb3Jtc0luZm8gPSBzb3VyY2Uuc3RhdGljVW5pZm9ybXMgPyBnZXRUb2tlbml6ZWRBdHRyaWJ1dGVzQW5kVW5pZm9ybXMoc291cmNlLnN0YXRpY1VuaWZvcm1zKSA6IFtdO1xuICAgICAgICBjb25zdCBkeW5hbWljVW5pZm9ybXNJbmZvID0gY29uZmlndXJhdGlvbiA/IGNvbmZpZ3VyYXRpb24uZ2V0QmluZGVyVW5pZm9ybXMoKSA6IFtdO1xuICAgICAgICAvLyByZW1vdmUgZHVwbGljYXRlIHVuaWZvcm1zXG4gICAgICAgIGNvbnN0IHVuaWZvcm1MaXN0ID0gc3RhdGljVW5pZm9ybXNJbmZvLmNvbmNhdChkeW5hbWljVW5pZm9ybXNJbmZvKTtcbiAgICAgICAgY29uc3QgYWxsVW5pZm9ybXNJbmZvID0gW107XG4gICAgICAgIGZvciAoY29uc3QgdW5pZm9ybSBvZiB1bmlmb3JtTGlzdCkge1xuICAgICAgICAgICAgaWYgKGFsbFVuaWZvcm1zSW5mby5pbmRleE9mKHVuaWZvcm0pIDwgMCkgYWxsVW5pZm9ybXNJbmZvLnB1c2godW5pZm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWZpbmVzID0gY29uZmlndXJhdGlvbiA/IGNvbmZpZ3VyYXRpb24uZGVmaW5lcygpIDogW107XG4gICAgICAgIGlmIChzaG93T3ZlcmRyYXdJbnNwZWN0b3IpIHtcbiAgICAgICAgICAgIGRlZmluZXMucHVzaCgnI2RlZmluZSBPVkVSRFJBV19JTlNQRUNUT1I7Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcmFnbWVudFNvdXJjZSA9IGRlZmluZXMuY29uY2F0KHByZWx1ZGUuZnJhZ21lbnRTb3VyY2UsIHNvdXJjZS5mcmFnbWVudFNvdXJjZSkuam9pbignXFxuJyk7XG4gICAgICAgIGNvbnN0IHZlcnRleFNvdXJjZSA9IGRlZmluZXMuY29uY2F0KHByZWx1ZGUudmVydGV4U291cmNlLCBzb3VyY2UudmVydGV4U291cmNlKS5qb2luKCdcXG4nKTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICAgICAgaWYgKGdsLmlzQ29udGV4dExvc3QoKSkge1xuICAgICAgICAgICAgdGhpcy5mYWlsZWRUb0NyZWF0ZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudFNvdXJjZSk7XG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICBhc3NlcnQoZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKGZyYWdtZW50U2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUyksIChnbC5nZXRTaGFkZXJJbmZvTG9nKGZyYWdtZW50U2hhZGVyKTogYW55KSk7XG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcblxuICAgICAgICBjb25zdCB2ZXJ0ZXhTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XG4gICAgICAgIGlmIChnbC5pc0NvbnRleHRMb3N0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbGVkVG9DcmVhdGUgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIHZlcnRleFNvdXJjZSk7XG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVyKTtcbiAgICAgICAgYXNzZXJ0KGdsLmdldFNoYWRlclBhcmFtZXRlcih2ZXJ0ZXhTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSwgKGdsLmdldFNoYWRlckluZm9Mb2codmVydGV4U2hhZGVyKTogYW55KSk7XG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sIHZlcnRleFNoYWRlcik7XG5cbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbnMgPSB7fTtcblxuICAgICAgICB0aGlzLm51bUF0dHJpYnV0ZXMgPSBhbGxBdHRySW5mby5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bUF0dHJpYnV0ZXM7IGkrKykge1xuICAgICAgICAgICAgaWYgKGFsbEF0dHJJbmZvW2ldKSB7XG4gICAgICAgICAgICAgICAgZ2wuYmluZEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgaSwgYWxsQXR0ckluZm9baV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc1thbGxBdHRySW5mb1tpXV0gPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2wubGlua1Byb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICAgICAgYXNzZXJ0KGdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyksIChnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnByb2dyYW0pOiBhbnkpKTtcblxuICAgICAgICBnbC5kZWxldGVTaGFkZXIodmVydGV4U2hhZGVyKTtcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcblxuICAgICAgICBmb3IgKGxldCBpdCA9IDA7IGl0IDwgYWxsVW5pZm9ybXNJbmZvLmxlbmd0aDsgaXQrKykge1xuICAgICAgICAgICAgY29uc3QgdW5pZm9ybSA9IGFsbFVuaWZvcm1zSW5mb1tpdF07XG4gICAgICAgICAgICBpZiAodW5pZm9ybSAmJiAhdW5pZm9ybUxvY2F0aW9uc1t1bmlmb3JtXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIHVuaWZvcm0pO1xuICAgICAgICAgICAgICAgIGlmICh1bmlmb3JtTG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybUxvY2F0aW9uc1t1bmlmb3JtXSA9IHVuaWZvcm1Mb2NhdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpeGVkVW5pZm9ybXMgPSBmaXhlZFVuaWZvcm1zKGNvbnRleHQsIHVuaWZvcm1Mb2NhdGlvbnMpO1xuICAgICAgICB0aGlzLmJpbmRlclVuaWZvcm1zID0gY29uZmlndXJhdGlvbiA/IGNvbmZpZ3VyYXRpb24uZ2V0VW5pZm9ybXMoY29udGV4dCwgdW5pZm9ybUxvY2F0aW9ucykgOiBbXTtcbiAgICB9XG5cbiAgICBkcmF3KGNvbnRleHQ6IENvbnRleHQsXG4gICAgICAgICBkcmF3TW9kZTogRHJhd01vZGUsXG4gICAgICAgICBkZXB0aE1vZGU6ICRSZWFkT25seTxEZXB0aE1vZGU+LFxuICAgICAgICAgc3RlbmNpbE1vZGU6ICRSZWFkT25seTxTdGVuY2lsTW9kZT4sXG4gICAgICAgICBjb2xvck1vZGU6ICRSZWFkT25seTxDb2xvck1vZGU+LFxuICAgICAgICAgY3VsbEZhY2VNb2RlOiAkUmVhZE9ubHk8Q3VsbEZhY2VNb2RlPixcbiAgICAgICAgIHVuaWZvcm1WYWx1ZXM6IFVuaWZvcm1WYWx1ZXM8VXM+LFxuICAgICAgICAgbGF5ZXJJRDogc3RyaW5nLFxuICAgICAgICAgbGF5b3V0VmVydGV4QnVmZmVyOiBWZXJ0ZXhCdWZmZXIsXG4gICAgICAgICBpbmRleEJ1ZmZlcjogSW5kZXhCdWZmZXIsXG4gICAgICAgICBzZWdtZW50czogU2VnbWVudFZlY3RvcixcbiAgICAgICAgIGN1cnJlbnRQcm9wZXJ0aWVzOiBhbnksXG4gICAgICAgICB6b29tOiA/bnVtYmVyLFxuICAgICAgICAgY29uZmlndXJhdGlvbjogP1Byb2dyYW1Db25maWd1cmF0aW9uLFxuICAgICAgICAgZHluYW1pY0xheW91dEJ1ZmZlcjogP1ZlcnRleEJ1ZmZlcixcbiAgICAgICAgIGR5bmFtaWNMYXlvdXRCdWZmZXIyOiA/VmVydGV4QnVmZmVyKSB7XG5cbiAgICAgICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuXG4gICAgICAgIGlmICh0aGlzLmZhaWxlZFRvQ3JlYXRlKSByZXR1cm47XG5cbiAgICAgICAgY29udGV4dC5wcm9ncmFtLnNldCh0aGlzLnByb2dyYW0pO1xuICAgICAgICBjb250ZXh0LnNldERlcHRoTW9kZShkZXB0aE1vZGUpO1xuICAgICAgICBjb250ZXh0LnNldFN0ZW5jaWxNb2RlKHN0ZW5jaWxNb2RlKTtcbiAgICAgICAgY29udGV4dC5zZXRDb2xvck1vZGUoY29sb3JNb2RlKTtcbiAgICAgICAgY29udGV4dC5zZXRDdWxsRmFjZShjdWxsRmFjZU1vZGUpO1xuXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB0aGlzLmZpeGVkVW5pZm9ybXMpIHtcbiAgICAgICAgICAgIHRoaXMuZml4ZWRVbmlmb3Jtc1tuYW1lXS5zZXQodW5pZm9ybVZhbHVlc1tuYW1lXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5zZXRVbmlmb3Jtcyhjb250ZXh0LCB0aGlzLmJpbmRlclVuaWZvcm1zLCBjdXJyZW50UHJvcGVydGllcywge3pvb206ICh6b29tOiBhbnkpfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcmltaXRpdmVTaXplID0ge1xuICAgICAgICAgICAgW2dsLkxJTkVTXTogMixcbiAgICAgICAgICAgIFtnbC5UUklBTkdMRVNdOiAzLFxuICAgICAgICAgICAgW2dsLkxJTkVfU1RSSVBdOiAxXG4gICAgICAgIH1bZHJhd01vZGVdO1xuXG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cy5nZXQoKSkge1xuICAgICAgICAgICAgY29uc3QgdmFvcyA9IHNlZ21lbnQudmFvcyB8fCAoc2VnbWVudC52YW9zID0ge30pO1xuICAgICAgICAgICAgY29uc3QgdmFvOiBWZXJ0ZXhBcnJheU9iamVjdCA9IHZhb3NbbGF5ZXJJRF0gfHwgKHZhb3NbbGF5ZXJJRF0gPSBuZXcgVmVydGV4QXJyYXlPYmplY3QoKSk7XG5cbiAgICAgICAgICAgIHZhby5iaW5kKFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBsYXlvdXRWZXJ0ZXhCdWZmZXIsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA/IGNvbmZpZ3VyYXRpb24uZ2V0UGFpbnRWZXJ0ZXhCdWZmZXJzKCkgOiBbXSxcbiAgICAgICAgICAgICAgICBpbmRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgICBzZWdtZW50LnZlcnRleE9mZnNldCxcbiAgICAgICAgICAgICAgICBkeW5hbWljTGF5b3V0QnVmZmVyLFxuICAgICAgICAgICAgICAgIGR5bmFtaWNMYXlvdXRCdWZmZXIyXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoXG4gICAgICAgICAgICAgICAgZHJhd01vZGUsXG4gICAgICAgICAgICAgICAgc2VnbWVudC5wcmltaXRpdmVMZW5ndGggKiBwcmltaXRpdmVTaXplLFxuICAgICAgICAgICAgICAgIGdsLlVOU0lHTkVEX1NIT1JULFxuICAgICAgICAgICAgICAgIHNlZ21lbnQucHJpbWl0aXZlT2Zmc2V0ICogcHJpbWl0aXZlU2l6ZSAqIDIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9ncmFtO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHtcbiAgICBVbmlmb3JtMWksXG4gICAgVW5pZm9ybTFmLFxuICAgIFVuaWZvcm0yZixcbiAgICBVbmlmb3JtM2Zcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCBwaXhlbHNUb1RpbGVVbml0cyBmcm9tICcuLi8uLi9zb3VyY2UvcGl4ZWxzX3RvX3RpbGVfdW5pdHMnO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4uL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uLy4uL3NvdXJjZS90aWxlX2lkJztcbmltcG9ydCB0eXBlIHtDcm9zc0ZhZGVkfSBmcm9tICcuLi8uLi9zdHlsZS9wcm9wZXJ0aWVzJztcbmltcG9ydCB0eXBlIHtDcm9zc2ZhZGVQYXJhbWV0ZXJzfSBmcm9tICcuLi8uLi9zdHlsZS9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4uLy4uL3NvdXJjZS90aWxlJztcbmltcG9ydCB0eXBlIFJlc29sdmVkSW1hZ2UgZnJvbSAnLi4vLi4vc3R5bGUtc3BlYy9leHByZXNzaW9uL3R5cGVzL3Jlc29sdmVkX2ltYWdlJztcblxudHlwZSBCYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfcGF0dGVybl90bF9hJzogVW5pZm9ybTJmLFxuICAgICd1X3BhdHRlcm5fYnJfYSc6IFVuaWZvcm0yZixcbiAgICAndV9wYXR0ZXJuX3RsX2InOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGF0dGVybl9icl9iJzogVW5pZm9ybTJmLFxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3VfbWl4JzogVW5pZm9ybTFmLFxuICAgICd1X3BhdHRlcm5fc2l6ZV9hJzogVW5pZm9ybTJmLFxuICAgICd1X3BhdHRlcm5fc2l6ZV9iJzogVW5pZm9ybTJmLFxuICAgICd1X3NjYWxlX2EnOiBVbmlmb3JtMWYsXG4gICAgJ3Vfc2NhbGVfYic6IFVuaWZvcm0xZixcbiAgICAndV9waXhlbF9jb29yZF91cHBlcic6IFVuaWZvcm0yZixcbiAgICAndV9waXhlbF9jb29yZF9sb3dlcic6IFVuaWZvcm0yZixcbiAgICAndV90aWxlX3VuaXRzX3RvX3BpeGVscyc6IFVuaWZvcm0xZlxufH07XG5cbmV4cG9ydCB0eXBlIFBhdHRlcm5Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgIC8vIHBhdHRlcm4gdW5pZm9ybXM6XG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfdGV4c2l6ZSc6IFVuaWZvcm0yZixcbiAgICAndV9zY2FsZSc6IFVuaWZvcm0zZixcbiAgICAndV9mYWRlJzogVW5pZm9ybTFmLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogVW5pZm9ybTJmLFxuICAgICd1X3BpeGVsX2Nvb3JkX2xvd2VyJzogVW5pZm9ybTJmXG58fTtcblxuZnVuY3Rpb24gcGF0dGVyblVuaWZvcm1WYWx1ZXMoY3Jvc3NmYWRlOiBDcm9zc2ZhZGVQYXJhbWV0ZXJzLCBwYWludGVyOiBQYWludGVyLFxuICAgICAgICB0aWxlOiBUaWxlXG4pOiBVbmlmb3JtVmFsdWVzPFBhdHRlcm5Vbmlmb3Jtc1R5cGU+IHtcblxuICAgIGNvbnN0IHRpbGVSYXRpbyA9IDEgLyBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCAxLCBwYWludGVyLnRyYW5zZm9ybS50aWxlWm9vbSk7XG5cbiAgICBjb25zdCBudW1UaWxlcyA9IE1hdGgucG93KDIsIHRpbGUudGlsZUlELm92ZXJzY2FsZWRaKTtcbiAgICBjb25zdCB0aWxlU2l6ZUF0TmVhcmVzdFpvb20gPSB0aWxlLnRpbGVTaXplICogTWF0aC5wb3coMiwgcGFpbnRlci50cmFuc2Zvcm0udGlsZVpvb20pIC8gbnVtVGlsZXM7XG5cbiAgICBjb25zdCBwaXhlbFggPSB0aWxlU2l6ZUF0TmVhcmVzdFpvb20gKiAodGlsZS50aWxlSUQuY2Fub25pY2FsLnggKyB0aWxlLnRpbGVJRC53cmFwICogbnVtVGlsZXMpO1xuICAgIGNvbnN0IHBpeGVsWSA9IHRpbGVTaXplQXROZWFyZXN0Wm9vbSAqIHRpbGUudGlsZUlELmNhbm9uaWNhbC55O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAndV90ZXhzaXplJzogdGlsZS5pbWFnZUF0bGFzVGV4dHVyZS5zaXplLFxuICAgICAgICAndV9zY2FsZSc6IFt0aWxlUmF0aW8sIGNyb3NzZmFkZS5mcm9tU2NhbGUsIGNyb3NzZmFkZS50b1NjYWxlXSxcbiAgICAgICAgJ3VfZmFkZSc6IGNyb3NzZmFkZS50LFxuICAgICAgICAvLyBzcGxpdCB0aGUgcGl4ZWwgY29vcmQgaW50byB0d28gcGFpcnMgb2YgMTYgYml0IG51bWJlcnMuIFRoZSBnbHNsIHNwZWMgb25seSBndWFyYW50ZWVzIDE2IGJpdHMgb2YgcHJlY2lzaW9uLlxuICAgICAgICAndV9waXhlbF9jb29yZF91cHBlcic6IFtwaXhlbFggPj4gMTYsIHBpeGVsWSA+PiAxNl0sXG4gICAgICAgICd1X3BpeGVsX2Nvb3JkX2xvd2VyJzogW3BpeGVsWCAmIDB4RkZGRiwgcGl4ZWxZICYgMHhGRkZGXVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGJnUGF0dGVyblVuaWZvcm1WYWx1ZXMoaW1hZ2U6IENyb3NzRmFkZWQ8UmVzb2x2ZWRJbWFnZT4sIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVycywgcGFpbnRlcjogUGFpbnRlcixcbiAgICAgICAgdGlsZToge3RpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgdGlsZVNpemU6IG51bWJlcn1cbik6IFVuaWZvcm1WYWx1ZXM8QmFja2dyb3VuZFBhdHRlcm5Vbmlmb3Jtc1R5cGU+IHtcbiAgICBjb25zdCBpbWFnZVBvc0EgPSBwYWludGVyLmltYWdlTWFuYWdlci5nZXRQYXR0ZXJuKGltYWdlLmZyb20udG9TdHJpbmcoKSk7XG4gICAgY29uc3QgaW1hZ2VQb3NCID0gcGFpbnRlci5pbWFnZU1hbmFnZXIuZ2V0UGF0dGVybihpbWFnZS50by50b1N0cmluZygpKTtcbiAgICBhc3NlcnQoaW1hZ2VQb3NBICYmIGltYWdlUG9zQik7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gcGFpbnRlci5pbWFnZU1hbmFnZXIuZ2V0UGl4ZWxTaXplKCk7XG5cbiAgICBjb25zdCBudW1UaWxlcyA9IE1hdGgucG93KDIsIHRpbGUudGlsZUlELm92ZXJzY2FsZWRaKTtcbiAgICBjb25zdCB0aWxlU2l6ZUF0TmVhcmVzdFpvb20gPSB0aWxlLnRpbGVTaXplICogTWF0aC5wb3coMiwgcGFpbnRlci50cmFuc2Zvcm0udGlsZVpvb20pIC8gbnVtVGlsZXM7XG5cbiAgICBjb25zdCBwaXhlbFggPSB0aWxlU2l6ZUF0TmVhcmVzdFpvb20gKiAodGlsZS50aWxlSUQuY2Fub25pY2FsLnggKyB0aWxlLnRpbGVJRC53cmFwICogbnVtVGlsZXMpO1xuICAgIGNvbnN0IHBpeGVsWSA9IHRpbGVTaXplQXROZWFyZXN0Wm9vbSAqIHRpbGUudGlsZUlELmNhbm9uaWNhbC55O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAndV9wYXR0ZXJuX3RsX2EnOiAoaW1hZ2VQb3NBOiBhbnkpLnRsLFxuICAgICAgICAndV9wYXR0ZXJuX2JyX2EnOiAoaW1hZ2VQb3NBOiBhbnkpLmJyLFxuICAgICAgICAndV9wYXR0ZXJuX3RsX2InOiAoaW1hZ2VQb3NCOiBhbnkpLnRsLFxuICAgICAgICAndV9wYXR0ZXJuX2JyX2InOiAoaW1hZ2VQb3NCOiBhbnkpLmJyLFxuICAgICAgICAndV90ZXhzaXplJzogW3dpZHRoLCBoZWlnaHRdLFxuICAgICAgICAndV9taXgnOiBjcm9zc2ZhZGUudCxcbiAgICAgICAgJ3VfcGF0dGVybl9zaXplX2EnOiAoaW1hZ2VQb3NBOiBhbnkpLmRpc3BsYXlTaXplLFxuICAgICAgICAndV9wYXR0ZXJuX3NpemVfYic6IChpbWFnZVBvc0I6IGFueSkuZGlzcGxheVNpemUsXG4gICAgICAgICd1X3NjYWxlX2EnOiBjcm9zc2ZhZGUuZnJvbVNjYWxlLFxuICAgICAgICAndV9zY2FsZV9iJzogY3Jvc3NmYWRlLnRvU2NhbGUsXG4gICAgICAgICd1X3RpbGVfdW5pdHNfdG9fcGl4ZWxzJzogMSAvIHBpeGVsc1RvVGlsZVVuaXRzKHRpbGUsIDEsIHBhaW50ZXIudHJhbnNmb3JtLnRpbGVab29tKSxcbiAgICAgICAgLy8gc3BsaXQgdGhlIHBpeGVsIGNvb3JkIGludG8gdHdvIHBhaXJzIG9mIDE2IGJpdCBudW1iZXJzLiBUaGUgZ2xzbCBzcGVjIG9ubHkgZ3VhcmFudGVlcyAxNiBiaXRzIG9mIHByZWNpc2lvbi5cbiAgICAgICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBbcGl4ZWxYID4+IDE2LCBwaXhlbFkgPj4gMTZdLFxuICAgICAgICAndV9waXhlbF9jb29yZF9sb3dlcic6IFtwaXhlbFggJiAweEZGRkYsIHBpeGVsWSAmIDB4RkZGRl1cbiAgICB9O1xufVxuZXhwb3J0IHtiZ1BhdHRlcm5Vbmlmb3JtVmFsdWVzLCBwYXR0ZXJuVW5pZm9ybVZhbHVlc307XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge3BhdHRlcm5Vbmlmb3JtVmFsdWVzfSBmcm9tICcuL3BhdHRlcm4nO1xuaW1wb3J0IHtcbiAgICBVbmlmb3JtMWksXG4gICAgVW5pZm9ybTFmLFxuICAgIFVuaWZvcm0yZixcbiAgICBVbmlmb3JtM2YsXG4gICAgVW5pZm9ybU1hdHJpeDRmXG59IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5cbmltcG9ydCB7bWF0MywgdmVjM30gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuXG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uLy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuLi9wYWludGVyJztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi8uLi9zb3VyY2UvdGlsZV9pZCc7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybVZhbHVlcywgVW5pZm9ybUxvY2F0aW9uc30gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIHtDcm9zc2ZhZGVQYXJhbWV0ZXJzfSBmcm9tICcuLi8uLi9zdHlsZS9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLi8uLi9zb3VyY2UvdGlsZSc7XG5cbmV4cG9ydCB0eXBlIEZpbGxFeHRydXNpb25Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9saWdodHBvcyc6IFVuaWZvcm0zZixcbiAgICAndV9saWdodGludGVuc2l0eSc6IFVuaWZvcm0xZixcbiAgICAndV9saWdodGNvbG9yJzogVW5pZm9ybTNmLFxuICAgICd1X3ZlcnRpY2FsX2dyYWRpZW50JzogVW5pZm9ybTFmLFxuICAgICd1X29wYWNpdHknOiBVbmlmb3JtMWZcbnx9O1xuXG5leHBvcnQgdHlwZSBGaWxsRXh0cnVzaW9uUGF0dGVyblVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X2xpZ2h0cG9zJzogVW5pZm9ybTNmLFxuICAgICd1X2xpZ2h0aW50ZW5zaXR5JzogVW5pZm9ybTFmLFxuICAgICd1X2xpZ2h0Y29sb3InOiBVbmlmb3JtM2YsXG4gICAgJ3VfaGVpZ2h0X2ZhY3Rvcic6IFVuaWZvcm0xZixcbiAgICAndV92ZXJ0aWNhbF9ncmFkaWVudCc6IFVuaWZvcm0xZixcbiAgICAvLyBwYXR0ZXJuIHVuaWZvcm1zOlxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBVbmlmb3JtMmYsXG4gICAgJ3Vfc2NhbGUnOiBVbmlmb3JtM2YsXG4gICAgJ3VfZmFkZSc6IFVuaWZvcm0xZixcbiAgICAndV9vcGFjaXR5JzogVW5pZm9ybTFmXG58fTtcblxuY29uc3QgZmlsbEV4dHJ1c2lvblVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEZpbGxFeHRydXNpb25Vbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3VfbGlnaHRwb3MnOiBuZXcgVW5pZm9ybTNmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xpZ2h0cG9zKSxcbiAgICAndV9saWdodGludGVuc2l0eSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfbGlnaHRpbnRlbnNpdHkpLFxuICAgICd1X2xpZ2h0Y29sb3InOiBuZXcgVW5pZm9ybTNmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xpZ2h0Y29sb3IpLFxuICAgICd1X3ZlcnRpY2FsX2dyYWRpZW50JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV92ZXJ0aWNhbF9ncmFkaWVudCksXG4gICAgJ3Vfb3BhY2l0eSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfb3BhY2l0eSlcbn0pO1xuXG5jb25zdCBmaWxsRXh0cnVzaW9uUGF0dGVyblVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X2xpZ2h0cG9zJzogbmV3IFVuaWZvcm0zZihjb250ZXh0LCBsb2NhdGlvbnMudV9saWdodHBvcyksXG4gICAgJ3VfbGlnaHRpbnRlbnNpdHknOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xpZ2h0aW50ZW5zaXR5KSxcbiAgICAndV9saWdodGNvbG9yJzogbmV3IFVuaWZvcm0zZihjb250ZXh0LCBsb2NhdGlvbnMudV9saWdodGNvbG9yKSxcbiAgICAndV92ZXJ0aWNhbF9ncmFkaWVudCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfdmVydGljYWxfZ3JhZGllbnQpLFxuICAgICd1X2hlaWdodF9mYWN0b3InOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2hlaWdodF9mYWN0b3IpLFxuICAgIC8vIHBhdHRlcm4gdW5pZm9ybXNcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X3RleHNpemUnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleHNpemUpLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXhlbF9jb29yZF91cHBlciksXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpeGVsX2Nvb3JkX2xvd2VyKSxcbiAgICAndV9zY2FsZSc6IG5ldyBVbmlmb3JtM2YoY29udGV4dCwgbG9jYXRpb25zLnVfc2NhbGUpLFxuICAgICd1X2ZhZGUnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2ZhZGUpLFxuICAgICd1X29wYWNpdHknOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X29wYWNpdHkpXG59KTtcblxuY29uc3QgZmlsbEV4dHJ1c2lvblVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBzaG91bGRVc2VWZXJ0aWNhbEdyYWRpZW50OiBib29sZWFuLFxuICAgIG9wYWNpdHk6IG51bWJlclxuKTogVW5pZm9ybVZhbHVlczxGaWxsRXh0cnVzaW9uVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgbGlnaHQgPSBwYWludGVyLnN0eWxlLmxpZ2h0O1xuICAgIGNvbnN0IF9scCA9IGxpZ2h0LnByb3BlcnRpZXMuZ2V0KCdwb3NpdGlvbicpO1xuICAgIGNvbnN0IGxpZ2h0UG9zID0gW19scC54LCBfbHAueSwgX2xwLnpdO1xuICAgIGNvbnN0IGxpZ2h0TWF0ID0gbWF0My5jcmVhdGUoKTtcbiAgICBpZiAobGlnaHQucHJvcGVydGllcy5nZXQoJ2FuY2hvcicpID09PSAndmlld3BvcnQnKSB7XG4gICAgICAgIG1hdDMuZnJvbVJvdGF0aW9uKGxpZ2h0TWF0LCAtcGFpbnRlci50cmFuc2Zvcm0uYW5nbGUpO1xuICAgIH1cbiAgICB2ZWMzLnRyYW5zZm9ybU1hdDMobGlnaHRQb3MsIGxpZ2h0UG9zLCBsaWdodE1hdCk7XG5cbiAgICBjb25zdCBsaWdodENvbG9yID0gbGlnaHQucHJvcGVydGllcy5nZXQoJ2NvbG9yJyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X2xpZ2h0cG9zJzogbGlnaHRQb3MsXG4gICAgICAgICd1X2xpZ2h0aW50ZW5zaXR5JzogbGlnaHQucHJvcGVydGllcy5nZXQoJ2ludGVuc2l0eScpLFxuICAgICAgICAndV9saWdodGNvbG9yJzogW2xpZ2h0Q29sb3IuciwgbGlnaHRDb2xvci5nLCBsaWdodENvbG9yLmJdLFxuICAgICAgICAndV92ZXJ0aWNhbF9ncmFkaWVudCc6ICtzaG91bGRVc2VWZXJ0aWNhbEdyYWRpZW50LFxuICAgICAgICAndV9vcGFjaXR5Jzogb3BhY2l0eVxuICAgIH07XG59O1xuXG5jb25zdCBmaWxsRXh0cnVzaW9uUGF0dGVyblVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBzaG91bGRVc2VWZXJ0aWNhbEdyYWRpZW50OiBib29sZWFuLFxuICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICBjb29yZDogT3ZlcnNjYWxlZFRpbGVJRCxcbiAgICBjcm9zc2ZhZGU6IENyb3NzZmFkZVBhcmFtZXRlcnMsXG4gICAgdGlsZTogVGlsZVxuKTogVW5pZm9ybVZhbHVlczxGaWxsRXh0cnVzaW9uUGF0dGVyblVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIHJldHVybiBleHRlbmQoZmlsbEV4dHJ1c2lvblVuaWZvcm1WYWx1ZXMobWF0cml4LCBwYWludGVyLCBzaG91bGRVc2VWZXJ0aWNhbEdyYWRpZW50LCBvcGFjaXR5KSxcbiAgICAgICAgcGF0dGVyblVuaWZvcm1WYWx1ZXMoY3Jvc3NmYWRlLCBwYWludGVyLCB0aWxlKSxcbiAgICAgICAge1xuICAgICAgICAgICAgJ3VfaGVpZ2h0X2ZhY3Rvcic6IC1NYXRoLnBvdygyLCBjb29yZC5vdmVyc2NhbGVkWikgLyB0aWxlLnRpbGVTaXplIC8gOFxuICAgICAgICB9KTtcbn07XG5cbmV4cG9ydCB7XG4gICAgZmlsbEV4dHJ1c2lvblVuaWZvcm1zLFxuICAgIGZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybXMsXG4gICAgZmlsbEV4dHJ1c2lvblVuaWZvcm1WYWx1ZXMsXG4gICAgZmlsbEV4dHJ1c2lvblBhdHRlcm5Vbmlmb3JtVmFsdWVzXG59O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtwYXR0ZXJuVW5pZm9ybVZhbHVlc30gZnJvbSAnLi9wYXR0ZXJuJztcbmltcG9ydCB7XG4gICAgVW5pZm9ybTFpLFxuICAgIFVuaWZvcm0xZixcbiAgICBVbmlmb3JtMmYsXG4gICAgVW5pZm9ybTNmLFxuICAgIFVuaWZvcm1NYXRyaXg0ZlxufSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHtleHRlbmR9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybVZhbHVlcywgVW5pZm9ybUxvY2F0aW9uc30gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7Q3Jvc3NmYWRlUGFyYW1ldGVyc30gZnJvbSAnLi4vLi4vc3R5bGUvZXZhbHVhdGlvbl9wYXJhbWV0ZXJzJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi4vLi4vc291cmNlL3RpbGUnO1xuXG5leHBvcnQgdHlwZSBGaWxsVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGZcbnx9O1xuXG5leHBvcnQgdHlwZSBGaWxsT3V0bGluZVVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X3dvcmxkJzogVW5pZm9ybTJmXG58fTtcblxuZXhwb3J0IHR5cGUgRmlsbFBhdHRlcm5Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAvLyBwYXR0ZXJuIHVuaWZvcm1zOlxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBVbmlmb3JtMmYsXG4gICAgJ3Vfc2NhbGUnOiBVbmlmb3JtM2YsXG4gICAgJ3VfZmFkZSc6IFVuaWZvcm0xZlxufH07XG5cbmV4cG9ydCB0eXBlIEZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X3dvcmxkJzogVW5pZm9ybTJmLFxuICAgIC8vIHBhdHRlcm4gdW5pZm9ybXM6XG4gICAgJ3VfdGV4c2l6ZSc6IFVuaWZvcm0yZixcbiAgICAndV9pbWFnZSc6IFVuaWZvcm0xaSxcbiAgICAndV9waXhlbF9jb29yZF91cHBlcic6IFVuaWZvcm0yZixcbiAgICAndV9waXhlbF9jb29yZF9sb3dlcic6IFVuaWZvcm0yZixcbiAgICAndV9zY2FsZSc6IFVuaWZvcm0zZixcbiAgICAndV9mYWRlJzogVW5pZm9ybTFmXG58fTtcblxuY29uc3QgZmlsbFVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEZpbGxVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeClcbn0pO1xuXG5jb25zdCBmaWxsUGF0dGVyblVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEZpbGxQYXR0ZXJuVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X2ltYWdlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pbWFnZSksXG4gICAgJ3VfdGV4c2l6ZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdGV4c2l6ZSksXG4gICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpeGVsX2Nvb3JkX3VwcGVyKSxcbiAgICAndV9waXhlbF9jb29yZF9sb3dlcic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGl4ZWxfY29vcmRfbG93ZXIpLFxuICAgICd1X3NjYWxlJzogbmV3IFVuaWZvcm0zZihjb250ZXh0LCBsb2NhdGlvbnMudV9zY2FsZSksXG4gICAgJ3VfZmFkZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZmFkZSlcblxufSk7XG5cbmNvbnN0IGZpbGxPdXRsaW5lVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogRmlsbE91dGxpbmVVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3Vfd29ybGQnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3dvcmxkKVxufSk7XG5cbmNvbnN0IGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV93b3JsZCc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfd29ybGQpLFxuICAgICd1X2ltYWdlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pbWFnZSksXG4gICAgJ3VfdGV4c2l6ZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdGV4c2l6ZSksXG4gICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpeGVsX2Nvb3JkX3VwcGVyKSxcbiAgICAndV9waXhlbF9jb29yZF9sb3dlcic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGl4ZWxfY29vcmRfbG93ZXIpLFxuICAgICd1X3NjYWxlJzogbmV3IFVuaWZvcm0zZihjb250ZXh0LCBsb2NhdGlvbnMudV9zY2FsZSksXG4gICAgJ3VfZmFkZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZmFkZSlcbn0pO1xuXG5jb25zdCBmaWxsVW5pZm9ybVZhbHVlcyA9IChtYXRyaXg6IEZsb2F0MzJBcnJheSk6IFVuaWZvcm1WYWx1ZXM8RmlsbFVuaWZvcm1zVHlwZT4gPT4gKHtcbiAgICAndV9tYXRyaXgnOiBtYXRyaXhcbn0pO1xuXG5jb25zdCBmaWxsUGF0dGVyblVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBjcm9zc2ZhZGU6IENyb3NzZmFkZVBhcmFtZXRlcnMsXG4gICAgdGlsZTogVGlsZVxuKTogVW5pZm9ybVZhbHVlczxGaWxsUGF0dGVyblVuaWZvcm1zVHlwZT4gPT4gZXh0ZW5kKFxuICAgIGZpbGxVbmlmb3JtVmFsdWVzKG1hdHJpeCksXG4gICAgcGF0dGVyblVuaWZvcm1WYWx1ZXMoY3Jvc3NmYWRlLCBwYWludGVyLCB0aWxlKVxuKTtcblxuY29uc3QgZmlsbE91dGxpbmVVbmlmb3JtVmFsdWVzID0gKFxuICAgIG1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIGRyYXdpbmdCdWZmZXJTaXplOiBbbnVtYmVyLCBudW1iZXJdXG4pOiBVbmlmb3JtVmFsdWVzPEZpbGxPdXRsaW5lVW5pZm9ybXNUeXBlPiA9PiAoe1xuICAgICd1X21hdHJpeCc6IG1hdHJpeCxcbiAgICAndV93b3JsZCc6IGRyYXdpbmdCdWZmZXJTaXplXG59KTtcblxuY29uc3QgZmlsbE91dGxpbmVQYXR0ZXJuVW5pZm9ybVZhbHVlcyA9IChcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVycyxcbiAgICB0aWxlOiBUaWxlLFxuICAgIGRyYXdpbmdCdWZmZXJTaXplOiBbbnVtYmVyLCBudW1iZXJdXG4pOiBVbmlmb3JtVmFsdWVzPEZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1zVHlwZT4gPT4gZXh0ZW5kKFxuICAgIGZpbGxQYXR0ZXJuVW5pZm9ybVZhbHVlcyhtYXRyaXgsIHBhaW50ZXIsIGNyb3NzZmFkZSwgdGlsZSksXG4gICAge1xuICAgICAgICAndV93b3JsZCc6IGRyYXdpbmdCdWZmZXJTaXplXG4gICAgfVxuKTtcblxuZXhwb3J0IHtcbiAgICBmaWxsVW5pZm9ybXMsXG4gICAgZmlsbFBhdHRlcm5Vbmlmb3JtcyxcbiAgICBmaWxsT3V0bGluZVVuaWZvcm1zLFxuICAgIGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1zLFxuICAgIGZpbGxVbmlmb3JtVmFsdWVzLFxuICAgIGZpbGxQYXR0ZXJuVW5pZm9ybVZhbHVlcyxcbiAgICBmaWxsT3V0bGluZVVuaWZvcm1WYWx1ZXMsXG4gICAgZmlsbE91dGxpbmVQYXR0ZXJuVW5pZm9ybVZhbHVlc1xufTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7XG4gICAgVW5pZm9ybTFpLFxuICAgIFVuaWZvcm0xZixcbiAgICBVbmlmb3JtMmYsXG4gICAgVW5pZm9ybU1hdHJpeDRmXG59IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgcGl4ZWxzVG9UaWxlVW5pdHMgZnJvbSAnLi4vLi4vc291cmNlL3BpeGVsc190b190aWxlX3VuaXRzJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi8uLi9nbC9jb250ZXh0JztcbmltcG9ydCB0eXBlIHtVbmlmb3JtVmFsdWVzLCBVbmlmb3JtTG9jYXRpb25zfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uLy4uL3NvdXJjZS90aWxlX2lkJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi4vLi4vc291cmNlL3RpbGUnO1xuaW1wb3J0IHR5cGUgQ2lyY2xlU3R5bGVMYXllciBmcm9tICcuLi8uLi9zdHlsZS9zdHlsZV9sYXllci9jaXJjbGVfc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuLi9wYWludGVyJztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uLy4uL3V0aWwvYnJvd3Nlcic7XG5cbmV4cG9ydCB0eXBlIENpcmNsZVVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IFVuaWZvcm0xZixcbiAgICAndV9zY2FsZV93aXRoX21hcCc6IFVuaWZvcm0xaSxcbiAgICAndV9waXRjaF93aXRoX21hcCc6IFVuaWZvcm0xaSxcbiAgICAndV9leHRydWRlX3NjYWxlJzogVW5pZm9ybTJmLFxuICAgICd1X2RldmljZV9waXhlbF9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGZcbnx9O1xuXG5jb25zdCBjaXJjbGVVbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBDaXJjbGVVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlKSxcbiAgICAndV9zY2FsZV93aXRoX21hcCc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfc2NhbGVfd2l0aF9tYXApLFxuICAgICd1X3BpdGNoX3dpdGhfbWFwJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9waXRjaF93aXRoX21hcCksXG4gICAgJ3VfZXh0cnVkZV9zY2FsZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfZXh0cnVkZV9zY2FsZSksXG4gICAgJ3VfZGV2aWNlX3BpeGVsX3JhdGlvJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9kZXZpY2VfcGl4ZWxfcmF0aW8pLFxuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KVxufSk7XG5cbmNvbnN0IGNpcmNsZVVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBjb29yZDogT3ZlcnNjYWxlZFRpbGVJRCxcbiAgICB0aWxlOiBUaWxlLFxuICAgIGxheWVyOiBDaXJjbGVTdHlsZUxheWVyXG4pOiBVbmlmb3JtVmFsdWVzPENpcmNsZVVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHBhaW50ZXIudHJhbnNmb3JtO1xuXG4gICAgbGV0IHBpdGNoV2l0aE1hcDogYm9vbGVhbiwgZXh0cnVkZVNjYWxlOiBbbnVtYmVyLCBudW1iZXJdO1xuICAgIGlmIChsYXllci5wYWludC5nZXQoJ2NpcmNsZS1waXRjaC1hbGlnbm1lbnQnKSA9PT0gJ21hcCcpIHtcbiAgICAgICAgY29uc3QgcGl4ZWxSYXRpbyA9IHBpeGVsc1RvVGlsZVVuaXRzKHRpbGUsIDEsIHRyYW5zZm9ybS56b29tKTtcbiAgICAgICAgcGl0Y2hXaXRoTWFwID0gdHJ1ZTtcbiAgICAgICAgZXh0cnVkZVNjYWxlID0gW3BpeGVsUmF0aW8sIHBpeGVsUmF0aW9dO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBpdGNoV2l0aE1hcCA9IGZhbHNlO1xuICAgICAgICBleHRydWRlU2NhbGUgPSB0cmFuc2Zvcm0ucGl4ZWxzVG9HTFVuaXRzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgICd1X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UnOiB0cmFuc2Zvcm0uY2FtZXJhVG9DZW50ZXJEaXN0YW5jZSxcbiAgICAgICAgJ3Vfc2NhbGVfd2l0aF9tYXAnOiArKGxheWVyLnBhaW50LmdldCgnY2lyY2xlLXBpdGNoLXNjYWxlJykgPT09ICdtYXAnKSxcbiAgICAgICAgJ3VfbWF0cml4JzogcGFpbnRlci50cmFuc2xhdGVQb3NNYXRyaXgoXG4gICAgICAgICAgICBjb29yZC5wb3NNYXRyaXgsXG4gICAgICAgICAgICB0aWxlLFxuICAgICAgICAgICAgbGF5ZXIucGFpbnQuZ2V0KCdjaXJjbGUtdHJhbnNsYXRlJyksXG4gICAgICAgICAgICBsYXllci5wYWludC5nZXQoJ2NpcmNsZS10cmFuc2xhdGUtYW5jaG9yJykpLFxuICAgICAgICAndV9waXRjaF93aXRoX21hcCc6ICsocGl0Y2hXaXRoTWFwKSxcbiAgICAgICAgJ3VfZGV2aWNlX3BpeGVsX3JhdGlvJzogYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvLFxuICAgICAgICAndV9leHRydWRlX3NjYWxlJzogZXh0cnVkZVNjYWxlXG4gICAgfTtcbn07XG5cbmV4cG9ydCB7Y2lyY2xlVW5pZm9ybXMsIGNpcmNsZVVuaWZvcm1WYWx1ZXN9O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtcbiAgICBVbmlmb3JtMWYsXG4gICAgVW5pZm9ybTJmLFxuICAgIFVuaWZvcm1NYXRyaXg0ZlxufSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHBpeGVsc1RvVGlsZVVuaXRzIGZyb20gJy4uLy4uL3NvdXJjZS9waXhlbHNfdG9fdGlsZV91bml0cyc7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybVZhbHVlcywgVW5pZm9ybUxvY2F0aW9uc30gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi8uLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi4vLi4vc291cmNlL3RpbGUnO1xuXG5leHBvcnQgdHlwZSBDb2xsaXNpb25Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlJzogVW5pZm9ybTFmLFxuICAgICd1X3BpeGVsc190b190aWxlX3VuaXRzJzogVW5pZm9ybTFmLFxuICAgICd1X2V4dHJ1ZGVfc2NhbGUnOiBVbmlmb3JtMmYsXG4gICAgJ3Vfb3ZlcnNjYWxlX2ZhY3Rvcic6IFVuaWZvcm0xZlxufH07XG5cbmV4cG9ydCB0eXBlIENvbGxpc2lvbkNpcmNsZVVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X2ludl9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IFVuaWZvcm0xZixcbiAgICAndV92aWV3cG9ydF9zaXplJzogVW5pZm9ybTJmXG58fTtcblxuY29uc3QgY29sbGlzaW9uVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogQ29sbGlzaW9uVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UpLFxuICAgICd1X3BpeGVsc190b190aWxlX3VuaXRzJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXhlbHNfdG9fdGlsZV91bml0cyksXG4gICAgJ3VfZXh0cnVkZV9zY2FsZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfZXh0cnVkZV9zY2FsZSksXG4gICAgJ3Vfb3ZlcnNjYWxlX2ZhY3Rvcic6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfb3ZlcnNjYWxlX2ZhY3Rvcilcbn0pO1xuXG5jb25zdCBjb2xsaXNpb25DaXJjbGVVbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBDb2xsaXNpb25DaXJjbGVVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3VfaW52X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfaW52X21hdHJpeCksXG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSksXG4gICAgJ3Vfdmlld3BvcnRfc2l6ZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdmlld3BvcnRfc2l6ZSlcbn0pO1xuXG5jb25zdCBjb2xsaXNpb25Vbmlmb3JtVmFsdWVzID0gKFxuICAgIG1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtLFxuICAgIHRpbGU6IFRpbGVcbik6IFVuaWZvcm1WYWx1ZXM8Q29sbGlzaW9uVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgcGl4ZWxSYXRpbyA9IHBpeGVsc1RvVGlsZVVuaXRzKHRpbGUsIDEsIHRyYW5zZm9ybS56b29tKTtcbiAgICBjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIHRyYW5zZm9ybS56b29tIC0gdGlsZS50aWxlSUQub3ZlcnNjYWxlZFopO1xuICAgIGNvbnN0IG92ZXJzY2FsZUZhY3RvciA9IHRpbGUudGlsZUlELm92ZXJzY2FsZUZhY3RvcigpO1xuICAgIHJldHVybiB7XG4gICAgICAgICd1X21hdHJpeCc6IG1hdHJpeCxcbiAgICAgICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IHRyYW5zZm9ybS5jYW1lcmFUb0NlbnRlckRpc3RhbmNlLFxuICAgICAgICAndV9waXhlbHNfdG9fdGlsZV91bml0cyc6IHBpeGVsUmF0aW8sXG4gICAgICAgICd1X2V4dHJ1ZGVfc2NhbGUnOiBbdHJhbnNmb3JtLnBpeGVsc1RvR0xVbml0c1swXSAvIChwaXhlbFJhdGlvICogc2NhbGUpLFxuICAgICAgICAgICAgdHJhbnNmb3JtLnBpeGVsc1RvR0xVbml0c1sxXSAvIChwaXhlbFJhdGlvICogc2NhbGUpXSxcbiAgICAgICAgJ3Vfb3ZlcnNjYWxlX2ZhY3Rvcic6IG92ZXJzY2FsZUZhY3RvclxuICAgIH07XG59O1xuXG5jb25zdCBjb2xsaXNpb25DaXJjbGVVbmlmb3JtVmFsdWVzID0gKFxuICAgIG1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIGludk1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtXG4pOiBVbmlmb3JtVmFsdWVzPENvbGxpc2lvbkNpcmNsZVVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgICd1X21hdHJpeCc6IG1hdHJpeCxcbiAgICAgICAgJ3VfaW52X21hdHJpeCc6IGludk1hdHJpeCxcbiAgICAgICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IHRyYW5zZm9ybS5jYW1lcmFUb0NlbnRlckRpc3RhbmNlLFxuICAgICAgICAndV92aWV3cG9ydF9zaXplJzogW3RyYW5zZm9ybS53aWR0aCwgdHJhbnNmb3JtLmhlaWdodF1cbiAgICB9O1xufTtcblxuZXhwb3J0IHtjb2xsaXNpb25Vbmlmb3JtcywgY29sbGlzaW9uVW5pZm9ybVZhbHVlcywgY29sbGlzaW9uQ2lyY2xlVW5pZm9ybXMsIGNvbGxpc2lvbkNpcmNsZVVuaWZvcm1WYWx1ZXN9O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtcbiAgICBVbmlmb3JtQ29sb3IsXG4gICAgVW5pZm9ybU1hdHJpeDRmLFxuICAgIFVuaWZvcm0xaSxcbiAgICBVbmlmb3JtMWZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi8uLi9nbC9jb250ZXh0JztcbmltcG9ydCB0eXBlIHtVbmlmb3JtVmFsdWVzLCBVbmlmb3JtTG9jYXRpb25zfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHR5cGUgQ29sb3IgZnJvbSAnLi4vLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcblxuZXhwb3J0IHR5cGUgRGVidWdVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X2NvbG9yJzogVW5pZm9ybUNvbG9yLFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9vdmVybGF5JzogVW5pZm9ybTFpLFxuICAgICd1X292ZXJsYXlfc2NhbGUnOiBVbmlmb3JtMWZcbnx9O1xuXG5jb25zdCBkZWJ1Z1VuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IERlYnVnVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfY29sb3InOiBuZXcgVW5pZm9ybUNvbG9yKGNvbnRleHQsIGxvY2F0aW9ucy51X2NvbG9yKSxcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3Vfb3ZlcmxheSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfb3ZlcmxheSksXG4gICAgJ3Vfb3ZlcmxheV9zY2FsZSc6ICBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X292ZXJsYXlfc2NhbGUpLFxufSk7XG5cbmNvbnN0IGRlYnVnVW5pZm9ybVZhbHVlcyA9IChtYXRyaXg6IEZsb2F0MzJBcnJheSwgY29sb3I6IENvbG9yLCBzY2FsZVJhdGlvOiBudW1iZXIgPSAxKTogVW5pZm9ybVZhbHVlczxEZWJ1Z1VuaWZvcm1zVHlwZT4gPT4gKHtcbiAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgJ3VfY29sb3InOiBjb2xvcixcbiAgICAndV9vdmVybGF5JzogMCxcbiAgICAndV9vdmVybGF5X3NjYWxlJzogc2NhbGVSYXRpb1xufSk7XG5cbmV4cG9ydCB7ZGVidWdVbmlmb3JtcywgZGVidWdVbmlmb3JtVmFsdWVzfTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7VW5pZm9ybU1hdHJpeDRmfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuXG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uLy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5cbmV4cG9ydCB0eXBlIENsaXBwaW5nTWFza1VuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmXG58fTtcblxuY29uc3QgY2xpcHBpbmdNYXNrVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogQ2xpcHBpbmdNYXNrVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpXG59KTtcblxuY29uc3QgY2xpcHBpbmdNYXNrVW5pZm9ybVZhbHVlcyA9IChtYXRyaXg6IEZsb2F0MzJBcnJheSk6IFVuaWZvcm1WYWx1ZXM8Q2xpcHBpbmdNYXNrVW5pZm9ybXNUeXBlPiA9PiAoe1xuICAgICd1X21hdHJpeCc6IG1hdHJpeFxufSk7XG5cbmV4cG9ydCB7Y2xpcHBpbmdNYXNrVW5pZm9ybXMsIGNsaXBwaW5nTWFza1VuaWZvcm1WYWx1ZXN9O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHttYXQ0fSBmcm9tICdnbC1tYXRyaXgnO1xuXG5pbXBvcnQge1xuICAgIFVuaWZvcm0xaSxcbiAgICBVbmlmb3JtMWYsXG4gICAgVW5pZm9ybTJmLFxuICAgIFVuaWZvcm1NYXRyaXg0ZlxufSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHBpeGVsc1RvVGlsZVVuaXRzIGZyb20gJy4uLy4uL3NvdXJjZS9waXhlbHNfdG9fdGlsZV91bml0cyc7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4uLy4uL3NvdXJjZS90aWxlJztcbmltcG9ydCB0eXBlIHtVbmlmb3JtVmFsdWVzLCBVbmlmb3JtTG9jYXRpb25zfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuLi9wYWludGVyJztcbmltcG9ydCB0eXBlIEhlYXRtYXBTdHlsZUxheWVyIGZyb20gJy4uLy4uL3N0eWxlL3N0eWxlX2xheWVyL2hlYXRtYXBfc3R5bGVfbGF5ZXInO1xuXG5leHBvcnQgdHlwZSBIZWF0bWFwVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9leHRydWRlX3NjYWxlJzogVW5pZm9ybTFmLFxuICAgICd1X2ludGVuc2l0eSc6IFVuaWZvcm0xZixcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGZcbnx9O1xuXG5leHBvcnQgdHlwZSBIZWF0bWFwVGV4dHVyZVVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X3dvcmxkJzogVW5pZm9ybTJmLFxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X2NvbG9yX3JhbXAnOiBVbmlmb3JtMWksXG4gICAgJ3Vfb3BhY2l0eSc6IFVuaWZvcm0xZlxufH07XG5cbmNvbnN0IGhlYXRtYXBVbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBIZWF0bWFwVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfZXh0cnVkZV9zY2FsZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZXh0cnVkZV9zY2FsZSksXG4gICAgJ3VfaW50ZW5zaXR5JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9pbnRlbnNpdHkpLFxuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KVxufSk7XG5cbmNvbnN0IGhlYXRtYXBUZXh0dXJlVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogSGVhdG1hcFRleHR1cmVVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3Vfd29ybGQnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3dvcmxkKSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X2NvbG9yX3JhbXAnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2NvbG9yX3JhbXApLFxuICAgICd1X29wYWNpdHknOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X29wYWNpdHkpXG59KTtcblxuY29uc3QgaGVhdG1hcFVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgdGlsZTogVGlsZSxcbiAgICB6b29tOiBudW1iZXIsXG4gICAgaW50ZW5zaXR5OiBudW1iZXJcbik6IFVuaWZvcm1WYWx1ZXM8SGVhdG1hcFVuaWZvcm1zVHlwZT4gPT4gKHtcbiAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgJ3VfZXh0cnVkZV9zY2FsZSc6IHBpeGVsc1RvVGlsZVVuaXRzKHRpbGUsIDEsIHpvb20pLFxuICAgICd1X2ludGVuc2l0eSc6IGludGVuc2l0eVxufSk7XG5cbmNvbnN0IGhlYXRtYXBUZXh0dXJlVW5pZm9ybVZhbHVlcyA9IChcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIGxheWVyOiBIZWF0bWFwU3R5bGVMYXllcixcbiAgICB0ZXh0dXJlVW5pdDogbnVtYmVyLFxuICAgIGNvbG9yUmFtcFVuaXQ6IG51bWJlclxuKTogVW5pZm9ybVZhbHVlczxIZWF0bWFwVGV4dHVyZVVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIGNvbnN0IG1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XG4gICAgbWF0NC5vcnRobyhtYXRyaXgsIDAsIHBhaW50ZXIud2lkdGgsIHBhaW50ZXIuaGVpZ2h0LCAwLCAwLCAxKTtcblxuICAgIGNvbnN0IGdsID0gcGFpbnRlci5jb250ZXh0LmdsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3VfbWF0cml4JzogbWF0cml4LFxuICAgICAgICAndV93b3JsZCc6IFtnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHRdLFxuICAgICAgICAndV9pbWFnZSc6IHRleHR1cmVVbml0LFxuICAgICAgICAndV9jb2xvcl9yYW1wJzogY29sb3JSYW1wVW5pdCxcbiAgICAgICAgJ3Vfb3BhY2l0eSc6IGxheWVyLnBhaW50LmdldCgnaGVhdG1hcC1vcGFjaXR5JylcbiAgICB9O1xufTtcblxuZXhwb3J0IHtcbiAgICBoZWF0bWFwVW5pZm9ybXMsXG4gICAgaGVhdG1hcFRleHR1cmVVbmlmb3JtcyxcbiAgICBoZWF0bWFwVW5pZm9ybVZhbHVlcyxcbiAgICBoZWF0bWFwVGV4dHVyZVVuaWZvcm1WYWx1ZXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge1xuICAgIFVuaWZvcm0xaSxcbiAgICBVbmlmb3JtMWYsXG4gICAgVW5pZm9ybTJmLFxuICAgIFVuaWZvcm0zZixcbiAgICBVbmlmb3JtTWF0cml4NGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCBwaXhlbHNUb1RpbGVVbml0cyBmcm9tICcuLi8uLi9zb3VyY2UvcGl4ZWxzX3RvX3RpbGVfdW5pdHMnO1xuaW1wb3J0IHtleHRlbmR9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi8uLi91dGlsL2Jyb3dzZXInO1xuXG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uLy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgdHlwZSBUcmFuc2Zvcm0gZnJvbSAnLi4vLi4vZ2VvL3RyYW5zZm9ybSc7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4uLy4uL3NvdXJjZS90aWxlJztcbmltcG9ydCB0eXBlIHtDcm9zc0ZhZGVkfSBmcm9tICcuLi8uLi9zdHlsZS9wcm9wZXJ0aWVzJztcbmltcG9ydCB0eXBlIExpbmVTdHlsZUxheWVyIGZyb20gJy4uLy4uL3N0eWxlL3N0eWxlX2xheWVyL2xpbmVfc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuLi9wYWludGVyJztcbmltcG9ydCB0eXBlIHtDcm9zc2ZhZGVQYXJhbWV0ZXJzfSBmcm9tICcuLi8uLi9zdHlsZS9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuXG5leHBvcnQgdHlwZSBMaW5lVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfcmF0aW8nOiBVbmlmb3JtMWYsXG4gICAgJ3VfZGV2aWNlX3BpeGVsX3JhdGlvJzogVW5pZm9ybTFmLFxuICAgICd1X3VuaXRzX3RvX3BpeGVscyc6IFVuaWZvcm0yZlxufH07XG5cbmV4cG9ydCB0eXBlIExpbmVHcmFkaWVudFVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X3JhdGlvJzogVW5pZm9ybTFmLFxuICAgICd1X2RldmljZV9waXhlbF9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV91bml0c190b19waXhlbHMnOiBVbmlmb3JtMmYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfaW1hZ2VfaGVpZ2h0JzogVW5pZm9ybTFmLFxufH07XG5cbmV4cG9ydCB0eXBlIExpbmVQYXR0ZXJuVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfdGV4c2l6ZSc6IFVuaWZvcm0yZixcbiAgICAndV9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9kZXZpY2VfcGl4ZWxfcmF0aW8nOiBVbmlmb3JtMWYsXG4gICAgJ3VfdW5pdHNfdG9fcGl4ZWxzJzogVW5pZm9ybTJmLFxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X3NjYWxlJzogVW5pZm9ybTNmLFxuICAgICd1X2ZhZGUnOiBVbmlmb3JtMWZcbnx9O1xuXG5leHBvcnQgdHlwZSBMaW5lU0RGVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfcmF0aW8nOiBVbmlmb3JtMWYsXG4gICAgJ3VfZGV2aWNlX3BpeGVsX3JhdGlvJzogVW5pZm9ybTFmLFxuICAgICd1X3VuaXRzX3RvX3BpeGVscyc6IFVuaWZvcm0yZixcbiAgICAndV9wYXR0ZXJuc2NhbGVfYSc6IFVuaWZvcm0yZixcbiAgICAndV9wYXR0ZXJuc2NhbGVfYic6IFVuaWZvcm0yZixcbiAgICAndV9zZGZnYW1tYSc6IFVuaWZvcm0xZixcbiAgICAndV9pbWFnZSc6IFVuaWZvcm0xaSxcbiAgICAndV90ZXhfeV9hJzogVW5pZm9ybTFmLFxuICAgICd1X3RleF95X2InOiBVbmlmb3JtMWYsXG4gICAgJ3VfbWl4JzogVW5pZm9ybTFmXG58fTtcblxuY29uc3QgbGluZVVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IExpbmVVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3VfcmF0aW8nOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3JhdGlvKSxcbiAgICAndV9kZXZpY2VfcGl4ZWxfcmF0aW8nOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2RldmljZV9waXhlbF9yYXRpbyksXG4gICAgJ3VfdW5pdHNfdG9fcGl4ZWxzJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV91bml0c190b19waXhlbHMpXG59KTtcblxuY29uc3QgbGluZUdyYWRpZW50VW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogTGluZUdyYWRpZW50VW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X3JhdGlvJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9yYXRpbyksXG4gICAgJ3VfZGV2aWNlX3BpeGVsX3JhdGlvJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9kZXZpY2VfcGl4ZWxfcmF0aW8pLFxuICAgICd1X3VuaXRzX3RvX3BpeGVscyc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdW5pdHNfdG9fcGl4ZWxzKSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X2ltYWdlX2hlaWdodCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2VfaGVpZ2h0KSxcbn0pO1xuXG5jb25zdCBsaW5lUGF0dGVyblVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IExpbmVQYXR0ZXJuVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X3RleHNpemUnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleHNpemUpLFxuICAgICd1X3JhdGlvJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9yYXRpbyksXG4gICAgJ3VfZGV2aWNlX3BpeGVsX3JhdGlvJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9kZXZpY2VfcGl4ZWxfcmF0aW8pLFxuICAgICd1X2ltYWdlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pbWFnZSksXG4gICAgJ3VfdW5pdHNfdG9fcGl4ZWxzJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV91bml0c190b19waXhlbHMpLFxuICAgICd1X3NjYWxlJzogbmV3IFVuaWZvcm0zZihjb250ZXh0LCBsb2NhdGlvbnMudV9zY2FsZSksXG4gICAgJ3VfZmFkZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZmFkZSlcbn0pO1xuXG5jb25zdCBsaW5lU0RGVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogTGluZVNERlVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9yYXRpbyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfcmF0aW8pLFxuICAgICd1X2RldmljZV9waXhlbF9yYXRpbyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZGV2aWNlX3BpeGVsX3JhdGlvKSxcbiAgICAndV91bml0c190b19waXhlbHMnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3VuaXRzX3RvX3BpeGVscyksXG4gICAgJ3VfcGF0dGVybnNjYWxlX2EnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BhdHRlcm5zY2FsZV9hKSxcbiAgICAndV9wYXR0ZXJuc2NhbGVfYic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGF0dGVybnNjYWxlX2IpLFxuICAgICd1X3NkZmdhbW1hJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zZGZnYW1tYSksXG4gICAgJ3VfaW1hZ2UnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2ltYWdlKSxcbiAgICAndV90ZXhfeV9hJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV90ZXhfeV9hKSxcbiAgICAndV90ZXhfeV9iJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV90ZXhfeV9iKSxcbiAgICAndV9taXgnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X21peClcbn0pO1xuXG5jb25zdCBsaW5lVW5pZm9ybVZhbHVlcyA9IChcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIHRpbGU6IFRpbGUsXG4gICAgbGF5ZXI6IExpbmVTdHlsZUxheWVyXG4pOiBVbmlmb3JtVmFsdWVzPExpbmVVbmlmb3Jtc1R5cGU+ID0+IHtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBwYWludGVyLnRyYW5zZm9ybTtcblxuICAgIHJldHVybiB7XG4gICAgICAgICd1X21hdHJpeCc6IGNhbGN1bGF0ZU1hdHJpeChwYWludGVyLCB0aWxlLCBsYXllciksXG4gICAgICAgICd1X3JhdGlvJzogMSAvIHBpeGVsc1RvVGlsZVVuaXRzKHRpbGUsIDEsIHRyYW5zZm9ybS56b29tKSxcbiAgICAgICAgJ3VfZGV2aWNlX3BpeGVsX3JhdGlvJzogYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvLFxuICAgICAgICAndV91bml0c190b19waXhlbHMnOiBbXG4gICAgICAgICAgICAxIC8gdHJhbnNmb3JtLnBpeGVsc1RvR0xVbml0c1swXSxcbiAgICAgICAgICAgIDEgLyB0cmFuc2Zvcm0ucGl4ZWxzVG9HTFVuaXRzWzFdXG4gICAgICAgIF1cbiAgICB9O1xufTtcblxuY29uc3QgbGluZUdyYWRpZW50VW5pZm9ybVZhbHVlcyA9IChcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIHRpbGU6IFRpbGUsXG4gICAgbGF5ZXI6IExpbmVTdHlsZUxheWVyLFxuICAgIGltYWdlSGVpZ2h0OiBudW1iZXJcbik6IFVuaWZvcm1WYWx1ZXM8TGluZUdyYWRpZW50VW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgcmV0dXJuIGV4dGVuZChsaW5lVW5pZm9ybVZhbHVlcyhwYWludGVyLCB0aWxlLCBsYXllciksIHtcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAndV9pbWFnZV9oZWlnaHQnOiBpbWFnZUhlaWdodCxcbiAgICB9KTtcbn07XG5cbmNvbnN0IGxpbmVQYXR0ZXJuVW5pZm9ybVZhbHVlcyA9IChcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIHRpbGU6IFRpbGUsXG4gICAgbGF5ZXI6IExpbmVTdHlsZUxheWVyLFxuICAgIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVyc1xuKTogVW5pZm9ybVZhbHVlczxMaW5lUGF0dGVyblVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHBhaW50ZXIudHJhbnNmb3JtO1xuICAgIGNvbnN0IHRpbGVab29tUmF0aW8gPSBjYWxjdWxhdGVUaWxlUmF0aW8odGlsZSwgdHJhbnNmb3JtKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAndV9tYXRyaXgnOiBjYWxjdWxhdGVNYXRyaXgocGFpbnRlciwgdGlsZSwgbGF5ZXIpLFxuICAgICAgICAndV90ZXhzaXplJzogdGlsZS5pbWFnZUF0bGFzVGV4dHVyZS5zaXplLFxuICAgICAgICAvLyBjYW1lcmEgem9vbSByYXRpb1xuICAgICAgICAndV9yYXRpbyc6IDEgLyBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCAxLCB0cmFuc2Zvcm0uem9vbSksXG4gICAgICAgICd1X2RldmljZV9waXhlbF9yYXRpbyc6IGJyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAndV9zY2FsZSc6IFt0aWxlWm9vbVJhdGlvLCBjcm9zc2ZhZGUuZnJvbVNjYWxlLCBjcm9zc2ZhZGUudG9TY2FsZV0sXG4gICAgICAgICd1X2ZhZGUnOiBjcm9zc2ZhZGUudCxcbiAgICAgICAgJ3VfdW5pdHNfdG9fcGl4ZWxzJzogW1xuICAgICAgICAgICAgMSAvIHRyYW5zZm9ybS5waXhlbHNUb0dMVW5pdHNbMF0sXG4gICAgICAgICAgICAxIC8gdHJhbnNmb3JtLnBpeGVsc1RvR0xVbml0c1sxXVxuICAgICAgICBdXG4gICAgfTtcbn07XG5cbmNvbnN0IGxpbmVTREZVbmlmb3JtVmFsdWVzID0gKFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgdGlsZTogVGlsZSxcbiAgICBsYXllcjogTGluZVN0eWxlTGF5ZXIsXG4gICAgZGFzaGFycmF5OiBDcm9zc0ZhZGVkPEFycmF5PG51bWJlcj4+LFxuICAgIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVyc1xuKTogVW5pZm9ybVZhbHVlczxMaW5lU0RGVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gcGFpbnRlci50cmFuc2Zvcm07XG4gICAgY29uc3QgbGluZUF0bGFzID0gcGFpbnRlci5saW5lQXRsYXM7XG4gICAgY29uc3QgdGlsZVJhdGlvID0gY2FsY3VsYXRlVGlsZVJhdGlvKHRpbGUsIHRyYW5zZm9ybSk7XG5cbiAgICBjb25zdCByb3VuZCA9IGxheWVyLmxheW91dC5nZXQoJ2xpbmUtY2FwJykgPT09ICdyb3VuZCc7XG5cbiAgICBjb25zdCBwb3NBID0gbGluZUF0bGFzLmdldERhc2goZGFzaGFycmF5LmZyb20sIHJvdW5kKTtcbiAgICBjb25zdCBwb3NCID0gbGluZUF0bGFzLmdldERhc2goZGFzaGFycmF5LnRvLCByb3VuZCk7XG5cbiAgICBjb25zdCB3aWR0aEEgPSBwb3NBLndpZHRoICogY3Jvc3NmYWRlLmZyb21TY2FsZTtcbiAgICBjb25zdCB3aWR0aEIgPSBwb3NCLndpZHRoICogY3Jvc3NmYWRlLnRvU2NhbGU7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGxpbmVVbmlmb3JtVmFsdWVzKHBhaW50ZXIsIHRpbGUsIGxheWVyKSwge1xuICAgICAgICAndV9wYXR0ZXJuc2NhbGVfYSc6IFt0aWxlUmF0aW8gLyB3aWR0aEEsIC1wb3NBLmhlaWdodCAvIDJdLFxuICAgICAgICAndV9wYXR0ZXJuc2NhbGVfYic6IFt0aWxlUmF0aW8gLyB3aWR0aEIsIC1wb3NCLmhlaWdodCAvIDJdLFxuICAgICAgICAndV9zZGZnYW1tYSc6IGxpbmVBdGxhcy53aWR0aCAvIChNYXRoLm1pbih3aWR0aEEsIHdpZHRoQikgKiAyNTYgKiBicm93c2VyLmRldmljZVBpeGVsUmF0aW8pIC8gMixcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAndV90ZXhfeV9hJzogcG9zQS55LFxuICAgICAgICAndV90ZXhfeV9iJzogcG9zQi55LFxuICAgICAgICAndV9taXgnOiBjcm9zc2ZhZGUudFxuICAgIH0pO1xufTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlVGlsZVJhdGlvKHRpbGU6IFRpbGUsIHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIDEgLyBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCAxLCB0cmFuc2Zvcm0udGlsZVpvb20pO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVNYXRyaXgocGFpbnRlciwgdGlsZSwgbGF5ZXIpIHtcbiAgICByZXR1cm4gcGFpbnRlci50cmFuc2xhdGVQb3NNYXRyaXgoXG4gICAgICAgIHRpbGUudGlsZUlELnBvc01hdHJpeCxcbiAgICAgICAgdGlsZSxcbiAgICAgICAgbGF5ZXIucGFpbnQuZ2V0KCdsaW5lLXRyYW5zbGF0ZScpLFxuICAgICAgICBsYXllci5wYWludC5nZXQoJ2xpbmUtdHJhbnNsYXRlLWFuY2hvcicpXG4gICAgKTtcbn1cblxuZXhwb3J0IHtcbiAgICBsaW5lVW5pZm9ybXMsXG4gICAgbGluZUdyYWRpZW50VW5pZm9ybXMsXG4gICAgbGluZVBhdHRlcm5Vbmlmb3JtcyxcbiAgICBsaW5lU0RGVW5pZm9ybXMsXG4gICAgbGluZVVuaWZvcm1WYWx1ZXMsXG4gICAgbGluZUdyYWRpZW50VW5pZm9ybVZhbHVlcyxcbiAgICBsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXMsXG4gICAgbGluZVNERlVuaWZvcm1WYWx1ZXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge1xuICAgIFVuaWZvcm0xaSxcbiAgICBVbmlmb3JtMWYsXG4gICAgVW5pZm9ybTJmLFxuICAgIFVuaWZvcm0zZixcbiAgICBVbmlmb3JtTWF0cml4NGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi8uLi9nbC9jb250ZXh0JztcbmltcG9ydCB0eXBlIHtVbmlmb3JtVmFsdWVzLCBVbmlmb3JtTG9jYXRpb25zfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHR5cGUgUmFzdGVyU3R5bGVMYXllciBmcm9tICcuLi8uLi9zdHlsZS9zdHlsZV9sYXllci9yYXN0ZXJfc3R5bGVfbGF5ZXInO1xuXG5leHBvcnQgdHlwZSBSYXN0ZXJVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV90bF9wYXJlbnQnOiBVbmlmb3JtMmYsXG4gICAgJ3Vfc2NhbGVfcGFyZW50JzogVW5pZm9ybTFmLFxuICAgICd1X2J1ZmZlcl9zY2FsZSc6IFVuaWZvcm0xZixcbiAgICAndV9mYWRlX3QnOiBVbmlmb3JtMWYsXG4gICAgJ3Vfb3BhY2l0eSc6IFVuaWZvcm0xZixcbiAgICAndV9pbWFnZTAnOiBVbmlmb3JtMWksXG4gICAgJ3VfaW1hZ2UxJzogVW5pZm9ybTFpLFxuICAgICd1X2JyaWdodG5lc3NfbG93JzogVW5pZm9ybTFmLFxuICAgICd1X2JyaWdodG5lc3NfaGlnaCc6IFVuaWZvcm0xZixcbiAgICAndV9zYXR1cmF0aW9uX2ZhY3Rvcic6IFVuaWZvcm0xZixcbiAgICAndV9jb250cmFzdF9mYWN0b3InOiBVbmlmb3JtMWYsXG4gICAgJ3Vfc3Bpbl93ZWlnaHRzJzogVW5pZm9ybTNmXG58fTtcblxuY29uc3QgcmFzdGVyVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogUmFzdGVyVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X3RsX3BhcmVudCc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdGxfcGFyZW50KSxcbiAgICAndV9zY2FsZV9wYXJlbnQnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3NjYWxlX3BhcmVudCksXG4gICAgJ3VfYnVmZmVyX3NjYWxlJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9idWZmZXJfc2NhbGUpLFxuICAgICd1X2ZhZGVfdCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZmFkZV90KSxcbiAgICAndV9vcGFjaXR5JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9vcGFjaXR5KSxcbiAgICAndV9pbWFnZTAnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2ltYWdlMCksXG4gICAgJ3VfaW1hZ2UxJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pbWFnZTEpLFxuICAgICd1X2JyaWdodG5lc3NfbG93JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9icmlnaHRuZXNzX2xvdyksXG4gICAgJ3VfYnJpZ2h0bmVzc19oaWdoJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9icmlnaHRuZXNzX2hpZ2gpLFxuICAgICd1X3NhdHVyYXRpb25fZmFjdG9yJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zYXR1cmF0aW9uX2ZhY3RvciksXG4gICAgJ3VfY29udHJhc3RfZmFjdG9yJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9jb250cmFzdF9mYWN0b3IpLFxuICAgICd1X3NwaW5fd2VpZ2h0cyc6IG5ldyBVbmlmb3JtM2YoY29udGV4dCwgbG9jYXRpb25zLnVfc3Bpbl93ZWlnaHRzKVxufSk7XG5cbmNvbnN0IHJhc3RlclVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgcGFyZW50VEw6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgcGFyZW50U2NhbGVCeTogbnVtYmVyLFxuICAgIGZhZGU6IHttaXg6IG51bWJlciwgb3BhY2l0eTogbnVtYmVyfSxcbiAgICBsYXllcjogUmFzdGVyU3R5bGVMYXllclxuKTogVW5pZm9ybVZhbHVlczxSYXN0ZXJVbmlmb3Jtc1R5cGU+ID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbWF0cml4LFxuICAgICd1X3RsX3BhcmVudCc6IHBhcmVudFRMLFxuICAgICd1X3NjYWxlX3BhcmVudCc6IHBhcmVudFNjYWxlQnksXG4gICAgJ3VfYnVmZmVyX3NjYWxlJzogMSxcbiAgICAndV9mYWRlX3QnOiBmYWRlLm1peCxcbiAgICAndV9vcGFjaXR5JzogZmFkZS5vcGFjaXR5ICogbGF5ZXIucGFpbnQuZ2V0KCdyYXN0ZXItb3BhY2l0eScpLFxuICAgICd1X2ltYWdlMCc6IDAsXG4gICAgJ3VfaW1hZ2UxJzogMSxcbiAgICAndV9icmlnaHRuZXNzX2xvdyc6IGxheWVyLnBhaW50LmdldCgncmFzdGVyLWJyaWdodG5lc3MtbWluJyksXG4gICAgJ3VfYnJpZ2h0bmVzc19oaWdoJzogbGF5ZXIucGFpbnQuZ2V0KCdyYXN0ZXItYnJpZ2h0bmVzcy1tYXgnKSxcbiAgICAndV9zYXR1cmF0aW9uX2ZhY3Rvcic6IHNhdHVyYXRpb25GYWN0b3IobGF5ZXIucGFpbnQuZ2V0KCdyYXN0ZXItc2F0dXJhdGlvbicpKSxcbiAgICAndV9jb250cmFzdF9mYWN0b3InOiBjb250cmFzdEZhY3RvcihsYXllci5wYWludC5nZXQoJ3Jhc3Rlci1jb250cmFzdCcpKSxcbiAgICAndV9zcGluX3dlaWdodHMnOiBzcGluV2VpZ2h0cyhsYXllci5wYWludC5nZXQoJ3Jhc3Rlci1odWUtcm90YXRlJykpXG59KTtcblxuZnVuY3Rpb24gc3BpbldlaWdodHMoYW5nbGUpIHtcbiAgICBhbmdsZSAqPSBNYXRoLlBJIC8gMTgwO1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgY29uc3QgYyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICByZXR1cm4gW1xuICAgICAgICAoMiAqIGMgKyAxKSAvIDMsXG4gICAgICAgICgtTWF0aC5zcXJ0KDMpICogcyAtIGMgKyAxKSAvIDMsXG4gICAgICAgIChNYXRoLnNxcnQoMykgKiBzIC0gYyArIDEpIC8gM1xuICAgIF07XG59XG5cbmZ1bmN0aW9uIGNvbnRyYXN0RmFjdG9yKGNvbnRyYXN0KSB7XG4gICAgcmV0dXJuIGNvbnRyYXN0ID4gMCA/XG4gICAgICAgIDEgLyAoMSAtIGNvbnRyYXN0KSA6XG4gICAgICAgIDEgKyBjb250cmFzdDtcbn1cblxuZnVuY3Rpb24gc2F0dXJhdGlvbkZhY3RvcihzYXR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHNhdHVyYXRpb24gPiAwID9cbiAgICAgICAgMSAtIDEgLyAoMS4wMDEgLSBzYXR1cmF0aW9uKSA6XG4gICAgICAgIC1zYXR1cmF0aW9uO1xufVxuXG5leHBvcnQge3Jhc3RlclVuaWZvcm1zLCByYXN0ZXJVbmlmb3JtVmFsdWVzfTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7XG4gICAgVW5pZm9ybTFpLFxuICAgIFVuaWZvcm0xZixcbiAgICBVbmlmb3JtMmYsXG4gICAgVW5pZm9ybU1hdHJpeDRmXG59IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQge2V4dGVuZH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uLy4uL3V0aWwvYnJvd3Nlcic7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4uL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5cbmV4cG9ydCB0eXBlIFN5bWJvbEljb25Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X2lzX3NpemVfem9vbV9jb25zdGFudCc6IFVuaWZvcm0xaSxcbiAgICAndV9pc19zaXplX2ZlYXR1cmVfY29uc3RhbnQnOiBVbmlmb3JtMWksXG4gICAgJ3Vfc2l6ZV90JzogVW5pZm9ybTFmLFxuICAgICd1X3NpemUnOiBVbmlmb3JtMWYsXG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IFVuaWZvcm0xZixcbiAgICAndV9waXRjaCc6IFVuaWZvcm0xZixcbiAgICAndV9yb3RhdGVfc3ltYm9sJzogVW5pZm9ybTFpLFxuICAgICd1X2FzcGVjdF9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9mYWRlX2NoYW5nZSc6IFVuaWZvcm0xZixcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfbGFiZWxfcGxhbmVfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X2Nvb3JkX21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9pc190ZXh0JzogVW5pZm9ybTFpLFxuICAgICd1X3BpdGNoX3dpdGhfbWFwJzogVW5pZm9ybTFpLFxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3VfdGV4dHVyZSc6IFVuaWZvcm0xaVxufH07XG5cbmV4cG9ydCB0eXBlIFN5bWJvbFNERlVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfaXNfc2l6ZV96b29tX2NvbnN0YW50JzogVW5pZm9ybTFpLFxuICAgICd1X2lzX3NpemVfZmVhdHVyZV9jb25zdGFudCc6IFVuaWZvcm0xaSxcbiAgICAndV9zaXplX3QnOiBVbmlmb3JtMWYsXG4gICAgJ3Vfc2l6ZSc6IFVuaWZvcm0xZixcbiAgICAndV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlJzogVW5pZm9ybTFmLFxuICAgICd1X3BpdGNoJzogVW5pZm9ybTFmLFxuICAgICd1X3JvdGF0ZV9zeW1ib2wnOiBVbmlmb3JtMWksXG4gICAgJ3VfYXNwZWN0X3JhdGlvJzogVW5pZm9ybTFmLFxuICAgICd1X2ZhZGVfY2hhbmdlJzogVW5pZm9ybTFmLFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9sYWJlbF9wbGFuZV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfY29vcmRfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X2lzX3RleHQnOiBVbmlmb3JtMWksXG4gICAgJ3VfcGl0Y2hfd2l0aF9tYXAnOiBVbmlmb3JtMWksXG4gICAgJ3VfdGV4c2l6ZSc6IFVuaWZvcm0yZixcbiAgICAndV90ZXh0dXJlJzogVW5pZm9ybTFpLFxuICAgICd1X2dhbW1hX3NjYWxlJzogVW5pZm9ybTFmLFxuICAgICd1X2RldmljZV9waXhlbF9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9pc19oYWxvJzogVW5pZm9ybTFpXG58fTtcblxuZXhwb3J0IHR5cGUgc3ltYm9sVGV4dEFuZEljb25Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X2lzX3NpemVfem9vbV9jb25zdGFudCc6IFVuaWZvcm0xaSxcbiAgICAndV9pc19zaXplX2ZlYXR1cmVfY29uc3RhbnQnOiBVbmlmb3JtMWksXG4gICAgJ3Vfc2l6ZV90JzogVW5pZm9ybTFmLFxuICAgICd1X3NpemUnOiBVbmlmb3JtMWYsXG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IFVuaWZvcm0xZixcbiAgICAndV9waXRjaCc6IFVuaWZvcm0xZixcbiAgICAndV9yb3RhdGVfc3ltYm9sJzogVW5pZm9ybTFpLFxuICAgICd1X2FzcGVjdF9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9mYWRlX2NoYW5nZSc6IFVuaWZvcm0xZixcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfbGFiZWxfcGxhbmVfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X2Nvb3JkX21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9pc190ZXh0JzogVW5pZm9ybTFpLFxuICAgICd1X3BpdGNoX3dpdGhfbWFwJzogVW5pZm9ybTFpLFxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3VfdGV4c2l6ZV9pY29uJzogVW5pZm9ybTJmLFxuICAgICd1X3RleHR1cmUnOiBVbmlmb3JtMWksXG4gICAgJ3VfdGV4dHVyZV9pY29uJzogVW5pZm9ybTFpLFxuICAgICd1X2dhbW1hX3NjYWxlJzogVW5pZm9ybTFmLFxuICAgICd1X2RldmljZV9waXhlbF9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9pc19oYWxvJzogVW5pZm9ybTFpXG58fTtcblxuY29uc3Qgc3ltYm9sSWNvblVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IFN5bWJvbEljb25Vbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9pc19zaXplX3pvb21fY29uc3RhbnQnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2lzX3NpemVfem9vbV9jb25zdGFudCksXG4gICAgJ3VfaXNfc2l6ZV9mZWF0dXJlX2NvbnN0YW50JzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pc19zaXplX2ZlYXR1cmVfY29uc3RhbnQpLFxuICAgICd1X3NpemVfdCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfc2l6ZV90KSxcbiAgICAndV9zaXplJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zaXplKSxcbiAgICAndV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlKSxcbiAgICAndV9waXRjaCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfcGl0Y2gpLFxuICAgICd1X3JvdGF0ZV9zeW1ib2wnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X3JvdGF0ZV9zeW1ib2wpLFxuICAgICd1X2FzcGVjdF9yYXRpbyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfYXNwZWN0X3JhdGlvKSxcbiAgICAndV9mYWRlX2NoYW5nZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZmFkZV9jaGFuZ2UpLFxuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9sYWJlbF9wbGFuZV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xhYmVsX3BsYW5lX21hdHJpeCksXG4gICAgJ3VfY29vcmRfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9jb29yZF9tYXRyaXgpLFxuICAgICd1X2lzX3RleHQnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2lzX3RleHQpLFxuICAgICd1X3BpdGNoX3dpdGhfbWFwJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9waXRjaF93aXRoX21hcCksXG4gICAgJ3VfdGV4c2l6ZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdGV4c2l6ZSksXG4gICAgJ3VfdGV4dHVyZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfdGV4dHVyZSlcbn0pO1xuXG5jb25zdCBzeW1ib2xTREZVbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBTeW1ib2xTREZVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9pc19zaXplX3pvb21fY29uc3RhbnQnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2lzX3NpemVfem9vbV9jb25zdGFudCksXG4gICAgJ3VfaXNfc2l6ZV9mZWF0dXJlX2NvbnN0YW50JzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pc19zaXplX2ZlYXR1cmVfY29uc3RhbnQpLFxuICAgICd1X3NpemVfdCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfc2l6ZV90KSxcbiAgICAndV9zaXplJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zaXplKSxcbiAgICAndV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlKSxcbiAgICAndV9waXRjaCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfcGl0Y2gpLFxuICAgICd1X3JvdGF0ZV9zeW1ib2wnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X3JvdGF0ZV9zeW1ib2wpLFxuICAgICd1X2FzcGVjdF9yYXRpbyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfYXNwZWN0X3JhdGlvKSxcbiAgICAndV9mYWRlX2NoYW5nZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZmFkZV9jaGFuZ2UpLFxuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9sYWJlbF9wbGFuZV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xhYmVsX3BsYW5lX21hdHJpeCksXG4gICAgJ3VfY29vcmRfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9jb29yZF9tYXRyaXgpLFxuICAgICd1X2lzX3RleHQnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2lzX3RleHQpLFxuICAgICd1X3BpdGNoX3dpdGhfbWFwJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9waXRjaF93aXRoX21hcCksXG4gICAgJ3VfdGV4c2l6ZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdGV4c2l6ZSksXG4gICAgJ3VfdGV4dHVyZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfdGV4dHVyZSksXG4gICAgJ3VfZ2FtbWFfc2NhbGUnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2dhbW1hX3NjYWxlKSxcbiAgICAndV9kZXZpY2VfcGl4ZWxfcmF0aW8nOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2RldmljZV9waXhlbF9yYXRpbyksXG4gICAgJ3VfaXNfaGFsbyc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaXNfaGFsbylcbn0pO1xuXG5jb25zdCBzeW1ib2xUZXh0QW5kSWNvblVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IHN5bWJvbFRleHRBbmRJY29uVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfaXNfc2l6ZV96b29tX2NvbnN0YW50JzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pc19zaXplX3pvb21fY29uc3RhbnQpLFxuICAgICd1X2lzX3NpemVfZmVhdHVyZV9jb25zdGFudCc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaXNfc2l6ZV9mZWF0dXJlX2NvbnN0YW50KSxcbiAgICAndV9zaXplX3QnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3NpemVfdCksXG4gICAgJ3Vfc2l6ZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfc2l6ZSksXG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSksXG4gICAgJ3VfcGl0Y2gnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpdGNoKSxcbiAgICAndV9yb3RhdGVfc3ltYm9sJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9yb3RhdGVfc3ltYm9sKSxcbiAgICAndV9hc3BlY3RfcmF0aW8nOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2FzcGVjdF9yYXRpbyksXG4gICAgJ3VfZmFkZV9jaGFuZ2UnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2ZhZGVfY2hhbmdlKSxcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3VfbGFiZWxfcGxhbmVfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9sYWJlbF9wbGFuZV9tYXRyaXgpLFxuICAgICd1X2Nvb3JkX21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfY29vcmRfbWF0cml4KSxcbiAgICAndV9pc190ZXh0JzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pc190ZXh0KSxcbiAgICAndV9waXRjaF93aXRoX21hcCc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfcGl0Y2hfd2l0aF9tYXApLFxuICAgICd1X3RleHNpemUnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleHNpemUpLFxuICAgICd1X3RleHNpemVfaWNvbic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdGV4c2l6ZV9pY29uKSxcbiAgICAndV90ZXh0dXJlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV90ZXh0dXJlKSxcbiAgICAndV90ZXh0dXJlX2ljb24nOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleHR1cmVfaWNvbiksXG4gICAgJ3VfZ2FtbWFfc2NhbGUnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2dhbW1hX3NjYWxlKSxcbiAgICAndV9kZXZpY2VfcGl4ZWxfcmF0aW8nOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2RldmljZV9waXhlbF9yYXRpbyksXG4gICAgJ3VfaXNfaGFsbyc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaXNfaGFsbylcbn0pO1xuXG5jb25zdCBzeW1ib2xJY29uVW5pZm9ybVZhbHVlcyA9IChcbiAgICBmdW5jdGlvblR5cGU6IHN0cmluZyxcbiAgICBzaXplOiA/e3VTaXplVDogbnVtYmVyLCB1U2l6ZTogbnVtYmVyfSxcbiAgICByb3RhdGVJblNoYWRlcjogYm9vbGVhbixcbiAgICBwaXRjaFdpdGhNYXA6IGJvb2xlYW4sXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBsYWJlbFBsYW5lTWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgZ2xDb29yZE1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIGlzVGV4dDogYm9vbGVhbixcbiAgICB0ZXhTaXplOiBbbnVtYmVyLCBudW1iZXJdXG4pOiBVbmlmb3JtVmFsdWVzPFN5bWJvbEljb25Vbmlmb3Jtc1R5cGU+ID0+IHtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBwYWludGVyLnRyYW5zZm9ybTtcblxuICAgIHJldHVybiB7XG4gICAgICAgICd1X2lzX3NpemVfem9vbV9jb25zdGFudCc6ICsoZnVuY3Rpb25UeXBlID09PSAnY29uc3RhbnQnIHx8IGZ1bmN0aW9uVHlwZSA9PT0gJ3NvdXJjZScpLFxuICAgICAgICAndV9pc19zaXplX2ZlYXR1cmVfY29uc3RhbnQnOiArKGZ1bmN0aW9uVHlwZSA9PT0gJ2NvbnN0YW50JyB8fCBmdW5jdGlvblR5cGUgPT09ICdjYW1lcmEnKSxcbiAgICAgICAgJ3Vfc2l6ZV90Jzogc2l6ZSA/IHNpemUudVNpemVUIDogMCxcbiAgICAgICAgJ3Vfc2l6ZSc6IHNpemUgPyBzaXplLnVTaXplIDogMCxcbiAgICAgICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IHRyYW5zZm9ybS5jYW1lcmFUb0NlbnRlckRpc3RhbmNlLFxuICAgICAgICAndV9waXRjaCc6IHRyYW5zZm9ybS5waXRjaCAvIDM2MCAqIDIgKiBNYXRoLlBJLFxuICAgICAgICAndV9yb3RhdGVfc3ltYm9sJzogK3JvdGF0ZUluU2hhZGVyLFxuICAgICAgICAndV9hc3BlY3RfcmF0aW8nOiB0cmFuc2Zvcm0ud2lkdGggLyB0cmFuc2Zvcm0uaGVpZ2h0LFxuICAgICAgICAndV9mYWRlX2NoYW5nZSc6IHBhaW50ZXIub3B0aW9ucy5mYWRlRHVyYXRpb24gPyBwYWludGVyLnN5bWJvbEZhZGVDaGFuZ2UgOiAxLFxuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X2xhYmVsX3BsYW5lX21hdHJpeCc6IGxhYmVsUGxhbmVNYXRyaXgsXG4gICAgICAgICd1X2Nvb3JkX21hdHJpeCc6IGdsQ29vcmRNYXRyaXgsXG4gICAgICAgICd1X2lzX3RleHQnOiAraXNUZXh0LFxuICAgICAgICAndV9waXRjaF93aXRoX21hcCc6ICtwaXRjaFdpdGhNYXAsXG4gICAgICAgICd1X3RleHNpemUnOiB0ZXhTaXplLFxuICAgICAgICAndV90ZXh0dXJlJzogMFxuICAgIH07XG59O1xuXG5jb25zdCBzeW1ib2xTREZVbmlmb3JtVmFsdWVzID0gKFxuICAgIGZ1bmN0aW9uVHlwZTogc3RyaW5nLFxuICAgIHNpemU6ID97dVNpemVUOiBudW1iZXIsIHVTaXplOiBudW1iZXJ9LFxuICAgIHJvdGF0ZUluU2hhZGVyOiBib29sZWFuLFxuICAgIHBpdGNoV2l0aE1hcDogYm9vbGVhbixcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIG1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIGxhYmVsUGxhbmVNYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBnbENvb3JkTWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgaXNUZXh0OiBib29sZWFuLFxuICAgIHRleFNpemU6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgaXNIYWxvOiBib29sZWFuXG4pOiBVbmlmb3JtVmFsdWVzPFN5bWJvbFNERlVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHBhaW50ZXIudHJhbnNmb3JtO1xuXG4gICAgcmV0dXJuIGV4dGVuZChzeW1ib2xJY29uVW5pZm9ybVZhbHVlcyhmdW5jdGlvblR5cGUsIHNpemUsXG4gICAgICAgIHJvdGF0ZUluU2hhZGVyLCBwaXRjaFdpdGhNYXAsIHBhaW50ZXIsIG1hdHJpeCwgbGFiZWxQbGFuZU1hdHJpeCxcbiAgICAgICAgZ2xDb29yZE1hdHJpeCwgaXNUZXh0LCB0ZXhTaXplKSwge1xuICAgICAgICAndV9nYW1tYV9zY2FsZSc6IChwaXRjaFdpdGhNYXAgPyBNYXRoLmNvcyh0cmFuc2Zvcm0uX3BpdGNoKSAqIHRyYW5zZm9ybS5jYW1lcmFUb0NlbnRlckRpc3RhbmNlIDogMSksXG4gICAgICAgICd1X2RldmljZV9waXhlbF9yYXRpbyc6IGJyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICAgICAgJ3VfaXNfaGFsbyc6ICtpc0hhbG9cbiAgICB9KTtcbn07XG5cbmNvbnN0IHN5bWJvbFRleHRBbmRJY29uVW5pZm9ybVZhbHVlcyA9IChcbiAgICBmdW5jdGlvblR5cGU6IHN0cmluZyxcbiAgICBzaXplOiA/e3VTaXplVDogbnVtYmVyLCB1U2l6ZTogbnVtYmVyfSxcbiAgICByb3RhdGVJblNoYWRlcjogYm9vbGVhbixcbiAgICBwaXRjaFdpdGhNYXA6IGJvb2xlYW4sXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBsYWJlbFBsYW5lTWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgZ2xDb29yZE1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIHRleFNpemVTREY6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgdGV4U2l6ZUljb246IFtudW1iZXIsIG51bWJlcl1cbik6IFVuaWZvcm1WYWx1ZXM8U3ltYm9sSWNvblVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIHJldHVybiBleHRlbmQoc3ltYm9sU0RGVW5pZm9ybVZhbHVlcyhmdW5jdGlvblR5cGUsIHNpemUsXG4gICAgICAgIHJvdGF0ZUluU2hhZGVyLCBwaXRjaFdpdGhNYXAsIHBhaW50ZXIsIG1hdHJpeCwgbGFiZWxQbGFuZU1hdHJpeCxcbiAgICAgICAgZ2xDb29yZE1hdHJpeCwgdHJ1ZSwgdGV4U2l6ZVNERiwgdHJ1ZSksIHtcbiAgICAgICAgJ3VfdGV4c2l6ZV9pY29uJzogdGV4U2l6ZUljb24sXG4gICAgICAgICd1X3RleHR1cmVfaWNvbic6IDFcbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7c3ltYm9sSWNvblVuaWZvcm1zLCBzeW1ib2xTREZVbmlmb3Jtcywgc3ltYm9sSWNvblVuaWZvcm1WYWx1ZXMsIHN5bWJvbFNERlVuaWZvcm1WYWx1ZXMsIHN5bWJvbFRleHRBbmRJY29uVW5pZm9ybVZhbHVlcywgc3ltYm9sVGV4dEFuZEljb25Vbmlmb3Jtc307XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcbmltcG9ydCB0eXBlIFN5bWJvbEJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi4vZ2wvZGVwdGhfbW9kZSc7XG5pbXBvcnQgU3RlbmNpbE1vZGUgZnJvbSAnLi4vZ2wvc3RlbmNpbF9tb2RlJztcbmltcG9ydCBDdWxsRmFjZU1vZGUgZnJvbSAnLi4vZ2wvY3VsbF9mYWNlX21vZGUnO1xuaW1wb3J0IHtjb2xsaXNpb25Vbmlmb3JtVmFsdWVzLCBjb2xsaXNpb25DaXJjbGVVbmlmb3JtVmFsdWVzfSBmcm9tICcuL3Byb2dyYW0vY29sbGlzaW9uX3Byb2dyYW0nO1xuXG5pbXBvcnQge1F1YWRUcmlhbmdsZUFycmF5LCBDb2xsaXNpb25DaXJjbGVMYXlvdXRBcnJheX0gZnJvbSAnLi4vZGF0YS9hcnJheV90eXBlcyc7XG5pbXBvcnQge2NvbGxpc2lvbkNpcmNsZUxheW91dH0gZnJvbSAnLi4vZGF0YS9idWNrZXQvc3ltYm9sX2F0dHJpYnV0ZXMnO1xuaW1wb3J0IFNlZ21lbnRWZWN0b3IgZnJvbSAnLi4vZGF0YS9zZWdtZW50JztcbmltcG9ydCB7bWF0NH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCBWZXJ0ZXhCdWZmZXIgZnJvbSAnLi4vZ2wvdmVydGV4X2J1ZmZlcic7XG5pbXBvcnQgSW5kZXhCdWZmZXIgZnJvbSAnLi4vZ2wvaW5kZXhfYnVmZmVyJztcblxuZXhwb3J0IGRlZmF1bHQgZHJhd0NvbGxpc2lvbkRlYnVnO1xuXG50eXBlIFRpbGVCYXRjaCA9IHtcbiAgICBjaXJjbGVBcnJheTogQXJyYXk8bnVtYmVyPixcbiAgICBjaXJjbGVPZmZzZXQ6IG51bWJlcixcbiAgICB0cmFuc2Zvcm06IG1hdDQsXG4gICAgaW52VHJhbnNmb3JtOiBtYXQ0XG59O1xuXG5sZXQgcXVhZFRyaWFuZ2xlczogP1F1YWRUcmlhbmdsZUFycmF5O1xuXG5mdW5jdGlvbiBkcmF3Q29sbGlzaW9uRGVidWcocGFpbnRlcjogUGFpbnRlciwgc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBsYXllcjogU3R5bGVMYXllciwgY29vcmRzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPiwgdHJhbnNsYXRlOiBbbnVtYmVyLCBudW1iZXJdLCB0cmFuc2xhdGVBbmNob3I6ICdtYXAnIHwgJ3ZpZXdwb3J0JywgaXNUZXh0OiBib29sZWFuKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHBhaW50ZXIudXNlUHJvZ3JhbSgnY29sbGlzaW9uQm94Jyk7XG4gICAgY29uc3QgdGlsZUJhdGNoZXM6IEFycmF5PFRpbGVCYXRjaD4gPSBbXTtcbiAgICBsZXQgY2lyY2xlQ291bnQgPSAwO1xuICAgIGxldCBjaXJjbGVPZmZzZXQgPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY29vcmQgPSBjb29yZHNbaV07XG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgYnVja2V0OiA/U3ltYm9sQnVja2V0ID0gKHRpbGUuZ2V0QnVja2V0KGxheWVyKTogYW55KTtcbiAgICAgICAgaWYgKCFidWNrZXQpIGNvbnRpbnVlO1xuICAgICAgICBsZXQgcG9zTWF0cml4ID0gY29vcmQucG9zTWF0cml4O1xuICAgICAgICBpZiAodHJhbnNsYXRlWzBdICE9PSAwIHx8IHRyYW5zbGF0ZVsxXSAhPT0gMCkge1xuICAgICAgICAgICAgcG9zTWF0cml4ID0gcGFpbnRlci50cmFuc2xhdGVQb3NNYXRyaXgoY29vcmQucG9zTWF0cml4LCB0aWxlLCB0cmFuc2xhdGUsIHRyYW5zbGF0ZUFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVmZmVycyA9IGlzVGV4dCA/IGJ1Y2tldC50ZXh0Q29sbGlzaW9uQm94IDogYnVja2V0Lmljb25Db2xsaXNpb25Cb3g7XG4gICAgICAgIC8vIEdldCBjb2xsaXNpb24gY2lyY2xlIGRhdGEgb2YgdGhpcyBidWNrZXRcbiAgICAgICAgY29uc3QgY2lyY2xlQXJyYXk6IEFycmF5PG51bWJlcj4gPSBidWNrZXQuY29sbGlzaW9uQ2lyY2xlQXJyYXk7XG4gICAgICAgIGlmIChjaXJjbGVBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGtub3cgdGhlIHByb2plY3Rpb24gbWF0cml4IHRoYXQgd2FzIHVzZWQgZm9yIHByb2plY3RpbmcgY29sbGlzaW9uIGNpcmNsZXMgdG8gdGhlIHNjcmVlbi5cbiAgICAgICAgICAgIC8vIFRoaXMgbWlnaHQgdmFyeSBiZXR3ZWVuIGJ1Y2tldHMgYXMgdGhlIHN5bWJvbCBwbGFjZW1lbnQgaXMgYSBjb250aW5vdXMgcHJvY2Vzcy4gVGhpcyBtYXRyaXggaXNcbiAgICAgICAgICAgIC8vIHJlcXVpcmVkIGZvciB0cmFuc2Zvcm1pbmcgcG9pbnRzIGZyb20gcHJldmlvdXMgc2NyZWVuIHNwYWNlIHRvIHRoZSBjdXJyZW50IG9uZVxuICAgICAgICAgICAgY29uc3QgaW52VHJhbnNmb3JtID0gbWF0NC5jcmVhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHBvc01hdHJpeDtcblxuICAgICAgICAgICAgbWF0NC5tdWwoaW52VHJhbnNmb3JtLCBidWNrZXQucGxhY2VtZW50SW52UHJvak1hdHJpeCwgcGFpbnRlci50cmFuc2Zvcm0uZ2xDb29yZE1hdHJpeCk7XG4gICAgICAgICAgICBtYXQ0Lm11bChpbnZUcmFuc2Zvcm0sIGludlRyYW5zZm9ybSwgYnVja2V0LnBsYWNlbWVudFZpZXdwb3J0TWF0cml4KTtcblxuICAgICAgICAgICAgdGlsZUJhdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgY2lyY2xlQXJyYXksXG4gICAgICAgICAgICAgICAgY2lyY2xlT2Zmc2V0LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICBpbnZUcmFuc2Zvcm1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjaXJjbGVDb3VudCArPSBjaXJjbGVBcnJheS5sZW5ndGggLyA0OyAgLy8gNCB2YWx1ZXMgcGVyIGNpcmNsZVxuICAgICAgICAgICAgY2lyY2xlT2Zmc2V0ID0gY2lyY2xlQ291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFidWZmZXJzKSBjb250aW51ZTtcbiAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLkxJTkVTLFxuICAgICAgICAgICAgRGVwdGhNb2RlLmRpc2FibGVkLCBTdGVuY2lsTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgICAgIHBhaW50ZXIuY29sb3JNb2RlRm9yUmVuZGVyUGFzcygpLFxuICAgICAgICAgICAgQ3VsbEZhY2VNb2RlLmRpc2FibGVkLFxuICAgICAgICAgICAgY29sbGlzaW9uVW5pZm9ybVZhbHVlcyhcbiAgICAgICAgICAgICAgICBwb3NNYXRyaXgsXG4gICAgICAgICAgICAgICAgcGFpbnRlci50cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgdGlsZSksXG4gICAgICAgICAgICBsYXllci5pZCwgYnVmZmVycy5sYXlvdXRWZXJ0ZXhCdWZmZXIsIGJ1ZmZlcnMuaW5kZXhCdWZmZXIsXG4gICAgICAgICAgICBidWZmZXJzLnNlZ21lbnRzLCBudWxsLCBwYWludGVyLnRyYW5zZm9ybS56b29tLCBudWxsLCBudWxsLFxuICAgICAgICAgICAgYnVmZmVycy5jb2xsaXNpb25WZXJ0ZXhCdWZmZXIpO1xuICAgIH1cblxuICAgIGlmICghaXNUZXh0IHx8ICF0aWxlQmF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlbmRlciBjb2xsaXNpb24gY2lyY2xlc1xuICAgIGNvbnN0IGNpcmNsZVByb2dyYW0gPSBwYWludGVyLnVzZVByb2dyYW0oJ2NvbGxpc2lvbkNpcmNsZScpO1xuXG4gICAgLy8gQ29uc3RydWN0IHZlcnRleCBkYXRhXG4gICAgY29uc3QgdmVydGV4RGF0YSA9IG5ldyBDb2xsaXNpb25DaXJjbGVMYXlvdXRBcnJheSgpO1xuICAgIHZlcnRleERhdGEucmVzaXplKGNpcmNsZUNvdW50ICogNCk7XG4gICAgdmVydGV4RGF0YS5fdHJpbSgpO1xuXG4gICAgbGV0IHZlcnRleE9mZnNldCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IGJhdGNoIG9mIHRpbGVCYXRjaGVzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmF0Y2guY2lyY2xlQXJyYXkubGVuZ3RoIC8gNDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaXJjbGVJZHggPSBpICogNDtcbiAgICAgICAgICAgIGNvbnN0IHggPSBiYXRjaC5jaXJjbGVBcnJheVtjaXJjbGVJZHggKyAwXTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBiYXRjaC5jaXJjbGVBcnJheVtjaXJjbGVJZHggKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IHJhZGl1cyA9IGJhdGNoLmNpcmNsZUFycmF5W2NpcmNsZUlkeCArIDJdO1xuICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uID0gYmF0Y2guY2lyY2xlQXJyYXlbY2lyY2xlSWR4ICsgM107XG5cbiAgICAgICAgICAgIC8vIDQgZmxvYXRzIHBlciB2ZXJ0ZXgsIDQgdmVydGljZXMgcGVyIHF1YWRcbiAgICAgICAgICAgIHZlcnRleERhdGEuZW1wbGFjZSh2ZXJ0ZXhPZmZzZXQrKywgeCwgeSwgcmFkaXVzLCBjb2xsaXNpb24sIDApO1xuICAgICAgICAgICAgdmVydGV4RGF0YS5lbXBsYWNlKHZlcnRleE9mZnNldCsrLCB4LCB5LCByYWRpdXMsIGNvbGxpc2lvbiwgMSk7XG4gICAgICAgICAgICB2ZXJ0ZXhEYXRhLmVtcGxhY2UodmVydGV4T2Zmc2V0KyssIHgsIHksIHJhZGl1cywgY29sbGlzaW9uLCAyKTtcbiAgICAgICAgICAgIHZlcnRleERhdGEuZW1wbGFjZSh2ZXJ0ZXhPZmZzZXQrKywgeCwgeSwgcmFkaXVzLCBjb2xsaXNpb24sIDMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghcXVhZFRyaWFuZ2xlcyB8fCBxdWFkVHJpYW5nbGVzLmxlbmd0aCA8IGNpcmNsZUNvdW50ICogMikge1xuICAgICAgICBxdWFkVHJpYW5nbGVzID0gY3JlYXRlUXVhZFRyaWFuZ2xlcyhjaXJjbGVDb3VudCk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXhCdWZmZXI6IEluZGV4QnVmZmVyID0gY29udGV4dC5jcmVhdGVJbmRleEJ1ZmZlcihxdWFkVHJpYW5nbGVzLCB0cnVlKTtcbiAgICBjb25zdCB2ZXJ0ZXhCdWZmZXI6IFZlcnRleEJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlVmVydGV4QnVmZmVyKHZlcnRleERhdGEsIGNvbGxpc2lvbkNpcmNsZUxheW91dC5tZW1iZXJzLCB0cnVlKTtcblxuICAgIC8vIFJlbmRlciBiYXRjaGVzXG4gICAgZm9yIChjb25zdCBiYXRjaCBvZiB0aWxlQmF0Y2hlcykge1xuICAgICAgICBjb25zdCB1bmlmb3JtcyA9IGNvbGxpc2lvbkNpcmNsZVVuaWZvcm1WYWx1ZXMoXG4gICAgICAgICAgICBiYXRjaC50cmFuc2Zvcm0sXG4gICAgICAgICAgICBiYXRjaC5pbnZUcmFuc2Zvcm0sXG4gICAgICAgICAgICBwYWludGVyLnRyYW5zZm9ybVxuICAgICAgICApO1xuXG4gICAgICAgIGNpcmNsZVByb2dyYW0uZHJhdyhcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICBnbC5UUklBTkdMRVMsXG4gICAgICAgICAgICBEZXB0aE1vZGUuZGlzYWJsZWQsXG4gICAgICAgICAgICBTdGVuY2lsTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgICAgIHBhaW50ZXIuY29sb3JNb2RlRm9yUmVuZGVyUGFzcygpLFxuICAgICAgICAgICAgQ3VsbEZhY2VNb2RlLmRpc2FibGVkLFxuICAgICAgICAgICAgdW5pZm9ybXMsXG4gICAgICAgICAgICBsYXllci5pZCxcbiAgICAgICAgICAgIHZlcnRleEJ1ZmZlcixcbiAgICAgICAgICAgIGluZGV4QnVmZmVyLFxuICAgICAgICAgICAgU2VnbWVudFZlY3Rvci5zaW1wbGVTZWdtZW50KDAsIGJhdGNoLmNpcmNsZU9mZnNldCAqIDIsIGJhdGNoLmNpcmNsZUFycmF5Lmxlbmd0aCwgYmF0Y2guY2lyY2xlQXJyYXkubGVuZ3RoIC8gMiksXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcGFpbnRlci50cmFuc2Zvcm0uem9vbSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbnVsbCk7XG4gICAgfVxuXG4gICAgdmVydGV4QnVmZmVyLmRlc3Ryb3koKTtcbiAgICBpbmRleEJ1ZmZlci5kZXN0cm95KCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVF1YWRUcmlhbmdsZXMocXVhZENvdW50OiBudW1iZXIpOiBRdWFkVHJpYW5nbGVBcnJheSB7XG4gICAgY29uc3QgdHJpQ291bnQgPSBxdWFkQ291bnQgKiAyO1xuICAgIGNvbnN0IGFycmF5ID0gbmV3IFF1YWRUcmlhbmdsZUFycmF5KCk7XG5cbiAgICBhcnJheS5yZXNpemUodHJpQ291bnQpO1xuICAgIGFycmF5Ll90cmltKCk7XG5cbiAgICAvLyBUd28gdHJpYW5nbGVzIGFuZCA0IHZlcnRpY2VzIHBlciBxdWFkLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpQ291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBpZHggPSBpICogNjtcblxuICAgICAgICBhcnJheS51aW50MTZbaWR4ICsgMF0gPSBpICogNCArIDA7XG4gICAgICAgIGFycmF5LnVpbnQxNltpZHggKyAxXSA9IGkgKiA0ICsgMTtcbiAgICAgICAgYXJyYXkudWludDE2W2lkeCArIDJdID0gaSAqIDQgKyAyO1xuICAgICAgICBhcnJheS51aW50MTZbaWR4ICsgM10gPSBpICogNCArIDI7XG4gICAgICAgIGFycmF5LnVpbnQxNltpZHggKyA0XSA9IGkgKiA0ICsgMztcbiAgICAgICAgYXJyYXkudWludDE2W2lkeCArIDVdID0gaSAqIDQgKyAwO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7YmdQYXR0ZXJuVW5pZm9ybVZhbHVlc30gZnJvbSAnLi9wYXR0ZXJuJztcbmltcG9ydCB7XG4gICAgVW5pZm9ybTFpLFxuICAgIFVuaWZvcm0xZixcbiAgICBVbmlmb3JtMmYsXG4gICAgVW5pZm9ybUNvbG9yLFxuICAgIFVuaWZvcm1NYXRyaXg0ZlxufSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHtleHRlbmR9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybVZhbHVlcywgVW5pZm9ybUxvY2F0aW9uc30gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSBDb2xvciBmcm9tICcuLi8uLi9zdHlsZS1zcGVjL3V0aWwvY29sb3InO1xuaW1wb3J0IHR5cGUge0Nyb3NzRmFkZWR9IGZyb20gJy4uLy4uL3N0eWxlL3Byb3BlcnRpZXMnO1xuaW1wb3J0IHR5cGUge0Nyb3NzZmFkZVBhcmFtZXRlcnN9IGZyb20gJy4uLy4uL3N0eWxlL2V2YWx1YXRpb25fcGFyYW1ldGVycyc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vLi4vc291cmNlL3RpbGVfaWQnO1xuaW1wb3J0IHR5cGUgUmVzb2x2ZWRJbWFnZSBmcm9tICcuLi8uLi9zdHlsZS1zcGVjL2V4cHJlc3Npb24vdHlwZXMvcmVzb2x2ZWRfaW1hZ2UnO1xuXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3Vfb3BhY2l0eSc6IFVuaWZvcm0xZixcbiAgICAndV9jb2xvcic6IFVuaWZvcm1Db2xvclxufH07XG5cbmV4cG9ydCB0eXBlIEJhY2tncm91bmRQYXR0ZXJuVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3Vfb3BhY2l0eSc6IFVuaWZvcm0xZixcbiAgICAvLyBwYXR0ZXJuIHVuaWZvcm1zOlxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X3BhdHRlcm5fdGxfYSc6IFVuaWZvcm0yZixcbiAgICAndV9wYXR0ZXJuX2JyX2EnOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGF0dGVybl90bF9iJzogVW5pZm9ybTJmLFxuICAgICd1X3BhdHRlcm5fYnJfYic6IFVuaWZvcm0yZixcbiAgICAndV90ZXhzaXplJzogVW5pZm9ybTJmLFxuICAgICd1X21peCc6IFVuaWZvcm0xZixcbiAgICAndV9wYXR0ZXJuX3NpemVfYSc6IFVuaWZvcm0yZixcbiAgICAndV9wYXR0ZXJuX3NpemVfYic6IFVuaWZvcm0yZixcbiAgICAndV9zY2FsZV9hJzogVW5pZm9ybTFmLFxuICAgICd1X3NjYWxlX2InOiBVbmlmb3JtMWYsXG4gICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBVbmlmb3JtMmYsXG4gICAgJ3VfdGlsZV91bml0c190b19waXhlbHMnOiBVbmlmb3JtMWZcbnx9O1xuXG5jb25zdCBiYWNrZ3JvdW5kVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogQmFja2dyb3VuZFVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9vcGFjaXR5JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9vcGFjaXR5KSxcbiAgICAndV9jb2xvcic6IG5ldyBVbmlmb3JtQ29sb3IoY29udGV4dCwgbG9jYXRpb25zLnVfY29sb3IpXG59KTtcblxuY29uc3QgYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBCYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9vcGFjaXR5JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9vcGFjaXR5KSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X3BhdHRlcm5fdGxfYSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGF0dGVybl90bF9hKSxcbiAgICAndV9wYXR0ZXJuX2JyX2EnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BhdHRlcm5fYnJfYSksXG4gICAgJ3VfcGF0dGVybl90bF9iJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9wYXR0ZXJuX3RsX2IpLFxuICAgICd1X3BhdHRlcm5fYnJfYic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGF0dGVybl9icl9iKSxcbiAgICAndV90ZXhzaXplJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV90ZXhzaXplKSxcbiAgICAndV9taXgnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X21peCksXG4gICAgJ3VfcGF0dGVybl9zaXplX2EnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BhdHRlcm5fc2l6ZV9hKSxcbiAgICAndV9wYXR0ZXJuX3NpemVfYic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGF0dGVybl9zaXplX2IpLFxuICAgICd1X3NjYWxlX2EnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3NjYWxlX2EpLFxuICAgICd1X3NjYWxlX2InOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3NjYWxlX2IpLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXhlbF9jb29yZF91cHBlciksXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpeGVsX2Nvb3JkX2xvd2VyKSxcbiAgICAndV90aWxlX3VuaXRzX3RvX3BpeGVscyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfdGlsZV91bml0c190b19waXhlbHMpXG59KTtcblxuY29uc3QgYmFja2dyb3VuZFVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgb3BhY2l0eTogbnVtYmVyLFxuICAgIGNvbG9yOiBDb2xvclxuKTogVW5pZm9ybVZhbHVlczxCYWNrZ3JvdW5kVW5pZm9ybXNUeXBlPiA9PiAoe1xuICAgICd1X21hdHJpeCc6IG1hdHJpeCxcbiAgICAndV9vcGFjaXR5Jzogb3BhY2l0eSxcbiAgICAndV9jb2xvcic6IGNvbG9yXG59KTtcblxuY29uc3QgYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtVmFsdWVzID0gKFxuICAgIG1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIGltYWdlOiBDcm9zc0ZhZGVkPFJlc29sdmVkSW1hZ2U+LFxuICAgIHRpbGU6IHt0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQsIHRpbGVTaXplOiBudW1iZXJ9LFxuICAgIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVyc1xuKTogVW5pZm9ybVZhbHVlczxCYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1zVHlwZT4gPT4gZXh0ZW5kKFxuICAgIGJnUGF0dGVyblVuaWZvcm1WYWx1ZXMoaW1hZ2UsIGNyb3NzZmFkZSwgcGFpbnRlciwgdGlsZSksXG4gICAge1xuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X29wYWNpdHknOiBvcGFjaXR5XG4gICAgfVxuKTtcblxuZXhwb3J0IHtcbiAgICBiYWNrZ3JvdW5kVW5pZm9ybXMsXG4gICAgYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtcyxcbiAgICBiYWNrZ3JvdW5kVW5pZm9ybVZhbHVlcyxcbiAgICBiYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1WYWx1ZXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge2ZpbGxFeHRydXNpb25Vbmlmb3JtcywgZmlsbEV4dHJ1c2lvblBhdHRlcm5Vbmlmb3Jtc30gZnJvbSAnLi9maWxsX2V4dHJ1c2lvbl9wcm9ncmFtJztcbmltcG9ydCB7ZmlsbFVuaWZvcm1zLCBmaWxsUGF0dGVyblVuaWZvcm1zLCBmaWxsT3V0bGluZVVuaWZvcm1zLCBmaWxsT3V0bGluZVBhdHRlcm5Vbmlmb3Jtc30gZnJvbSAnLi9maWxsX3Byb2dyYW0nO1xuaW1wb3J0IHtjaXJjbGVVbmlmb3Jtc30gZnJvbSAnLi9jaXJjbGVfcHJvZ3JhbSc7XG5pbXBvcnQge2NvbGxpc2lvblVuaWZvcm1zLCBjb2xsaXNpb25DaXJjbGVVbmlmb3Jtc30gZnJvbSAnLi9jb2xsaXNpb25fcHJvZ3JhbSc7XG5pbXBvcnQge2RlYnVnVW5pZm9ybXN9IGZyb20gJy4vZGVidWdfcHJvZ3JhbSc7XG5pbXBvcnQge2NsaXBwaW5nTWFza1VuaWZvcm1zfSBmcm9tICcuL2NsaXBwaW5nX21hc2tfcHJvZ3JhbSc7XG5pbXBvcnQge2hlYXRtYXBVbmlmb3JtcywgaGVhdG1hcFRleHR1cmVVbmlmb3Jtc30gZnJvbSAnLi9oZWF0bWFwX3Byb2dyYW0nO1xuaW1wb3J0IHtoaWxsc2hhZGVVbmlmb3JtcywgaGlsbHNoYWRlUHJlcGFyZVVuaWZvcm1zfSBmcm9tICcuL2hpbGxzaGFkZV9wcm9ncmFtJztcbmltcG9ydCB7bGluZVVuaWZvcm1zLCBsaW5lR3JhZGllbnRVbmlmb3JtcywgbGluZVBhdHRlcm5Vbmlmb3JtcywgbGluZVNERlVuaWZvcm1zfSBmcm9tICcuL2xpbmVfcHJvZ3JhbSc7XG5pbXBvcnQge3Jhc3RlclVuaWZvcm1zfSBmcm9tICcuL3Jhc3Rlcl9wcm9ncmFtJztcbmltcG9ydCB7c3ltYm9sSWNvblVuaWZvcm1zLCBzeW1ib2xTREZVbmlmb3Jtcywgc3ltYm9sVGV4dEFuZEljb25Vbmlmb3Jtc30gZnJvbSAnLi9zeW1ib2xfcHJvZ3JhbSc7XG5pbXBvcnQge2JhY2tncm91bmRVbmlmb3JtcywgYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3Jtc30gZnJvbSAnLi9iYWNrZ3JvdW5kX3Byb2dyYW0nO1xuXG5leHBvcnQgY29uc3QgcHJvZ3JhbVVuaWZvcm1zID0ge1xuICAgIGZpbGxFeHRydXNpb246IGZpbGxFeHRydXNpb25Vbmlmb3JtcyxcbiAgICBmaWxsRXh0cnVzaW9uUGF0dGVybjogZmlsbEV4dHJ1c2lvblBhdHRlcm5Vbmlmb3JtcyxcbiAgICBmaWxsOiBmaWxsVW5pZm9ybXMsXG4gICAgZmlsbFBhdHRlcm46IGZpbGxQYXR0ZXJuVW5pZm9ybXMsXG4gICAgZmlsbE91dGxpbmU6IGZpbGxPdXRsaW5lVW5pZm9ybXMsXG4gICAgZmlsbE91dGxpbmVQYXR0ZXJuOiBmaWxsT3V0bGluZVBhdHRlcm5Vbmlmb3JtcyxcbiAgICBjaXJjbGU6IGNpcmNsZVVuaWZvcm1zLFxuICAgIGNvbGxpc2lvbkJveDogY29sbGlzaW9uVW5pZm9ybXMsXG4gICAgY29sbGlzaW9uQ2lyY2xlOiBjb2xsaXNpb25DaXJjbGVVbmlmb3JtcyxcbiAgICBkZWJ1ZzogZGVidWdVbmlmb3JtcyxcbiAgICBjbGlwcGluZ01hc2s6IGNsaXBwaW5nTWFza1VuaWZvcm1zLFxuICAgIGhlYXRtYXA6IGhlYXRtYXBVbmlmb3JtcyxcbiAgICBoZWF0bWFwVGV4dHVyZTogaGVhdG1hcFRleHR1cmVVbmlmb3JtcyxcbiAgICBoaWxsc2hhZGU6IGhpbGxzaGFkZVVuaWZvcm1zLFxuICAgIGhpbGxzaGFkZVByZXBhcmU6IGhpbGxzaGFkZVByZXBhcmVVbmlmb3JtcyxcbiAgICBsaW5lOiBsaW5lVW5pZm9ybXMsXG4gICAgbGluZUdyYWRpZW50OiBsaW5lR3JhZGllbnRVbmlmb3JtcyxcbiAgICBsaW5lUGF0dGVybjogbGluZVBhdHRlcm5Vbmlmb3JtcyxcbiAgICBsaW5lU0RGOiBsaW5lU0RGVW5pZm9ybXMsXG4gICAgcmFzdGVyOiByYXN0ZXJVbmlmb3JtcyxcbiAgICBzeW1ib2xJY29uOiBzeW1ib2xJY29uVW5pZm9ybXMsXG4gICAgc3ltYm9sU0RGOiBzeW1ib2xTREZVbmlmb3JtcyxcbiAgICBzeW1ib2xUZXh0QW5kSWNvbjogc3ltYm9sVGV4dEFuZEljb25Vbmlmb3JtcyxcbiAgICBiYWNrZ3JvdW5kOiBiYWNrZ3JvdW5kVW5pZm9ybXMsXG4gICAgYmFja2dyb3VuZFBhdHRlcm46IGJhY2tncm91bmRQYXR0ZXJuVW5pZm9ybXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge21hdDR9IGZyb20gJ2dsLW1hdHJpeCc7XG5cbmltcG9ydCB7XG4gICAgVW5pZm9ybTFpLFxuICAgIFVuaWZvcm0xZixcbiAgICBVbmlmb3JtMmYsXG4gICAgVW5pZm9ybUNvbG9yLFxuICAgIFVuaWZvcm1NYXRyaXg0ZixcbiAgICBVbmlmb3JtNGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCBFWFRFTlQgZnJvbSAnLi4vLi4vZGF0YS9leHRlbnQnO1xuaW1wb3J0IE1lcmNhdG9yQ29vcmRpbmF0ZSBmcm9tICcuLi8uLi9nZW8vbWVyY2F0b3JfY29vcmRpbmF0ZSc7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybVZhbHVlcywgVW5pZm9ybUxvY2F0aW9uc30gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi4vLi4vc291cmNlL3RpbGUnO1xuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuLi9wYWludGVyJztcbmltcG9ydCB0eXBlIEhpbGxzaGFkZVN0eWxlTGF5ZXIgZnJvbSAnLi4vLi4vc3R5bGUvc3R5bGVfbGF5ZXIvaGlsbHNoYWRlX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIERFTURhdGEgZnJvbSAnLi4vLi4vZGF0YS9kZW1fZGF0YSc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vLi4vc291cmNlL3RpbGVfaWQnO1xuXG5leHBvcnQgdHlwZSBIaWxsc2hhZGVVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9pbWFnZSc6IFVuaWZvcm0xaSxcbiAgICAndV9sYXRyYW5nZSc6IFVuaWZvcm0yZixcbiAgICAndV9saWdodCc6IFVuaWZvcm0yZixcbiAgICAndV9zaGFkb3cnOiBVbmlmb3JtQ29sb3IsXG4gICAgJ3VfaGlnaGxpZ2h0JzogVW5pZm9ybUNvbG9yLFxuICAgICd1X2FjY2VudCc6IFVuaWZvcm1Db2xvclxufH07XG5cbmV4cG9ydCB0eXBlIEhpbGxzaGFkZVByZXBhcmVVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9pbWFnZSc6IFVuaWZvcm0xaSxcbiAgICAndV9kaW1lbnNpb24nOiBVbmlmb3JtMmYsXG4gICAgJ3Vfem9vbSc6IFVuaWZvcm0xZixcbiAgICAndV91bnBhY2snOiBVbmlmb3JtNGZcbnx9O1xuXG5jb25zdCBoaWxsc2hhZGVVbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBIaWxsc2hhZGVVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3VfaW1hZ2UnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2ltYWdlKSxcbiAgICAndV9sYXRyYW5nZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfbGF0cmFuZ2UpLFxuICAgICd1X2xpZ2h0JzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9saWdodCksXG4gICAgJ3Vfc2hhZG93JzogbmV3IFVuaWZvcm1Db2xvcihjb250ZXh0LCBsb2NhdGlvbnMudV9zaGFkb3cpLFxuICAgICd1X2hpZ2hsaWdodCc6IG5ldyBVbmlmb3JtQ29sb3IoY29udGV4dCwgbG9jYXRpb25zLnVfaGlnaGxpZ2h0KSxcbiAgICAndV9hY2NlbnQnOiBuZXcgVW5pZm9ybUNvbG9yKGNvbnRleHQsIGxvY2F0aW9ucy51X2FjY2VudClcbn0pO1xuXG5jb25zdCBoaWxsc2hhZGVQcmVwYXJlVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogSGlsbHNoYWRlUHJlcGFyZVVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X2RpbWVuc2lvbic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfZGltZW5zaW9uKSxcbiAgICAndV96b29tJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV96b29tKSxcbiAgICAndV91bnBhY2snOiBuZXcgVW5pZm9ybTRmKGNvbnRleHQsIGxvY2F0aW9ucy51X3VucGFjaylcbn0pO1xuXG5jb25zdCBoaWxsc2hhZGVVbmlmb3JtVmFsdWVzID0gKFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgdGlsZTogVGlsZSxcbiAgICBsYXllcjogSGlsbHNoYWRlU3R5bGVMYXllclxuKTogVW5pZm9ybVZhbHVlczxIaWxsc2hhZGVVbmlmb3Jtc1R5cGU+ID0+IHtcbiAgICBjb25zdCBzaGFkb3cgPSBsYXllci5wYWludC5nZXQoXCJoaWxsc2hhZGUtc2hhZG93LWNvbG9yXCIpO1xuICAgIGNvbnN0IGhpZ2hsaWdodCA9IGxheWVyLnBhaW50LmdldChcImhpbGxzaGFkZS1oaWdobGlnaHQtY29sb3JcIik7XG4gICAgY29uc3QgYWNjZW50ID0gbGF5ZXIucGFpbnQuZ2V0KFwiaGlsbHNoYWRlLWFjY2VudC1jb2xvclwiKTtcblxuICAgIGxldCBhemltdXRoYWwgPSBsYXllci5wYWludC5nZXQoJ2hpbGxzaGFkZS1pbGx1bWluYXRpb24tZGlyZWN0aW9uJykgKiAoTWF0aC5QSSAvIDE4MCk7XG4gICAgLy8gbW9kaWZ5IGF6aW11dGhhbCBhbmdsZSBieSBtYXAgcm90YXRpb24gaWYgbGlnaHQgaXMgYW5jaG9yZWQgYXQgdGhlIHZpZXdwb3J0XG4gICAgaWYgKGxheWVyLnBhaW50LmdldCgnaGlsbHNoYWRlLWlsbHVtaW5hdGlvbi1hbmNob3InKSA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgICAgICBhemltdXRoYWwgLT0gcGFpbnRlci50cmFuc2Zvcm0uYW5nbGU7XG4gICAgfVxuICAgIGNvbnN0IGFsaWduID0gIXBhaW50ZXIub3B0aW9ucy5tb3Zpbmc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3VfbWF0cml4JzogcGFpbnRlci50cmFuc2Zvcm0uY2FsY3VsYXRlUG9zTWF0cml4KHRpbGUudGlsZUlELnRvVW53cmFwcGVkKCksIGFsaWduKSxcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAndV9sYXRyYW5nZSc6IGdldFRpbGVMYXRSYW5nZShwYWludGVyLCB0aWxlLnRpbGVJRCksXG4gICAgICAgICd1X2xpZ2h0JzogW2xheWVyLnBhaW50LmdldCgnaGlsbHNoYWRlLWV4YWdnZXJhdGlvbicpLCBhemltdXRoYWxdLFxuICAgICAgICAndV9zaGFkb3cnOiBzaGFkb3csXG4gICAgICAgICd1X2hpZ2hsaWdodCc6IGhpZ2hsaWdodCxcbiAgICAgICAgJ3VfYWNjZW50JzogYWNjZW50XG4gICAgfTtcbn07XG5cbmNvbnN0IGhpbGxzaGFkZVVuaWZvcm1QcmVwYXJlVmFsdWVzID0gKFxuICAgIHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgZGVtOiBERU1EYXRhXG4pOiBVbmlmb3JtVmFsdWVzPEhpbGxzaGFkZVByZXBhcmVVbmlmb3Jtc1R5cGU+ID0+IHtcblxuICAgIGNvbnN0IHN0cmlkZSA9IGRlbS5zdHJpZGU7XG4gICAgY29uc3QgbWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcbiAgICAvLyBGbGlwIHJlbmRlcmluZyBhdCB5IGF4aXMuXG4gICAgbWF0NC5vcnRobyhtYXRyaXgsIDAsIEVYVEVOVCwgLUVYVEVOVCwgMCwgMCwgMSk7XG4gICAgbWF0NC50cmFuc2xhdGUobWF0cml4LCBtYXRyaXgsIFswLCAtRVhURU5ULCAwXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X2ltYWdlJzogMSxcbiAgICAgICAgJ3VfZGltZW5zaW9uJzogW3N0cmlkZSwgc3RyaWRlXSxcbiAgICAgICAgJ3Vfem9vbSc6IHRpbGVJRC5vdmVyc2NhbGVkWixcbiAgICAgICAgJ3VfdW5wYWNrJzogZGVtLmdldFVucGFja1ZlY3RvcigpXG4gICAgfTtcbn07XG5cbmZ1bmN0aW9uIGdldFRpbGVMYXRSYW5nZShwYWludGVyOiBQYWludGVyLCB0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpIHtcbiAgICAvLyBmb3Igc2NhbGluZyB0aGUgbWFnbml0dWRlIG9mIGEgcG9pbnRzIHNsb3BlIGJ5IGl0cyBsYXRpdHVkZVxuICAgIGNvbnN0IHRpbGVzQXRab29tID0gTWF0aC5wb3coMiwgdGlsZUlELmNhbm9uaWNhbC56KTtcbiAgICBjb25zdCB5ID0gdGlsZUlELmNhbm9uaWNhbC55O1xuICAgIHJldHVybiBbXG4gICAgICAgIG5ldyBNZXJjYXRvckNvb3JkaW5hdGUoMCwgeSAvIHRpbGVzQXRab29tKS50b0xuZ0xhdCgpLmxhdCxcbiAgICAgICAgbmV3IE1lcmNhdG9yQ29vcmRpbmF0ZSgwLCAoeSArIDEpIC8gdGlsZXNBdFpvb20pLnRvTG5nTGF0KCkubGF0XTtcbn1cblxuZXhwb3J0IHtcbiAgICBoaWxsc2hhZGVVbmlmb3JtcyxcbiAgICBoaWxsc2hhZGVQcmVwYXJlVW5pZm9ybXMsXG4gICAgaGlsbHNoYWRlVW5pZm9ybVZhbHVlcyxcbiAgICBoaWxsc2hhZGVVbmlmb3JtUHJlcGFyZVZhbHVlc1xufTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCBkcmF3Q29sbGlzaW9uRGVidWcgZnJvbSAnLi9kcmF3X2NvbGxpc2lvbl9kZWJ1Zyc7XG5cbmltcG9ydCBTZWdtZW50VmVjdG9yIGZyb20gJy4uL2RhdGEvc2VnbWVudCc7XG5pbXBvcnQgcGl4ZWxzVG9UaWxlVW5pdHMgZnJvbSAnLi4vc291cmNlL3BpeGVsc190b190aWxlX3VuaXRzJztcbmltcG9ydCAqIGFzIHN5bWJvbFByb2plY3Rpb24gZnJvbSAnLi4vc3ltYm9sL3Byb2plY3Rpb24nO1xuaW1wb3J0ICogYXMgc3ltYm9sU2l6ZSBmcm9tICcuLi9zeW1ib2wvc3ltYm9sX3NpemUnO1xuaW1wb3J0IHttYXQ0fSBmcm9tICdnbC1tYXRyaXgnO1xuY29uc3QgaWRlbnRpdHlNYXQ0ID0gbWF0NC5pZGVudGl0eShuZXcgRmxvYXQzMkFycmF5KDE2KSk7XG5pbXBvcnQgU3RlbmNpbE1vZGUgZnJvbSAnLi4vZ2wvc3RlbmNpbF9tb2RlJztcbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi4vZ2wvZGVwdGhfbW9kZSc7XG5pbXBvcnQgQ3VsbEZhY2VNb2RlIGZyb20gJy4uL2dsL2N1bGxfZmFjZV9tb2RlJztcbmltcG9ydCB7YWRkRHluYW1pY0F0dHJpYnV0ZXN9IGZyb20gJy4uL2RhdGEvYnVja2V0L3N5bWJvbF9idWNrZXQnO1xuXG5pbXBvcnQge2dldEFuY2hvckFsaWdubWVudCwgV3JpdGluZ01vZGV9IGZyb20gJy4uL3N5bWJvbC9zaGFwaW5nJztcbmltcG9ydCBPTkVfRU0gZnJvbSAnLi4vc3ltYm9sL29uZV9lbSc7XG5pbXBvcnQge2V2YWx1YXRlVmFyaWFibGVPZmZzZXR9IGZyb20gJy4uL3N5bWJvbC9zeW1ib2xfbGF5b3V0JztcblxuaW1wb3J0IHtcbiAgICBzeW1ib2xJY29uVW5pZm9ybVZhbHVlcyxcbiAgICBzeW1ib2xTREZVbmlmb3JtVmFsdWVzLFxuICAgIHN5bWJvbFRleHRBbmRJY29uVW5pZm9ybVZhbHVlc1xufSBmcm9tICcuL3Byb2dyYW0vc3ltYm9sX3Byb2dyYW0nO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIFN5bWJvbFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvc3ltYm9sX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIFN5bWJvbEJ1Y2tldCwge1N5bWJvbEJ1ZmZlcnN9IGZyb20gJy4uL2RhdGEvYnVja2V0L3N5bWJvbF9idWNrZXQnO1xuaW1wb3J0IHR5cGUgVGV4dHVyZSBmcm9tICcuLi9yZW5kZXIvdGV4dHVyZSc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vc291cmNlL3RpbGVfaWQnO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXN9IGZyb20gJy4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIHtTeW1ib2xTREZVbmlmb3Jtc1R5cGV9IGZyb20gJy4uL3JlbmRlci9wcm9ncmFtL3N5bWJvbF9wcm9ncmFtJztcbmltcG9ydCB0eXBlIHtDcm9zc1RpbGVJRCwgVmFyaWFibGVPZmZzZXR9IGZyb20gJy4uL3N5bWJvbC9wbGFjZW1lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBkcmF3U3ltYm9scztcblxudHlwZSBTeW1ib2xUaWxlUmVuZGVyU3RhdGUgPSB7XG4gICAgc2VnbWVudHM6IFNlZ21lbnRWZWN0b3IsXG4gICAgc29ydEtleTogbnVtYmVyLFxuICAgIHN0YXRlOiB7XG4gICAgICAgIHByb2dyYW06IGFueSxcbiAgICAgICAgYnVmZmVyczogU3ltYm9sQnVmZmVycyxcbiAgICAgICAgdW5pZm9ybVZhbHVlczogYW55LFxuICAgICAgICBhdGxhc1RleHR1cmU6IFRleHR1cmUsXG4gICAgICAgIGF0bGFzVGV4dHVyZUljb246IFRleHR1cmUgfCBudWxsLFxuICAgICAgICBhdGxhc0ludGVycG9sYXRpb246IGFueSxcbiAgICAgICAgYXRsYXNJbnRlcnBvbGF0aW9uSWNvbjogYW55LFxuICAgICAgICBpc1NERjogYm9vbGVhbixcbiAgICAgICAgaGFzSGFsbzogYm9vbGVhblxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGRyYXdTeW1ib2xzKHBhaW50ZXI6IFBhaW50ZXIsIHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSwgbGF5ZXI6IFN5bWJvbFN0eWxlTGF5ZXIsIGNvb3JkczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4sIHZhcmlhYmxlT2Zmc2V0czoge1tfOiBDcm9zc1RpbGVJRF06IFZhcmlhYmxlT2Zmc2V0fSkge1xuICAgIGlmIChwYWludGVyLnJlbmRlclBhc3MgIT09ICd0cmFuc2x1Y2VudCcpIHJldHVybjtcblxuICAgIC8vIERpc2FibGUgdGhlIHN0ZW5jaWwgdGVzdCBzbyB0aGF0IGxhYmVscyBhcmVuJ3QgY2xpcHBlZCB0byB0aWxlIGJvdW5kYXJpZXMuXG4gICAgY29uc3Qgc3RlbmNpbE1vZGUgPSBTdGVuY2lsTW9kZS5kaXNhYmxlZDtcbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcbiAgICBjb25zdCB2YXJpYWJsZVBsYWNlbWVudCA9IGxheWVyLmxheW91dC5nZXQoJ3RleHQtdmFyaWFibGUtYW5jaG9yJyk7XG5cbiAgICAvL0NvbXB1dGUgdmFyaWFibGUtb2Zmc2V0cyBiZWZvcmUgcGFpbnRpbmcgc2luY2UgaWNvbnMgYW5kIHRleHQgZGF0YSBwb3NpdGlvbmluZ1xuICAgIC8vZGVwZW5kIG9uIGVhY2ggb3RoZXIgaW4gdGhpcyBjYXNlLlxuICAgIGlmICh2YXJpYWJsZVBsYWNlbWVudCkge1xuICAgICAgICB1cGRhdGVWYXJpYWJsZUFuY2hvcnMoY29vcmRzLCBwYWludGVyLCBsYXllciwgc291cmNlQ2FjaGUsXG4gICAgICAgICAgICBsYXllci5sYXlvdXQuZ2V0KCd0ZXh0LXJvdGF0aW9uLWFsaWdubWVudCcpLFxuICAgICAgICAgICAgbGF5ZXIubGF5b3V0LmdldCgndGV4dC1waXRjaC1hbGlnbm1lbnQnKSxcbiAgICAgICAgICAgIHZhcmlhYmxlT2Zmc2V0c1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChsYXllci5wYWludC5nZXQoJ2ljb24tb3BhY2l0eScpLmNvbnN0YW50T3IoMSkgIT09IDApIHtcbiAgICAgICAgZHJhd0xheWVyU3ltYm9scyhwYWludGVyLCBzb3VyY2VDYWNoZSwgbGF5ZXIsIGNvb3JkcywgZmFsc2UsXG4gICAgICAgICAgICBsYXllci5wYWludC5nZXQoJ2ljb24tdHJhbnNsYXRlJyksXG4gICAgICAgICAgICBsYXllci5wYWludC5nZXQoJ2ljb24tdHJhbnNsYXRlLWFuY2hvcicpLFxuICAgICAgICAgICAgbGF5ZXIubGF5b3V0LmdldCgnaWNvbi1yb3RhdGlvbi1hbGlnbm1lbnQnKSxcbiAgICAgICAgICAgIGxheWVyLmxheW91dC5nZXQoJ2ljb24tcGl0Y2gtYWxpZ25tZW50JyksXG4gICAgICAgICAgICBsYXllci5sYXlvdXQuZ2V0KCdpY29uLWtlZXAtdXByaWdodCcpLFxuICAgICAgICAgICAgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChsYXllci5wYWludC5nZXQoJ3RleHQtb3BhY2l0eScpLmNvbnN0YW50T3IoMSkgIT09IDApIHtcbiAgICAgICAgZHJhd0xheWVyU3ltYm9scyhwYWludGVyLCBzb3VyY2VDYWNoZSwgbGF5ZXIsIGNvb3JkcywgdHJ1ZSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgndGV4dC10cmFuc2xhdGUnKSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgndGV4dC10cmFuc2xhdGUtYW5jaG9yJyksXG4gICAgICAgICAgICBsYXllci5sYXlvdXQuZ2V0KCd0ZXh0LXJvdGF0aW9uLWFsaWdubWVudCcpLFxuICAgICAgICAgICAgbGF5ZXIubGF5b3V0LmdldCgndGV4dC1waXRjaC1hbGlnbm1lbnQnKSxcbiAgICAgICAgICAgIGxheWVyLmxheW91dC5nZXQoJ3RleHQta2VlcC11cHJpZ2h0JyksXG4gICAgICAgICAgICBzdGVuY2lsTW9kZSwgY29sb3JNb2RlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZUNhY2hlLm1hcC5zaG93Q29sbGlzaW9uQm94ZXMpIHtcbiAgICAgICAgZHJhd0NvbGxpc2lvbkRlYnVnKHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzLCBsYXllci5wYWludC5nZXQoJ3RleHQtdHJhbnNsYXRlJyksXG4gICAgICAgICAgICBsYXllci5wYWludC5nZXQoJ3RleHQtdHJhbnNsYXRlLWFuY2hvcicpLCB0cnVlKTtcbiAgICAgICAgZHJhd0NvbGxpc2lvbkRlYnVnKHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzLCBsYXllci5wYWludC5nZXQoJ2ljb24tdHJhbnNsYXRlJyksXG4gICAgICAgICAgICBsYXllci5wYWludC5nZXQoJ2ljb24tdHJhbnNsYXRlLWFuY2hvcicpLCBmYWxzZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVWYXJpYWJsZVJlbmRlclNoaWZ0KGFuY2hvciwgd2lkdGgsIGhlaWdodCwgdGV4dE9mZnNldCwgdGV4dEJveFNjYWxlLCByZW5kZXJUZXh0U2l6ZSk6IFBvaW50IHtcbiAgICBjb25zdCB7aG9yaXpvbnRhbEFsaWduLCB2ZXJ0aWNhbEFsaWdufSA9IGdldEFuY2hvckFsaWdubWVudChhbmNob3IpO1xuICAgIGNvbnN0IHNoaWZ0WCA9IC0oaG9yaXpvbnRhbEFsaWduIC0gMC41KSAqIHdpZHRoO1xuICAgIGNvbnN0IHNoaWZ0WSA9IC0odmVydGljYWxBbGlnbiAtIDAuNSkgKiBoZWlnaHQ7XG4gICAgY29uc3QgdmFyaWFibGVPZmZzZXQgPSBldmFsdWF0ZVZhcmlhYmxlT2Zmc2V0KGFuY2hvciwgdGV4dE9mZnNldCk7XG4gICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgICAgKHNoaWZ0WCAvIHRleHRCb3hTY2FsZSArIHZhcmlhYmxlT2Zmc2V0WzBdKSAqIHJlbmRlclRleHRTaXplLFxuICAgICAgICAoc2hpZnRZIC8gdGV4dEJveFNjYWxlICsgdmFyaWFibGVPZmZzZXRbMV0pICogcmVuZGVyVGV4dFNpemVcbiAgICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVWYXJpYWJsZUFuY2hvcnMoY29vcmRzLCBwYWludGVyLCBsYXllciwgc291cmNlQ2FjaGUsIHJvdGF0aW9uQWxpZ25tZW50LCBwaXRjaEFsaWdubWVudCwgdmFyaWFibGVPZmZzZXRzKSB7XG4gICAgY29uc3QgdHIgPSBwYWludGVyLnRyYW5zZm9ybTtcbiAgICBjb25zdCByb3RhdGVXaXRoTWFwID0gcm90YXRpb25BbGlnbm1lbnQgPT09ICdtYXAnO1xuICAgIGNvbnN0IHBpdGNoV2l0aE1hcCA9IHBpdGNoQWxpZ25tZW50ID09PSAnbWFwJztcblxuICAgIGZvciAoY29uc3QgY29vcmQgb2YgY29vcmRzKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgYnVja2V0OiBTeW1ib2xCdWNrZXQgPSAodGlsZS5nZXRCdWNrZXQobGF5ZXIpOiBhbnkpO1xuICAgICAgICBpZiAoIWJ1Y2tldCB8fCAhYnVja2V0LnRleHQgfHwgIWJ1Y2tldC50ZXh0LnNlZ21lbnRzLmdldCgpLmxlbmd0aCkgY29udGludWU7XG5cbiAgICAgICAgY29uc3Qgc2l6ZURhdGEgPSBidWNrZXQudGV4dFNpemVEYXRhO1xuICAgICAgICBjb25zdCBzaXplID0gc3ltYm9sU2l6ZS5ldmFsdWF0ZVNpemVGb3Jab29tKHNpemVEYXRhLCB0ci56b29tKTtcblxuICAgICAgICBjb25zdCBwaXhlbFRvVGlsZVNjYWxlID0gcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgMSwgcGFpbnRlci50cmFuc2Zvcm0uem9vbSk7XG4gICAgICAgIGNvbnN0IGxhYmVsUGxhbmVNYXRyaXggPSBzeW1ib2xQcm9qZWN0aW9uLmdldExhYmVsUGxhbmVNYXRyaXgoY29vcmQucG9zTWF0cml4LCBwaXRjaFdpdGhNYXAsIHJvdGF0ZVdpdGhNYXAsIHBhaW50ZXIudHJhbnNmb3JtLCBwaXhlbFRvVGlsZVNjYWxlKTtcbiAgICAgICAgY29uc3QgdXBkYXRlVGV4dEZpdEljb24gPSBsYXllci5sYXlvdXQuZ2V0KCdpY29uLXRleHQtZml0JykgIT09ICdub25lJyAmJiAgYnVja2V0Lmhhc0ljb25EYXRhKCk7XG5cbiAgICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGVTY2FsZSA9IE1hdGgucG93KDIsIHRyLnpvb20gLSB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWik7XG4gICAgICAgICAgICB1cGRhdGVWYXJpYWJsZUFuY2hvcnNGb3JCdWNrZXQoYnVja2V0LCByb3RhdGVXaXRoTWFwLCBwaXRjaFdpdGhNYXAsIHZhcmlhYmxlT2Zmc2V0cywgc3ltYm9sU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ciwgbGFiZWxQbGFuZU1hdHJpeCwgY29vcmQucG9zTWF0cml4LCB0aWxlU2NhbGUsIHNpemUsIHVwZGF0ZVRleHRGaXRJY29uKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlVmFyaWFibGVBbmNob3JzRm9yQnVja2V0KGJ1Y2tldCwgcm90YXRlV2l0aE1hcCwgcGl0Y2hXaXRoTWFwLCB2YXJpYWJsZU9mZnNldHMsIHN5bWJvbFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLCBsYWJlbFBsYW5lTWF0cml4LCBwb3NNYXRyaXgsIHRpbGVTY2FsZSwgc2l6ZSwgdXBkYXRlVGV4dEZpdEljb24pIHtcbiAgICBjb25zdCBwbGFjZWRTeW1ib2xzID0gYnVja2V0LnRleHQucGxhY2VkU3ltYm9sQXJyYXk7XG4gICAgY29uc3QgZHluYW1pY1RleHRMYXlvdXRWZXJ0ZXhBcnJheSA9IGJ1Y2tldC50ZXh0LmR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheTtcbiAgICBjb25zdCBkeW5hbWljSWNvbkxheW91dFZlcnRleEFycmF5ID0gYnVja2V0Lmljb24uZHluYW1pY0xheW91dFZlcnRleEFycmF5O1xuICAgIGNvbnN0IHBsYWNlZFRleHRTaGlmdHMgPSB7fTtcblxuICAgIGR5bmFtaWNUZXh0TGF5b3V0VmVydGV4QXJyYXkuY2xlYXIoKTtcbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IHBsYWNlZFN5bWJvbHMubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgY29uc3Qgc3ltYm9sOiBhbnkgPSBwbGFjZWRTeW1ib2xzLmdldChzKTtcbiAgICAgICAgY29uc3Qgc2tpcE9yaWVudGF0aW9uID0gYnVja2V0LmFsbG93VmVydGljYWxQbGFjZW1lbnQgJiYgIXN5bWJvbC5wbGFjZWRPcmllbnRhdGlvbjtcbiAgICAgICAgY29uc3QgdmFyaWFibGVPZmZzZXQgPSAoIXN5bWJvbC5oaWRkZW4gJiYgc3ltYm9sLmNyb3NzVGlsZUlEICYmICFza2lwT3JpZW50YXRpb24pID8gdmFyaWFibGVPZmZzZXRzW3N5bWJvbC5jcm9zc1RpbGVJRF0gOiBudWxsO1xuXG4gICAgICAgIGlmICghdmFyaWFibGVPZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIFRoZXNlIHN5bWJvbHMgYXJlIGZyb20gYSBqdXN0aWZpY2F0aW9uIHRoYXQgaXMgbm90IGJlaW5nIHVzZWQsIG9yIGEgbGFiZWwgdGhhdCB3YXNuJ3QgcGxhY2VkXG4gICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGRvIHRoZSBleHRyYSBtYXRoIHRvIGZpZ3VyZSBvdXQgd2hhdCBpbmNyZW1lbnRhbCBzaGlmdCB0byBhcHBseS5cbiAgICAgICAgICAgIHN5bWJvbFByb2plY3Rpb24uaGlkZUdseXBocyhzeW1ib2wubnVtR2x5cGhzLCBkeW5hbWljVGV4dExheW91dFZlcnRleEFycmF5KTtcbiAgICAgICAgfSBlbHNlICB7XG4gICAgICAgICAgICBjb25zdCB0aWxlQW5jaG9yID0gbmV3IFBvaW50KHN5bWJvbC5hbmNob3JYLCBzeW1ib2wuYW5jaG9yWSk7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0ZWRBbmNob3IgPSBzeW1ib2xQcm9qZWN0aW9uLnByb2plY3QodGlsZUFuY2hvciwgcGl0Y2hXaXRoTWFwID8gcG9zTWF0cml4IDogbGFiZWxQbGFuZU1hdHJpeCk7XG4gICAgICAgICAgICBjb25zdCBwZXJzcGVjdGl2ZVJhdGlvID0gc3ltYm9sUHJvamVjdGlvbi5nZXRQZXJzcGVjdGl2ZVJhdGlvKHRyYW5zZm9ybS5jYW1lcmFUb0NlbnRlckRpc3RhbmNlLCBwcm9qZWN0ZWRBbmNob3Iuc2lnbmVkRGlzdGFuY2VGcm9tQ2FtZXJhKTtcbiAgICAgICAgICAgIGxldCByZW5kZXJUZXh0U2l6ZSA9IHN5bWJvbFNpemUuZXZhbHVhdGVTaXplRm9yRmVhdHVyZShidWNrZXQudGV4dFNpemVEYXRhLCBzaXplLCBzeW1ib2wpICogcGVyc3BlY3RpdmVSYXRpbyAvIE9ORV9FTTtcbiAgICAgICAgICAgIGlmIChwaXRjaFdpdGhNYXApIHtcbiAgICAgICAgICAgICAgICAvLyBHbyBmcm9tIHNpemUgaW4gcGl4ZWxzIHRvIGVxdWl2YWxlbnQgc2l6ZSBpbiB0aWxlIHVuaXRzXG4gICAgICAgICAgICAgICAgcmVuZGVyVGV4dFNpemUgKj0gYnVja2V0LnRpbGVQaXhlbFJhdGlvIC8gdGlsZVNjYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7d2lkdGgsIGhlaWdodCwgYW5jaG9yLCB0ZXh0T2Zmc2V0LCB0ZXh0Qm94U2NhbGV9ID0gdmFyaWFibGVPZmZzZXQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gY2FsY3VsYXRlVmFyaWFibGVSZW5kZXJTaGlmdChcbiAgICAgICAgICAgICAgICBhbmNob3IsIHdpZHRoLCBoZWlnaHQsIHRleHRPZmZzZXQsIHRleHRCb3hTY2FsZSwgcmVuZGVyVGV4dFNpemUpO1xuXG4gICAgICAgICAgICAvLyBVc3VhbCBjYXNlIGlzIHRoYXQgd2UgdGFrZSB0aGUgcHJvamVjdGVkIGFuY2hvciBhbmQgYWRkIHRoZSBwaXhlbC1iYXNlZCBzaGlmdFxuICAgICAgICAgICAgLy8gY2FsY3VsYXRlZCBhYm92ZS4gSW4gdGhlIChzb21ld2hhdCB3ZWlyZCkgY2FzZSBvZiBwaXRjaC1hbGlnbmVkIHRleHQsIHdlIGFkZCBhbiBlcXVpdmFsZW50XG4gICAgICAgICAgICAvLyB0aWxlLXVuaXQgYmFzZWQgc2hpZnQgdG8gdGhlIGFuY2hvciBiZWZvcmUgcHJvamVjdGluZyB0byB0aGUgbGFiZWwgcGxhbmUuXG4gICAgICAgICAgICBjb25zdCBzaGlmdGVkQW5jaG9yID0gcGl0Y2hXaXRoTWFwID9cbiAgICAgICAgICAgICAgICBzeW1ib2xQcm9qZWN0aW9uLnByb2plY3QodGlsZUFuY2hvci5hZGQoc2hpZnQpLCBsYWJlbFBsYW5lTWF0cml4KS5wb2ludCA6XG4gICAgICAgICAgICAgICAgcHJvamVjdGVkQW5jaG9yLnBvaW50LmFkZChyb3RhdGVXaXRoTWFwID9cbiAgICAgICAgICAgICAgICAgICAgc2hpZnQucm90YXRlKC10cmFuc2Zvcm0uYW5nbGUpIDpcbiAgICAgICAgICAgICAgICAgICAgc2hpZnQpO1xuXG4gICAgICAgICAgICBjb25zdCBhbmdsZSA9IChidWNrZXQuYWxsb3dWZXJ0aWNhbFBsYWNlbWVudCAmJiBzeW1ib2wucGxhY2VkT3JpZW50YXRpb24gPT09IFdyaXRpbmdNb2RlLnZlcnRpY2FsKSA/IE1hdGguUEkgLyAyIDogMDtcbiAgICAgICAgICAgIGZvciAobGV0IGcgPSAwOyBnIDwgc3ltYm9sLm51bUdseXBoczsgZysrKSB7XG4gICAgICAgICAgICAgICAgYWRkRHluYW1pY0F0dHJpYnV0ZXMoZHluYW1pY1RleHRMYXlvdXRWZXJ0ZXhBcnJheSwgc2hpZnRlZEFuY2hvciwgYW5nbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9Pbmx5IG9mZnNldCBob3Jpem9udGFsIHRleHQgaWNvbnNcbiAgICAgICAgICAgIGlmICh1cGRhdGVUZXh0Rml0SWNvbiAmJiBzeW1ib2wuYXNzb2NpYXRlZEljb25JbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcGxhY2VkVGV4dFNoaWZ0c1tzeW1ib2wuYXNzb2NpYXRlZEljb25JbmRleF0gPSB7c2hpZnRlZEFuY2hvciwgYW5nbGV9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHVwZGF0ZVRleHRGaXRJY29uKSB7XG4gICAgICAgIGR5bmFtaWNJY29uTGF5b3V0VmVydGV4QXJyYXkuY2xlYXIoKTtcbiAgICAgICAgY29uc3QgcGxhY2VkSWNvbnMgPSBidWNrZXQuaWNvbi5wbGFjZWRTeW1ib2xBcnJheTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFjZWRJY29ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGxhY2VkSWNvbiA9IHBsYWNlZEljb25zLmdldChpKTtcbiAgICAgICAgICAgIGlmIChwbGFjZWRJY29uLmhpZGRlbikge1xuICAgICAgICAgICAgICAgIHN5bWJvbFByb2plY3Rpb24uaGlkZUdseXBocyhwbGFjZWRJY29uLm51bUdseXBocywgZHluYW1pY0ljb25MYXlvdXRWZXJ0ZXhBcnJheSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0gcGxhY2VkVGV4dFNoaWZ0c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIXNoaWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbFByb2plY3Rpb24uaGlkZUdseXBocyhwbGFjZWRJY29uLm51bUdseXBocywgZHluYW1pY0ljb25MYXlvdXRWZXJ0ZXhBcnJheSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZyA9IDA7IGcgPCBwbGFjZWRJY29uLm51bUdseXBoczsgZysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGREeW5hbWljQXR0cmlidXRlcyhkeW5hbWljSWNvbkxheW91dFZlcnRleEFycmF5LCBzaGlmdC5zaGlmdGVkQW5jaG9yLCBzaGlmdC5hbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnVja2V0Lmljb24uZHluYW1pY0xheW91dFZlcnRleEJ1ZmZlci51cGRhdGVEYXRhKGR5bmFtaWNJY29uTGF5b3V0VmVydGV4QXJyYXkpO1xuICAgIH1cbiAgICBidWNrZXQudGV4dC5keW5hbWljTGF5b3V0VmVydGV4QnVmZmVyLnVwZGF0ZURhdGEoZHluYW1pY1RleHRMYXlvdXRWZXJ0ZXhBcnJheSk7XG59XG5cbmZ1bmN0aW9uIGdldFN5bWJvbFByb2dyYW1OYW1lKGlzU0RGOiBib29sZWFuLCBpc1RleHQ6IGJvb2xlYW4sIGJ1Y2tldDogU3ltYm9sQnVja2V0KSB7XG4gICAgaWYgKGJ1Y2tldC5pY29uc0luVGV4dCAmJiBpc1RleHQpIHtcbiAgICAgICAgcmV0dXJuICdzeW1ib2xUZXh0QW5kSWNvbic7XG4gICAgfSBlbHNlIGlmIChpc1NERikge1xuICAgICAgICByZXR1cm4gJ3N5bWJvbFNERic7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdzeW1ib2xJY29uJztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdMYXllclN5bWJvbHMocGFpbnRlciwgc291cmNlQ2FjaGUsIGxheWVyLCBjb29yZHMsIGlzVGV4dCwgdHJhbnNsYXRlLCB0cmFuc2xhdGVBbmNob3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uQWxpZ25tZW50LCBwaXRjaEFsaWdubWVudCwga2VlcFVwcmlnaHQsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUpIHtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBwYWludGVyLmNvbnRleHQ7XG4gICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuICAgIGNvbnN0IHRyID0gcGFpbnRlci50cmFuc2Zvcm07XG5cbiAgICBjb25zdCByb3RhdGVXaXRoTWFwID0gcm90YXRpb25BbGlnbm1lbnQgPT09ICdtYXAnO1xuICAgIGNvbnN0IHBpdGNoV2l0aE1hcCA9IHBpdGNoQWxpZ25tZW50ID09PSAnbWFwJztcbiAgICBjb25zdCBhbG9uZ0xpbmUgPSByb3RhdGVXaXRoTWFwICYmIGxheWVyLmxheW91dC5nZXQoJ3N5bWJvbC1wbGFjZW1lbnQnKSAhPT0gJ3BvaW50JztcbiAgICAvLyBMaW5lIGxhYmVsIHJvdGF0aW9uIGhhcHBlbnMgaW4gYHVwZGF0ZUxpbmVMYWJlbHNgXG4gICAgLy8gUGl0Y2hlZCBwb2ludCBsYWJlbHMgYXJlIGF1dG9tYXRpY2FsbHkgcm90YXRlZCBieSB0aGUgbGFiZWxQbGFuZU1hdHJpeCBwcm9qZWN0aW9uXG4gICAgLy8gVW5waXRjaGVkIHBvaW50IGxhYmVscyBuZWVkIHRvIGhhdmUgdGhlaXIgcm90YXRpb24gYXBwbGllZCBhZnRlciBwcm9qZWN0aW9uXG4gICAgY29uc3Qgcm90YXRlSW5TaGFkZXIgPSByb3RhdGVXaXRoTWFwICYmICFwaXRjaFdpdGhNYXAgJiYgIWFsb25nTGluZTtcblxuICAgIGNvbnN0IGhhc1NvcnRLZXkgPSBsYXllci5sYXlvdXQuZ2V0KCdzeW1ib2wtc29ydC1rZXknKS5jb25zdGFudE9yKDEpICE9PSB1bmRlZmluZWQ7XG4gICAgbGV0IHNvcnRGZWF0dXJlc0J5S2V5ID0gZmFsc2U7XG5cbiAgICBjb25zdCBkZXB0aE1vZGUgPSBwYWludGVyLmRlcHRoTW9kZUZvclN1YmxheWVyKDAsIERlcHRoTW9kZS5SZWFkT25seSk7XG5cbiAgICBjb25zdCB2YXJpYWJsZVBsYWNlbWVudCA9IGxheWVyLmxheW91dC5nZXQoJ3RleHQtdmFyaWFibGUtYW5jaG9yJyk7XG5cbiAgICBjb25zdCB0aWxlUmVuZGVyU3RhdGU6IEFycmF5PFN5bWJvbFRpbGVSZW5kZXJTdGF0ZT4gPSBbXTtcblxuICAgIGZvciAoY29uc3QgY29vcmQgb2YgY29vcmRzKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgYnVja2V0OiBTeW1ib2xCdWNrZXQgPSAodGlsZS5nZXRCdWNrZXQobGF5ZXIpOiBhbnkpO1xuICAgICAgICBpZiAoIWJ1Y2tldCkgY29udGludWU7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBpc1RleHQgPyBidWNrZXQudGV4dCA6IGJ1Y2tldC5pY29uO1xuICAgICAgICBpZiAoIWJ1ZmZlcnMgfHwgIWJ1ZmZlcnMuc2VnbWVudHMuZ2V0KCkubGVuZ3RoKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbUNvbmZpZ3VyYXRpb24gPSBidWZmZXJzLnByb2dyYW1Db25maWd1cmF0aW9ucy5nZXQobGF5ZXIuaWQpO1xuXG4gICAgICAgIGNvbnN0IGlzU0RGID0gaXNUZXh0IHx8IGJ1Y2tldC5zZGZJY29ucztcblxuICAgICAgICBjb25zdCBzaXplRGF0YSA9IGlzVGV4dCA/IGJ1Y2tldC50ZXh0U2l6ZURhdGEgOiBidWNrZXQuaWNvblNpemVEYXRhO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IHBpdGNoV2l0aE1hcCB8fCB0ci5waXRjaCAhPT0gMDtcblxuICAgICAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKGdldFN5bWJvbFByb2dyYW1OYW1lKGlzU0RGLCBpc1RleHQsIGJ1Y2tldCksIHByb2dyYW1Db25maWd1cmF0aW9uKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHN5bWJvbFNpemUuZXZhbHVhdGVTaXplRm9yWm9vbShzaXplRGF0YSwgdHIuem9vbSk7XG5cbiAgICAgICAgbGV0IHRleFNpemU6IFtudW1iZXIsIG51bWJlcl07XG4gICAgICAgIGxldCB0ZXhTaXplSWNvbjogW251bWJlciwgbnVtYmVyXSA9IFswLCAwXTtcbiAgICAgICAgbGV0IGF0bGFzVGV4dHVyZTtcbiAgICAgICAgbGV0IGF0bGFzSW50ZXJwb2xhdGlvbjtcbiAgICAgICAgbGV0IGF0bGFzVGV4dHVyZUljb24gPSBudWxsO1xuICAgICAgICBsZXQgYXRsYXNJbnRlcnBvbGF0aW9uSWNvbjtcbiAgICAgICAgaWYgKGlzVGV4dCkge1xuICAgICAgICAgICAgYXRsYXNUZXh0dXJlID0gdGlsZS5nbHlwaEF0bGFzVGV4dHVyZTtcbiAgICAgICAgICAgIGF0bGFzSW50ZXJwb2xhdGlvbiA9IGdsLkxJTkVBUjtcbiAgICAgICAgICAgIHRleFNpemUgPSB0aWxlLmdseXBoQXRsYXNUZXh0dXJlLnNpemU7XG4gICAgICAgICAgICBpZiAoYnVja2V0Lmljb25zSW5UZXh0KSB7XG4gICAgICAgICAgICAgICAgdGV4U2l6ZUljb24gPSB0aWxlLmltYWdlQXRsYXNUZXh0dXJlLnNpemU7XG4gICAgICAgICAgICAgICAgYXRsYXNUZXh0dXJlSWNvbiA9IHRpbGUuaW1hZ2VBdGxhc1RleHR1cmU7XG4gICAgICAgICAgICAgICAgY29uc3Qgem9vbURlcGVuZGVudFNpemUgPSBzaXplRGF0YS5raW5kID09PSAnY29tcG9zaXRlJyB8fCBzaXplRGF0YS5raW5kID09PSAnY2FtZXJhJztcbiAgICAgICAgICAgICAgICBhdGxhc0ludGVycG9sYXRpb25JY29uID0gdHJhbnNmb3JtZWQgfHwgcGFpbnRlci5vcHRpb25zLnJvdGF0aW5nIHx8IHBhaW50ZXIub3B0aW9ucy56b29taW5nIHx8IHpvb21EZXBlbmRlbnRTaXplID8gZ2wuTElORUFSIDogZ2wuTkVBUkVTVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGljb25TY2FsZWQgPSBsYXllci5sYXlvdXQuZ2V0KCdpY29uLXNpemUnKS5jb25zdGFudE9yKDApICE9PSAxIHx8IGJ1Y2tldC5pY29uc05lZWRMaW5lYXI7XG4gICAgICAgICAgICBhdGxhc1RleHR1cmUgPSB0aWxlLmltYWdlQXRsYXNUZXh0dXJlO1xuICAgICAgICAgICAgYXRsYXNJbnRlcnBvbGF0aW9uID0gaXNTREYgfHwgcGFpbnRlci5vcHRpb25zLnJvdGF0aW5nIHx8IHBhaW50ZXIub3B0aW9ucy56b29taW5nIHx8IGljb25TY2FsZWQgfHwgdHJhbnNmb3JtZWQgP1xuICAgICAgICAgICAgICAgIGdsLkxJTkVBUiA6XG4gICAgICAgICAgICAgICAgZ2wuTkVBUkVTVDtcbiAgICAgICAgICAgIHRleFNpemUgPSB0aWxlLmltYWdlQXRsYXNUZXh0dXJlLnNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzID0gcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgMSwgcGFpbnRlci50cmFuc2Zvcm0uem9vbSk7XG4gICAgICAgIGNvbnN0IGxhYmVsUGxhbmVNYXRyaXggPSBzeW1ib2xQcm9qZWN0aW9uLmdldExhYmVsUGxhbmVNYXRyaXgoY29vcmQucG9zTWF0cml4LCBwaXRjaFdpdGhNYXAsIHJvdGF0ZVdpdGhNYXAsIHBhaW50ZXIudHJhbnNmb3JtLCBzKTtcbiAgICAgICAgY29uc3QgZ2xDb29yZE1hdHJpeCA9IHN5bWJvbFByb2plY3Rpb24uZ2V0R2xDb29yZE1hdHJpeChjb29yZC5wb3NNYXRyaXgsIHBpdGNoV2l0aE1hcCwgcm90YXRlV2l0aE1hcCwgcGFpbnRlci50cmFuc2Zvcm0sIHMpO1xuXG4gICAgICAgIGNvbnN0IGhhc1ZhcmlhYmxlQW5jaG9ycyA9IHZhcmlhYmxlUGxhY2VtZW50ICYmIGJ1Y2tldC5oYXNUZXh0RGF0YSgpO1xuICAgICAgICBjb25zdCB1cGRhdGVUZXh0Rml0SWNvbiA9IGxheWVyLmxheW91dC5nZXQoJ2ljb24tdGV4dC1maXQnKSAhPT0gJ25vbmUnICYmXG4gICAgICAgICAgICBoYXNWYXJpYWJsZUFuY2hvcnMgJiZcbiAgICAgICAgICAgIGJ1Y2tldC5oYXNJY29uRGF0YSgpO1xuXG4gICAgICAgIGlmIChhbG9uZ0xpbmUpIHtcbiAgICAgICAgICAgIHN5bWJvbFByb2plY3Rpb24udXBkYXRlTGluZUxhYmVscyhidWNrZXQsIGNvb3JkLnBvc01hdHJpeCwgcGFpbnRlciwgaXNUZXh0LCBsYWJlbFBsYW5lTWF0cml4LCBnbENvb3JkTWF0cml4LCBwaXRjaFdpdGhNYXAsIGtlZXBVcHJpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IHBhaW50ZXIudHJhbnNsYXRlUG9zTWF0cml4KGNvb3JkLnBvc01hdHJpeCwgdGlsZSwgdHJhbnNsYXRlLCB0cmFuc2xhdGVBbmNob3IpLFxuICAgICAgICAgICAgdUxhYmVsUGxhbmVNYXRyaXggPSAoYWxvbmdMaW5lIHx8IChpc1RleHQgJiYgdmFyaWFibGVQbGFjZW1lbnQpIHx8IHVwZGF0ZVRleHRGaXRJY29uKSA/IGlkZW50aXR5TWF0NCA6IGxhYmVsUGxhbmVNYXRyaXgsXG4gICAgICAgICAgICB1Z2xDb29yZE1hdHJpeCA9IHBhaW50ZXIudHJhbnNsYXRlUG9zTWF0cml4KGdsQ29vcmRNYXRyaXgsIHRpbGUsIHRyYW5zbGF0ZSwgdHJhbnNsYXRlQW5jaG9yLCB0cnVlKTtcblxuICAgICAgICBjb25zdCBoYXNIYWxvID0gaXNTREYgJiYgbGF5ZXIucGFpbnQuZ2V0KGlzVGV4dCA/ICd0ZXh0LWhhbG8td2lkdGgnIDogJ2ljb24taGFsby13aWR0aCcpLmNvbnN0YW50T3IoMSkgIT09IDA7XG5cbiAgICAgICAgbGV0IHVuaWZvcm1WYWx1ZXM7XG4gICAgICAgIGlmIChpc1NERikge1xuICAgICAgICAgICAgaWYgKCFidWNrZXQuaWNvbnNJblRleHQpIHtcbiAgICAgICAgICAgICAgICB1bmlmb3JtVmFsdWVzID0gc3ltYm9sU0RGVW5pZm9ybVZhbHVlcyhzaXplRGF0YS5raW5kLFxuICAgICAgICAgICAgICAgIHNpemUsIHJvdGF0ZUluU2hhZGVyLCBwaXRjaFdpdGhNYXAsIHBhaW50ZXIsIG1hdHJpeCxcbiAgICAgICAgICAgICAgICB1TGFiZWxQbGFuZU1hdHJpeCwgdWdsQ29vcmRNYXRyaXgsIGlzVGV4dCwgdGV4U2l6ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuaWZvcm1WYWx1ZXMgPSBzeW1ib2xUZXh0QW5kSWNvblVuaWZvcm1WYWx1ZXMoc2l6ZURhdGEua2luZCxcbiAgICAgICAgICAgICAgICBzaXplLCByb3RhdGVJblNoYWRlciwgcGl0Y2hXaXRoTWFwLCBwYWludGVyLCBtYXRyaXgsXG4gICAgICAgICAgICAgICAgdUxhYmVsUGxhbmVNYXRyaXgsIHVnbENvb3JkTWF0cml4LCB0ZXhTaXplLCB0ZXhTaXplSWNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzID0gc3ltYm9sSWNvblVuaWZvcm1WYWx1ZXMoc2l6ZURhdGEua2luZCxcbiAgICAgICAgICAgICAgICBzaXplLCByb3RhdGVJblNoYWRlciwgcGl0Y2hXaXRoTWFwLCBwYWludGVyLCBtYXRyaXgsXG4gICAgICAgICAgICAgICAgdUxhYmVsUGxhbmVNYXRyaXgsIHVnbENvb3JkTWF0cml4LCBpc1RleHQsIHRleFNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgICAgICBwcm9ncmFtLFxuICAgICAgICAgICAgYnVmZmVycyxcbiAgICAgICAgICAgIHVuaWZvcm1WYWx1ZXMsXG4gICAgICAgICAgICBhdGxhc1RleHR1cmUsXG4gICAgICAgICAgICBhdGxhc1RleHR1cmVJY29uLFxuICAgICAgICAgICAgYXRsYXNJbnRlcnBvbGF0aW9uLFxuICAgICAgICAgICAgYXRsYXNJbnRlcnBvbGF0aW9uSWNvbixcbiAgICAgICAgICAgIGlzU0RGLFxuICAgICAgICAgICAgaGFzSGFsb1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChoYXNTb3J0S2V5ICYmIGJ1Y2tldC5jYW5PdmVybGFwKSB7XG4gICAgICAgICAgICBzb3J0RmVhdHVyZXNCeUtleSA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBvbGRTZWdtZW50cyA9IGJ1ZmZlcnMuc2VnbWVudHMuZ2V0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygb2xkU2VnbWVudHMpIHtcbiAgICAgICAgICAgICAgICB0aWxlUmVuZGVyU3RhdGUucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzOiBuZXcgU2VnbWVudFZlY3Rvcihbc2VnbWVudF0pLFxuICAgICAgICAgICAgICAgICAgICBzb3J0S2V5OiAoKHNlZ21lbnQuc29ydEtleTogYW55KTogbnVtYmVyKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbGVSZW5kZXJTdGF0ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICBzZWdtZW50czogYnVmZmVycy5zZWdtZW50cyxcbiAgICAgICAgICAgICAgICBzb3J0S2V5OiAwLFxuICAgICAgICAgICAgICAgIHN0YXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzb3J0RmVhdHVyZXNCeUtleSkge1xuICAgICAgICB0aWxlUmVuZGVyU3RhdGUuc29ydCgoYSwgYikgPT4gYS5zb3J0S2V5IC0gYi5zb3J0S2V5KTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHNlZ21lbnRTdGF0ZSBvZiB0aWxlUmVuZGVyU3RhdGUpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBzZWdtZW50U3RhdGUuc3RhdGU7XG5cbiAgICAgICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgICAgIHN0YXRlLmF0bGFzVGV4dHVyZS5iaW5kKHN0YXRlLmF0bGFzSW50ZXJwb2xhdGlvbiwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIGlmIChzdGF0ZS5hdGxhc1RleHR1cmVJY29uKSB7XG4gICAgICAgICAgICBjb250ZXh0LmFjdGl2ZVRleHR1cmUuc2V0KGdsLlRFWFRVUkUxKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5hdGxhc1RleHR1cmVJY29uKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuYXRsYXNUZXh0dXJlSWNvbi5iaW5kKHN0YXRlLmF0bGFzSW50ZXJwb2xhdGlvbkljb24sIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlLmlzU0RGKSB7XG4gICAgICAgICAgICBjb25zdCB1bmlmb3JtVmFsdWVzID0gKChzdGF0ZS51bmlmb3JtVmFsdWVzOiBhbnkpOiBVbmlmb3JtVmFsdWVzPFN5bWJvbFNERlVuaWZvcm1zVHlwZT4pO1xuICAgICAgICAgICAgaWYgKHN0YXRlLmhhc0hhbG8pIHtcbiAgICAgICAgICAgICAgICB1bmlmb3JtVmFsdWVzWyd1X2lzX2hhbG8nXSA9IDE7XG4gICAgICAgICAgICAgICAgZHJhd1N5bWJvbEVsZW1lbnRzKHN0YXRlLmJ1ZmZlcnMsIHNlZ21lbnRTdGF0ZS5zZWdtZW50cywgbGF5ZXIsIHBhaW50ZXIsIHN0YXRlLnByb2dyYW0sIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSwgdW5pZm9ybVZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzWyd1X2lzX2hhbG8nXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZHJhd1N5bWJvbEVsZW1lbnRzKHN0YXRlLmJ1ZmZlcnMsIHNlZ21lbnRTdGF0ZS5zZWdtZW50cywgbGF5ZXIsIHBhaW50ZXIsIHN0YXRlLnByb2dyYW0sIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSwgc3RhdGUudW5pZm9ybVZhbHVlcyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3U3ltYm9sRWxlbWVudHMoYnVmZmVycywgc2VnbWVudHMsIGxheWVyLCBwYWludGVyLCBwcm9ncmFtLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsIHVuaWZvcm1WYWx1ZXMpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsIEN1bGxGYWNlTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgdW5pZm9ybVZhbHVlcywgbGF5ZXIuaWQsIGJ1ZmZlcnMubGF5b3V0VmVydGV4QnVmZmVyLFxuICAgICAgICBidWZmZXJzLmluZGV4QnVmZmVyLCBzZWdtZW50cywgbGF5ZXIucGFpbnQsXG4gICAgICAgIHBhaW50ZXIudHJhbnNmb3JtLnpvb20sIGJ1ZmZlcnMucHJvZ3JhbUNvbmZpZ3VyYXRpb25zLmdldChsYXllci5pZCksXG4gICAgICAgIGJ1ZmZlcnMuZHluYW1pY0xheW91dFZlcnRleEJ1ZmZlciwgYnVmZmVycy5vcGFjaXR5VmVydGV4QnVmZmVyKTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBDb2xvciBmcm9tICcuLi9zdHlsZS1zcGVjL3V0aWwvY29sb3InO1xuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCBDdWxsRmFjZU1vZGUgZnJvbSAnLi4vZ2wvY3VsbF9mYWNlX21vZGUnO1xuaW1wb3J0IHtcbiAgICBmaWxsVW5pZm9ybVZhbHVlcyxcbiAgICBmaWxsUGF0dGVyblVuaWZvcm1WYWx1ZXMsXG4gICAgZmlsbE91dGxpbmVVbmlmb3JtVmFsdWVzLFxuICAgIGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXNcbn0gZnJvbSAnLi9wcm9ncmFtL2ZpbGxfcHJvZ3JhbSc7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi9wYWludGVyJztcbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4uL3NvdXJjZS9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUgRmlsbFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvZmlsbF9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSBGaWxsQnVja2V0IGZyb20gJy4uL2RhdGEvYnVja2V0L2ZpbGxfYnVja2V0JztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXdGaWxsO1xuXG5mdW5jdGlvbiBkcmF3RmlsbChwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGxheWVyOiBGaWxsU3R5bGVMYXllciwgY29vcmRzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPikge1xuICAgIGNvbnN0IGNvbG9yID0gbGF5ZXIucGFpbnQuZ2V0KCdmaWxsLWNvbG9yJyk7XG4gICAgY29uc3Qgb3BhY2l0eSA9IGxheWVyLnBhaW50LmdldCgnZmlsbC1vcGFjaXR5Jyk7XG5cbiAgICBpZiAob3BhY2l0eS5jb25zdGFudE9yKDEpID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcblxuICAgIGNvbnN0IHBhdHRlcm4gPSBsYXllci5wYWludC5nZXQoJ2ZpbGwtcGF0dGVybicpO1xuICAgIGNvbnN0IHBhc3MgPSBwYWludGVyLm9wYXF1ZVBhc3NFbmFibGVkRm9yTGF5ZXIoKSAmJlxuICAgICAgICAoIXBhdHRlcm4uY29uc3RhbnRPcigoMTogYW55KSkgJiZcbiAgICAgICAgY29sb3IuY29uc3RhbnRPcihDb2xvci50cmFuc3BhcmVudCkuYSA9PT0gMSAmJlxuICAgICAgICBvcGFjaXR5LmNvbnN0YW50T3IoMCkgPT09IDEpID8gJ29wYXF1ZScgOiAndHJhbnNsdWNlbnQnO1xuXG4gICAgLy8gRHJhdyBmaWxsXG4gICAgaWYgKHBhaW50ZXIucmVuZGVyUGFzcyA9PT0gcGFzcykge1xuICAgICAgICBjb25zdCBkZXB0aE1vZGUgPSBwYWludGVyLmRlcHRoTW9kZUZvclN1YmxheWVyKFxuICAgICAgICAgICAgMSwgcGFpbnRlci5yZW5kZXJQYXNzID09PSAnb3BhcXVlJyA/IERlcHRoTW9kZS5SZWFkV3JpdGUgOiBEZXB0aE1vZGUuUmVhZE9ubHkpO1xuICAgICAgICBkcmF3RmlsbFRpbGVzKHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzLCBkZXB0aE1vZGUsIGNvbG9yTW9kZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIERyYXcgc3Ryb2tlXG4gICAgaWYgKHBhaW50ZXIucmVuZGVyUGFzcyA9PT0gJ3RyYW5zbHVjZW50JyAmJiBsYXllci5wYWludC5nZXQoJ2ZpbGwtYW50aWFsaWFzJykpIHtcblxuICAgICAgICAvLyBJZiB3ZSBkZWZpbmVkIGEgZGlmZmVyZW50IGNvbG9yIGZvciB0aGUgZmlsbCBvdXRsaW5lLCB3ZSBhcmVcbiAgICAgICAgLy8gZ29pbmcgdG8gaWdub3JlIHRoZSBiaXRzIGluIDB4MDcgYW5kIGp1c3QgY2FyZSBhYm91dCB0aGUgZ2xvYmFsXG4gICAgICAgIC8vIGNsaXBwaW5nIG1hc2suXG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2Ugb25seSB3YW50IHRvIGRyYXdGaWxsIHRoZSBhbnRpYWxpYXNlZCBwYXJ0cyB0aGF0IGFyZVxuICAgICAgICAvLyAqb3V0c2lkZSogdGhlIGN1cnJlbnQgc2hhcGUuIFRoaXMgaXMgaW1wb3J0YW50IGluIGNhc2UgdGhlIGZpbGxcbiAgICAgICAgLy8gb3Igc3Ryb2tlIGNvbG9yIGlzIHRyYW5zbHVjZW50LiBJZiB3ZSB3b3VsZG4ndCBjbGlwIHRvIG91dHNpZGVcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgc2hhcGUsIHNvbWUgcGl4ZWxzIGZyb20gdGhlIG91dGxpbmUgc3Ryb2tlIG92ZXJsYXBwZWRcbiAgICAgICAgLy8gdGhlIChub24tYW50aWFsaWFzZWQpIGZpbGwuXG4gICAgICAgIGNvbnN0IGRlcHRoTW9kZSA9IHBhaW50ZXIuZGVwdGhNb2RlRm9yU3VibGF5ZXIoXG4gICAgICAgICAgICBsYXllci5nZXRQYWludFByb3BlcnR5KCdmaWxsLW91dGxpbmUtY29sb3InKSA/IDIgOiAwLCBEZXB0aE1vZGUuUmVhZE9ubHkpO1xuICAgICAgICBkcmF3RmlsbFRpbGVzKHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzLCBkZXB0aE1vZGUsIGNvbG9yTW9kZSwgdHJ1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3RmlsbFRpbGVzKHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzLCBkZXB0aE1vZGUsIGNvbG9yTW9kZSwgaXNPdXRsaW5lKSB7XG4gICAgY29uc3QgZ2wgPSBwYWludGVyLmNvbnRleHQuZ2w7XG5cbiAgICBjb25zdCBwYXR0ZXJuUHJvcGVydHkgPSBsYXllci5wYWludC5nZXQoJ2ZpbGwtcGF0dGVybicpO1xuICAgIGNvbnN0IGltYWdlID0gcGF0dGVyblByb3BlcnR5ICYmIHBhdHRlcm5Qcm9wZXJ0eS5jb25zdGFudE9yKCgxOiBhbnkpKTtcbiAgICBjb25zdCBjcm9zc2ZhZGUgPSBsYXllci5nZXRDcm9zc2ZhZGVQYXJhbWV0ZXJzKCk7XG4gICAgbGV0IGRyYXdNb2RlLCBwcm9ncmFtTmFtZSwgdW5pZm9ybVZhbHVlcywgaW5kZXhCdWZmZXIsIHNlZ21lbnRzO1xuXG4gICAgaWYgKCFpc091dGxpbmUpIHtcbiAgICAgICAgcHJvZ3JhbU5hbWUgPSBpbWFnZSA/ICdmaWxsUGF0dGVybicgOiAnZmlsbCc7XG4gICAgICAgIGRyYXdNb2RlID0gZ2wuVFJJQU5HTEVTO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2dyYW1OYW1lID0gaW1hZ2UgJiYgIWxheWVyLmdldFBhaW50UHJvcGVydHkoJ2ZpbGwtb3V0bGluZS1jb2xvcicpID8gJ2ZpbGxPdXRsaW5lUGF0dGVybicgOiAnZmlsbE91dGxpbmUnO1xuICAgICAgICBkcmF3TW9kZSA9IGdsLkxJTkVTO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgY29vcmQgb2YgY29vcmRzKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgaWYgKGltYWdlICYmICF0aWxlLnBhdHRlcm5zTG9hZGVkKCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnN0IGJ1Y2tldDogP0ZpbGxCdWNrZXQgPSAodGlsZS5nZXRCdWNrZXQobGF5ZXIpOiBhbnkpO1xuICAgICAgICBpZiAoIWJ1Y2tldCkgY29udGludWU7XG5cbiAgICAgICAgY29uc3QgcHJvZ3JhbUNvbmZpZ3VyYXRpb24gPSBidWNrZXQucHJvZ3JhbUNvbmZpZ3VyYXRpb25zLmdldChsYXllci5pZCk7XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSBwYWludGVyLnVzZVByb2dyYW0ocHJvZ3JhbU5hbWUsIHByb2dyYW1Db25maWd1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHBhaW50ZXIuY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgICAgICAgICB0aWxlLmltYWdlQXRsYXNUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgIHByb2dyYW1Db25maWd1cmF0aW9uLnVwZGF0ZVBhaW50QnVmZmVycyhjcm9zc2ZhZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29uc3RhbnRQYXR0ZXJuID0gcGF0dGVyblByb3BlcnR5LmNvbnN0YW50T3IobnVsbCk7XG4gICAgICAgIGlmIChjb25zdGFudFBhdHRlcm4gJiYgdGlsZS5pbWFnZUF0bGFzKSB7XG4gICAgICAgICAgICBjb25zdCBhdGxhcyA9IHRpbGUuaW1hZ2VBdGxhcztcbiAgICAgICAgICAgIGNvbnN0IHBvc1RvID0gYXRsYXMucGF0dGVyblBvc2l0aW9uc1tjb25zdGFudFBhdHRlcm4udG8udG9TdHJpbmcoKV07XG4gICAgICAgICAgICBjb25zdCBwb3NGcm9tID0gYXRsYXMucGF0dGVyblBvc2l0aW9uc1tjb25zdGFudFBhdHRlcm4uZnJvbS50b1N0cmluZygpXTtcbiAgICAgICAgICAgIGlmIChwb3NUbyAmJiBwb3NGcm9tKSBwcm9ncmFtQ29uZmlndXJhdGlvbi5zZXRDb25zdGFudFBhdHRlcm5Qb3NpdGlvbnMocG9zVG8sIHBvc0Zyb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGlsZU1hdHJpeCA9IHBhaW50ZXIudHJhbnNsYXRlUG9zTWF0cml4KGNvb3JkLnBvc01hdHJpeCwgdGlsZSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgnZmlsbC10cmFuc2xhdGUnKSwgbGF5ZXIucGFpbnQuZ2V0KCdmaWxsLXRyYW5zbGF0ZS1hbmNob3InKSk7XG5cbiAgICAgICAgaWYgKCFpc091dGxpbmUpIHtcbiAgICAgICAgICAgIGluZGV4QnVmZmVyID0gYnVja2V0LmluZGV4QnVmZmVyO1xuICAgICAgICAgICAgc2VnbWVudHMgPSBidWNrZXQuc2VnbWVudHM7XG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzID0gaW1hZ2UgP1xuICAgICAgICAgICAgICAgIGZpbGxQYXR0ZXJuVW5pZm9ybVZhbHVlcyh0aWxlTWF0cml4LCBwYWludGVyLCBjcm9zc2ZhZGUsIHRpbGUpIDpcbiAgICAgICAgICAgICAgICBmaWxsVW5pZm9ybVZhbHVlcyh0aWxlTWF0cml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4QnVmZmVyID0gYnVja2V0LmluZGV4QnVmZmVyMjtcbiAgICAgICAgICAgIHNlZ21lbnRzID0gYnVja2V0LnNlZ21lbnRzMjtcbiAgICAgICAgICAgIGNvbnN0IGRyYXdpbmdCdWZmZXJTaXplID0gW2dsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodF07XG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzID0gKHByb2dyYW1OYW1lID09PSAnZmlsbE91dGxpbmVQYXR0ZXJuJyAmJiBpbWFnZSkgP1xuICAgICAgICAgICAgICAgIGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXModGlsZU1hdHJpeCwgcGFpbnRlciwgY3Jvc3NmYWRlLCB0aWxlLCBkcmF3aW5nQnVmZmVyU2l6ZSkgOlxuICAgICAgICAgICAgICAgIGZpbGxPdXRsaW5lVW5pZm9ybVZhbHVlcyh0aWxlTWF0cml4LCBkcmF3aW5nQnVmZmVyU2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9ncmFtLmRyYXcocGFpbnRlci5jb250ZXh0LCBkcmF3TW9kZSwgZGVwdGhNb2RlLFxuICAgICAgICAgICAgcGFpbnRlci5zdGVuY2lsTW9kZUZvckNsaXBwaW5nKGNvb3JkKSwgY29sb3JNb2RlLCBDdWxsRmFjZU1vZGUuZGlzYWJsZWQsIHVuaWZvcm1WYWx1ZXMsXG4gICAgICAgICAgICBsYXllci5pZCwgYnVja2V0LmxheW91dFZlcnRleEJ1ZmZlciwgaW5kZXhCdWZmZXIsIHNlZ21lbnRzLFxuICAgICAgICAgICAgbGF5ZXIucGFpbnQsIHBhaW50ZXIudHJhbnNmb3JtLnpvb20sIHByb2dyYW1Db25maWd1cmF0aW9uKTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IFN0ZW5jaWxNb2RlIGZyb20gJy4uL2dsL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQgQ29sb3JNb2RlIGZyb20gJy4uL2dsL2NvbG9yX21vZGUnO1xuaW1wb3J0IEN1bGxGYWNlTW9kZSBmcm9tICcuLi9nbC9jdWxsX2ZhY2VfbW9kZSc7XG5pbXBvcnQge1xuICAgIGZpbGxFeHRydXNpb25Vbmlmb3JtVmFsdWVzLFxuICAgIGZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybVZhbHVlcyxcbn0gZnJvbSAnLi9wcm9ncmFtL2ZpbGxfZXh0cnVzaW9uX3Byb2dyYW0nO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIEZpbGxFeHRydXNpb25TdHlsZUxheWVyIGZyb20gJy4uL3N0eWxlL3N0eWxlX2xheWVyL2ZpbGxfZXh0cnVzaW9uX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIEZpbGxFeHRydXNpb25CdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvZmlsbF9leHRydXNpb25fYnVja2V0JztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXc7XG5cbmZ1bmN0aW9uIGRyYXcocGFpbnRlcjogUGFpbnRlciwgc291cmNlOiBTb3VyY2VDYWNoZSwgbGF5ZXI6IEZpbGxFeHRydXNpb25TdHlsZUxheWVyLCBjb29yZHM6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+KSB7XG4gICAgY29uc3Qgb3BhY2l0eSA9IGxheWVyLnBhaW50LmdldCgnZmlsbC1leHRydXNpb24tb3BhY2l0eScpO1xuICAgIGlmIChvcGFjaXR5ID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzID09PSAndHJhbnNsdWNlbnQnKSB7XG4gICAgICAgIGNvbnN0IGRlcHRoTW9kZSA9IG5ldyBEZXB0aE1vZGUocGFpbnRlci5jb250ZXh0LmdsLkxFUVVBTCwgRGVwdGhNb2RlLlJlYWRXcml0ZSwgcGFpbnRlci5kZXB0aFJhbmdlRm9yM0QpO1xuXG4gICAgICAgIGlmIChvcGFjaXR5ID09PSAxICYmICFsYXllci5wYWludC5nZXQoJ2ZpbGwtZXh0cnVzaW9uLXBhdHRlcm4nKS5jb25zdGFudE9yKCgxOiBhbnkpKSkge1xuICAgICAgICAgICAgY29uc3QgY29sb3JNb2RlID0gcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCk7XG4gICAgICAgICAgICBkcmF3RXh0cnVzaW9uVGlsZXMocGFpbnRlciwgc291cmNlLCBsYXllciwgY29vcmRzLCBkZXB0aE1vZGUsIFN0ZW5jaWxNb2RlLmRpc2FibGVkLCBjb2xvck1vZGUpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBEcmF3IHRyYW5zcGFyZW50IGJ1aWxkaW5ncyBpbiB0d28gcGFzc2VzIHNvIHRoYXQgb25seSB0aGUgY2xvc2VzdCBzdXJmYWNlIGlzIGRyYXduLlxuICAgICAgICAgICAgLy8gRmlyc3QgZHJhdyBhbGwgdGhlIGV4dHJ1c2lvbnMgaW50byBvbmx5IHRoZSBkZXB0aCBidWZmZXIuIE5vIGNvbG9ycyBhcmUgZHJhd24uXG4gICAgICAgICAgICBkcmF3RXh0cnVzaW9uVGlsZXMocGFpbnRlciwgc291cmNlLCBsYXllciwgY29vcmRzLCBkZXB0aE1vZGUsXG4gICAgICAgICAgICAgICAgU3RlbmNpbE1vZGUuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgQ29sb3JNb2RlLmRpc2FibGVkKTtcblxuICAgICAgICAgICAgLy8gVGhlbiBkcmF3IGFsbCB0aGUgZXh0cnVzaW9ucyBhIHNlY29uZCB0eXBlLCBvbmx5IGNvbG9yaW5nIGZyYWdtZW50cyBpZiB0aGV5IGhhdmUgdGhlXG4gICAgICAgICAgICAvLyBzYW1lIGRlcHRoIHZhbHVlIGFzIHRoZSBjbG9zZXN0IGZyYWdtZW50IGluIHRoZSBwcmV2aW91cyBwYXNzLiBVc2UgdGhlIHN0ZW5jaWwgYnVmZmVyXG4gICAgICAgICAgICAvLyB0byBwcmV2ZW50IHRoZSBzZWNvbmQgZHJhdyBpbiBjYXNlcyB3aGVyZSB3ZSBoYXZlIGNvaW5jaWRlbnQgcG9seWdvbnMuXG4gICAgICAgICAgICBkcmF3RXh0cnVzaW9uVGlsZXMocGFpbnRlciwgc291cmNlLCBsYXllciwgY29vcmRzLCBkZXB0aE1vZGUsXG4gICAgICAgICAgICAgICAgcGFpbnRlci5zdGVuY2lsTW9kZUZvcjNEKCksXG4gICAgICAgICAgICAgICAgcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3RXh0cnVzaW9uVGlsZXMocGFpbnRlciwgc291cmNlLCBsYXllciwgY29vcmRzLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICBjb25zdCBwYXR0ZXJuUHJvcGVydHkgPSBsYXllci5wYWludC5nZXQoJ2ZpbGwtZXh0cnVzaW9uLXBhdHRlcm4nKTtcbiAgICBjb25zdCBpbWFnZSA9IHBhdHRlcm5Qcm9wZXJ0eS5jb25zdGFudE9yKCgxOiBhbnkpKTtcbiAgICBjb25zdCBjcm9zc2ZhZGUgPSBsYXllci5nZXRDcm9zc2ZhZGVQYXJhbWV0ZXJzKCk7XG4gICAgY29uc3Qgb3BhY2l0eSA9IGxheWVyLnBhaW50LmdldCgnZmlsbC1leHRydXNpb24tb3BhY2l0eScpO1xuXG4gICAgZm9yIChjb25zdCBjb29yZCBvZiBjb29yZHMpIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHNvdXJjZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgYnVja2V0OiA/RmlsbEV4dHJ1c2lvbkJ1Y2tldCA9ICh0aWxlLmdldEJ1Y2tldChsYXllcik6IGFueSk7XG4gICAgICAgIGlmICghYnVja2V0KSBjb250aW51ZTtcblxuICAgICAgICBjb25zdCBwcm9ncmFtQ29uZmlndXJhdGlvbiA9IGJ1Y2tldC5wcm9ncmFtQ29uZmlndXJhdGlvbnMuZ2V0KGxheWVyLmlkKTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHBhaW50ZXIudXNlUHJvZ3JhbShpbWFnZSA/ICdmaWxsRXh0cnVzaW9uUGF0dGVybicgOiAnZmlsbEV4dHJ1c2lvbicsIHByb2dyYW1Db25maWd1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHBhaW50ZXIuY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgICAgICAgICB0aWxlLmltYWdlQXRsYXNUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgIHByb2dyYW1Db25maWd1cmF0aW9uLnVwZGF0ZVBhaW50QnVmZmVycyhjcm9zc2ZhZGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnN0YW50UGF0dGVybiA9IHBhdHRlcm5Qcm9wZXJ0eS5jb25zdGFudE9yKG51bGwpO1xuICAgICAgICBpZiAoY29uc3RhbnRQYXR0ZXJuICYmIHRpbGUuaW1hZ2VBdGxhcykge1xuICAgICAgICAgICAgY29uc3QgYXRsYXMgPSB0aWxlLmltYWdlQXRsYXM7XG4gICAgICAgICAgICBjb25zdCBwb3NUbyA9IGF0bGFzLnBhdHRlcm5Qb3NpdGlvbnNbY29uc3RhbnRQYXR0ZXJuLnRvLnRvU3RyaW5nKCldO1xuICAgICAgICAgICAgY29uc3QgcG9zRnJvbSA9IGF0bGFzLnBhdHRlcm5Qb3NpdGlvbnNbY29uc3RhbnRQYXR0ZXJuLmZyb20udG9TdHJpbmcoKV07XG4gICAgICAgICAgICBpZiAocG9zVG8gJiYgcG9zRnJvbSkgcHJvZ3JhbUNvbmZpZ3VyYXRpb24uc2V0Q29uc3RhbnRQYXR0ZXJuUG9zaXRpb25zKHBvc1RvLCBwb3NGcm9tKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IHBhaW50ZXIudHJhbnNsYXRlUG9zTWF0cml4KFxuICAgICAgICAgICAgY29vcmQucG9zTWF0cml4LFxuICAgICAgICAgICAgdGlsZSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgnZmlsbC1leHRydXNpb24tdHJhbnNsYXRlJyksXG4gICAgICAgICAgICBsYXllci5wYWludC5nZXQoJ2ZpbGwtZXh0cnVzaW9uLXRyYW5zbGF0ZS1hbmNob3InKSk7XG5cbiAgICAgICAgY29uc3Qgc2hvdWxkVXNlVmVydGljYWxHcmFkaWVudCA9IGxheWVyLnBhaW50LmdldCgnZmlsbC1leHRydXNpb24tdmVydGljYWwtZ3JhZGllbnQnKTtcbiAgICAgICAgY29uc3QgdW5pZm9ybVZhbHVlcyA9IGltYWdlID9cbiAgICAgICAgICAgIGZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybVZhbHVlcyhtYXRyaXgsIHBhaW50ZXIsIHNob3VsZFVzZVZlcnRpY2FsR3JhZGllbnQsIG9wYWNpdHksIGNvb3JkLCBjcm9zc2ZhZGUsIHRpbGUpIDpcbiAgICAgICAgICAgIGZpbGxFeHRydXNpb25Vbmlmb3JtVmFsdWVzKG1hdHJpeCwgcGFpbnRlciwgc2hvdWxkVXNlVmVydGljYWxHcmFkaWVudCwgb3BhY2l0eSk7XG5cbiAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGNvbnRleHQuZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsIEN1bGxGYWNlTW9kZS5iYWNrQ0NXLFxuICAgICAgICAgICAgdW5pZm9ybVZhbHVlcywgbGF5ZXIuaWQsIGJ1Y2tldC5sYXlvdXRWZXJ0ZXhCdWZmZXIsIGJ1Y2tldC5pbmRleEJ1ZmZlcixcbiAgICAgICAgICAgIGJ1Y2tldC5zZWdtZW50cywgbGF5ZXIucGFpbnQsIHBhaW50ZXIudHJhbnNmb3JtLnpvb20sXG4gICAgICAgICAgICBwcm9ncmFtQ29uZmlndXJhdGlvbik7XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJztcbmltcG9ydCBTdGVuY2lsTW9kZSBmcm9tICcuLi9nbC9zdGVuY2lsX21vZGUnO1xuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCBDdWxsRmFjZU1vZGUgZnJvbSAnLi4vZ2wvY3VsbF9mYWNlX21vZGUnO1xuaW1wb3J0IHtcbiAgICBoaWxsc2hhZGVVbmlmb3JtVmFsdWVzLFxuICAgIGhpbGxzaGFkZVVuaWZvcm1QcmVwYXJlVmFsdWVzXG59IGZyb20gJy4vcHJvZ3JhbS9oaWxsc2hhZGVfcHJvZ3JhbSc7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi9wYWludGVyJztcbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4uL3NvdXJjZS9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUgSGlsbHNoYWRlU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllci9oaWxsc2hhZGVfc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuZXhwb3J0IGRlZmF1bHQgZHJhd0hpbGxzaGFkZTtcblxuZnVuY3Rpb24gZHJhd0hpbGxzaGFkZShwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGxheWVyOiBIaWxsc2hhZGVTdHlsZUxheWVyLCB0aWxlSURzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPikge1xuICAgIGlmIChwYWludGVyLnJlbmRlclBhc3MgIT09ICdvZmZzY3JlZW4nICYmIHBhaW50ZXIucmVuZGVyUGFzcyAhPT0gJ3RyYW5zbHVjZW50JykgcmV0dXJuO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcblxuICAgIGNvbnN0IGRlcHRoTW9kZSA9IHBhaW50ZXIuZGVwdGhNb2RlRm9yU3VibGF5ZXIoMCwgRGVwdGhNb2RlLlJlYWRPbmx5KTtcbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcblxuICAgIGNvbnN0IFtzdGVuY2lsTW9kZXMsIGNvb3Jkc10gPSBwYWludGVyLnJlbmRlclBhc3MgPT09ICd0cmFuc2x1Y2VudCcgP1xuICAgICAgICBwYWludGVyLnN0ZW5jaWxDb25maWdGb3JPdmVybGFwKHRpbGVJRHMpIDogW3t9LCB0aWxlSURzXTtcblxuICAgIGZvciAoY29uc3QgY29vcmQgb2YgY29vcmRzKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgaWYgKHRpbGUubmVlZHNIaWxsc2hhZGVQcmVwYXJlICYmIHBhaW50ZXIucmVuZGVyUGFzcyA9PT0gJ29mZnNjcmVlbicpIHtcbiAgICAgICAgICAgIHByZXBhcmVIaWxsc2hhZGUocGFpbnRlciwgdGlsZSwgbGF5ZXIsIGRlcHRoTW9kZSwgU3RlbmNpbE1vZGUuZGlzYWJsZWQsIGNvbG9yTW9kZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFpbnRlci5yZW5kZXJQYXNzID09PSAndHJhbnNsdWNlbnQnKSB7XG4gICAgICAgICAgICByZW5kZXJIaWxsc2hhZGUocGFpbnRlciwgdGlsZSwgbGF5ZXIsIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGVzW2Nvb3JkLm92ZXJzY2FsZWRaXSwgY29sb3JNb2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnRleHQudmlld3BvcnQuc2V0KFswLCAwLCBwYWludGVyLndpZHRoLCBwYWludGVyLmhlaWdodF0pO1xufVxuXG5mdW5jdGlvbiByZW5kZXJIaWxsc2hhZGUocGFpbnRlciwgdGlsZSwgbGF5ZXIsIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBwYWludGVyLmNvbnRleHQ7XG4gICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuICAgIGNvbnN0IGZibyA9IHRpbGUuZmJvO1xuICAgIGlmICghZmJvKSByZXR1cm47XG5cbiAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKCdoaWxsc2hhZGUnKTtcblxuICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGZiby5jb2xvckF0dGFjaG1lbnQuZ2V0KCkpO1xuXG4gICAgY29uc3QgdW5pZm9ybVZhbHVlcyA9IGhpbGxzaGFkZVVuaWZvcm1WYWx1ZXMocGFpbnRlciwgdGlsZSwgbGF5ZXIpO1xuXG4gICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLCBDdWxsRmFjZU1vZGUuZGlzYWJsZWQsXG4gICAgICAgIHVuaWZvcm1WYWx1ZXMsIGxheWVyLmlkLCBwYWludGVyLnJhc3RlckJvdW5kc0J1ZmZlcixcbiAgICAgICAgcGFpbnRlci5xdWFkVHJpYW5nbGVJbmRleEJ1ZmZlciwgcGFpbnRlci5yYXN0ZXJCb3VuZHNTZWdtZW50cyk7XG59XG5cbi8vIGhpbGxzaGFkZSByZW5kZXJpbmcgaXMgZG9uZSBpbiB0d28gc3RlcHMuIHRoZSBwcmVwYXJlIHN0ZXAgZmlyc3QgY2FsY3VsYXRlcyB0aGUgc2xvcGUgb2YgdGhlIHRlcnJhaW4gaW4gdGhlIHggYW5kIHlcbi8vIGRpcmVjdGlvbnMgZm9yIGVhY2ggcGl4ZWwsIGFuZCBzYXZlcyB0aG9zZSB2YWx1ZXMgdG8gYSBmcmFtZWJ1ZmZlciB0ZXh0dXJlIGluIHRoZSByIGFuZCBnIGNoYW5uZWxzLlxuZnVuY3Rpb24gcHJlcGFyZUhpbGxzaGFkZShwYWludGVyLCB0aWxlLCBsYXllciwgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgY29uc3QgZGVtID0gdGlsZS5kZW07XG4gICAgaWYgKGRlbSAmJiBkZW0uZGF0YSkge1xuICAgICAgICBjb25zdCB0aWxlU2l6ZSA9IGRlbS5kaW07XG4gICAgICAgIGNvbnN0IHRleHR1cmVTdHJpZGUgPSBkZW0uc3RyaWRlO1xuXG4gICAgICAgIGNvbnN0IHBpeGVsRGF0YSA9IGRlbS5nZXRQaXhlbHMoKTtcbiAgICAgICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMSk7XG5cbiAgICAgICAgY29udGV4dC5waXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYS5zZXQoZmFsc2UpO1xuICAgICAgICB0aWxlLmRlbVRleHR1cmUgPSB0aWxlLmRlbVRleHR1cmUgfHwgcGFpbnRlci5nZXRUaWxlVGV4dHVyZSh0ZXh0dXJlU3RyaWRlKTtcbiAgICAgICAgaWYgKHRpbGUuZGVtVGV4dHVyZSkge1xuICAgICAgICAgICAgY29uc3QgZGVtVGV4dHVyZSA9IHRpbGUuZGVtVGV4dHVyZTtcbiAgICAgICAgICAgIGRlbVRleHR1cmUudXBkYXRlKHBpeGVsRGF0YSwge3ByZW11bHRpcGx5OiBmYWxzZX0pO1xuICAgICAgICAgICAgZGVtVGV4dHVyZS5iaW5kKGdsLk5FQVJFU1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlsZS5kZW1UZXh0dXJlID0gbmV3IFRleHR1cmUoY29udGV4dCwgcGl4ZWxEYXRhLCBnbC5SR0JBLCB7cHJlbXVsdGlwbHk6IGZhbHNlfSk7XG4gICAgICAgICAgICB0aWxlLmRlbVRleHR1cmUuYmluZChnbC5ORUFSRVNULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuXG4gICAgICAgIGxldCBmYm8gPSB0aWxlLmZibztcblxuICAgICAgICBpZiAoIWZibykge1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyVGV4dHVyZSA9IG5ldyBUZXh0dXJlKGNvbnRleHQsIHt3aWR0aDogdGlsZVNpemUsIGhlaWdodDogdGlsZVNpemUsIGRhdGE6IG51bGx9LCBnbC5SR0JBKTtcbiAgICAgICAgICAgIHJlbmRlclRleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuXG4gICAgICAgICAgICBmYm8gPSB0aWxlLmZibyA9IGNvbnRleHQuY3JlYXRlRnJhbWVidWZmZXIodGlsZVNpemUsIHRpbGVTaXplLCB0cnVlKTtcbiAgICAgICAgICAgIGZiby5jb2xvckF0dGFjaG1lbnQuc2V0KHJlbmRlclRleHR1cmUudGV4dHVyZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LmJpbmRGcmFtZWJ1ZmZlci5zZXQoZmJvLmZyYW1lYnVmZmVyKTtcbiAgICAgICAgY29udGV4dC52aWV3cG9ydC5zZXQoWzAsIDAsIHRpbGVTaXplLCB0aWxlU2l6ZV0pO1xuXG4gICAgICAgIHBhaW50ZXIudXNlUHJvZ3JhbSgnaGlsbHNoYWRlUHJlcGFyZScpLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLFxuICAgICAgICAgICAgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLCBDdWxsRmFjZU1vZGUuZGlzYWJsZWQsXG4gICAgICAgICAgICBoaWxsc2hhZGVVbmlmb3JtUHJlcGFyZVZhbHVlcyh0aWxlLnRpbGVJRCwgZGVtKSxcbiAgICAgICAgICAgIGxheWVyLmlkLCBwYWludGVyLnJhc3RlckJvdW5kc0J1ZmZlcixcbiAgICAgICAgICAgIHBhaW50ZXIucXVhZFRyaWFuZ2xlSW5kZXhCdWZmZXIsIHBhaW50ZXIucmFzdGVyQm91bmRzU2VnbWVudHMpO1xuXG4gICAgICAgIHRpbGUubmVlZHNIaWxsc2hhZGVQcmVwYXJlID0gZmFsc2U7XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtjbGFtcH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IEltYWdlU291cmNlIGZyb20gJy4uL3NvdXJjZS9pbWFnZV9zb3VyY2UnO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi4vdXRpbC9icm93c2VyJztcbmltcG9ydCBTdGVuY2lsTW9kZSBmcm9tICcuLi9nbC9zdGVuY2lsX21vZGUnO1xuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCBDdWxsRmFjZU1vZGUgZnJvbSAnLi4vZ2wvY3VsbF9mYWNlX21vZGUnO1xuaW1wb3J0IHtyYXN0ZXJVbmlmb3JtVmFsdWVzfSBmcm9tICcuL3Byb2dyYW0vcmFzdGVyX3Byb2dyYW0nO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIFJhc3RlclN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvcmFzdGVyX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXdSYXN0ZXI7XG5cbmZ1bmN0aW9uIGRyYXdSYXN0ZXIocGFpbnRlcjogUGFpbnRlciwgc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBsYXllcjogUmFzdGVyU3R5bGVMYXllciwgdGlsZUlEczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pIHtcbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzICE9PSAndHJhbnNsdWNlbnQnKSByZXR1cm47XG4gICAgaWYgKGxheWVyLnBhaW50LmdldCgncmFzdGVyLW9wYWNpdHknKSA9PT0gMCkgcmV0dXJuO1xuICAgIGlmICghdGlsZUlEcy5sZW5ndGgpIHJldHVybjtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBwYWludGVyLmNvbnRleHQ7XG4gICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZUNhY2hlLmdldFNvdXJjZSgpO1xuICAgIGNvbnN0IHByb2dyYW0gPSBwYWludGVyLnVzZVByb2dyYW0oJ3Jhc3RlcicpO1xuXG4gICAgY29uc3QgY29sb3JNb2RlID0gcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCk7XG5cbiAgICBjb25zdCBbc3RlbmNpbE1vZGVzLCBjb29yZHNdID0gc291cmNlIGluc3RhbmNlb2YgSW1hZ2VTb3VyY2UgPyBbe30sIHRpbGVJRHNdIDpcbiAgICAgICAgcGFpbnRlci5zdGVuY2lsQ29uZmlnRm9yT3ZlcmxhcCh0aWxlSURzKTtcblxuICAgIGNvbnN0IG1pblRpbGVaID0gY29vcmRzW2Nvb3Jkcy5sZW5ndGggLSAxXS5vdmVyc2NhbGVkWjtcblxuICAgIGNvbnN0IGFsaWduID0gIXBhaW50ZXIub3B0aW9ucy5tb3Zpbmc7XG4gICAgZm9yIChjb25zdCBjb29yZCBvZiBjb29yZHMpIHtcbiAgICAgICAgLy8gU2V0IHRoZSBsb3dlciB6b29tIGxldmVsIHRvIHN1YmxheWVyIDAsIGFuZCBoaWdoZXIgem9vbSBsZXZlbHMgdG8gaGlnaGVyIHN1YmxheWVyc1xuICAgICAgICAvLyBVc2UgZ2wuTEVTUyB0byBwcmV2ZW50IGRvdWJsZSBkcmF3aW5nIGluIGFyZWFzIHdoZXJlIHRpbGVzIG92ZXJsYXAuXG4gICAgICAgIGNvbnN0IGRlcHRoTW9kZSA9IHBhaW50ZXIuZGVwdGhNb2RlRm9yU3VibGF5ZXIoY29vcmQub3ZlcnNjYWxlZFogLSBtaW5UaWxlWixcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgncmFzdGVyLW9wYWNpdHknKSA9PT0gMSA/IERlcHRoTW9kZS5SZWFkV3JpdGUgOiBEZXB0aE1vZGUuUmVhZE9ubHksIGdsLkxFU1MpO1xuXG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgcG9zTWF0cml4ID0gcGFpbnRlci50cmFuc2Zvcm0uY2FsY3VsYXRlUG9zTWF0cml4KGNvb3JkLnRvVW53cmFwcGVkKCksIGFsaWduKTtcblxuICAgICAgICB0aWxlLnJlZ2lzdGVyRmFkZUR1cmF0aW9uKGxheWVyLnBhaW50LmdldCgncmFzdGVyLWZhZGUtZHVyYXRpb24nKSk7XG5cbiAgICAgICAgY29uc3QgcGFyZW50VGlsZSA9IHNvdXJjZUNhY2hlLmZpbmRMb2FkZWRQYXJlbnQoY29vcmQsIDApLFxuICAgICAgICAgICAgZmFkZSA9IGdldEZhZGVWYWx1ZXModGlsZSwgcGFyZW50VGlsZSwgc291cmNlQ2FjaGUsIGxheWVyLCBwYWludGVyLnRyYW5zZm9ybSk7XG5cbiAgICAgICAgbGV0IHBhcmVudFNjYWxlQnksIHBhcmVudFRMO1xuXG4gICAgICAgIGNvbnN0IHRleHR1cmVGaWx0ZXIgPSBsYXllci5wYWludC5nZXQoJ3Jhc3Rlci1yZXNhbXBsaW5nJykgPT09ICduZWFyZXN0JyA/ICBnbC5ORUFSRVNUIDogZ2wuTElORUFSO1xuXG4gICAgICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuICAgICAgICB0aWxlLnRleHR1cmUuYmluZCh0ZXh0dXJlRmlsdGVyLCBnbC5DTEFNUF9UT19FREdFLCBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1QpO1xuXG4gICAgICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTEpO1xuXG4gICAgICAgIGlmIChwYXJlbnRUaWxlKSB7XG4gICAgICAgICAgICBwYXJlbnRUaWxlLnRleHR1cmUuYmluZCh0ZXh0dXJlRmlsdGVyLCBnbC5DTEFNUF9UT19FREdFLCBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1QpO1xuICAgICAgICAgICAgcGFyZW50U2NhbGVCeSA9IE1hdGgucG93KDIsIHBhcmVudFRpbGUudGlsZUlELm92ZXJzY2FsZWRaIC0gdGlsZS50aWxlSUQub3ZlcnNjYWxlZFopO1xuICAgICAgICAgICAgcGFyZW50VEwgPSBbdGlsZS50aWxlSUQuY2Fub25pY2FsLnggKiBwYXJlbnRTY2FsZUJ5ICUgMSwgdGlsZS50aWxlSUQuY2Fub25pY2FsLnkgKiBwYXJlbnRTY2FsZUJ5ICUgMV07XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbGUudGV4dHVyZS5iaW5kKHRleHR1cmVGaWx0ZXIsIGdsLkNMQU1QX1RPX0VER0UsIGdsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1bmlmb3JtVmFsdWVzID0gcmFzdGVyVW5pZm9ybVZhbHVlcyhwb3NNYXRyaXgsIHBhcmVudFRMIHx8IFswLCAwXSwgcGFyZW50U2NhbGVCeSB8fCAxLCBmYWRlLCBsYXllcik7XG5cbiAgICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEltYWdlU291cmNlKSB7XG4gICAgICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIFN0ZW5jaWxNb2RlLmRpc2FibGVkLCBjb2xvck1vZGUsIEN1bGxGYWNlTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICB1bmlmb3JtVmFsdWVzLCBsYXllci5pZCwgc291cmNlLmJvdW5kc0J1ZmZlcixcbiAgICAgICAgICAgICAgICBwYWludGVyLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyLCBzb3VyY2UuYm91bmRzU2VnbWVudHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZXNbY29vcmQub3ZlcnNjYWxlZFpdLCBjb2xvck1vZGUsIEN1bGxGYWNlTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICB1bmlmb3JtVmFsdWVzLCBsYXllci5pZCwgcGFpbnRlci5yYXN0ZXJCb3VuZHNCdWZmZXIsXG4gICAgICAgICAgICAgICAgcGFpbnRlci5xdWFkVHJpYW5nbGVJbmRleEJ1ZmZlciwgcGFpbnRlci5yYXN0ZXJCb3VuZHNTZWdtZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEZhZGVWYWx1ZXModGlsZSwgcGFyZW50VGlsZSwgc291cmNlQ2FjaGUsIGxheWVyLCB0cmFuc2Zvcm0pIHtcbiAgICBjb25zdCBmYWRlRHVyYXRpb24gPSBsYXllci5wYWludC5nZXQoJ3Jhc3Rlci1mYWRlLWR1cmF0aW9uJyk7XG5cbiAgICBpZiAoZmFkZUR1cmF0aW9uID4gMCkge1xuICAgICAgICBjb25zdCBub3cgPSBicm93c2VyLm5vdygpO1xuICAgICAgICBjb25zdCBzaW5jZVRpbGUgPSAobm93IC0gdGlsZS50aW1lQWRkZWQpIC8gZmFkZUR1cmF0aW9uO1xuICAgICAgICBjb25zdCBzaW5jZVBhcmVudCA9IHBhcmVudFRpbGUgPyAobm93IC0gcGFyZW50VGlsZS50aW1lQWRkZWQpIC8gZmFkZUR1cmF0aW9uIDogLTE7XG5cbiAgICAgICAgY29uc3Qgc291cmNlID0gc291cmNlQ2FjaGUuZ2V0U291cmNlKCk7XG4gICAgICAgIGNvbnN0IGlkZWFsWiA9IHRyYW5zZm9ybS5jb3ZlcmluZ1pvb21MZXZlbCh7XG4gICAgICAgICAgICB0aWxlU2l6ZTogc291cmNlLnRpbGVTaXplLFxuICAgICAgICAgICAgcm91bmRab29tOiBzb3VyY2Uucm91bmRab29tXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGlmIG5vIHBhcmVudCBvciBwYXJlbnQgaXMgb2xkZXIsIGZhZGUgaW47IGlmIHBhcmVudCBpcyB5b3VuZ2VyLCBmYWRlIG91dFxuICAgICAgICBjb25zdCBmYWRlSW4gPSAhcGFyZW50VGlsZSB8fCBNYXRoLmFicyhwYXJlbnRUaWxlLnRpbGVJRC5vdmVyc2NhbGVkWiAtIGlkZWFsWikgPiBNYXRoLmFicyh0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWiAtIGlkZWFsWik7XG5cbiAgICAgICAgY29uc3QgY2hpbGRPcGFjaXR5ID0gKGZhZGVJbiAmJiB0aWxlLnJlZnJlc2hlZFVwb25FeHBpcmF0aW9uKSA/IDEgOiBjbGFtcChmYWRlSW4gPyBzaW5jZVRpbGUgOiAxIC0gc2luY2VQYXJlbnQsIDAsIDEpO1xuXG4gICAgICAgIC8vIHdlIGRvbid0IGNyb3NzZmFkZSB0aWxlcyB0aGF0IHdlcmUganVzdCByZWZyZXNoZWQgdXBvbiBleHBpcmluZzpcbiAgICAgICAgLy8gb25jZSB0aGV5J3JlIG9sZCBlbm91Z2ggdG8gcGFzcyB0aGUgY3Jvc3NmYWRpbmcgdGhyZXNob2xkXG4gICAgICAgIC8vIChmYWRlRHVyYXRpb24pLCB1bnNldCB0aGUgYHJlZnJlc2hlZFVwb25FeHBpcmF0aW9uYCBmbGFnIHNvIHdlIGRvbid0XG4gICAgICAgIC8vIGluY29ycmVjdGx5IGZhaWwgdG8gY3Jvc3NmYWRlIHRoZW0gd2hlbiB6b29taW5nXG4gICAgICAgIGlmICh0aWxlLnJlZnJlc2hlZFVwb25FeHBpcmF0aW9uICYmIHNpbmNlVGlsZSA+PSAxKSB0aWxlLnJlZnJlc2hlZFVwb25FeHBpcmF0aW9uID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHBhcmVudFRpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICBtaXg6IDEgLSBjaGlsZE9wYWNpdHlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IGNoaWxkT3BhY2l0eSxcbiAgICAgICAgICAgICAgICBtaXg6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIG1peDogMFxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi4vZ2wvZGVwdGhfbW9kZSc7XG5pbXBvcnQgU3RlbmNpbE1vZGUgZnJvbSAnLi4vZ2wvc3RlbmNpbF9tb2RlJztcbmltcG9ydCBDdWxsRmFjZU1vZGUgZnJvbSAnLi4vZ2wvY3VsbF9mYWNlX21vZGUnO1xuaW1wb3J0IHtkZWJ1Z1VuaWZvcm1WYWx1ZXN9IGZyb20gJy4vcHJvZ3JhbS9kZWJ1Z19wcm9ncmFtJztcbmltcG9ydCBDb2xvciBmcm9tICcuLi9zdHlsZS1zcGVjL3V0aWwvY29sb3InO1xuaW1wb3J0IENvbG9yTW9kZSBmcm9tICcuLi9nbC9jb2xvcl9tb2RlJztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi9wYWludGVyJztcbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4uL3NvdXJjZS9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuZXhwb3J0IGRlZmF1bHQgZHJhd0RlYnVnO1xuXG5jb25zdCB0b3BDb2xvciA9IG5ldyBDb2xvcigxLCAwLCAwLCAxKTtcbmNvbnN0IGJ0bUNvbG9yID0gbmV3IENvbG9yKDAsIDEsIDAsIDEpO1xuY29uc3QgbGVmdENvbG9yID0gbmV3IENvbG9yKDAsIDAsIDEsIDEpO1xuY29uc3QgcmlnaHRDb2xvciA9IG5ldyBDb2xvcigxLCAwLCAxLCAxKTtcbmNvbnN0IGNlbnRlckNvbG9yID0gbmV3IENvbG9yKDAsIDEsIDEsIDEpO1xuXG5leHBvcnQgZnVuY3Rpb24gZHJhd0RlYnVnUGFkZGluZyhwYWludGVyOiBQYWludGVyKSB7XG4gICAgY29uc3QgcGFkZGluZyA9IHBhaW50ZXIudHJhbnNmb3JtLnBhZGRpbmc7XG4gICAgY29uc3QgbGluZVdpZHRoID0gMztcbiAgICAvLyBUb3BcbiAgICBkcmF3SG9yaXpvbnRhbExpbmUocGFpbnRlciwgcGFpbnRlci50cmFuc2Zvcm0uaGVpZ2h0IC0gKHBhZGRpbmcudG9wIHx8IDApLCBsaW5lV2lkdGgsIHRvcENvbG9yKTtcbiAgICAvLyBCb3R0b21cbiAgICBkcmF3SG9yaXpvbnRhbExpbmUocGFpbnRlciwgcGFkZGluZy5ib3R0b20gfHwgMCwgbGluZVdpZHRoLCBidG1Db2xvcik7XG4gICAgLy8gTGVmdFxuICAgIGRyYXdWZXJ0aWNhbExpbmUocGFpbnRlciwgcGFkZGluZy5sZWZ0IHx8IDAsIGxpbmVXaWR0aCwgbGVmdENvbG9yKTtcbiAgICAvLyBSaWdodFxuICAgIGRyYXdWZXJ0aWNhbExpbmUocGFpbnRlciwgcGFpbnRlci50cmFuc2Zvcm0ud2lkdGggLSAocGFkZGluZy5yaWdodCB8fCAwKSwgbGluZVdpZHRoLCByaWdodENvbG9yKTtcbiAgICAvLyBDZW50ZXJcbiAgICBjb25zdCBjZW50ZXIgPSBwYWludGVyLnRyYW5zZm9ybS5jZW50ZXJQb2ludDtcbiAgICBkcmF3Q3Jvc3NoYWlyKHBhaW50ZXIsIGNlbnRlci54LCBwYWludGVyLnRyYW5zZm9ybS5oZWlnaHQgLSBjZW50ZXIueSwgY2VudGVyQ29sb3IpO1xufVxuXG5mdW5jdGlvbiBkcmF3Q3Jvc3NoYWlyKHBhaW50ZXI6IFBhaW50ZXIsIHg6IG51bWJlciwgeTogbnVtYmVyLCBjb2xvcjogQ29sb3IpIHtcbiAgICBjb25zdCBzaXplID0gMjA7XG4gICAgY29uc3QgbGluZVdpZHRoID0gMjtcbiAgICAvL1ZlcnRpY2FsIGxpbmVcbiAgICBkcmF3RGVidWdTU1JlY3QocGFpbnRlciwgeCAtIGxpbmVXaWR0aCAvIDIsIHkgLSBzaXplIC8gMiwgbGluZVdpZHRoLCBzaXplLCBjb2xvcik7XG4gICAgLy9Ib3Jpem9udGFsIGxpbmVcbiAgICBkcmF3RGVidWdTU1JlY3QocGFpbnRlciwgeCAtIHNpemUgLyAyLCB5IC0gbGluZVdpZHRoIC8gMiwgc2l6ZSwgbGluZVdpZHRoLCBjb2xvcik7XG59XG5cbmZ1bmN0aW9uIGRyYXdIb3Jpem9udGFsTGluZShwYWludGVyOiBQYWludGVyLCB5OiBudW1iZXIsIGxpbmVXaWR0aDogbnVtYmVyLCBjb2xvcjogQ29sb3IpIHtcbiAgICBkcmF3RGVidWdTU1JlY3QocGFpbnRlciwgMCwgeSAgKyBsaW5lV2lkdGggLyAyLCBwYWludGVyLnRyYW5zZm9ybS53aWR0aCwgIGxpbmVXaWR0aCwgY29sb3IpO1xufVxuXG5mdW5jdGlvbiBkcmF3VmVydGljYWxMaW5lKHBhaW50ZXI6IFBhaW50ZXIsIHg6IG51bWJlciwgbGluZVdpZHRoOiBudW1iZXIsIGNvbG9yOiBDb2xvcikge1xuICAgIGRyYXdEZWJ1Z1NTUmVjdChwYWludGVyLCB4IC0gbGluZVdpZHRoIC8gMiwgMCwgbGluZVdpZHRoLCAgcGFpbnRlci50cmFuc2Zvcm0uaGVpZ2h0LCBjb2xvcik7XG59XG5cbmZ1bmN0aW9uIGRyYXdEZWJ1Z1NTUmVjdChwYWludGVyOiBQYWludGVyLCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNvbG9yOiBDb2xvcikge1xuICAgIGNvbnN0IGNvbnRleHQgPSBwYWludGVyLmNvbnRleHQ7XG4gICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuXG4gICAgZ2wuZW5hYmxlKGdsLlNDSVNTT1JfVEVTVCk7XG4gICAgZ2wuc2Npc3Nvcih4ICogYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvLCB5ICogYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvLCB3aWR0aCAqIGJyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpbywgaGVpZ2h0ICogYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICBjb250ZXh0LmNsZWFyKHtjb2xvcn0pO1xuICAgIGdsLmRpc2FibGUoZ2wuU0NJU1NPUl9URVNUKTtcbn1cblxuZnVuY3Rpb24gZHJhd0RlYnVnKHBhaW50ZXI6IFBhaW50ZXIsIHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSwgY29vcmRzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRyYXdEZWJ1Z1RpbGUocGFpbnRlciwgc291cmNlQ2FjaGUsIGNvb3Jkc1tpXSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3RGVidWdUaWxlKHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBjb29yZDogT3ZlcnNjYWxlZFRpbGVJRCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBwYWludGVyLmNvbnRleHQ7XG4gICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuXG4gICAgY29uc3QgcG9zTWF0cml4ID0gY29vcmQucG9zTWF0cml4O1xuICAgIGNvbnN0IHByb2dyYW0gPSBwYWludGVyLnVzZVByb2dyYW0oJ2RlYnVnJyk7XG5cbiAgICBjb25zdCBkZXB0aE1vZGUgPSBEZXB0aE1vZGUuZGlzYWJsZWQ7XG4gICAgY29uc3Qgc3RlbmNpbE1vZGUgPSBTdGVuY2lsTW9kZS5kaXNhYmxlZDtcbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcbiAgICBjb25zdCBpZCA9ICckZGVidWcnO1xuXG4gICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgLy8gQmluZCB0aGUgZW1wdHkgdGV4dHVyZSBmb3IgZHJhd2luZyBvdXRsaW5lc1xuICAgIHBhaW50ZXIuZW1wdHlUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcblxuICAgIHByb2dyYW0uZHJhdyhjb250ZXh0LCBnbC5MSU5FX1NUUklQLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsIEN1bGxGYWNlTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgZGVidWdVbmlmb3JtVmFsdWVzKHBvc01hdHJpeCwgQ29sb3IucmVkKSwgaWQsXG4gICAgICAgIHBhaW50ZXIuZGVidWdCdWZmZXIsIHBhaW50ZXIudGlsZUJvcmRlckluZGV4QnVmZmVyLCBwYWludGVyLmRlYnVnU2VnbWVudHMpO1xuXG4gICAgY29uc3QgdGlsZVJhd0RhdGEgPSBzb3VyY2VDYWNoZS5nZXRUaWxlQnlJRChjb29yZC5rZXkpLmxhdGVzdFJhd1RpbGVEYXRhO1xuICAgIGNvbnN0IHRpbGVCeXRlTGVuZ3RoID0gKHRpbGVSYXdEYXRhICYmIHRpbGVSYXdEYXRhLmJ5dGVMZW5ndGgpIHx8IDA7XG4gICAgY29uc3QgdGlsZVNpemVLYiA9IE1hdGguZmxvb3IodGlsZUJ5dGVMZW5ndGggLyAxMDI0KTtcbiAgICBjb25zdCB0aWxlU2l6ZSA9IHNvdXJjZUNhY2hlLmdldFRpbGUoY29vcmQpLnRpbGVTaXplO1xuICAgIGNvbnN0IHNjYWxlUmF0aW8gPSAoNTEyIC8gTWF0aC5taW4odGlsZVNpemUsIDUxMikgKiAoY29vcmQub3ZlcnNjYWxlZFogLyBwYWludGVyLnRyYW5zZm9ybS56b29tKSkgKiAwLjU7XG4gICAgbGV0IHRpbGVJZFRleHQgPSBjb29yZC5jYW5vbmljYWwudG9TdHJpbmcoKTtcbiAgICBpZiAoY29vcmQub3ZlcnNjYWxlZFogIT09IGNvb3JkLmNhbm9uaWNhbC56KSB7XG4gICAgICAgIHRpbGVJZFRleHQgKz0gYCA9PiAke2Nvb3JkLm92ZXJzY2FsZWRafWA7XG4gICAgfVxuICAgIGNvbnN0IHRpbGVMYWJlbCA9IGAke3RpbGVJZFRleHR9ICR7dGlsZVNpemVLYn1rYmA7XG4gICAgZHJhd1RleHRUb092ZXJsYXkocGFpbnRlciwgdGlsZUxhYmVsKTtcblxuICAgIHByb2dyYW0uZHJhdyhjb250ZXh0LCBnbC5UUklBTkdMRVMsIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIENvbG9yTW9kZS5hbHBoYUJsZW5kZWQsIEN1bGxGYWNlTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgZGVidWdVbmlmb3JtVmFsdWVzKHBvc01hdHJpeCwgQ29sb3IudHJhbnNwYXJlbnQsIHNjYWxlUmF0aW8pLCBpZCxcbiAgICAgICAgcGFpbnRlci5kZWJ1Z0J1ZmZlciwgcGFpbnRlci5xdWFkVHJpYW5nbGVJbmRleEJ1ZmZlciwgcGFpbnRlci5kZWJ1Z1NlZ21lbnRzKTtcbn1cblxuZnVuY3Rpb24gZHJhd1RleHRUb092ZXJsYXkocGFpbnRlcjogUGFpbnRlciwgdGV4dDogc3RyaW5nKSB7XG4gICAgcGFpbnRlci5pbml0RGVidWdPdmVybGF5Q2FudmFzKCk7XG4gICAgY29uc3QgY2FudmFzID0gcGFpbnRlci5kZWJ1Z092ZXJsYXlDYW52YXM7XG4gICAgY29uc3QgZ2wgPSBwYWludGVyLmNvbnRleHQuZ2w7XG4gICAgY29uc3QgY3R4MmQgPSBwYWludGVyLmRlYnVnT3ZlcmxheUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eDJkLmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgY3R4MmQuc2hhZG93Q29sb3IgPSAnd2hpdGUnO1xuICAgIGN0eDJkLnNoYWRvd0JsdXIgPSAyO1xuICAgIGN0eDJkLmxpbmVXaWR0aCA9IDEuNTtcbiAgICBjdHgyZC5zdHJva2VTdHlsZSA9ICd3aGl0ZSc7XG4gICAgY3R4MmQudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgY3R4MmQuZm9udCA9IGBib2xkICR7MzZ9cHggT3BlbiBTYW5zLCBzYW5zLXNlcmlmYDtcbiAgICBjdHgyZC5maWxsVGV4dCh0ZXh0LCA1LCA1KTtcbiAgICBjdHgyZC5zdHJva2VUZXh0KHRleHQsIDUsIDUpO1xuXG4gICAgcGFpbnRlci5kZWJ1Z092ZXJsYXlUZXh0dXJlLnVwZGF0ZShjYW52YXMpO1xuICAgIHBhaW50ZXIuZGVidWdPdmVybGF5VGV4dHVyZS5iaW5kKGdsLkxJTkVBUiwgZ2wuQ0xBTVBfVE9fRURHRSk7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IHdpbmRvdyBmcm9tICcuLi91dGlsL3dpbmRvdyc7XG5cbmltcG9ydCB7bWF0NH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCBFWFRFTlQgZnJvbSAnLi4vZGF0YS9leHRlbnQnO1xuaW1wb3J0IHBpeGVsc1RvVGlsZVVuaXRzIGZyb20gJy4uL3NvdXJjZS9waXhlbHNfdG9fdGlsZV91bml0cyc7XG5pbXBvcnQgU2VnbWVudFZlY3RvciBmcm9tICcuLi9kYXRhL3NlZ21lbnQnO1xuaW1wb3J0IHtSYXN0ZXJCb3VuZHNBcnJheSwgUG9zQXJyYXksIFRyaWFuZ2xlSW5kZXhBcnJheSwgTGluZVN0cmlwSW5kZXhBcnJheX0gZnJvbSAnLi4vZGF0YS9hcnJheV90eXBlcyc7XG5pbXBvcnQge3ZhbHVlc30gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCByYXN0ZXJCb3VuZHNBdHRyaWJ1dGVzIGZyb20gJy4uL2RhdGEvcmFzdGVyX2JvdW5kc19hdHRyaWJ1dGVzJztcbmltcG9ydCBwb3NBdHRyaWJ1dGVzIGZyb20gJy4uL2RhdGEvcG9zX2F0dHJpYnV0ZXMnO1xuaW1wb3J0IFByb2dyYW1Db25maWd1cmF0aW9uIGZyb20gJy4uL2RhdGEvcHJvZ3JhbV9jb25maWd1cmF0aW9uJztcbmltcG9ydCBDcm9zc1RpbGVTeW1ib2xJbmRleCBmcm9tICcuLi9zeW1ib2wvY3Jvc3NfdGlsZV9zeW1ib2xfaW5kZXgnO1xuaW1wb3J0ICogYXMgc2hhZGVycyBmcm9tICcuLi9zaGFkZXJzJztcbmltcG9ydCBQcm9ncmFtIGZyb20gJy4vcHJvZ3JhbSc7XG5pbXBvcnQge3Byb2dyYW1Vbmlmb3Jtc30gZnJvbSAnLi9wcm9ncmFtL3Byb2dyYW1fdW5pZm9ybXMnO1xuaW1wb3J0IENvbnRleHQgZnJvbSAnLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IFN0ZW5jaWxNb2RlIGZyb20gJy4uL2dsL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQgQ29sb3JNb2RlIGZyb20gJy4uL2dsL2NvbG9yX21vZGUnO1xuaW1wb3J0IEN1bGxGYWNlTW9kZSBmcm9tICcuLi9nbC9jdWxsX2ZhY2VfbW9kZSc7XG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuL3RleHR1cmUnO1xuaW1wb3J0IHtjbGlwcGluZ01hc2tVbmlmb3JtVmFsdWVzfSBmcm9tICcuL3Byb2dyYW0vY2xpcHBpbmdfbWFza19wcm9ncmFtJztcbmltcG9ydCBDb2xvciBmcm9tICcuLi9zdHlsZS1zcGVjL3V0aWwvY29sb3InO1xuaW1wb3J0IHN5bWJvbCBmcm9tICcuL2RyYXdfc3ltYm9sJztcbmltcG9ydCBjaXJjbGUgZnJvbSAnLi9kcmF3X2NpcmNsZSc7XG5pbXBvcnQgaGVhdG1hcCBmcm9tICcuL2RyYXdfaGVhdG1hcCc7XG5pbXBvcnQgbGluZSBmcm9tICcuL2RyYXdfbGluZSc7XG5pbXBvcnQgZmlsbCBmcm9tICcuL2RyYXdfZmlsbCc7XG5pbXBvcnQgZmlsbEV4dHJ1c2lvbiBmcm9tICcuL2RyYXdfZmlsbF9leHRydXNpb24nO1xuaW1wb3J0IGhpbGxzaGFkZSBmcm9tICcuL2RyYXdfaGlsbHNoYWRlJztcbmltcG9ydCByYXN0ZXIgZnJvbSAnLi9kcmF3X3Jhc3Rlcic7XG5pbXBvcnQgYmFja2dyb3VuZCBmcm9tICcuL2RyYXdfYmFja2dyb3VuZCc7XG5pbXBvcnQgZGVidWcsIHtkcmF3RGVidWdQYWRkaW5nfSBmcm9tICcuL2RyYXdfZGVidWcnO1xuaW1wb3J0IGN1c3RvbSBmcm9tICcuL2RyYXdfY3VzdG9tJztcblxuY29uc3QgZHJhdyA9IHtcbiAgICBzeW1ib2wsXG4gICAgY2lyY2xlLFxuICAgIGhlYXRtYXAsXG4gICAgbGluZSxcbiAgICBmaWxsLFxuICAgICdmaWxsLWV4dHJ1c2lvbic6IGZpbGxFeHRydXNpb24sXG4gICAgaGlsbHNoYWRlLFxuICAgIHJhc3RlcixcbiAgICBiYWNrZ3JvdW5kLFxuICAgIGRlYnVnLFxuICAgIGN1c3RvbVxufTtcblxuaW1wb3J0IHR5cGUgVHJhbnNmb3JtIGZyb20gJy4uL2dlby90cmFuc2Zvcm0nO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLi9zb3VyY2UvdGlsZSc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vc291cmNlL3RpbGVfaWQnO1xuaW1wb3J0IHR5cGUgU3R5bGUgZnJvbSAnLi4vc3R5bGUvc3R5bGUnO1xuaW1wb3J0IHR5cGUgU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSB7Q3Jvc3NGYWRlZH0gZnJvbSAnLi4vc3R5bGUvcHJvcGVydGllcyc7XG5pbXBvcnQgdHlwZSBMaW5lQXRsYXMgZnJvbSAnLi9saW5lX2F0bGFzJztcbmltcG9ydCB0eXBlIEltYWdlTWFuYWdlciBmcm9tICcuL2ltYWdlX21hbmFnZXInO1xuaW1wb3J0IHR5cGUgR2x5cGhNYW5hZ2VyIGZyb20gJy4vZ2x5cGhfbWFuYWdlcic7XG5pbXBvcnQgdHlwZSBWZXJ0ZXhCdWZmZXIgZnJvbSAnLi4vZ2wvdmVydGV4X2J1ZmZlcic7XG5pbXBvcnQgdHlwZSBJbmRleEJ1ZmZlciBmcm9tICcuLi9nbC9pbmRleF9idWZmZXInO1xuaW1wb3J0IHR5cGUge0RlcHRoUmFuZ2VUeXBlLCBEZXB0aE1hc2tUeXBlLCBEZXB0aEZ1bmNUeXBlfSBmcm9tICcuLi9nbC90eXBlcyc7XG5pbXBvcnQgdHlwZSBSZXNvbHZlZEltYWdlIGZyb20gJy4uL3N0eWxlLXNwZWMvZXhwcmVzc2lvbi90eXBlcy9yZXNvbHZlZF9pbWFnZSc7XG5cbmV4cG9ydCB0eXBlIFJlbmRlclBhc3MgPSAnb2Zmc2NyZWVuJyB8ICdvcGFxdWUnIHwgJ3RyYW5zbHVjZW50JztcblxudHlwZSBQYWludGVyT3B0aW9ucyA9IHtcbiAgICBzaG93T3ZlcmRyYXdJbnNwZWN0b3I6IGJvb2xlYW4sXG4gICAgc2hvd1RpbGVCb3VuZGFyaWVzOiBib29sZWFuLFxuICAgIHNob3dQYWRkaW5nOiBib29sZWFuLFxuICAgIHJvdGF0aW5nOiBib29sZWFuLFxuICAgIHpvb21pbmc6IGJvb2xlYW4sXG4gICAgbW92aW5nOiBib29sZWFuLFxuICAgIGdwdVRpbWluZzogYm9vbGVhbixcbiAgICBmYWRlRHVyYXRpb246IG51bWJlclxufVxuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgcGFpbnRlciBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtDYW52YXN9IGdsIGFuIGV4cGVyaW1lbnRhbC13ZWJnbCBkcmF3aW5nIGNvbnRleHRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFBhaW50ZXIge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm07XG4gICAgX3RpbGVUZXh0dXJlczoge1tfOiBudW1iZXJdOiBBcnJheTxUZXh0dXJlPiB9O1xuICAgIG51bVN1YmxheWVyczogbnVtYmVyO1xuICAgIGRlcHRoRXBzaWxvbjogbnVtYmVyO1xuICAgIGVtcHR5UHJvZ3JhbUNvbmZpZ3VyYXRpb246IFByb2dyYW1Db25maWd1cmF0aW9uO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgdGlsZUV4dGVudEJ1ZmZlcjogVmVydGV4QnVmZmVyO1xuICAgIHRpbGVFeHRlbnRTZWdtZW50czogU2VnbWVudFZlY3RvcjtcbiAgICBkZWJ1Z0J1ZmZlcjogVmVydGV4QnVmZmVyO1xuICAgIGRlYnVnU2VnbWVudHM6IFNlZ21lbnRWZWN0b3I7XG4gICAgcmFzdGVyQm91bmRzQnVmZmVyOiBWZXJ0ZXhCdWZmZXI7XG4gICAgcmFzdGVyQm91bmRzU2VnbWVudHM6IFNlZ21lbnRWZWN0b3I7XG4gICAgdmlld3BvcnRCdWZmZXI6IFZlcnRleEJ1ZmZlcjtcbiAgICB2aWV3cG9ydFNlZ21lbnRzOiBTZWdtZW50VmVjdG9yO1xuICAgIHF1YWRUcmlhbmdsZUluZGV4QnVmZmVyOiBJbmRleEJ1ZmZlcjtcbiAgICB0aWxlQm9yZGVySW5kZXhCdWZmZXI6IEluZGV4QnVmZmVyO1xuICAgIF90aWxlQ2xpcHBpbmdNYXNrSURzOiB7W186IHN0cmluZ106IG51bWJlciB9O1xuICAgIHN0ZW5jaWxDbGVhck1vZGU6IFN0ZW5jaWxNb2RlO1xuICAgIHN0eWxlOiBTdHlsZTtcbiAgICBvcHRpb25zOiBQYWludGVyT3B0aW9ucztcbiAgICBsaW5lQXRsYXM6IExpbmVBdGxhcztcbiAgICBpbWFnZU1hbmFnZXI6IEltYWdlTWFuYWdlcjtcbiAgICBnbHlwaE1hbmFnZXI6IEdseXBoTWFuYWdlcjtcbiAgICBkZXB0aFJhbmdlRm9yM0Q6IERlcHRoUmFuZ2VUeXBlO1xuICAgIG9wYXF1ZVBhc3NDdXRvZmY6IG51bWJlcjtcbiAgICByZW5kZXJQYXNzOiBSZW5kZXJQYXNzO1xuICAgIGN1cnJlbnRMYXllcjogbnVtYmVyO1xuICAgIGN1cnJlbnRTdGVuY2lsU291cmNlOiA/c3RyaW5nO1xuICAgIG5leHRTdGVuY2lsSUQ6IG51bWJlcjtcbiAgICBpZDogc3RyaW5nO1xuICAgIF9zaG93T3ZlcmRyYXdJbnNwZWN0b3I6IGJvb2xlYW47XG4gICAgY2FjaGU6IHtbXzogc3RyaW5nXTogUHJvZ3JhbTwqPiB9O1xuICAgIGNyb3NzVGlsZVN5bWJvbEluZGV4OiBDcm9zc1RpbGVTeW1ib2xJbmRleDtcbiAgICBzeW1ib2xGYWRlQ2hhbmdlOiBudW1iZXI7XG4gICAgZ3B1VGltZXJzOiB7W186IHN0cmluZ106IGFueSB9O1xuICAgIGVtcHR5VGV4dHVyZTogVGV4dHVyZTtcbiAgICBkZWJ1Z092ZXJsYXlUZXh0dXJlOiBUZXh0dXJlO1xuICAgIGRlYnVnT3ZlcmxheUNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0cmFuc2Zvcm06IFRyYW5zZm9ybSkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBuZXcgQ29udGV4dChnbCk7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB0aGlzLl90aWxlVGV4dHVyZXMgPSB7fTtcblxuICAgICAgICB0aGlzLnNldHVwKCk7XG5cbiAgICAgICAgLy8gV2l0aGluIGVhY2ggbGF5ZXIgdGhlcmUgYXJlIG11bHRpcGxlIGRpc3RpbmN0IHotcGxhbmVzIHRoYXQgY2FuIGJlIGRyYXduIHRvLlxuICAgICAgICAvLyBUaGlzIGlzIGltcGxlbWVudGVkIHVzaW5nIHRoZSBXZWJHTCBkZXB0aCBidWZmZXIuXG4gICAgICAgIHRoaXMubnVtU3VibGF5ZXJzID0gU291cmNlQ2FjaGUubWF4VW5kZXJ6b29taW5nICsgU291cmNlQ2FjaGUubWF4T3Zlcnpvb21pbmcgKyAxO1xuICAgICAgICB0aGlzLmRlcHRoRXBzaWxvbiA9IDEgLyBNYXRoLnBvdygyLCAxNik7XG5cbiAgICAgICAgdGhpcy5jcm9zc1RpbGVTeW1ib2xJbmRleCA9IG5ldyBDcm9zc1RpbGVTeW1ib2xJbmRleCgpO1xuXG4gICAgICAgIHRoaXMuZ3B1VGltZXJzID0ge307XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBVcGRhdGUgdGhlIEdMIHZpZXdwb3J0LCBwcm9qZWN0aW9uIG1hdHJpeCwgYW5kIHRyYW5zZm9ybXMgdG8gY29tcGVuc2F0ZVxuICAgICAqIGZvciBhIG5ldyB3aWR0aCBhbmQgaGVpZ2h0IHZhbHVlLlxuICAgICAqL1xuICAgIHJlc2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGggKiBicm93c2VyLmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0ICogYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICB0aGlzLmNvbnRleHQudmlld3BvcnQuc2V0KFswLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodF0pO1xuXG4gICAgICAgIGlmICh0aGlzLnN0eWxlKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxheWVySWQgb2YgdGhpcy5zdHlsZS5fb3JkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLl9sYXllcnNbbGF5ZXJJZF0ucmVzaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXR1cCgpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuICAgICAgICBjb25zdCB0aWxlRXh0ZW50QXJyYXkgPSBuZXcgUG9zQXJyYXkoKTtcbiAgICAgICAgdGlsZUV4dGVudEFycmF5LmVtcGxhY2VCYWNrKDAsIDApO1xuICAgICAgICB0aWxlRXh0ZW50QXJyYXkuZW1wbGFjZUJhY2soRVhURU5ULCAwKTtcbiAgICAgICAgdGlsZUV4dGVudEFycmF5LmVtcGxhY2VCYWNrKDAsIEVYVEVOVCk7XG4gICAgICAgIHRpbGVFeHRlbnRBcnJheS5lbXBsYWNlQmFjayhFWFRFTlQsIEVYVEVOVCk7XG4gICAgICAgIHRoaXMudGlsZUV4dGVudEJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlVmVydGV4QnVmZmVyKHRpbGVFeHRlbnRBcnJheSwgcG9zQXR0cmlidXRlcy5tZW1iZXJzKTtcbiAgICAgICAgdGhpcy50aWxlRXh0ZW50U2VnbWVudHMgPSBTZWdtZW50VmVjdG9yLnNpbXBsZVNlZ21lbnQoMCwgMCwgNCwgMik7XG5cbiAgICAgICAgY29uc3QgZGVidWdBcnJheSA9IG5ldyBQb3NBcnJheSgpO1xuICAgICAgICBkZWJ1Z0FycmF5LmVtcGxhY2VCYWNrKDAsIDApO1xuICAgICAgICBkZWJ1Z0FycmF5LmVtcGxhY2VCYWNrKEVYVEVOVCwgMCk7XG4gICAgICAgIGRlYnVnQXJyYXkuZW1wbGFjZUJhY2soMCwgRVhURU5UKTtcbiAgICAgICAgZGVidWdBcnJheS5lbXBsYWNlQmFjayhFWFRFTlQsIEVYVEVOVCk7XG4gICAgICAgIHRoaXMuZGVidWdCdWZmZXIgPSBjb250ZXh0LmNyZWF0ZVZlcnRleEJ1ZmZlcihkZWJ1Z0FycmF5LCBwb3NBdHRyaWJ1dGVzLm1lbWJlcnMpO1xuICAgICAgICB0aGlzLmRlYnVnU2VnbWVudHMgPSBTZWdtZW50VmVjdG9yLnNpbXBsZVNlZ21lbnQoMCwgMCwgNCwgNSk7XG5cbiAgICAgICAgY29uc3QgcmFzdGVyQm91bmRzQXJyYXkgPSBuZXcgUmFzdGVyQm91bmRzQXJyYXkoKTtcbiAgICAgICAgcmFzdGVyQm91bmRzQXJyYXkuZW1wbGFjZUJhY2soMCwgMCwgMCwgMCk7XG4gICAgICAgIHJhc3RlckJvdW5kc0FycmF5LmVtcGxhY2VCYWNrKEVYVEVOVCwgMCwgRVhURU5ULCAwKTtcbiAgICAgICAgcmFzdGVyQm91bmRzQXJyYXkuZW1wbGFjZUJhY2soMCwgRVhURU5ULCAwLCBFWFRFTlQpO1xuICAgICAgICByYXN0ZXJCb3VuZHNBcnJheS5lbXBsYWNlQmFjayhFWFRFTlQsIEVYVEVOVCwgRVhURU5ULCBFWFRFTlQpO1xuICAgICAgICB0aGlzLnJhc3RlckJvdW5kc0J1ZmZlciA9IGNvbnRleHQuY3JlYXRlVmVydGV4QnVmZmVyKHJhc3RlckJvdW5kc0FycmF5LCByYXN0ZXJCb3VuZHNBdHRyaWJ1dGVzLm1lbWJlcnMpO1xuICAgICAgICB0aGlzLnJhc3RlckJvdW5kc1NlZ21lbnRzID0gU2VnbWVudFZlY3Rvci5zaW1wbGVTZWdtZW50KDAsIDAsIDQsIDIpO1xuXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0QXJyYXkgPSBuZXcgUG9zQXJyYXkoKTtcbiAgICAgICAgdmlld3BvcnRBcnJheS5lbXBsYWNlQmFjaygwLCAwKTtcbiAgICAgICAgdmlld3BvcnRBcnJheS5lbXBsYWNlQmFjaygxLCAwKTtcbiAgICAgICAgdmlld3BvcnRBcnJheS5lbXBsYWNlQmFjaygwLCAxKTtcbiAgICAgICAgdmlld3BvcnRBcnJheS5lbXBsYWNlQmFjaygxLCAxKTtcbiAgICAgICAgdGhpcy52aWV3cG9ydEJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlVmVydGV4QnVmZmVyKHZpZXdwb3J0QXJyYXksIHBvc0F0dHJpYnV0ZXMubWVtYmVycyk7XG4gICAgICAgIHRoaXMudmlld3BvcnRTZWdtZW50cyA9IFNlZ21lbnRWZWN0b3Iuc2ltcGxlU2VnbWVudCgwLCAwLCA0LCAyKTtcblxuICAgICAgICBjb25zdCB0aWxlTGluZVN0cmlwSW5kaWNlcyA9IG5ldyBMaW5lU3RyaXBJbmRleEFycmF5KCk7XG4gICAgICAgIHRpbGVMaW5lU3RyaXBJbmRpY2VzLmVtcGxhY2VCYWNrKDApO1xuICAgICAgICB0aWxlTGluZVN0cmlwSW5kaWNlcy5lbXBsYWNlQmFjaygxKTtcbiAgICAgICAgdGlsZUxpbmVTdHJpcEluZGljZXMuZW1wbGFjZUJhY2soMyk7XG4gICAgICAgIHRpbGVMaW5lU3RyaXBJbmRpY2VzLmVtcGxhY2VCYWNrKDIpO1xuICAgICAgICB0aWxlTGluZVN0cmlwSW5kaWNlcy5lbXBsYWNlQmFjaygwKTtcbiAgICAgICAgdGhpcy50aWxlQm9yZGVySW5kZXhCdWZmZXIgPSBjb250ZXh0LmNyZWF0ZUluZGV4QnVmZmVyKHRpbGVMaW5lU3RyaXBJbmRpY2VzKTtcblxuICAgICAgICBjb25zdCBxdWFkVHJpYW5nbGVJbmRpY2VzID0gbmV3IFRyaWFuZ2xlSW5kZXhBcnJheSgpO1xuICAgICAgICBxdWFkVHJpYW5nbGVJbmRpY2VzLmVtcGxhY2VCYWNrKDAsIDEsIDIpO1xuICAgICAgICBxdWFkVHJpYW5nbGVJbmRpY2VzLmVtcGxhY2VCYWNrKDIsIDEsIDMpO1xuICAgICAgICB0aGlzLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyID0gY29udGV4dC5jcmVhdGVJbmRleEJ1ZmZlcihxdWFkVHJpYW5nbGVJbmRpY2VzKTtcblxuICAgICAgICB0aGlzLmVtcHR5VGV4dHVyZSA9IG5ldyBUZXh0dXJlKGNvbnRleHQsIHtcbiAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDAsIDBdKVxuICAgICAgICB9LCBjb250ZXh0LmdsLlJHQkEpO1xuXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuICAgICAgICB0aGlzLnN0ZW5jaWxDbGVhck1vZGUgPSBuZXcgU3RlbmNpbE1vZGUoe2Z1bmM6IGdsLkFMV0FZUywgbWFzazogMH0sIDB4MCwgMHhGRiwgZ2wuWkVSTywgZ2wuWkVSTywgZ2wuWkVSTyk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBSZXNldCB0aGUgZHJhd2luZyBjYW52YXMgYnkgY2xlYXJpbmcgdGhlIHN0ZW5jaWwgYnVmZmVyIHNvIHRoYXQgd2UgY2FuIGRyYXdcbiAgICAgKiBuZXcgdGlsZXMgYXQgdGhlIHNhbWUgbG9jYXRpb24sIHdoaWxlIHJldGFpbmluZyBwcmV2aW91c2x5IGRyYXduIHBpeGVscy5cbiAgICAgKi9cbiAgICBjbGVhclN0ZW5jaWwoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgICAgICB0aGlzLm5leHRTdGVuY2lsSUQgPSAxO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVuY2lsU291cmNlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIEFzIGEgdGVtcG9yYXJ5IHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy81NDkwLFxuICAgICAgICAvLyBwZW5kaW5nIGFuIHVwc3RyZWFtIGZpeCwgd2UgZHJhdyBhIGZ1bGxzY3JlZW4gc3RlbmNpbD0wIGNsaXBwaW5nIG1hc2sgaGVyZSxcbiAgICAgICAgLy8gZWZmZWN0aXZlbHkgY2xlYXJpbmcgdGhlIHN0ZW5jaWwgYnVmZmVyOiBvbmNlIGFuIHVwc3RyZWFtIHBhdGNoIGxhbmRzLCByZW1vdmVcbiAgICAgICAgLy8gdGhpcyBmdW5jdGlvbiBpbiBmYXZvciBvZiBjb250ZXh0LmNsZWFyKHsgc3RlbmNpbDogMHgwIH0pXG5cbiAgICAgICAgY29uc3QgbWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcbiAgICAgICAgbWF0NC5vcnRobyhtYXRyaXgsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCAwLCAxKTtcbiAgICAgICAgbWF0NC5zY2FsZShtYXRyaXgsIG1hdHJpeCwgW2dsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCwgMF0pO1xuXG4gICAgICAgIHRoaXMudXNlUHJvZ3JhbSgnY2xpcHBpbmdNYXNrJykuZHJhdyhjb250ZXh0LCBnbC5UUklBTkdMRVMsXG4gICAgICAgICAgICBEZXB0aE1vZGUuZGlzYWJsZWQsIHRoaXMuc3RlbmNpbENsZWFyTW9kZSwgQ29sb3JNb2RlLmRpc2FibGVkLCBDdWxsRmFjZU1vZGUuZGlzYWJsZWQsXG4gICAgICAgICAgICBjbGlwcGluZ01hc2tVbmlmb3JtVmFsdWVzKG1hdHJpeCksXG4gICAgICAgICAgICAnJGNsaXBwaW5nJywgdGhpcy52aWV3cG9ydEJ1ZmZlcixcbiAgICAgICAgICAgIHRoaXMucXVhZFRyaWFuZ2xlSW5kZXhCdWZmZXIsIHRoaXMudmlld3BvcnRTZWdtZW50cyk7XG4gICAgfVxuXG4gICAgX3JlbmRlclRpbGVDbGlwcGluZ01hc2tzKGxheWVyOiBTdHlsZUxheWVyLCB0aWxlSURzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPikge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RlbmNpbFNvdXJjZSA9PT0gbGF5ZXIuc291cmNlIHx8ICFsYXllci5pc1RpbGVDbGlwcGVkKCkgfHwgIXRpbGVJRHMgfHwgIXRpbGVJRHMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5jdXJyZW50U3RlbmNpbFNvdXJjZSA9IGxheWVyLnNvdXJjZTtcblxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG5cbiAgICAgICAgaWYgKHRoaXMubmV4dFN0ZW5jaWxJRCArIHRpbGVJRHMubGVuZ3RoID4gMjU2KSB7XG4gICAgICAgICAgICAvLyB3ZSdsbCBydW4gb3V0IG9mIGZyZXNoIElEcyBzbyB3ZSBuZWVkIHRvIGNsZWFyIGFuZCBzdGFydCBmcm9tIHNjcmF0Y2hcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTdGVuY2lsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LnNldENvbG9yTW9kZShDb2xvck1vZGUuZGlzYWJsZWQpO1xuICAgICAgICBjb250ZXh0LnNldERlcHRoTW9kZShEZXB0aE1vZGUuZGlzYWJsZWQpO1xuXG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLnVzZVByb2dyYW0oJ2NsaXBwaW5nTWFzaycpO1xuXG4gICAgICAgIHRoaXMuX3RpbGVDbGlwcGluZ01hc2tJRHMgPSB7fTtcblxuICAgICAgICBmb3IgKGNvbnN0IHRpbGVJRCBvZiB0aWxlSURzKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHRoaXMuX3RpbGVDbGlwcGluZ01hc2tJRHNbdGlsZUlELmtleV0gPSB0aGlzLm5leHRTdGVuY2lsSUQrKztcblxuICAgICAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUywgRGVwdGhNb2RlLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgIC8vIFRlc3RzIHdpbGwgYWx3YXlzIHBhc3MsIGFuZCByZWYgdmFsdWUgd2lsbCBiZSB3cml0dGVuIHRvIHN0ZW5jaWwgYnVmZmVyLlxuICAgICAgICAgICAgICAgIG5ldyBTdGVuY2lsTW9kZSh7ZnVuYzogZ2wuQUxXQVlTLCBtYXNrOiAwfSwgaWQsIDB4RkYsIGdsLktFRVAsIGdsLktFRVAsIGdsLlJFUExBQ0UpLFxuICAgICAgICAgICAgICAgIENvbG9yTW9kZS5kaXNhYmxlZCwgQ3VsbEZhY2VNb2RlLmRpc2FibGVkLCBjbGlwcGluZ01hc2tVbmlmb3JtVmFsdWVzKHRpbGVJRC5wb3NNYXRyaXgpLFxuICAgICAgICAgICAgICAgICckY2xpcHBpbmcnLCB0aGlzLnRpbGVFeHRlbnRCdWZmZXIsXG4gICAgICAgICAgICAgICAgdGhpcy5xdWFkVHJpYW5nbGVJbmRleEJ1ZmZlciwgdGhpcy50aWxlRXh0ZW50U2VnbWVudHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RlbmNpbE1vZGVGb3IzRCgpOiBTdGVuY2lsTW9kZSB7XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZW5jaWxTb3VyY2UgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMubmV4dFN0ZW5jaWxJRCArIDEgPiAyNTYpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTdGVuY2lsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpZCA9IHRoaXMubmV4dFN0ZW5jaWxJRCsrO1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGVuY2lsTW9kZSh7ZnVuYzogZ2wuTk9URVFVQUwsIG1hc2s6IDB4RkZ9LCBpZCwgMHhGRiwgZ2wuS0VFUCwgZ2wuS0VFUCwgZ2wuUkVQTEFDRSk7XG4gICAgfVxuXG4gICAgc3RlbmNpbE1vZGVGb3JDbGlwcGluZyh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpOiBTdGVuY2lsTW9kZSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuICAgICAgICByZXR1cm4gbmV3IFN0ZW5jaWxNb2RlKHtmdW5jOiBnbC5FUVVBTCwgbWFzazogMHhGRn0sIHRoaXMuX3RpbGVDbGlwcGluZ01hc2tJRHNbdGlsZUlELmtleV0sIDB4MDAsIGdsLktFRVAsIGdsLktFRVAsIGdsLlJFUExBQ0UpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogU29ydCBjb29yZGluYXRlcyBieSBaIGFzIGRyYXdpbmcgdGlsZXMgaXMgZG9uZSBpbiBaLWRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogQWxsIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUgWiB3cml0ZSB0aGUgc2FtZSBzdGVuY2lsIHZhbHVlLiAgQ2hpbGRyZW5cbiAgICAgKiBzdGVuY2lsIHZhbHVlcyBhcmUgZ3JlYXRlciB0aGFuIHBhcmVudCdzLiAgVGhpcyBpcyB1c2VkIG9ubHkgZm9yIHJhc3RlclxuICAgICAqIGFuZCByYXN0ZXItZGVtIHRpbGVzLCB3aGljaCBhcmUgYWxyZWFkeSBjbGlwcGVkIHRvIHRpbGUgYm91bmRhcmllcywgdG9cbiAgICAgKiBtYXNrIGFyZWEgb2YgdGlsZSBvdmVybGFwcGVkIGJ5IGNoaWxkcmVuIHRpbGVzLlxuICAgICAqIFN0ZW5jaWwgcmVmIHZhbHVlcyBjb250aW51ZSByYW5nZSB1c2VkIGluIF90aWxlQ2xpcHBpbmdNYXNrSURzLlxuICAgICAqXG4gICAgICogUmV0dXJucyBbU3RlbmNpbE1vZGUgZm9yIHRpbGUgb3ZlcnNjYWxlWiBtYXAsIHNvcnRlZENvb3Jkc10uXG4gICAgICovXG4gICAgc3RlbmNpbENvbmZpZ0Zvck92ZXJsYXAodGlsZUlEczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pOiBbe1tfOiBudW1iZXJdOiAkUmVhZE9ubHk8U3RlbmNpbE1vZGU+fSwgQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD5dIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHRpbGVJRHMuc29ydCgoYSwgYikgPT4gYi5vdmVyc2NhbGVkWiAtIGEub3ZlcnNjYWxlZFopO1xuICAgICAgICBjb25zdCBtaW5UaWxlWiA9IGNvb3Jkc1tjb29yZHMubGVuZ3RoIC0gMV0ub3ZlcnNjYWxlZFo7XG4gICAgICAgIGNvbnN0IHN0ZW5jaWxWYWx1ZXMgPSBjb29yZHNbMF0ub3ZlcnNjYWxlZFogLSBtaW5UaWxlWiArIDE7XG4gICAgICAgIGlmIChzdGVuY2lsVmFsdWVzID4gMSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U3RlbmNpbFNvdXJjZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0aGlzLm5leHRTdGVuY2lsSUQgKyBzdGVuY2lsVmFsdWVzID4gMjU2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclN0ZW5jaWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHpUb1N0ZW5jaWxNb2RlID0ge307XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZW5jaWxWYWx1ZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIHpUb1N0ZW5jaWxNb2RlW2kgKyBtaW5UaWxlWl0gPSBuZXcgU3RlbmNpbE1vZGUoe2Z1bmM6IGdsLkdFUVVBTCwgbWFzazogMHhGRn0sIGkgKyB0aGlzLm5leHRTdGVuY2lsSUQsIDB4RkYsIGdsLktFRVAsIGdsLktFRVAsIGdsLlJFUExBQ0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5uZXh0U3RlbmNpbElEICs9IHN0ZW5jaWxWYWx1ZXM7XG4gICAgICAgICAgICByZXR1cm4gW3pUb1N0ZW5jaWxNb2RlLCBjb29yZHNdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbe1ttaW5UaWxlWl06IFN0ZW5jaWxNb2RlLmRpc2FibGVkfSwgY29vcmRzXTtcbiAgICB9XG5cbiAgICBjb2xvck1vZGVGb3JSZW5kZXJQYXNzKCk6ICRSZWFkT25seTxDb2xvck1vZGU+IHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIGlmICh0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bU92ZXJkcmF3U3RlcHMgPSA4O1xuICAgICAgICAgICAgY29uc3QgYSA9IDEgLyBudW1PdmVyZHJhd1N0ZXBzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yTW9kZShbZ2wuQ09OU1RBTlRfQ09MT1IsIGdsLk9ORV0sIG5ldyBDb2xvcihhLCBhLCBhLCAwKSwgW3RydWUsIHRydWUsIHRydWUsIHRydWVdKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlbmRlclBhc3MgPT09ICdvcGFxdWUnKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29sb3JNb2RlLnVuYmxlbmRlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBDb2xvck1vZGUuYWxwaGFCbGVuZGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVwdGhNb2RlRm9yU3VibGF5ZXIobjogbnVtYmVyLCBtYXNrOiBEZXB0aE1hc2tUeXBlLCBmdW5jOiA/RGVwdGhGdW5jVHlwZSk6ICRSZWFkT25seTxEZXB0aE1vZGU+IHtcbiAgICAgICAgaWYgKCF0aGlzLm9wYXF1ZVBhc3NFbmFibGVkRm9yTGF5ZXIoKSkgcmV0dXJuIERlcHRoTW9kZS5kaXNhYmxlZDtcbiAgICAgICAgY29uc3QgZGVwdGggPSAxIC0gKCgxICsgdGhpcy5jdXJyZW50TGF5ZXIpICogdGhpcy5udW1TdWJsYXllcnMgKyBuKSAqIHRoaXMuZGVwdGhFcHNpbG9uO1xuICAgICAgICByZXR1cm4gbmV3IERlcHRoTW9kZShmdW5jIHx8IHRoaXMuY29udGV4dC5nbC5MRVFVQUwsIG1hc2ssIFtkZXB0aCwgZGVwdGhdKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFRoZSBvcGFxdWUgcGFzcyBhbmQgM0QgbGF5ZXJzIGJvdGggdXNlIHRoZSBkZXB0aCBidWZmZXIuXG4gICAgICogTGF5ZXJzIGRyYXduIGFib3ZlIDNEIGxheWVycyBuZWVkIHRvIGJlIGRyYXduIHVzaW5nIHRoZVxuICAgICAqIHBhaW50ZXIncyBhbGdvcml0aG0gc28gdGhhdCB0aGV5IGFwcGVhciBhYm92ZSAzRCBmZWF0dXJlcy5cbiAgICAgKiBUaGlzIHJldHVybnMgdHJ1ZSBmb3IgbGF5ZXJzIHRoYXQgY2FuIGJlIGRyYXduIHVzaW5nIHRoZVxuICAgICAqIG9wYXF1ZSBwYXNzLlxuICAgICAqL1xuICAgIG9wYXF1ZVBhc3NFbmFibGVkRm9yTGF5ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRMYXllciA8IHRoaXMub3BhcXVlUGFzc0N1dG9mZjtcbiAgICB9XG5cbiAgICByZW5kZXIoc3R5bGU6IFN0eWxlLCBvcHRpb25zOiBQYWludGVyT3B0aW9ucykge1xuICAgICAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy5saW5lQXRsYXMgPSBzdHlsZS5saW5lQXRsYXM7XG4gICAgICAgIHRoaXMuaW1hZ2VNYW5hZ2VyID0gc3R5bGUuaW1hZ2VNYW5hZ2VyO1xuICAgICAgICB0aGlzLmdseXBoTWFuYWdlciA9IHN0eWxlLmdseXBoTWFuYWdlcjtcblxuICAgICAgICB0aGlzLnN5bWJvbEZhZGVDaGFuZ2UgPSBzdHlsZS5wbGFjZW1lbnQuc3ltYm9sRmFkZUNoYW5nZShicm93c2VyLm5vdygpKTtcblxuICAgICAgICB0aGlzLmltYWdlTWFuYWdlci5iZWdpbkZyYW1lKCk7XG5cbiAgICAgICAgY29uc3QgbGF5ZXJJZHMgPSB0aGlzLnN0eWxlLl9vcmRlcjtcbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGVzID0gdGhpcy5zdHlsZS5zb3VyY2VDYWNoZXM7XG5cbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlID0gc291cmNlQ2FjaGVzW2lkXTtcbiAgICAgICAgICAgIGlmIChzb3VyY2VDYWNoZS51c2VkKSB7XG4gICAgICAgICAgICAgICAgc291cmNlQ2FjaGUucHJlcGFyZSh0aGlzLmNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29vcmRzQXNjZW5kaW5nOiB7W186IHN0cmluZ106IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+fSA9IHt9O1xuICAgICAgICBjb25zdCBjb29yZHNEZXNjZW5kaW5nOiB7W186IHN0cmluZ106IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+fSA9IHt9O1xuICAgICAgICBjb25zdCBjb29yZHNEZXNjZW5kaW5nU3ltYm9sOiB7W186IHN0cmluZ106IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+fSA9IHt9O1xuXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gc291cmNlQ2FjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHNvdXJjZUNhY2hlc1tpZF07XG4gICAgICAgICAgICBjb29yZHNBc2NlbmRpbmdbaWRdID0gc291cmNlQ2FjaGUuZ2V0VmlzaWJsZUNvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgICBjb29yZHNEZXNjZW5kaW5nW2lkXSA9IGNvb3Jkc0FzY2VuZGluZ1tpZF0uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICBjb29yZHNEZXNjZW5kaW5nU3ltYm9sW2lkXSA9IHNvdXJjZUNhY2hlLmdldFZpc2libGVDb29yZGluYXRlcyh0cnVlKS5yZXZlcnNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wYXF1ZVBhc3NDdXRvZmYgPSBJbmZpbml0eTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcklkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGF5ZXJJZCA9IGxheWVySWRzW2ldO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3R5bGUuX2xheWVyc1tsYXllcklkXS5pczNEKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wYXF1ZVBhc3NDdXRvZmYgPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT2Zmc2NyZWVuIHBhc3MgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gV2UgZmlyc3QgZG8gYWxsIHJlbmRlcmluZyB0aGF0IHJlcXVpcmVzIHJlbmRlcmluZyB0byBhIHNlcGFyYXRlXG4gICAgICAgIC8vIGZyYW1lYnVmZmVyLCBhbmQgdGhlbiBzYXZlIHRob3NlIGZvciByZW5kZXJpbmcgYmFjayB0byB0aGUgbWFwXG4gICAgICAgIC8vIGxhdGVyOiBpbiBkb2luZyB0aGlzIHdlIGF2b2lkIGRvaW5nIGV4cGVuc2l2ZSBmcmFtZWJ1ZmZlciByZXN0b3Jlcy5cbiAgICAgICAgdGhpcy5yZW5kZXJQYXNzID0gJ29mZnNjcmVlbic7XG5cbiAgICAgICAgZm9yIChjb25zdCBsYXllcklkIG9mIGxheWVySWRzKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuc3R5bGUuX2xheWVyc1tsYXllcklkXTtcbiAgICAgICAgICAgIGlmICghbGF5ZXIuaGFzT2Zmc2NyZWVuUGFzcygpIHx8IGxheWVyLmlzSGlkZGVuKHRoaXMudHJhbnNmb3JtLnpvb20pKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgY29vcmRzID0gY29vcmRzRGVzY2VuZGluZ1tsYXllci5zb3VyY2VdO1xuICAgICAgICAgICAgaWYgKGxheWVyLnR5cGUgIT09ICdjdXN0b20nICYmICFjb29yZHMubGVuZ3RoKSBjb250aW51ZTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJMYXllcih0aGlzLCBzb3VyY2VDYWNoZXNbbGF5ZXIuc291cmNlXSwgbGF5ZXIsIGNvb3Jkcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWJpbmQgdGhlIG1haW4gZnJhbWVidWZmZXIgbm93IHRoYXQgYWxsIG9mZnNjcmVlbiBsYXllcnMgaGF2ZSBiZWVuIHJlbmRlcmVkOlxuICAgICAgICB0aGlzLmNvbnRleHQuYmluZEZyYW1lYnVmZmVyLnNldChudWxsKTtcblxuICAgICAgICAvLyBDbGVhciBidWZmZXJzIGluIHByZXBhcmF0aW9uIGZvciBkcmF3aW5nIHRvIHRoZSBtYWluIGZyYW1lYnVmZmVyXG4gICAgICAgIHRoaXMuY29udGV4dC5jbGVhcih7Y29sb3I6IG9wdGlvbnMuc2hvd092ZXJkcmF3SW5zcGVjdG9yID8gQ29sb3IuYmxhY2sgOiBDb2xvci50cmFuc3BhcmVudCwgZGVwdGg6IDF9KTtcbiAgICAgICAgdGhpcy5jbGVhclN0ZW5jaWwoKTtcblxuICAgICAgICB0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IgPSBvcHRpb25zLnNob3dPdmVyZHJhd0luc3BlY3RvcjtcbiAgICAgICAgdGhpcy5kZXB0aFJhbmdlRm9yM0QgPSBbMCwgMSAtICgoc3R5bGUuX29yZGVyLmxlbmd0aCArIDIpICogdGhpcy5udW1TdWJsYXllcnMgKiB0aGlzLmRlcHRoRXBzaWxvbildO1xuXG4gICAgICAgIC8vIE9wYXF1ZSBwYXNzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIC8vIERyYXcgb3BhcXVlIGxheWVycyB0b3AtdG8tYm90dG9tIGZpcnN0LlxuICAgICAgICB0aGlzLnJlbmRlclBhc3MgPSAnb3BhcXVlJztcblxuICAgICAgICBmb3IgKHRoaXMuY3VycmVudExheWVyID0gbGF5ZXJJZHMubGVuZ3RoIC0gMTsgdGhpcy5jdXJyZW50TGF5ZXIgPj0gMDsgdGhpcy5jdXJyZW50TGF5ZXItLSkge1xuICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLnN0eWxlLl9sYXllcnNbbGF5ZXJJZHNbdGhpcy5jdXJyZW50TGF5ZXJdXTtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlID0gc291cmNlQ2FjaGVzW2xheWVyLnNvdXJjZV07XG4gICAgICAgICAgICBjb25zdCBjb29yZHMgPSBjb29yZHNBc2NlbmRpbmdbbGF5ZXIuc291cmNlXTtcblxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGlsZUNsaXBwaW5nTWFza3MobGF5ZXIsIGNvb3Jkcyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxheWVyKHRoaXMsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zbHVjZW50IHBhc3MgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gRHJhdyBhbGwgb3RoZXIgbGF5ZXJzIGJvdHRvbS10by10b3AuXG4gICAgICAgIHRoaXMucmVuZGVyUGFzcyA9ICd0cmFuc2x1Y2VudCc7XG5cbiAgICAgICAgZm9yICh0aGlzLmN1cnJlbnRMYXllciA9IDA7IHRoaXMuY3VycmVudExheWVyIDwgbGF5ZXJJZHMubGVuZ3RoOyB0aGlzLmN1cnJlbnRMYXllcisrKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuc3R5bGUuX2xheWVyc1tsYXllcklkc1t0aGlzLmN1cnJlbnRMYXllcl1dO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSBzb3VyY2VDYWNoZXNbbGF5ZXIuc291cmNlXTtcblxuICAgICAgICAgICAgLy8gRm9yIHN5bWJvbCBsYXllcnMgaW4gdGhlIHRyYW5zbHVjZW50IHBhc3MsIHdlIGFkZCBleHRyYSB0aWxlcyB0byB0aGUgcmVuZGVyYWJsZSBzZXRcbiAgICAgICAgICAgIC8vIGZvciBjcm9zcy10aWxlIHN5bWJvbCBmYWRpbmcuIFN5bWJvbCBsYXllcnMgZG9uJ3QgdXNlIHRpbGUgY2xpcHBpbmcsIHNvIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICAgICAgICAvLyBzZXBhcmF0ZSBjbGlwcGluZyBtYXNrc1xuICAgICAgICAgICAgY29uc3QgY29vcmRzID0gKGxheWVyLnR5cGUgPT09ICdzeW1ib2wnID8gY29vcmRzRGVzY2VuZGluZ1N5bWJvbCA6IGNvb3Jkc0Rlc2NlbmRpbmcpW2xheWVyLnNvdXJjZV07XG5cbiAgICAgICAgICAgIHRoaXMuX3JlbmRlclRpbGVDbGlwcGluZ01hc2tzKGxheWVyLCBjb29yZHNBc2NlbmRpbmdbbGF5ZXIuc291cmNlXSk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxheWVyKHRoaXMsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd1RpbGVCb3VuZGFyaWVzKSB7XG4gICAgICAgICAgICAvL1VzZSBzb3VyY2Ugd2l0aCBoaWdoZXN0IG1heHpvb21cbiAgICAgICAgICAgIGxldCBzZWxlY3RlZFNvdXJjZTtcbiAgICAgICAgICAgIGxldCBzb3VyY2VDYWNoZTtcbiAgICAgICAgICAgIGNvbnN0IGxheWVycyA9IHZhbHVlcyh0aGlzLnN0eWxlLl9sYXllcnMpO1xuICAgICAgICAgICAgbGF5ZXJzLmZvckVhY2goKGxheWVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyLnNvdXJjZSAmJiAhbGF5ZXIuaXNIaWRkZW4odGhpcy50cmFuc2Zvcm0uem9vbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyLnNvdXJjZSAhPT0gKHNvdXJjZUNhY2hlICYmIHNvdXJjZUNhY2hlLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ2FjaGUgPSB0aGlzLnN0eWxlLnNvdXJjZUNhY2hlc1tsYXllci5zb3VyY2VdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0ZWRTb3VyY2UgfHwgKHNlbGVjdGVkU291cmNlLmdldFNvdXJjZSgpLm1heHpvb20gPCBzb3VyY2VDYWNoZS5nZXRTb3VyY2UoKS5tYXh6b29tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRTb3VyY2UgPSBzb3VyY2VDYWNoZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgZHJhdy5kZWJ1Zyh0aGlzLCBzZWxlY3RlZFNvdXJjZSwgc2VsZWN0ZWRTb3VyY2UuZ2V0VmlzaWJsZUNvb3JkaW5hdGVzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93UGFkZGluZykge1xuICAgICAgICAgICAgZHJhd0RlYnVnUGFkZGluZyh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBkZWZhdWx0cyBmb3IgbW9zdCBHTCB2YWx1ZXMgc28gdGhhdCBhbnlvbmUgdXNpbmcgdGhlIHN0YXRlIGFmdGVyIHRoZSByZW5kZXJcbiAgICAgICAgLy8gZW5jb3VudGVycyBtb3JlIGV4cGVjdGVkIHZhbHVlcy5cbiAgICAgICAgdGhpcy5jb250ZXh0LnNldERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICByZW5kZXJMYXllcihwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGxheWVyOiBTdHlsZUxheWVyLCBjb29yZHM6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+KSB7XG4gICAgICAgIGlmIChsYXllci5pc0hpZGRlbih0aGlzLnRyYW5zZm9ybS56b29tKSkgcmV0dXJuO1xuICAgICAgICBpZiAobGF5ZXIudHlwZSAhPT0gJ2JhY2tncm91bmQnICYmIGxheWVyLnR5cGUgIT09ICdjdXN0b20nICYmICFjb29yZHMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIHRoaXMuaWQgPSBsYXllci5pZDtcblxuICAgICAgICB0aGlzLmdwdVRpbWluZ1N0YXJ0KGxheWVyKTtcbiAgICAgICAgZHJhd1tsYXllci50eXBlXShwYWludGVyLCBzb3VyY2VDYWNoZSwgbGF5ZXIsIGNvb3JkcywgdGhpcy5zdHlsZS5wbGFjZW1lbnQudmFyaWFibGVPZmZzZXRzKTtcbiAgICAgICAgdGhpcy5ncHVUaW1pbmdFbmQoKTtcbiAgICB9XG5cbiAgICBncHVUaW1pbmdTdGFydChsYXllcjogU3R5bGVMYXllcikge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5ncHVUaW1pbmcpIHJldHVybjtcbiAgICAgICAgY29uc3QgZXh0ID0gdGhpcy5jb250ZXh0LmV4dFRpbWVyUXVlcnk7XG4gICAgICAgIC8vIFRoaXMgdHJpZXMgdG8gdGltZSB0aGUgZHJhdyBjYWxsIGl0c2VsZiwgYnV0IG5vdGUgdGhhdCB0aGUgY29zdCBmb3IgZHJhd2luZyBhIGxheWVyXG4gICAgICAgIC8vIG1heSBiZSBkb21pbmF0ZWQgYnkgdGhlIGNvc3Qgb2YgdXBsb2FkaW5nIHZlcnRpY2VzIHRvIHRoZSBHUFUuXG4gICAgICAgIC8vIFRvIGluc3RydW1lbnQgdGhhdCwgd2UnZCBuZWVkIHRvIHBhc3MgdGhlIGxheWVyVGltZXJzIG9iamVjdCBkb3duIGludG8gdGhlIGJ1Y2tldFxuICAgICAgICAvLyB1cGxvYWRpbmcgbG9naWMuXG4gICAgICAgIGxldCBsYXllclRpbWVyID0gdGhpcy5ncHVUaW1lcnNbbGF5ZXIuaWRdO1xuICAgICAgICBpZiAoIWxheWVyVGltZXIpIHtcbiAgICAgICAgICAgIGxheWVyVGltZXIgPSB0aGlzLmdwdVRpbWVyc1tsYXllci5pZF0gPSB7XG4gICAgICAgICAgICAgICAgY2FsbHM6IDAsXG4gICAgICAgICAgICAgICAgY3B1VGltZTogMCxcbiAgICAgICAgICAgICAgICBxdWVyeTogZXh0LmNyZWF0ZVF1ZXJ5RVhUKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGF5ZXJUaW1lci5jYWxscysrO1xuICAgICAgICBleHQuYmVnaW5RdWVyeUVYVChleHQuVElNRV9FTEFQU0VEX0VYVCwgbGF5ZXJUaW1lci5xdWVyeSk7XG4gICAgfVxuXG4gICAgZ3B1VGltaW5nRW5kKCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5ncHVUaW1pbmcpIHJldHVybjtcbiAgICAgICAgY29uc3QgZXh0ID0gdGhpcy5jb250ZXh0LmV4dFRpbWVyUXVlcnk7XG4gICAgICAgIGV4dC5lbmRRdWVyeUVYVChleHQuVElNRV9FTEFQU0VEX0VYVCk7XG4gICAgfVxuXG4gICAgY29sbGVjdEdwdVRpbWVycygpIHtcbiAgICAgICAgY29uc3QgY3VycmVudExheWVyVGltZXJzID0gdGhpcy5ncHVUaW1lcnM7XG4gICAgICAgIHRoaXMuZ3B1VGltZXJzID0ge307XG4gICAgICAgIHJldHVybiBjdXJyZW50TGF5ZXJUaW1lcnM7XG4gICAgfVxuXG4gICAgcXVlcnlHcHVUaW1lcnMoZ3B1VGltZXJzOiB7W186IHN0cmluZ106IGFueX0pIHtcbiAgICAgICAgY29uc3QgbGF5ZXJzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgbGF5ZXJJZCBpbiBncHVUaW1lcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGdwdVRpbWVyID0gZ3B1VGltZXJzW2xheWVySWRdO1xuICAgICAgICAgICAgY29uc3QgZXh0ID0gdGhpcy5jb250ZXh0LmV4dFRpbWVyUXVlcnk7XG4gICAgICAgICAgICBjb25zdCBncHVUaW1lID0gZXh0LmdldFF1ZXJ5T2JqZWN0RVhUKGdwdVRpbWVyLnF1ZXJ5LCBleHQuUVVFUllfUkVTVUxUX0VYVCkgLyAoMTAwMCAqIDEwMDApO1xuICAgICAgICAgICAgZXh0LmRlbGV0ZVF1ZXJ5RVhUKGdwdVRpbWVyLnF1ZXJ5KTtcbiAgICAgICAgICAgIGxheWVyc1tsYXllcklkXSA9IGdwdVRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxheWVycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm0gYSBtYXRyaXggdG8gaW5jb3Jwb3JhdGUgdGhlICotdHJhbnNsYXRlIGFuZCAqLXRyYW5zbGF0ZS1hbmNob3IgcHJvcGVydGllcyBpbnRvIGl0LlxuICAgICAqIEBwYXJhbSBpblZpZXdwb3J0UGl4ZWxVbml0c1VuaXRzIFRydWUgd2hlbiB0aGUgdW5pdHMgYWNjZXB0ZWQgYnkgdGhlIG1hdHJpeCBhcmUgaW4gdmlld3BvcnQgcGl4ZWxzIGluc3RlYWQgb2YgdGlsZSB1bml0cy5cbiAgICAgKiBAcmV0dXJucyB7RmxvYXQzMkFycmF5fSBtYXRyaXhcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRyYW5zbGF0ZVBvc01hdHJpeChtYXRyaXg6IEZsb2F0MzJBcnJheSwgdGlsZTogVGlsZSwgdHJhbnNsYXRlOiBbbnVtYmVyLCBudW1iZXJdLCB0cmFuc2xhdGVBbmNob3I6ICdtYXAnIHwgJ3ZpZXdwb3J0JywgaW5WaWV3cG9ydFBpeGVsVW5pdHNVbml0cz86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKCF0cmFuc2xhdGVbMF0gJiYgIXRyYW5zbGF0ZVsxXSkgcmV0dXJuIG1hdHJpeDtcblxuICAgICAgICBjb25zdCBhbmdsZSA9IGluVmlld3BvcnRQaXhlbFVuaXRzVW5pdHMgP1xuICAgICAgICAgICAgKHRyYW5zbGF0ZUFuY2hvciA9PT0gJ21hcCcgPyB0aGlzLnRyYW5zZm9ybS5hbmdsZSA6IDApIDpcbiAgICAgICAgICAgICh0cmFuc2xhdGVBbmNob3IgPT09ICd2aWV3cG9ydCcgPyAtdGhpcy50cmFuc2Zvcm0uYW5nbGUgOiAwKTtcblxuICAgICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpbkEgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgICAgICBjb25zdCBjb3NBID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICAgICAgdHJhbnNsYXRlID0gW1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVswXSAqIGNvc0EgLSB0cmFuc2xhdGVbMV0gKiBzaW5BLFxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVswXSAqIHNpbkEgKyB0cmFuc2xhdGVbMV0gKiBjb3NBXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb24gPSBbXG4gICAgICAgICAgICBpblZpZXdwb3J0UGl4ZWxVbml0c1VuaXRzID8gdHJhbnNsYXRlWzBdIDogcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgdHJhbnNsYXRlWzBdLCB0aGlzLnRyYW5zZm9ybS56b29tKSxcbiAgICAgICAgICAgIGluVmlld3BvcnRQaXhlbFVuaXRzVW5pdHMgPyB0cmFuc2xhdGVbMV0gOiBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCB0cmFuc2xhdGVbMV0sIHRoaXMudHJhbnNmb3JtLnpvb20pLFxuICAgICAgICAgICAgMFxuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZWRNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcbiAgICAgICAgbWF0NC50cmFuc2xhdGUodHJhbnNsYXRlZE1hdHJpeCwgbWF0cml4LCB0cmFuc2xhdGlvbik7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGVkTWF0cml4O1xuICAgIH1cblxuICAgIHNhdmVUaWxlVGV4dHVyZSh0ZXh0dXJlOiBUZXh0dXJlKSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmVzID0gdGhpcy5fdGlsZVRleHR1cmVzW3RleHR1cmUuc2l6ZVswXV07XG4gICAgICAgIGlmICghdGV4dHVyZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3RpbGVUZXh0dXJlc1t0ZXh0dXJlLnNpemVbMF1dID0gW3RleHR1cmVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dHVyZXMucHVzaCh0ZXh0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFRpbGVUZXh0dXJlKHNpemU6IG51bWJlcikge1xuICAgICAgICBjb25zdCB0ZXh0dXJlcyA9IHRoaXMuX3RpbGVUZXh0dXJlc1tzaXplXTtcbiAgICAgICAgcmV0dXJuIHRleHR1cmVzICYmIHRleHR1cmVzLmxlbmd0aCA+IDAgPyB0ZXh0dXJlcy5wb3AoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgYSBwYXR0ZXJuIGltYWdlIGlzIG5lZWRlZCwgYW5kIGlmIGl0IGlzLCB3aGV0aGVyIGl0IGlzIG5vdCBsb2FkZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGEgbmVlZGVkIGltYWdlIGlzIG1pc3NpbmcgYW5kIHJlbmRlcmluZyBuZWVkcyB0byBiZSBza2lwcGVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaXNQYXR0ZXJuTWlzc2luZyhpbWFnZTogP0Nyb3NzRmFkZWQ8UmVzb2x2ZWRJbWFnZT4pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFpbWFnZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWltYWdlLmZyb20gfHwgIWltYWdlLnRvKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY29uc3QgaW1hZ2VQb3NBID0gdGhpcy5pbWFnZU1hbmFnZXIuZ2V0UGF0dGVybihpbWFnZS5mcm9tLnRvU3RyaW5nKCkpO1xuICAgICAgICBjb25zdCBpbWFnZVBvc0IgPSB0aGlzLmltYWdlTWFuYWdlci5nZXRQYXR0ZXJuKGltYWdlLnRvLnRvU3RyaW5nKCkpO1xuICAgICAgICByZXR1cm4gIWltYWdlUG9zQSB8fCAhaW1hZ2VQb3NCO1xuICAgIH1cblxuICAgIHVzZVByb2dyYW0obmFtZTogc3RyaW5nLCBwcm9ncmFtQ29uZmlndXJhdGlvbjogP1Byb2dyYW1Db25maWd1cmF0aW9uKTogUHJvZ3JhbTxhbnk+IHtcbiAgICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUgfHwge307XG4gICAgICAgIGNvbnN0IGtleSA9IGAke25hbWV9JHtwcm9ncmFtQ29uZmlndXJhdGlvbiA/IHByb2dyYW1Db25maWd1cmF0aW9uLmNhY2hlS2V5IDogJyd9JHt0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IgPyAnL292ZXJkcmF3JyA6ICcnfWA7XG4gICAgICAgIGlmICghdGhpcy5jYWNoZVtrZXldKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlW2tleV0gPSBuZXcgUHJvZ3JhbSh0aGlzLmNvbnRleHQsIG5hbWUsIHNoYWRlcnNbbmFtZV0sIHByb2dyYW1Db25maWd1cmF0aW9uLCBwcm9ncmFtVW5pZm9ybXNbbmFtZV0sIHRoaXMuX3Nob3dPdmVyZHJhd0luc3BlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVba2V5XTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFJlc2V0IHNvbWUgR0wgc3RhdGUgdG8gZGVmYXVsdCB2YWx1ZXMgdG8gYXZvaWQgaGFyZC10by1kZWJ1ZyBidWdzXG4gICAgICogaW4gY3VzdG9tIGxheWVycy5cbiAgICAgKi9cbiAgICBzZXRDdXN0b21MYXllckRlZmF1bHRzKCkge1xuICAgICAgICAvLyBQcmV2ZW50IGN1c3RvbSBsYXllcnMgZnJvbSB1bmludGVudGlvbmFsbHkgbW9kaWZ5IHRoZSBsYXN0IFZBTyB1c2VkLlxuICAgICAgICAvLyBBbGwgb3RoZXIgc3RhdGUgaXMgc3RhdGUgaXMgcmVzdG9yZWQgb24gaXQncyBvd24sIGJ1dCBmb3IgVkFPcyBpdCdzXG4gICAgICAgIC8vIHNpbXBsZXIgdG8gdW5iaW5kIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byB0cmFjayB0aGUgc3RhdGUgb2YgVkFPcy5cbiAgICAgICAgdGhpcy5jb250ZXh0LnVuYmluZFZBTygpO1xuXG4gICAgICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlcyBmb3IgdGhpcyBzdGF0ZSBpcyBtZWFuaW5nZnVsIGFuZCBvZnRlbiBleHBlY3RlZC5cbiAgICAgICAgLy8gTGVhdmluZyB0aGlzIHN0YXRlIGRpcnR5IGNvdWxkIGNhdXNlIGEgbG90IG9mIGNvbmZ1c2lvbiBmb3IgdXNlcnMuXG4gICAgICAgIHRoaXMuY29udGV4dC5jdWxsRmFjZS5zZXREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnBpeGVsU3RvcmVVbnBhY2suc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmNvbnRleHQucGl4ZWxTdG9yZVVucGFja1ByZW11bHRpcGx5QWxwaGEuc2V0RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmNvbnRleHQucGl4ZWxTdG9yZVVucGFja0ZsaXBZLnNldERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFNldCBHTCBzdGF0ZSB0aGF0IGlzIHNoYXJlZCBieSBhbGwgbGF5ZXJzLlxuICAgICAqL1xuICAgIHNldEJhc2VTdGF0ZSgpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIHRoaXMuY29udGV4dC5jdWxsRmFjZS5zZXQoZmFsc2UpO1xuICAgICAgICB0aGlzLmNvbnRleHQudmlld3BvcnQuc2V0KFswLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodF0pO1xuICAgICAgICB0aGlzLmNvbnRleHQuYmxlbmRFcXVhdGlvbi5zZXQoZ2wuRlVOQ19BREQpO1xuICAgIH1cblxuICAgIGluaXREZWJ1Z092ZXJsYXlDYW52YXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnT3ZlcmxheUNhbnZhcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRlYnVnT3ZlcmxheUNhbnZhcyA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIHRoaXMuZGVidWdPdmVybGF5Q2FudmFzLndpZHRoID0gNTEyO1xuICAgICAgICAgICAgdGhpcy5kZWJ1Z092ZXJsYXlDYW52YXMuaGVpZ2h0ID0gNTEyO1xuICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgICAgICB0aGlzLmRlYnVnT3ZlcmxheVRleHR1cmUgPSBuZXcgVGV4dHVyZSh0aGlzLmNvbnRleHQsIHRoaXMuZGVidWdPdmVybGF5Q2FudmFzLCBnbC5SR0JBKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZW1wdHlUZXh0dXJlLmRlc3Ryb3koKTtcbiAgICAgICAgaWYgKHRoaXMuZGVidWdPdmVybGF5VGV4dHVyZSkge1xuICAgICAgICAgICAgdGhpcy5kZWJ1Z092ZXJsYXlUZXh0dXJlLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFpbnRlcjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBTdGVuY2lsTW9kZSBmcm9tICcuLi9nbC9zdGVuY2lsX21vZGUnO1xuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCBDdWxsRmFjZU1vZGUgZnJvbSAnLi4vZ2wvY3VsbF9mYWNlX21vZGUnO1xuaW1wb3J0IFByb2dyYW0gZnJvbSAnLi9wcm9ncmFtJztcbmltcG9ydCB7Y2lyY2xlVW5pZm9ybVZhbHVlc30gZnJvbSAnLi9wcm9ncmFtL2NpcmNsZV9wcm9ncmFtJztcbmltcG9ydCBTZWdtZW50VmVjdG9yIGZyb20gJy4uL2RhdGEvc2VnbWVudCc7XG5pbXBvcnQge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUgU291cmNlQ2FjaGUgZnJvbSAnLi4vc291cmNlL3NvdXJjZV9jYWNoZSc7XG5pbXBvcnQgdHlwZSBDaXJjbGVTdHlsZUxheWVyIGZyb20gJy4uL3N0eWxlL3N0eWxlX2xheWVyL2NpcmNsZV9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSBDaXJjbGVCdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvY2lyY2xlX2J1Y2tldCc7XG5pbXBvcnQgdHlwZSBQcm9ncmFtQ29uZmlndXJhdGlvbiBmcm9tICcuLi9kYXRhL3Byb2dyYW1fY29uZmlndXJhdGlvbic7XG5pbXBvcnQgdHlwZSBWZXJ0ZXhCdWZmZXIgZnJvbSAnLi4vZ2wvdmVydGV4X2J1ZmZlcic7XG5pbXBvcnQgdHlwZSBJbmRleEJ1ZmZlciBmcm9tICcuLi9nbC9pbmRleF9idWZmZXInO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXN9IGZyb20gJy4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIHtDaXJjbGVVbmlmb3Jtc1R5cGV9IGZyb20gJy4vcHJvZ3JhbS9jaXJjbGVfcHJvZ3JhbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXdDaXJjbGVzO1xuXG50eXBlIFRpbGVSZW5kZXJTdGF0ZSA9IHtcbiAgICBwcm9ncmFtQ29uZmlndXJhdGlvbjogUHJvZ3JhbUNvbmZpZ3VyYXRpb24sXG4gICAgcHJvZ3JhbTogUHJvZ3JhbTwqPixcbiAgICBsYXlvdXRWZXJ0ZXhCdWZmZXI6IFZlcnRleEJ1ZmZlcixcbiAgICBpbmRleEJ1ZmZlcjogSW5kZXhCdWZmZXIsXG4gICAgdW5pZm9ybVZhbHVlczogVW5pZm9ybVZhbHVlczxDaXJjbGVVbmlmb3Jtc1R5cGU+XG59O1xuXG50eXBlIFNlZ21lbnRzVGlsZVJlbmRlclN0YXRlID0ge1xuICAgIHNlZ21lbnRzOiBTZWdtZW50VmVjdG9yLFxuICAgIHNvcnRLZXk6IG51bWJlcixcbiAgICBzdGF0ZTogVGlsZVJlbmRlclN0YXRlXG59O1xuXG5mdW5jdGlvbiBkcmF3Q2lyY2xlcyhwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGxheWVyOiBDaXJjbGVTdHlsZUxheWVyLCBjb29yZHM6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+KSB7XG4gICAgaWYgKHBhaW50ZXIucmVuZGVyUGFzcyAhPT0gJ3RyYW5zbHVjZW50JykgcmV0dXJuO1xuXG4gICAgY29uc3Qgb3BhY2l0eSA9IGxheWVyLnBhaW50LmdldCgnY2lyY2xlLW9wYWNpdHknKTtcbiAgICBjb25zdCBzdHJva2VXaWR0aCA9IGxheWVyLnBhaW50LmdldCgnY2lyY2xlLXN0cm9rZS13aWR0aCcpO1xuICAgIGNvbnN0IHN0cm9rZU9wYWNpdHkgPSBsYXllci5wYWludC5nZXQoJ2NpcmNsZS1zdHJva2Utb3BhY2l0eScpO1xuICAgIGNvbnN0IHNvcnRGZWF0dXJlc0J5S2V5ID0gbGF5ZXIubGF5b3V0LmdldCgnY2lyY2xlLXNvcnQta2V5JykuY29uc3RhbnRPcigxKSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKG9wYWNpdHkuY29uc3RhbnRPcigxKSA9PT0gMCAmJiAoc3Ryb2tlV2lkdGguY29uc3RhbnRPcigxKSA9PT0gMCB8fCBzdHJva2VPcGFjaXR5LmNvbnN0YW50T3IoMSkgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgIGNvbnN0IGRlcHRoTW9kZSA9IHBhaW50ZXIuZGVwdGhNb2RlRm9yU3VibGF5ZXIoMCwgRGVwdGhNb2RlLlJlYWRPbmx5KTtcbiAgICAvLyBUdXJuIG9mZiBzdGVuY2lsIHRlc3RpbmcgdG8gYWxsb3cgY2lyY2xlcyB0byBiZSBkcmF3biBhY3Jvc3MgYm91bmRhcmllcyxcbiAgICAvLyBzbyB0aGF0IGxhcmdlIGNpcmNsZXMgYXJlIG5vdCBjbGlwcGVkIHRvIHRpbGVzXG4gICAgY29uc3Qgc3RlbmNpbE1vZGUgPSBTdGVuY2lsTW9kZS5kaXNhYmxlZDtcbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcblxuICAgIGNvbnN0IHNlZ21lbnRzUmVuZGVyU3RhdGVzOiBBcnJheTxTZWdtZW50c1RpbGVSZW5kZXJTdGF0ZT4gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkID0gY29vcmRzW2ldO1xuXG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgYnVja2V0OiA/Q2lyY2xlQnVja2V0PCo+ID0gKHRpbGUuZ2V0QnVja2V0KGxheWVyKTogYW55KTtcbiAgICAgICAgaWYgKCFidWNrZXQpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnN0IHByb2dyYW1Db25maWd1cmF0aW9uID0gYnVja2V0LnByb2dyYW1Db25maWd1cmF0aW9ucy5nZXQobGF5ZXIuaWQpO1xuICAgICAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKCdjaXJjbGUnLCBwcm9ncmFtQ29uZmlndXJhdGlvbik7XG4gICAgICAgIGNvbnN0IGxheW91dFZlcnRleEJ1ZmZlciA9IGJ1Y2tldC5sYXlvdXRWZXJ0ZXhCdWZmZXI7XG4gICAgICAgIGNvbnN0IGluZGV4QnVmZmVyID0gYnVja2V0LmluZGV4QnVmZmVyO1xuICAgICAgICBjb25zdCB1bmlmb3JtVmFsdWVzID0gY2lyY2xlVW5pZm9ybVZhbHVlcyhwYWludGVyLCBjb29yZCwgdGlsZSwgbGF5ZXIpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlOiBUaWxlUmVuZGVyU3RhdGUgPSB7XG4gICAgICAgICAgICBwcm9ncmFtQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIHByb2dyYW0sXG4gICAgICAgICAgICBsYXlvdXRWZXJ0ZXhCdWZmZXIsXG4gICAgICAgICAgICBpbmRleEJ1ZmZlcixcbiAgICAgICAgICAgIHVuaWZvcm1WYWx1ZXMsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHNvcnRGZWF0dXJlc0J5S2V5KSB7XG4gICAgICAgICAgICBjb25zdCBvbGRTZWdtZW50cyA9IGJ1Y2tldC5zZWdtZW50cy5nZXQoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBvbGRTZWdtZW50cykge1xuICAgICAgICAgICAgICAgIHNlZ21lbnRzUmVuZGVyU3RhdGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50czogbmV3IFNlZ21lbnRWZWN0b3IoW3NlZ21lbnRdKSxcbiAgICAgICAgICAgICAgICAgICAgc29ydEtleTogKChzZWdtZW50LnNvcnRLZXk6IGFueSk6IG51bWJlciksXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWdtZW50c1JlbmRlclN0YXRlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzZWdtZW50czogYnVja2V0LnNlZ21lbnRzLFxuICAgICAgICAgICAgICAgIHNvcnRLZXk6IDAsXG4gICAgICAgICAgICAgICAgc3RhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoc29ydEZlYXR1cmVzQnlLZXkpIHtcbiAgICAgICAgc2VnbWVudHNSZW5kZXJTdGF0ZXMuc29ydCgoYSwgYikgPT4gYS5zb3J0S2V5IC0gYi5zb3J0S2V5KTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHNlZ21lbnRzU3RhdGUgb2Ygc2VnbWVudHNSZW5kZXJTdGF0ZXMpIHtcbiAgICAgICAgY29uc3Qge3Byb2dyYW1Db25maWd1cmF0aW9uLCBwcm9ncmFtLCBsYXlvdXRWZXJ0ZXhCdWZmZXIsIGluZGV4QnVmZmVyLCB1bmlmb3JtVmFsdWVzfSA9IHNlZ21lbnRzU3RhdGUuc3RhdGU7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gc2VnbWVudHNTdGF0ZS5zZWdtZW50cztcblxuICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsIEN1bGxGYWNlTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgICAgIHVuaWZvcm1WYWx1ZXMsIGxheWVyLmlkLFxuICAgICAgICAgICAgbGF5b3V0VmVydGV4QnVmZmVyLCBpbmRleEJ1ZmZlciwgc2VnbWVudHMsXG4gICAgICAgICAgICBsYXllci5wYWludCwgcGFpbnRlci50cmFuc2Zvcm0uem9vbSwgcHJvZ3JhbUNvbmZpZ3VyYXRpb24pO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBUZXh0dXJlIGZyb20gJy4vdGV4dHVyZSc7XG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi4vZ2wvZGVwdGhfbW9kZSc7XG5pbXBvcnQgU3RlbmNpbE1vZGUgZnJvbSAnLi4vZ2wvc3RlbmNpbF9tb2RlJztcbmltcG9ydCBDb2xvck1vZGUgZnJvbSAnLi4vZ2wvY29sb3JfbW9kZSc7XG5pbXBvcnQgQ3VsbEZhY2VNb2RlIGZyb20gJy4uL2dsL2N1bGxfZmFjZV9tb2RlJztcbmltcG9ydCB7XG4gICAgaGVhdG1hcFVuaWZvcm1WYWx1ZXMsXG4gICAgaGVhdG1hcFRleHR1cmVVbmlmb3JtVmFsdWVzXG59IGZyb20gJy4vcHJvZ3JhbS9oZWF0bWFwX3Byb2dyYW0nO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIEhlYXRtYXBTdHlsZUxheWVyIGZyb20gJy4uL3N0eWxlL3N0eWxlX2xheWVyL2hlYXRtYXBfc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgSGVhdG1hcEJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9oZWF0bWFwX2J1Y2tldCc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vc291cmNlL3RpbGVfaWQnO1xuXG5leHBvcnQgZGVmYXVsdCBkcmF3SGVhdG1hcDtcblxuZnVuY3Rpb24gZHJhd0hlYXRtYXAocGFpbnRlcjogUGFpbnRlciwgc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBsYXllcjogSGVhdG1hcFN0eWxlTGF5ZXIsIGNvb3JkczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pIHtcbiAgICBpZiAobGF5ZXIucGFpbnQuZ2V0KCdoZWF0bWFwLW9wYWNpdHknKSA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBhaW50ZXIucmVuZGVyUGFzcyA9PT0gJ29mZnNjcmVlbicpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICAgICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuXG4gICAgICAgIC8vIEFsbG93IGtlcm5lbHMgdG8gYmUgZHJhd24gYWNyb3NzIGJvdW5kYXJpZXMsIHNvIHRoYXRcbiAgICAgICAgLy8gbGFyZ2Uga2VybmVscyBhcmUgbm90IGNsaXBwZWQgdG8gdGlsZXNcbiAgICAgICAgY29uc3Qgc3RlbmNpbE1vZGUgPSBTdGVuY2lsTW9kZS5kaXNhYmxlZDtcbiAgICAgICAgLy8gVHVybiBvbiBhZGRpdGl2ZSBibGVuZGluZyBmb3Iga2VybmVscywgd2hpY2ggaXMgYSBrZXkgYXNwZWN0IG9mIGtlcm5lbCBkZW5zaXR5IGVzdGltYXRpb24gZm9ybXVsYVxuICAgICAgICBjb25zdCBjb2xvck1vZGUgPSBuZXcgQ29sb3JNb2RlKFtnbC5PTkUsIGdsLk9ORV0sIENvbG9yLnRyYW5zcGFyZW50LCBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV0pO1xuXG4gICAgICAgIGJpbmRGcmFtZWJ1ZmZlcihjb250ZXh0LCBwYWludGVyLCBsYXllcik7XG5cbiAgICAgICAgY29udGV4dC5jbGVhcih7Y29sb3I6IENvbG9yLnRyYW5zcGFyZW50fSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkID0gY29vcmRzW2ldO1xuXG4gICAgICAgICAgICAvLyBTa2lwIHRpbGVzIHRoYXQgaGF2ZSB1bmNvdmVyZWQgcGFyZW50cyB0byBhdm9pZCBmbGlja2VyaW5nOyB3ZSBkb24ndCBuZWVkXG4gICAgICAgICAgICAvLyB0byB1c2UgY29tcGxleCB0aWxlIG1hc2tpbmcgaGVyZSBiZWNhdXNlIHRoZSBjaGFuZ2UgYmV0d2VlbiB6b29tIGxldmVscyBpcyBzdWJ0bGUsXG4gICAgICAgICAgICAvLyBzbyBpdCdzIGZpbmUgdG8gc2ltcGx5IHJlbmRlciB0aGUgcGFyZW50IHVudGlsIGFsbCBpdHMgNCBjaGlsZHJlbiBhcmUgbG9hZGVkXG4gICAgICAgICAgICBpZiAoc291cmNlQ2FjaGUuaGFzUmVuZGVyYWJsZVBhcmVudChjb29yZCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb25zdCB0aWxlID0gc291cmNlQ2FjaGUuZ2V0VGlsZShjb29yZCk7XG4gICAgICAgICAgICBjb25zdCBidWNrZXQ6ID9IZWF0bWFwQnVja2V0ID0gKHRpbGUuZ2V0QnVja2V0KGxheWVyKTogYW55KTtcbiAgICAgICAgICAgIGlmICghYnVja2V0KSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgcHJvZ3JhbUNvbmZpZ3VyYXRpb24gPSBidWNrZXQucHJvZ3JhbUNvbmZpZ3VyYXRpb25zLmdldChsYXllci5pZCk7XG4gICAgICAgICAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKCdoZWF0bWFwJywgcHJvZ3JhbUNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgY29uc3Qge3pvb219ID0gcGFpbnRlci50cmFuc2Zvcm07XG5cbiAgICAgICAgICAgIHByb2dyYW0uZHJhdyhjb250ZXh0LCBnbC5UUklBTkdMRVMsIERlcHRoTW9kZS5kaXNhYmxlZCwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSwgQ3VsbEZhY2VNb2RlLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgIGhlYXRtYXBVbmlmb3JtVmFsdWVzKGNvb3JkLnBvc01hdHJpeCxcbiAgICAgICAgICAgICAgICAgICAgdGlsZSwgem9vbSwgbGF5ZXIucGFpbnQuZ2V0KCdoZWF0bWFwLWludGVuc2l0eScpKSxcbiAgICAgICAgICAgICAgICBsYXllci5pZCwgYnVja2V0LmxheW91dFZlcnRleEJ1ZmZlciwgYnVja2V0LmluZGV4QnVmZmVyLFxuICAgICAgICAgICAgICAgIGJ1Y2tldC5zZWdtZW50cywgbGF5ZXIucGFpbnQsIHBhaW50ZXIudHJhbnNmb3JtLnpvb20sXG4gICAgICAgICAgICAgICAgcHJvZ3JhbUNvbmZpZ3VyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC52aWV3cG9ydC5zZXQoWzAsIDAsIHBhaW50ZXIud2lkdGgsIHBhaW50ZXIuaGVpZ2h0XSk7XG5cbiAgICB9IGVsc2UgaWYgKHBhaW50ZXIucmVuZGVyUGFzcyA9PT0gJ3RyYW5zbHVjZW50Jykge1xuICAgICAgICBwYWludGVyLmNvbnRleHQuc2V0Q29sb3JNb2RlKHBhaW50ZXIuY29sb3JNb2RlRm9yUmVuZGVyUGFzcygpKTtcbiAgICAgICAgcmVuZGVyVGV4dHVyZVRvTWFwKHBhaW50ZXIsIGxheWVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJpbmRGcmFtZWJ1ZmZlcihjb250ZXh0LCBwYWludGVyLCBsYXllcikge1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICBjb250ZXh0LmFjdGl2ZVRleHR1cmUuc2V0KGdsLlRFWFRVUkUxKTtcblxuICAgIC8vIFVzZSBhIDR4IGRvd25zY2FsZWQgc2NyZWVuIHRleHR1cmUgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgIGNvbnRleHQudmlld3BvcnQuc2V0KFswLCAwLCBwYWludGVyLndpZHRoIC8gNCwgcGFpbnRlci5oZWlnaHQgLyA0XSk7XG5cbiAgICBsZXQgZmJvID0gbGF5ZXIuaGVhdG1hcEZibztcblxuICAgIGlmICghZmJvKSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcblxuICAgICAgICBmYm8gPSBsYXllci5oZWF0bWFwRmJvID0gY29udGV4dC5jcmVhdGVGcmFtZWJ1ZmZlcihwYWludGVyLndpZHRoIC8gNCwgcGFpbnRlci5oZWlnaHQgLyA0LCBmYWxzZSk7XG5cbiAgICAgICAgYmluZFRleHR1cmVUb0ZyYW1lYnVmZmVyKGNvbnRleHQsIHBhaW50ZXIsIHRleHR1cmUsIGZibyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBmYm8uY29sb3JBdHRhY2htZW50LmdldCgpKTtcbiAgICAgICAgY29udGV4dC5iaW5kRnJhbWVidWZmZXIuc2V0KGZiby5mcmFtZWJ1ZmZlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiaW5kVGV4dHVyZVRvRnJhbWVidWZmZXIoY29udGV4dCwgcGFpbnRlciwgdGV4dHVyZSwgZmJvKSB7XG4gICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuICAgIC8vIFVzZSB0aGUgaGlnaGVyIHByZWNpc2lvbiBoYWxmLWZsb2F0IHRleHR1cmUgd2hlcmUgYXZhaWxhYmxlIChwcm9kdWNpbmcgbXVjaCBzbW9vdGhlciBsb29raW5nIGhlYXRtYXBzKTtcbiAgICAvLyBPdGhlcndpc2UsIGZhbGwgYmFjayB0byBhIGxvdyBwcmVjaXNpb24gdGV4dHVyZVxuICAgIGNvbnN0IGludGVybmFsRm9ybWF0ID0gY29udGV4dC5leHRSZW5kZXJUb1RleHR1cmVIYWxmRmxvYXQgPyBjb250ZXh0LmV4dFRleHR1cmVIYWxmRmxvYXQuSEFMRl9GTE9BVF9PRVMgOiBnbC5VTlNJR05FRF9CWVRFO1xuICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgcGFpbnRlci53aWR0aCAvIDQsIHBhaW50ZXIuaGVpZ2h0IC8gNCwgMCwgZ2wuUkdCQSwgaW50ZXJuYWxGb3JtYXQsIG51bGwpO1xuICAgIGZiby5jb2xvckF0dGFjaG1lbnQuc2V0KHRleHR1cmUpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJUZXh0dXJlVG9NYXAocGFpbnRlciwgbGF5ZXIpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgIC8vIEhlcmUgd2UgYmluZCB0d28gZGlmZmVyZW50IHRleHR1cmVzIGZyb20gd2hpY2ggd2UnbGwgc2FtcGxlIGluIGRyYXdpbmdcbiAgICAvLyBoZWF0bWFwczogdGhlIGtlcm5lbCB0ZXh0dXJlLCBwcmVwYXJlZCBpbiB0aGUgb2Zmc2NyZWVuIHBhc3MsIGFuZCBhXG4gICAgLy8gY29sb3IgcmFtcCB0ZXh0dXJlLlxuICAgIGNvbnN0IGZibyA9IGxheWVyLmhlYXRtYXBGYm87XG4gICAgaWYgKCFmYm8pIHJldHVybjtcbiAgICBjb250ZXh0LmFjdGl2ZVRleHR1cmUuc2V0KGdsLlRFWFRVUkUwKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBmYm8uY29sb3JBdHRhY2htZW50LmdldCgpKTtcblxuICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTEpO1xuICAgIGxldCBjb2xvclJhbXBUZXh0dXJlID0gbGF5ZXIuY29sb3JSYW1wVGV4dHVyZTtcbiAgICBpZiAoIWNvbG9yUmFtcFRleHR1cmUpIHtcbiAgICAgICAgY29sb3JSYW1wVGV4dHVyZSA9IGxheWVyLmNvbG9yUmFtcFRleHR1cmUgPSBuZXcgVGV4dHVyZShjb250ZXh0LCBsYXllci5jb2xvclJhbXAsIGdsLlJHQkEpO1xuICAgIH1cbiAgICBjb2xvclJhbXBUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcblxuICAgIHBhaW50ZXIudXNlUHJvZ3JhbSgnaGVhdG1hcFRleHR1cmUnKS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUyxcbiAgICAgICAgRGVwdGhNb2RlLmRpc2FibGVkLCBTdGVuY2lsTW9kZS5kaXNhYmxlZCwgcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCksIEN1bGxGYWNlTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgaGVhdG1hcFRleHR1cmVVbmlmb3JtVmFsdWVzKHBhaW50ZXIsIGxheWVyLCAwLCAxKSxcbiAgICAgICAgbGF5ZXIuaWQsIHBhaW50ZXIudmlld3BvcnRCdWZmZXIsIHBhaW50ZXIucXVhZFRyaWFuZ2xlSW5kZXhCdWZmZXIsXG4gICAgICAgIHBhaW50ZXIudmlld3BvcnRTZWdtZW50cywgbGF5ZXIucGFpbnQsIHBhaW50ZXIudHJhbnNmb3JtLnpvb20pO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCBDdWxsRmFjZU1vZGUgZnJvbSAnLi4vZ2wvY3VsbF9mYWNlX21vZGUnO1xuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJztcbmltcG9ydCB7XG4gICAgbGluZVVuaWZvcm1WYWx1ZXMsXG4gICAgbGluZVBhdHRlcm5Vbmlmb3JtVmFsdWVzLFxuICAgIGxpbmVTREZVbmlmb3JtVmFsdWVzLFxuICAgIGxpbmVHcmFkaWVudFVuaWZvcm1WYWx1ZXNcbn0gZnJvbSAnLi9wcm9ncmFtL2xpbmVfcHJvZ3JhbSc7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi9wYWludGVyJztcbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4uL3NvdXJjZS9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUgTGluZVN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvbGluZV9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSBMaW5lQnVja2V0IGZyb20gJy4uL2RhdGEvYnVja2V0L2xpbmVfYnVja2V0JztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5pbXBvcnQge2NsYW1wLCBuZXh0UG93ZXJPZlR3b30gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7cmVuZGVyQ29sb3JSYW1wfSBmcm9tICcuLi91dGlsL2NvbG9yX3JhbXAnO1xuaW1wb3J0IEVYVEVOVCBmcm9tICcuLi9kYXRhL2V4dGVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRyYXdMaW5lKHBhaW50ZXI6IFBhaW50ZXIsIHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSwgbGF5ZXI6IExpbmVTdHlsZUxheWVyLCBjb29yZHM6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+KSB7XG4gICAgaWYgKHBhaW50ZXIucmVuZGVyUGFzcyAhPT0gJ3RyYW5zbHVjZW50JykgcmV0dXJuO1xuXG4gICAgY29uc3Qgb3BhY2l0eSA9IGxheWVyLnBhaW50LmdldCgnbGluZS1vcGFjaXR5Jyk7XG4gICAgY29uc3Qgd2lkdGggPSBsYXllci5wYWludC5nZXQoJ2xpbmUtd2lkdGgnKTtcbiAgICBpZiAob3BhY2l0eS5jb25zdGFudE9yKDEpID09PSAwIHx8IHdpZHRoLmNvbnN0YW50T3IoMSkgPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IGRlcHRoTW9kZSA9IHBhaW50ZXIuZGVwdGhNb2RlRm9yU3VibGF5ZXIoMCwgRGVwdGhNb2RlLlJlYWRPbmx5KTtcbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcblxuICAgIGNvbnN0IGRhc2hhcnJheSA9IGxheWVyLnBhaW50LmdldCgnbGluZS1kYXNoYXJyYXknKTtcbiAgICBjb25zdCBwYXR0ZXJuUHJvcGVydHkgPSBsYXllci5wYWludC5nZXQoJ2xpbmUtcGF0dGVybicpO1xuICAgIGNvbnN0IGltYWdlID0gcGF0dGVyblByb3BlcnR5LmNvbnN0YW50T3IoKDE6IGFueSkpO1xuXG4gICAgY29uc3QgZ3JhZGllbnQgPSBsYXllci5wYWludC5nZXQoJ2xpbmUtZ3JhZGllbnQnKTtcbiAgICBjb25zdCBjcm9zc2ZhZGUgPSBsYXllci5nZXRDcm9zc2ZhZGVQYXJhbWV0ZXJzKCk7XG5cbiAgICBjb25zdCBwcm9ncmFtSWQgPVxuICAgICAgICBpbWFnZSA/ICdsaW5lUGF0dGVybicgOlxuICAgICAgICBkYXNoYXJyYXkgPyAnbGluZVNERicgOlxuICAgICAgICBncmFkaWVudCA/ICdsaW5lR3JhZGllbnQnIDogJ2xpbmUnO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG5cbiAgICBsZXQgZmlyc3RUaWxlID0gdHJ1ZTtcblxuICAgIGZvciAoY29uc3QgY29vcmQgb2YgY29vcmRzKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcblxuICAgICAgICBpZiAoaW1hZ2UgJiYgIXRpbGUucGF0dGVybnNMb2FkZWQoKSkgY29udGludWU7XG5cbiAgICAgICAgY29uc3QgYnVja2V0OiA/TGluZUJ1Y2tldCA9ICh0aWxlLmdldEJ1Y2tldChsYXllcik6IGFueSk7XG4gICAgICAgIGlmICghYnVja2V0KSBjb250aW51ZTtcblxuICAgICAgICBjb25zdCBwcm9ncmFtQ29uZmlndXJhdGlvbiA9IGJ1Y2tldC5wcm9ncmFtQ29uZmlndXJhdGlvbnMuZ2V0KGxheWVyLmlkKTtcbiAgICAgICAgY29uc3QgcHJldlByb2dyYW0gPSBwYWludGVyLmNvbnRleHQucHJvZ3JhbS5nZXQoKTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHBhaW50ZXIudXNlUHJvZ3JhbShwcm9ncmFtSWQsIHByb2dyYW1Db25maWd1cmF0aW9uKTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbUNoYW5nZWQgPSBmaXJzdFRpbGUgfHwgcHJvZ3JhbS5wcm9ncmFtICE9PSBwcmV2UHJvZ3JhbTtcblxuICAgICAgICBjb25zdCBjb25zdGFudFBhdHRlcm4gPSBwYXR0ZXJuUHJvcGVydHkuY29uc3RhbnRPcihudWxsKTtcbiAgICAgICAgaWYgKGNvbnN0YW50UGF0dGVybiAmJiB0aWxlLmltYWdlQXRsYXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGF0bGFzID0gdGlsZS5pbWFnZUF0bGFzO1xuICAgICAgICAgICAgY29uc3QgcG9zVG8gPSBhdGxhcy5wYXR0ZXJuUG9zaXRpb25zW2NvbnN0YW50UGF0dGVybi50by50b1N0cmluZygpXTtcbiAgICAgICAgICAgIGNvbnN0IHBvc0Zyb20gPSBhdGxhcy5wYXR0ZXJuUG9zaXRpb25zW2NvbnN0YW50UGF0dGVybi5mcm9tLnRvU3RyaW5nKCldO1xuICAgICAgICAgICAgaWYgKHBvc1RvICYmIHBvc0Zyb20pIHByb2dyYW1Db25maWd1cmF0aW9uLnNldENvbnN0YW50UGF0dGVyblBvc2l0aW9ucyhwb3NUbywgcG9zRnJvbSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1bmlmb3JtVmFsdWVzID0gaW1hZ2UgPyBsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXMocGFpbnRlciwgdGlsZSwgbGF5ZXIsIGNyb3NzZmFkZSkgOlxuICAgICAgICAgICAgZGFzaGFycmF5ID8gbGluZVNERlVuaWZvcm1WYWx1ZXMocGFpbnRlciwgdGlsZSwgbGF5ZXIsIGRhc2hhcnJheSwgY3Jvc3NmYWRlKSA6XG4gICAgICAgICAgICBncmFkaWVudCA/IGxpbmVHcmFkaWVudFVuaWZvcm1WYWx1ZXMocGFpbnRlciwgdGlsZSwgbGF5ZXIsIGJ1Y2tldC5saW5lQ2xpcHNBcnJheS5sZW5ndGgpIDpcbiAgICAgICAgICAgIGxpbmVVbmlmb3JtVmFsdWVzKHBhaW50ZXIsIHRpbGUsIGxheWVyKTtcblxuICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuICAgICAgICAgICAgdGlsZS5pbWFnZUF0bGFzVGV4dHVyZS5iaW5kKGdsLkxJTkVBUiwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgICAgICBwcm9ncmFtQ29uZmlndXJhdGlvbi51cGRhdGVQYWludEJ1ZmZlcnMoY3Jvc3NmYWRlKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXNoYXJyYXkgJiYgKHByb2dyYW1DaGFuZ2VkIHx8IHBhaW50ZXIubGluZUF0bGFzLmRpcnR5KSkge1xuICAgICAgICAgICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgICAgICAgICBwYWludGVyLmxpbmVBdGxhcy5iaW5kKGNvbnRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKGdyYWRpZW50KSB7XG4gICAgICAgICAgICBjb25zdCBsYXllckdyYWRpZW50ID0gYnVja2V0LmdyYWRpZW50c1tsYXllci5pZF07XG4gICAgICAgICAgICBsZXQgZ3JhZGllbnRUZXh0dXJlID0gbGF5ZXJHcmFkaWVudC50ZXh0dXJlO1xuICAgICAgICAgICAgaWYgKGxheWVyLmdyYWRpZW50VmVyc2lvbiAhPT0gbGF5ZXJHcmFkaWVudC52ZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHR1cmVSZXNvbHV0aW9uID0gMjU2O1xuICAgICAgICAgICAgICAgIGlmIChsYXllci5zdGVwSW50ZXJwb2xhbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlTWF4Wm9vbSA9IHNvdXJjZUNhY2hlLmdldFNvdXJjZSgpLm1heHpvb207XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvdGVudGlhbE92ZXJ6b29tID0gY29vcmQuY2Fub25pY2FsLnogPT09IHNvdXJjZU1heFpvb20gP1xuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jZWlsKDEgPDwgKHBhaW50ZXIudHJhbnNmb3JtLm1heFpvb20gLSBjb29yZC5jYW5vbmljYWwueikpIDogMTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IGJ1Y2tldC5tYXhMaW5lTGVuZ3RoIC8gRVhURU5UO1xuICAgICAgICAgICAgICAgICAgICAvLyBMb2dpY2FsIHBpeGVsIHRpbGUgc2l6ZSBpcyA1MTJweCwgYW5kIDEwMjRweCByaWdodCBiZWZvcmUgY3VycmVudCB6b29tICsgMVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXhUaWxlUGl4ZWxTaXplID0gMTAyNDtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF4aW11bSBwb3NzaWJsZSB0ZXh0dXJlIGNvdmVyYWdlIGhldXJpc3RpYywgYm91bmQgYnkgaGFyZHdhcmUgbWF4IHRleHR1cmUgc2l6ZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXhUZXh0dXJlQ292ZXJhZ2UgPSBsaW5lTGVuZ3RoICogbWF4VGlsZVBpeGVsU2l6ZSAqIHBvdGVudGlhbE92ZXJ6b29tO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlUmVzb2x1dGlvbiA9IGNsYW1wKG5leHRQb3dlck9mVHdvKG1heFRleHR1cmVDb3ZlcmFnZSksIDI1NiwgY29udGV4dC5tYXhUZXh0dXJlU2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxheWVyR3JhZGllbnQuZ3JhZGllbnQgPSByZW5kZXJDb2xvclJhbXAoe1xuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBsYXllci5ncmFkaWVudEV4cHJlc3Npb24oKSxcbiAgICAgICAgICAgICAgICAgICAgZXZhbHVhdGlvbktleTogJ2xpbmVQcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb246IHRleHR1cmVSZXNvbHV0aW9uLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZTogbGF5ZXJHcmFkaWVudC5ncmFkaWVudCB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGNsaXBzOiBidWNrZXQubGluZUNsaXBzQXJyYXlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAobGF5ZXJHcmFkaWVudC50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyR3JhZGllbnQudGV4dHVyZS51cGRhdGUobGF5ZXJHcmFkaWVudC5ncmFkaWVudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJHcmFkaWVudC50ZXh0dXJlID0gbmV3IFRleHR1cmUoY29udGV4dCwgbGF5ZXJHcmFkaWVudC5ncmFkaWVudCwgZ2wuUkdCQSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxheWVyR3JhZGllbnQudmVyc2lvbiA9IGxheWVyLmdyYWRpZW50VmVyc2lvbjtcbiAgICAgICAgICAgICAgICBncmFkaWVudFRleHR1cmUgPSBsYXllckdyYWRpZW50LnRleHR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0LmFjdGl2ZVRleHR1cmUuc2V0KGdsLlRFWFRVUkUwKTtcbiAgICAgICAgICAgIGdyYWRpZW50VGV4dHVyZS5iaW5kKGxheWVyLnN0ZXBJbnRlcnBvbGFudCA/IGdsLk5FQVJFU1QgOiBnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUywgZGVwdGhNb2RlLFxuICAgICAgICAgICAgcGFpbnRlci5zdGVuY2lsTW9kZUZvckNsaXBwaW5nKGNvb3JkKSwgY29sb3JNb2RlLCBDdWxsRmFjZU1vZGUuZGlzYWJsZWQsIHVuaWZvcm1WYWx1ZXMsXG4gICAgICAgICAgICBsYXllci5pZCwgYnVja2V0LmxheW91dFZlcnRleEJ1ZmZlciwgYnVja2V0LmluZGV4QnVmZmVyLCBidWNrZXQuc2VnbWVudHMsXG4gICAgICAgICAgICBsYXllci5wYWludCwgcGFpbnRlci50cmFuc2Zvcm0uem9vbSwgcHJvZ3JhbUNvbmZpZ3VyYXRpb24sIGJ1Y2tldC5sYXlvdXRWZXJ0ZXhCdWZmZXIyKTtcblxuICAgICAgICBmaXJzdFRpbGUgPSBmYWxzZTtcbiAgICAgICAgLy8gb25jZSByZWZhY3RvcmVkIHNvIHRoYXQgYm91bmQgdGV4dHVyZSBzdGF0ZSBpcyBtYW5hZ2VkLCB3ZSdsbCBhbHNvIGJlIGFibGUgdG8gcmVtb3ZlIHRoaXMgZmlyc3RUaWxlL3Byb2dyYW1DaGFuZ2VkIGxvZ2ljXG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFN0ZW5jaWxNb2RlIGZyb20gJy4uL2dsL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IEN1bGxGYWNlTW9kZSBmcm9tICcuLi9nbC9jdWxsX2ZhY2VfbW9kZSc7XG5pbXBvcnQge1xuICAgIGJhY2tncm91bmRVbmlmb3JtVmFsdWVzLFxuICAgIGJhY2tncm91bmRQYXR0ZXJuVW5pZm9ybVZhbHVlc1xufSBmcm9tICcuL3Byb2dyYW0vYmFja2dyb3VuZF9wcm9ncmFtJztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUgU291cmNlQ2FjaGUgZnJvbSAnLi4vc291cmNlL3NvdXJjZV9jYWNoZSc7XG5pbXBvcnQgdHlwZSBCYWNrZ3JvdW5kU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllci9iYWNrZ3JvdW5kX3N0eWxlX2xheWVyJztcblxuZXhwb3J0IGRlZmF1bHQgZHJhd0JhY2tncm91bmQ7XG5cbmZ1bmN0aW9uIGRyYXdCYWNrZ3JvdW5kKHBhaW50ZXI6IFBhaW50ZXIsIHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSwgbGF5ZXI6IEJhY2tncm91bmRTdHlsZUxheWVyKSB7XG4gICAgY29uc3QgY29sb3IgPSBsYXllci5wYWludC5nZXQoJ2JhY2tncm91bmQtY29sb3InKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gbGF5ZXIucGFpbnQuZ2V0KCdiYWNrZ3JvdW5kLW9wYWNpdHknKTtcblxuICAgIGlmIChvcGFjaXR5ID09PSAwKSByZXR1cm47XG5cbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBwYWludGVyLnRyYW5zZm9ybTtcbiAgICBjb25zdCB0aWxlU2l6ZSA9IHRyYW5zZm9ybS50aWxlU2l6ZTtcbiAgICBjb25zdCBpbWFnZSA9IGxheWVyLnBhaW50LmdldCgnYmFja2dyb3VuZC1wYXR0ZXJuJyk7XG4gICAgaWYgKHBhaW50ZXIuaXNQYXR0ZXJuTWlzc2luZyhpbWFnZSkpIHJldHVybjtcblxuICAgIGNvbnN0IHBhc3MgPSAoIWltYWdlICYmIGNvbG9yLmEgPT09IDEgJiYgb3BhY2l0eSA9PT0gMSAmJiBwYWludGVyLm9wYXF1ZVBhc3NFbmFibGVkRm9yTGF5ZXIoKSkgPyAnb3BhcXVlJyA6ICd0cmFuc2x1Y2VudCc7XG4gICAgaWYgKHBhaW50ZXIucmVuZGVyUGFzcyAhPT0gcGFzcykgcmV0dXJuO1xuXG4gICAgY29uc3Qgc3RlbmNpbE1vZGUgPSBTdGVuY2lsTW9kZS5kaXNhYmxlZDtcbiAgICBjb25zdCBkZXB0aE1vZGUgPSBwYWludGVyLmRlcHRoTW9kZUZvclN1YmxheWVyKDAsIHBhc3MgPT09ICdvcGFxdWUnID8gRGVwdGhNb2RlLlJlYWRXcml0ZSA6IERlcHRoTW9kZS5SZWFkT25seSk7XG4gICAgY29uc3QgY29sb3JNb2RlID0gcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCk7XG5cbiAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKGltYWdlID8gJ2JhY2tncm91bmRQYXR0ZXJuJyA6ICdiYWNrZ3JvdW5kJyk7XG5cbiAgICBjb25zdCB0aWxlSURzID0gdHJhbnNmb3JtLmNvdmVyaW5nVGlsZXMoe3RpbGVTaXplfSk7XG5cbiAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgICAgIHBhaW50ZXIuaW1hZ2VNYW5hZ2VyLmJpbmQocGFpbnRlci5jb250ZXh0KTtcbiAgICB9XG5cbiAgICBjb25zdCBjcm9zc2ZhZGUgPSBsYXllci5nZXRDcm9zc2ZhZGVQYXJhbWV0ZXJzKCk7XG4gICAgZm9yIChjb25zdCB0aWxlSUQgb2YgdGlsZUlEcykge1xuICAgICAgICBjb25zdCBtYXRyaXggPSBwYWludGVyLnRyYW5zZm9ybS5jYWxjdWxhdGVQb3NNYXRyaXgodGlsZUlELnRvVW53cmFwcGVkKCkpO1xuICAgICAgICBjb25zdCB1bmlmb3JtVmFsdWVzID0gaW1hZ2UgP1xuICAgICAgICAgICAgYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtVmFsdWVzKG1hdHJpeCwgb3BhY2l0eSwgcGFpbnRlciwgaW1hZ2UsIHt0aWxlSUQsIHRpbGVTaXplfSwgY3Jvc3NmYWRlKSA6XG4gICAgICAgICAgICBiYWNrZ3JvdW5kVW5pZm9ybVZhbHVlcyhtYXRyaXgsIG9wYWNpdHksIGNvbG9yKTtcblxuICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsIEN1bGxGYWNlTW9kZS5kaXNhYmxlZCxcbiAgICAgICAgICAgIHVuaWZvcm1WYWx1ZXMsIGxheWVyLmlkLCBwYWludGVyLnRpbGVFeHRlbnRCdWZmZXIsXG4gICAgICAgICAgICBwYWludGVyLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyLCBwYWludGVyLnRpbGVFeHRlbnRTZWdtZW50cyk7XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuZXhwb3J0IGRlZmF1bHQgZHJhd0N1c3RvbTtcblxuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCBTdGVuY2lsTW9kZSBmcm9tICcuLi9nbC9zdGVuY2lsX21vZGUnO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIEN1c3RvbVN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvY3VzdG9tX3N0eWxlX2xheWVyJztcblxuZnVuY3Rpb24gZHJhd0N1c3RvbShwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGxheWVyOiBDdXN0b21TdHlsZUxheWVyKSB7XG5cbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGltcGxlbWVudGF0aW9uID0gbGF5ZXIuaW1wbGVtZW50YXRpb247XG5cbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzID09PSAnb2Zmc2NyZWVuJykge1xuXG4gICAgICAgIGNvbnN0IHByZXJlbmRlciA9IGltcGxlbWVudGF0aW9uLnByZXJlbmRlcjtcbiAgICAgICAgaWYgKHByZXJlbmRlcikge1xuICAgICAgICAgICAgcGFpbnRlci5zZXRDdXN0b21MYXllckRlZmF1bHRzKCk7XG4gICAgICAgICAgICBjb250ZXh0LnNldENvbG9yTW9kZShwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKSk7XG5cbiAgICAgICAgICAgIHByZXJlbmRlci5jYWxsKGltcGxlbWVudGF0aW9uLCBjb250ZXh0LmdsLCBwYWludGVyLnRyYW5zZm9ybS5jdXN0b21MYXllck1hdHJpeCgpKTtcblxuICAgICAgICAgICAgY29udGV4dC5zZXREaXJ0eSgpO1xuICAgICAgICAgICAgcGFpbnRlci5zZXRCYXNlU3RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChwYWludGVyLnJlbmRlclBhc3MgPT09ICd0cmFuc2x1Y2VudCcpIHtcblxuICAgICAgICBwYWludGVyLnNldEN1c3RvbUxheWVyRGVmYXVsdHMoKTtcblxuICAgICAgICBjb250ZXh0LnNldENvbG9yTW9kZShwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKSk7XG4gICAgICAgIGNvbnRleHQuc2V0U3RlbmNpbE1vZGUoU3RlbmNpbE1vZGUuZGlzYWJsZWQpO1xuXG4gICAgICAgIGNvbnN0IGRlcHRoTW9kZSA9IGltcGxlbWVudGF0aW9uLnJlbmRlcmluZ01vZGUgPT09ICczZCcgP1xuICAgICAgICAgICAgbmV3IERlcHRoTW9kZShwYWludGVyLmNvbnRleHQuZ2wuTEVRVUFMLCBEZXB0aE1vZGUuUmVhZFdyaXRlLCBwYWludGVyLmRlcHRoUmFuZ2VGb3IzRCkgOlxuICAgICAgICAgICAgcGFpbnRlci5kZXB0aE1vZGVGb3JTdWJsYXllcigwLCBEZXB0aE1vZGUuUmVhZE9ubHkpO1xuXG4gICAgICAgIGNvbnRleHQuc2V0RGVwdGhNb2RlKGRlcHRoTW9kZSk7XG5cbiAgICAgICAgaW1wbGVtZW50YXRpb24ucmVuZGVyKGNvbnRleHQuZ2wsIHBhaW50ZXIudHJhbnNmb3JtLmN1c3RvbUxheWVyTWF0cml4KCkpO1xuXG4gICAgICAgIGNvbnRleHQuc2V0RGlydHkoKTtcbiAgICAgICAgcGFpbnRlci5zZXRCYXNlU3RhdGUoKTtcbiAgICAgICAgY29udGV4dC5iaW5kRnJhbWVidWZmZXIuc2V0KG51bGwpO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7dmVjMywgdmVjNH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuY2xhc3MgRnJ1c3R1bSB7XG4gICAgcG9pbnRzOiBBcnJheTxBcnJheTxudW1iZXI+PjtcbiAgICBwbGFuZXM6IEFycmF5PEFycmF5PG51bWJlcj4+O1xuXG4gICAgY29uc3RydWN0b3IocG9pbnRzXzogQXJyYXk8QXJyYXk8bnVtYmVyPj4sIHBsYW5lc186IEFycmF5PEFycmF5PG51bWJlcj4+KSB7XG4gICAgICAgIHRoaXMucG9pbnRzID0gcG9pbnRzXztcbiAgICAgICAgdGhpcy5wbGFuZXMgPSBwbGFuZXNfO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tSW52UHJvamVjdGlvbk1hdHJpeChpbnZQcm9qOiBGbG9hdDY0QXJyYXksIHdvcmxkU2l6ZTogbnVtYmVyLCB6b29tOiBudW1iZXIpOiBGcnVzdHVtIHtcbiAgICAgICAgY29uc3QgY2xpcFNwYWNlQ29ybmVycyA9IFtcbiAgICAgICAgICAgIFstMSwgMSwgLTEsIDFdLFxuICAgICAgICAgICAgWyAxLCAxLCAtMSwgMV0sXG4gICAgICAgICAgICBbIDEsIC0xLCAtMSwgMV0sXG4gICAgICAgICAgICBbLTEsIC0xLCAtMSwgMV0sXG4gICAgICAgICAgICBbLTEsIDEsIDEsIDFdLFxuICAgICAgICAgICAgWyAxLCAxLCAxLCAxXSxcbiAgICAgICAgICAgIFsgMSwgLTEsIDEsIDFdLFxuICAgICAgICAgICAgWy0xLCAtMSwgMSwgMV1cbiAgICAgICAgXTtcblxuICAgICAgICBjb25zdCBzY2FsZSA9IE1hdGgucG93KDIsIHpvb20pO1xuXG4gICAgICAgIC8vIFRyYW5zZm9ybSBmcnVzdHVtIGNvcm5lciBwb2ludHMgZnJvbSBjbGlwIHNwYWNlIHRvIHRpbGUgc3BhY2VcbiAgICAgICAgY29uc3QgZnJ1c3R1bUNvb3JkcyA9IGNsaXBTcGFjZUNvcm5lcnNcbiAgICAgICAgICAgIC5tYXAodiA9PiB2ZWM0LnRyYW5zZm9ybU1hdDQoW10sIHYsIGludlByb2opKVxuICAgICAgICAgICAgLm1hcCh2ID0+IHZlYzQuc2NhbGUoW10sIHYsIDEuMCAvIHZbM10gLyB3b3JsZFNpemUgKiBzY2FsZSkpO1xuXG4gICAgICAgIGNvbnN0IGZydXN0dW1QbGFuZVBvaW50SW5kaWNlcyA9IFtcbiAgICAgICAgICAgIFswLCAxLCAyXSwgIC8vIG5lYXJcbiAgICAgICAgICAgIFs2LCA1LCA0XSwgIC8vIGZhclxuICAgICAgICAgICAgWzAsIDMsIDddLCAgLy8gbGVmdFxuICAgICAgICAgICAgWzIsIDEsIDVdLCAgLy8gcmlnaHRcbiAgICAgICAgICAgIFszLCAyLCA2XSwgIC8vIGJvdHRvbVxuICAgICAgICAgICAgWzAsIDQsIDVdICAgLy8gdG9wXG4gICAgICAgIF07XG5cbiAgICAgICAgY29uc3QgZnJ1c3R1bVBsYW5lcyA9IGZydXN0dW1QbGFuZVBvaW50SW5kaWNlcy5tYXAoKHA6IEFycmF5PG51bWJlcj4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSB2ZWMzLnN1YihbXSwgZnJ1c3R1bUNvb3Jkc1twWzBdXSwgZnJ1c3R1bUNvb3Jkc1twWzFdXSk7XG4gICAgICAgICAgICBjb25zdCBiID0gdmVjMy5zdWIoW10sIGZydXN0dW1Db29yZHNbcFsyXV0sIGZydXN0dW1Db29yZHNbcFsxXV0pO1xuICAgICAgICAgICAgY29uc3QgbiA9IHZlYzMubm9ybWFsaXplKFtdLCB2ZWMzLmNyb3NzKFtdLCBhLCBiKSk7XG4gICAgICAgICAgICBjb25zdCBkID0gLXZlYzMuZG90KG4sIGZydXN0dW1Db29yZHNbcFsxXV0pO1xuICAgICAgICAgICAgcmV0dXJuIG4uY29uY2F0KGQpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IEZydXN0dW0oZnJ1c3R1bUNvb3JkcywgZnJ1c3R1bVBsYW5lcyk7XG4gICAgfVxufVxuXG5jbGFzcyBBYWJiIHtcbiAgICBtaW46IHZlYzM7XG4gICAgbWF4OiB2ZWMzO1xuICAgIGNlbnRlcjogdmVjMztcblxuICAgIGNvbnN0cnVjdG9yKG1pbl86IHZlYzMsIG1heF86IHZlYzMpIHtcbiAgICAgICAgdGhpcy5taW4gPSBtaW5fO1xuICAgICAgICB0aGlzLm1heCA9IG1heF87XG4gICAgICAgIHRoaXMuY2VudGVyID0gdmVjMy5zY2FsZShbXSwgdmVjMy5hZGQoW10sIHRoaXMubWluLCB0aGlzLm1heCksIDAuNSk7XG4gICAgfVxuXG4gICAgcXVhZHJhbnQoaW5kZXg6IG51bWJlcik6IEFhYmIge1xuICAgICAgICBjb25zdCBzcGxpdCA9IFsoaW5kZXggJSAyKSA9PT0gMCwgaW5kZXggPCAyXTtcbiAgICAgICAgY29uc3QgcU1pbiA9IHZlYzMuY2xvbmUodGhpcy5taW4pO1xuICAgICAgICBjb25zdCBxTWF4ID0gdmVjMy5jbG9uZSh0aGlzLm1heCk7XG4gICAgICAgIGZvciAobGV0IGF4aXMgPSAwOyBheGlzIDwgc3BsaXQubGVuZ3RoOyBheGlzKyspIHtcbiAgICAgICAgICAgIHFNaW5bYXhpc10gPSBzcGxpdFtheGlzXSA/IHRoaXMubWluW2F4aXNdIDogdGhpcy5jZW50ZXJbYXhpc107XG4gICAgICAgICAgICBxTWF4W2F4aXNdID0gc3BsaXRbYXhpc10gPyB0aGlzLmNlbnRlcltheGlzXSA6IHRoaXMubWF4W2F4aXNdO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVsZXZhdGlvbiBpcyBhbHdheXMgY29uc3RhbnQsIGhlbmNlIHF1YWRyYW50Lm1heC56ID0gdGhpcy5tYXguelxuICAgICAgICBxTWF4WzJdID0gdGhpcy5tYXhbMl07XG4gICAgICAgIHJldHVybiBuZXcgQWFiYihxTWluLCBxTWF4KTtcbiAgICB9XG5cbiAgICBkaXN0YW5jZVgocG9pbnQ6IEFycmF5PG51bWJlcj4pOiBudW1iZXIge1xuICAgICAgICBjb25zdCBwb2ludE9uQWFiYiA9IE1hdGgubWF4KE1hdGgubWluKHRoaXMubWF4WzBdLCBwb2ludFswXSksIHRoaXMubWluWzBdKTtcbiAgICAgICAgcmV0dXJuIHBvaW50T25BYWJiIC0gcG9pbnRbMF07XG4gICAgfVxuXG4gICAgZGlzdGFuY2VZKHBvaW50OiBBcnJheTxudW1iZXI+KTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgcG9pbnRPbkFhYmIgPSBNYXRoLm1heChNYXRoLm1pbih0aGlzLm1heFsxXSwgcG9pbnRbMV0pLCB0aGlzLm1pblsxXSk7XG4gICAgICAgIHJldHVybiBwb2ludE9uQWFiYiAtIHBvaW50WzFdO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm1zIGEgZnJ1c3R1bS1hYWJiIGludGVyc2VjdGlvbiB0ZXN0LiBSZXR1cm5zIDAgaWYgdGhlcmUncyBubyBpbnRlcnNlY3Rpb24sXG4gICAgLy8gMSBpZiBzaGFwZXMgYXJlIGludGVyc2VjdGluZyBhbmQgMiBpZiB0aGUgYWFiYiBpZiBmdWxseSBpbnNpZGUgdGhlIGZydXN0dW0uXG4gICAgaW50ZXJzZWN0cyhmcnVzdHVtOiBGcnVzdHVtKTogbnVtYmVyIHtcbiAgICAgICAgLy8gRXhlY3V0ZSBzZXBhcmF0aW5nIGF4aXMgdGVzdCBiZXR3ZWVuIHR3byBjb252ZXggb2JqZWN0cyB0byBmaW5kIGludGVyc2VjdGlvbnNcbiAgICAgICAgLy8gRWFjaCBmcnVzdHVtIHBsYW5lIHRvZ2V0aGVyIHdpdGggMyBtYWpvciBheGVzIGRlZmluZSB0aGUgc2VwYXJhdGluZyBheGVzXG4gICAgICAgIC8vIE5vdGU6IHRlc3Qgb25seSA0IHBvaW50cyBhcyBib3RoIG1pbiBhbmQgbWF4IHBvaW50cyBoYXZlIGVxdWFsIGVsZXZhdGlvblxuICAgICAgICBhc3NlcnQodGhpcy5taW5bMl0gPT09IDAgJiYgdGhpcy5tYXhbMl0gPT09IDApO1xuXG4gICAgICAgIGNvbnN0IGFhYmJQb2ludHMgPSBbXG4gICAgICAgICAgICBbdGhpcy5taW5bMF0sIHRoaXMubWluWzFdLCAwLjAsIDFdLFxuICAgICAgICAgICAgW3RoaXMubWF4WzBdLCB0aGlzLm1pblsxXSwgMC4wLCAxXSxcbiAgICAgICAgICAgIFt0aGlzLm1heFswXSwgdGhpcy5tYXhbMV0sIDAuMCwgMV0sXG4gICAgICAgICAgICBbdGhpcy5taW5bMF0sIHRoaXMubWF4WzFdLCAwLjAsIDFdXG4gICAgICAgIF07XG5cbiAgICAgICAgbGV0IGZ1bGx5SW5zaWRlID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IGZydXN0dW0ucGxhbmVzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBjb25zdCBwbGFuZSA9IGZydXN0dW0ucGxhbmVzW3BdO1xuICAgICAgICAgICAgbGV0IHBvaW50c0luc2lkZSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWFiYlBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHBvaW50c0luc2lkZSArPSB2ZWM0LmRvdChwbGFuZSwgYWFiYlBvaW50c1tpXSkgPj0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBvaW50c0luc2lkZSA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICAgICAgaWYgKHBvaW50c0luc2lkZSAhPT0gYWFiYlBvaW50cy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZnVsbHlJbnNpZGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmdWxseUluc2lkZSlcbiAgICAgICAgICAgIHJldHVybiAyO1xuXG4gICAgICAgIGZvciAobGV0IGF4aXMgPSAwOyBheGlzIDwgMzsgYXhpcysrKSB7XG4gICAgICAgICAgICBsZXQgcHJvak1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgICAgICBsZXQgcHJvak1heCA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IGZydXN0dW0ucG9pbnRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdGVkUG9pbnQgPSBmcnVzdHVtLnBvaW50c1twXVtheGlzXSAtIHRoaXMubWluW2F4aXNdO1xuXG4gICAgICAgICAgICAgICAgcHJvak1pbiA9IE1hdGgubWluKHByb2pNaW4sIHByb2plY3RlZFBvaW50KTtcbiAgICAgICAgICAgICAgICBwcm9qTWF4ID0gTWF0aC5tYXgocHJvak1heCwgcHJvamVjdGVkUG9pbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvak1heCA8IDAgfHwgcHJvak1pbiA+IHRoaXMubWF4W2F4aXNdIC0gdGhpcy5taW5bYXhpc10pXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG59XG5leHBvcnQge1xuICAgIEFhYmIsXG4gICAgRnJ1c3R1bVxufTtcbiIsIi8vIEBmbG93XG5pbXBvcnQge251bWJlcn0gZnJvbSBcIi4uL3N0eWxlLXNwZWMvdXRpbC9pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IFBvaW50ICBmcm9tIFwiQG1hcGJveC9wb2ludC1nZW9tZXRyeVwiO1xuaW1wb3J0IHtjbGFtcH0gZnJvbSBcIi4uL3V0aWwvdXRpbFwiO1xuXG4vKipcbiAqIEFuIGBFZGdlSW5zZXRgIG9iamVjdCByZXByZXNlbnRzIHNjcmVlbiBzcGFjZSBwYWRkaW5nIGFwcGxpZWQgdG8gdGhlIGVkZ2VzIG9mIHRoZSB2aWV3cG9ydC5cbiAqIFRoaXMgc2hpZnRzIHRoZSBhcHByZW50IGNlbnRlciBvciB0aGUgdmFuaXNoaW5nIHBvaW50IG9mIHRoZSBtYXAuIFRoaXMgaXMgdXNlZnVsIGZvciBhZGRpbmcgZmxvYXRpbmcgVUkgZWxlbWVudHNcbiAqIG9uIHRvcCBvZiB0aGUgbWFwIGFuZCBoYXZpbmcgdGhlIHZhbmlzaGluZyBwb2ludCBzaGlmdCBhcyBVSSBlbGVtZW50cyByZXNpemUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFt0b3A9MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYm90dG9tPTBdXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlZnQ9MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmlnaHQ9MF1cbiAqL1xuY2xhc3MgRWRnZUluc2V0cyB7XG4gICAgdG9wOiBudW1iZXI7XG4gICAgYm90dG9tOiBudW1iZXI7XG4gICAgbGVmdDogbnVtYmVyO1xuICAgIHJpZ2h0OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih0b3A6IG51bWJlciA9IDAsIGJvdHRvbTogbnVtYmVyID0gMCwgbGVmdDogbnVtYmVyID0gMCwgcmlnaHQ6IG51bWJlciA9IDApIHtcbiAgICAgICAgaWYgKGlzTmFOKHRvcCkgfHwgdG9wIDwgMCB8fFxuICAgICAgICAgICAgaXNOYU4oYm90dG9tKSB8fCBib3R0b20gPCAwIHx8XG4gICAgICAgICAgICBpc05hTihsZWZ0KSB8fCBsZWZ0IDwgMCB8fFxuICAgICAgICAgICAgaXNOYU4ocmlnaHQpIHx8IHJpZ2h0IDwgMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgZWRnZS1pbnNldHMsIHRvcCwgYm90dG9tLCBsZWZ0IGFuZCByaWdodCBtdXN0IGFsbCBiZSBudW1iZXJzJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSBib3R0b207XG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcnBvbGF0ZXMgdGhlIGluc2V0IGluLXBsYWNlLlxuICAgICAqIFRoaXMgbWFpbnRhaW5zIHRoZSBjdXJyZW50IGluc2V0IHZhbHVlIGZvciBhbnkgaW5zZXQgbm90IHByZXNlbnQgaW4gYHRhcmdldGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BhZGRpbmdPcHRpb25zfSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdFxuICAgICAqIEByZXR1cm5zIHtFZGdlSW5zZXRzfVxuICAgICAqIEBtZW1iZXJvZiBFZGdlSW5zZXRzXG4gICAgICovXG4gICAgaW50ZXJwb2xhdGUoc3RhcnQ6IFBhZGRpbmdPcHRpb25zIHwgRWRnZUluc2V0cywgdGFyZ2V0OiBQYWRkaW5nT3B0aW9ucywgdDogbnVtYmVyKTogRWRnZUluc2V0cyB7XG4gICAgICAgIGlmICh0YXJnZXQudG9wICE9IG51bGwgJiYgc3RhcnQudG9wICE9IG51bGwpIHRoaXMudG9wID0gbnVtYmVyKHN0YXJ0LnRvcCwgdGFyZ2V0LnRvcCwgdCk7XG4gICAgICAgIGlmICh0YXJnZXQuYm90dG9tICE9IG51bGwgJiYgc3RhcnQuYm90dG9tICE9IG51bGwpIHRoaXMuYm90dG9tID0gbnVtYmVyKHN0YXJ0LmJvdHRvbSwgdGFyZ2V0LmJvdHRvbSwgdCk7XG4gICAgICAgIGlmICh0YXJnZXQubGVmdCAhPSBudWxsICYmIHN0YXJ0LmxlZnQgIT0gbnVsbCkgdGhpcy5sZWZ0ID0gbnVtYmVyKHN0YXJ0LmxlZnQsIHRhcmdldC5sZWZ0LCB0KTtcbiAgICAgICAgaWYgKHRhcmdldC5yaWdodCAhPSBudWxsICYmIHN0YXJ0LnJpZ2h0ICE9IG51bGwpIHRoaXMucmlnaHQgPSBudW1iZXIoc3RhcnQucmlnaHQsIHRhcmdldC5yaWdodCwgdCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXRpbGl0eSBtZXRob2QgdGhhdCBjb21wdXRlcyB0aGUgbmV3IGFwcHJlbnQgY2VudGVyIG9yIHZhbmlzaGluZyBwb2ludCBhZnRlciBhcHBseWluZyBpbnNldHMuXG4gICAgICogVGhpcyBpcyBpbiBwaXhlbHMgYW5kIHdpdGggdGhlIHRvcCBsZWZ0IGJlaW5nICgwLjApIGFuZCAreSBiZWluZyBkb3dud2FyZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAgICogQHJldHVybnMge1BvaW50fVxuICAgICAqIEBtZW1iZXJvZiBFZGdlSW5zZXRzXG4gICAgICovXG4gICAgZ2V0Q2VudGVyKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogUG9pbnQge1xuICAgICAgICAvLyBDbGFtcCBpbnNldHMgc28gdGhleSBuZXZlciBvdmVyZmxvdyB3aWR0aC9oZWlnaHQgYW5kIGFsd2F5cyBjYWxjdWxhdGUgYSB2YWxpZCBjZW50ZXJcbiAgICAgICAgY29uc3QgeCA9IGNsYW1wKCh0aGlzLmxlZnQgKyB3aWR0aCAtIHRoaXMucmlnaHQpIC8gMiwgMCwgd2lkdGgpO1xuICAgICAgICBjb25zdCB5ID0gY2xhbXAoKHRoaXMudG9wICsgaGVpZ2h0IC0gdGhpcy5ib3R0b20pIC8gMiwgMCwgaGVpZ2h0KTtcblxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHgsIHkpO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcjogUGFkZGluZ09wdGlvbnMpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9wID09PSBvdGhlci50b3AgJiZcbiAgICAgICAgICAgIHRoaXMuYm90dG9tID09PSBvdGhlci5ib3R0b20gJiZcbiAgICAgICAgICAgIHRoaXMubGVmdCA9PT0gb3RoZXIubGVmdCAmJlxuICAgICAgICAgICAgdGhpcy5yaWdodCA9PT0gb3RoZXIucmlnaHQ7XG4gICAgfVxuXG4gICAgY2xvbmUoKTogRWRnZUluc2V0cyB7XG4gICAgICAgIHJldHVybiBuZXcgRWRnZUluc2V0cyh0aGlzLnRvcCwgdGhpcy5ib3R0b20sIHRoaXMubGVmdCwgdGhpcy5yaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBzZHRhdGUgYXMganNvbiwgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gaGF2ZSBhXG4gICAgICogcmVhZC1vbmx5IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnNldC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQYWRkaW5nT3B0aW9uc31cbiAgICAgKiBAbWVtYmVyb2YgRWRnZUluc2V0c1xuICAgICAqL1xuICAgIHRvSlNPTigpOiBQYWRkaW5nT3B0aW9ucyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRoaXMudG9wLFxuICAgICAgICAgICAgYm90dG9tOiB0aGlzLmJvdHRvbSxcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiB0aGlzLnJpZ2h0XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBQYWRkaW5nT3B0aW9ucyA9IHt0b3A6ID9udW1iZXIsIGJvdHRvbTogP251bWJlciwgcmlnaHQ6ID9udW1iZXIsIGxlZnQ6ID9udW1iZXJ9O1xuXG5leHBvcnQgZGVmYXVsdCBFZGdlSW5zZXRzO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IExuZ0xhdCBmcm9tICcuL2xuZ19sYXQnO1xuaW1wb3J0IExuZ0xhdEJvdW5kcyBmcm9tICcuL2xuZ19sYXRfYm91bmRzJztcbmltcG9ydCBNZXJjYXRvckNvb3JkaW5hdGUsIHttZXJjYXRvclhmcm9tTG5nLCBtZXJjYXRvcllmcm9tTGF0LCBtZXJjYXRvclpmcm9tQWx0aXR1ZGV9IGZyb20gJy4vbWVyY2F0b3JfY29vcmRpbmF0ZSc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQge3dyYXAsIGNsYW1wfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHtudW1iZXIgYXMgaW50ZXJwb2xhdGV9IGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9pbnRlcnBvbGF0ZSc7XG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcbmltcG9ydCB7dmVjNCwgbWF0NCwgbWF0MiwgdmVjMn0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCB7QWFiYiwgRnJ1c3R1bX0gZnJvbSAnLi4vdXRpbC9wcmltaXRpdmVzLmpzJztcbmltcG9ydCBFZGdlSW5zZXRzIGZyb20gJy4vZWRnZV9pbnNldHMnO1xuXG5pbXBvcnQge1Vud3JhcHBlZFRpbGVJRCwgT3ZlcnNjYWxlZFRpbGVJRCwgQ2Fub25pY2FsVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5pbXBvcnQgdHlwZSB7UGFkZGluZ09wdGlvbnN9IGZyb20gJy4vZWRnZV9pbnNldHMnO1xuXG4vKipcbiAqIEEgc2luZ2xlIHRyYW5zZm9ybSwgZ2VuZXJhbGx5IHVzZWQgZm9yIGEgc2luZ2xlIHRpbGUgdG8gYmVcbiAqIHNjYWxlZCwgcm90YXRlZCwgYW5kIHpvb21lZC5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFRyYW5zZm9ybSB7XG4gICAgdGlsZVNpemU6IG51bWJlcjtcbiAgICB0aWxlWm9vbTogbnVtYmVyO1xuICAgIGxuZ1JhbmdlOiA/W251bWJlciwgbnVtYmVyXTtcbiAgICBsYXRSYW5nZTogP1tudW1iZXIsIG51bWJlcl07XG4gICAgbWF4VmFsaWRMYXRpdHVkZTogbnVtYmVyO1xuICAgIHNjYWxlOiBudW1iZXI7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBhbmdsZTogbnVtYmVyO1xuICAgIHJvdGF0aW9uTWF0cml4OiBGbG9hdDY0QXJyYXk7XG4gICAgem9vbUZyYWN0aW9uOiBudW1iZXI7XG4gICAgcGl4ZWxzVG9HTFVuaXRzOiBbbnVtYmVyLCBudW1iZXJdO1xuICAgIGNhbWVyYVRvQ2VudGVyRGlzdGFuY2U6IG51bWJlcjtcbiAgICBtZXJjYXRvck1hdHJpeDogQXJyYXk8bnVtYmVyPjtcbiAgICBwcm9qTWF0cml4OiBGbG9hdDY0QXJyYXk7XG4gICAgaW52UHJvak1hdHJpeDogRmxvYXQ2NEFycmF5O1xuICAgIGFsaWduZWRQcm9qTWF0cml4OiBGbG9hdDY0QXJyYXk7XG4gICAgcGl4ZWxNYXRyaXg6IEZsb2F0NjRBcnJheTtcbiAgICBwaXhlbE1hdHJpeEludmVyc2U6IEZsb2F0NjRBcnJheTtcbiAgICBnbENvb3JkTWF0cml4OiBGbG9hdDMyQXJyYXk7XG4gICAgbGFiZWxQbGFuZU1hdHJpeDogRmxvYXQzMkFycmF5O1xuICAgIF9mb3Y6IG51bWJlcjtcbiAgICBfcGl0Y2g6IG51bWJlcjtcbiAgICBfem9vbTogbnVtYmVyO1xuICAgIF91bm1vZGlmaWVkOiBib29sZWFuO1xuICAgIF9yZW5kZXJXb3JsZENvcGllczogYm9vbGVhbjtcbiAgICBfbWluWm9vbTogbnVtYmVyO1xuICAgIF9tYXhab29tOiBudW1iZXI7XG4gICAgX21pblBpdGNoOiBudW1iZXI7XG4gICAgX21heFBpdGNoOiBudW1iZXI7XG4gICAgX2NlbnRlcjogTG5nTGF0O1xuICAgIF9lZGdlSW5zZXRzOiBFZGdlSW5zZXRzO1xuICAgIF9jb25zdHJhaW5pbmc6IGJvb2xlYW47XG4gICAgX3Bvc01hdHJpeENhY2hlOiB7W186IHN0cmluZ106IEZsb2F0MzJBcnJheX07XG4gICAgX2FsaWduZWRQb3NNYXRyaXhDYWNoZToge1tfOiBzdHJpbmddOiBGbG9hdDMyQXJyYXl9O1xuXG4gICAgY29uc3RydWN0b3IobWluWm9vbTogP251bWJlciwgbWF4Wm9vbTogP251bWJlciwgbWluUGl0Y2g6ID9udW1iZXIsIG1heFBpdGNoOiA/bnVtYmVyLCByZW5kZXJXb3JsZENvcGllczogYm9vbGVhbiB8IHZvaWQpIHtcbiAgICAgICAgdGhpcy50aWxlU2l6ZSA9IDUxMjsgLy8gY29uc3RhbnRcbiAgICAgICAgdGhpcy5tYXhWYWxpZExhdGl0dWRlID0gODUuMDUxMTI5OyAvLyBjb25zdGFudFxuXG4gICAgICAgIHRoaXMuX3JlbmRlcldvcmxkQ29waWVzID0gcmVuZGVyV29ybGRDb3BpZXMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiByZW5kZXJXb3JsZENvcGllcztcbiAgICAgICAgdGhpcy5fbWluWm9vbSA9IG1pblpvb20gfHwgMDtcbiAgICAgICAgdGhpcy5fbWF4Wm9vbSA9IG1heFpvb20gfHwgMjI7XG5cbiAgICAgICAgdGhpcy5fbWluUGl0Y2ggPSAobWluUGl0Y2ggPT09IHVuZGVmaW5lZCB8fCBtaW5QaXRjaCA9PT0gbnVsbCkgPyAwIDogbWluUGl0Y2g7XG4gICAgICAgIHRoaXMuX21heFBpdGNoID0gKG1heFBpdGNoID09PSB1bmRlZmluZWQgfHwgbWF4UGl0Y2ggPT09IG51bGwpID8gNjAgOiBtYXhQaXRjaDtcblxuICAgICAgICB0aGlzLnNldE1heEJvdW5kcygpO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSAwO1xuICAgICAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX2NlbnRlciA9IG5ldyBMbmdMYXQoMCwgMCk7XG4gICAgICAgIHRoaXMuem9vbSA9IDA7XG4gICAgICAgIHRoaXMuYW5nbGUgPSAwO1xuICAgICAgICB0aGlzLl9mb3YgPSAwLjY0MzUwMTEwODc5MzI4NDQ7XG4gICAgICAgIHRoaXMuX3BpdGNoID0gMDtcbiAgICAgICAgdGhpcy5fdW5tb2RpZmllZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2VkZ2VJbnNldHMgPSBuZXcgRWRnZUluc2V0cygpO1xuICAgICAgICB0aGlzLl9wb3NNYXRyaXhDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9hbGlnbmVkUG9zTWF0cml4Q2FjaGUgPSB7fTtcbiAgICB9XG5cbiAgICBjbG9uZSgpOiBUcmFuc2Zvcm0ge1xuICAgICAgICBjb25zdCBjbG9uZSA9IG5ldyBUcmFuc2Zvcm0odGhpcy5fbWluWm9vbSwgdGhpcy5fbWF4Wm9vbSwgdGhpcy5fbWluUGl0Y2gsIHRoaXMubWF4UGl0Y2gsIHRoaXMuX3JlbmRlcldvcmxkQ29waWVzKTtcbiAgICAgICAgY2xvbmUudGlsZVNpemUgPSB0aGlzLnRpbGVTaXplO1xuICAgICAgICBjbG9uZS5sYXRSYW5nZSA9IHRoaXMubGF0UmFuZ2U7XG4gICAgICAgIGNsb25lLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgY2xvbmUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIGNsb25lLl9jZW50ZXIgPSB0aGlzLl9jZW50ZXI7XG4gICAgICAgIGNsb25lLnpvb20gPSB0aGlzLnpvb207XG4gICAgICAgIGNsb25lLmFuZ2xlID0gdGhpcy5hbmdsZTtcbiAgICAgICAgY2xvbmUuX2ZvdiA9IHRoaXMuX2ZvdjtcbiAgICAgICAgY2xvbmUuX3BpdGNoID0gdGhpcy5fcGl0Y2g7XG4gICAgICAgIGNsb25lLl91bm1vZGlmaWVkID0gdGhpcy5fdW5tb2RpZmllZDtcbiAgICAgICAgY2xvbmUuX2VkZ2VJbnNldHMgPSB0aGlzLl9lZGdlSW5zZXRzLmNsb25lKCk7XG4gICAgICAgIGNsb25lLl9jYWxjTWF0cmljZXMoKTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cblxuICAgIGdldCBtaW5ab29tKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9taW5ab29tOyB9XG4gICAgc2V0IG1pblpvb20oem9vbTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9taW5ab29tID09PSB6b29tKSByZXR1cm47XG4gICAgICAgIHRoaXMuX21pblpvb20gPSB6b29tO1xuICAgICAgICB0aGlzLnpvb20gPSBNYXRoLm1heCh0aGlzLnpvb20sIHpvb20pO1xuICAgIH1cblxuICAgIGdldCBtYXhab29tKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9tYXhab29tOyB9XG4gICAgc2V0IG1heFpvb20oem9vbTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXhab29tID09PSB6b29tKSByZXR1cm47XG4gICAgICAgIHRoaXMuX21heFpvb20gPSB6b29tO1xuICAgICAgICB0aGlzLnpvb20gPSBNYXRoLm1pbih0aGlzLnpvb20sIHpvb20pO1xuICAgIH1cblxuICAgIGdldCBtaW5QaXRjaCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fbWluUGl0Y2g7IH1cbiAgICBzZXQgbWluUGl0Y2gocGl0Y2g6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5fbWluUGl0Y2ggPT09IHBpdGNoKSByZXR1cm47XG4gICAgICAgIHRoaXMuX21pblBpdGNoID0gcGl0Y2g7XG4gICAgICAgIHRoaXMucGl0Y2ggPSBNYXRoLm1heCh0aGlzLnBpdGNoLCBwaXRjaCk7XG4gICAgfVxuXG4gICAgZ2V0IG1heFBpdGNoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9tYXhQaXRjaDsgfVxuICAgIHNldCBtYXhQaXRjaChwaXRjaDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXhQaXRjaCA9PT0gcGl0Y2gpIHJldHVybjtcbiAgICAgICAgdGhpcy5fbWF4UGl0Y2ggPSBwaXRjaDtcbiAgICAgICAgdGhpcy5waXRjaCA9IE1hdGgubWluKHRoaXMucGl0Y2gsIHBpdGNoKTtcbiAgICB9XG5cbiAgICBnZXQgcmVuZGVyV29ybGRDb3BpZXMoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9yZW5kZXJXb3JsZENvcGllczsgfVxuICAgIHNldCByZW5kZXJXb3JsZENvcGllcyhyZW5kZXJXb3JsZENvcGllcz86ID9ib29sZWFuKSB7XG4gICAgICAgIGlmIChyZW5kZXJXb3JsZENvcGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZW5kZXJXb3JsZENvcGllcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocmVuZGVyV29ybGRDb3BpZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlbmRlcldvcmxkQ29waWVzID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW5kZXJXb3JsZENvcGllcyA9IHJlbmRlcldvcmxkQ29waWVzO1xuICAgIH1cblxuICAgIGdldCB3b3JsZFNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZVNpemUgKiB0aGlzLnNjYWxlO1xuICAgIH1cblxuICAgIGdldCBjZW50ZXJPZmZzZXQoKTogUG9pbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5jZW50ZXJQb2ludC5fc3ViKHRoaXMuc2l6ZS5fZGl2KDIpKTtcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpOiBQb2ludCB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIGdldCBiZWFyaW5nKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAtdGhpcy5hbmdsZSAvIE1hdGguUEkgKiAxODA7XG4gICAgfVxuICAgIHNldCBiZWFyaW5nKGJlYXJpbmc6IG51bWJlcikge1xuICAgICAgICBjb25zdCBiID0gLXdyYXAoYmVhcmluZywgLTE4MCwgMTgwKSAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgIGlmICh0aGlzLmFuZ2xlID09PSBiKSByZXR1cm47XG4gICAgICAgIHRoaXMuX3VubW9kaWZpZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hbmdsZSA9IGI7XG4gICAgICAgIHRoaXMuX2NhbGNNYXRyaWNlcygpO1xuXG4gICAgICAgIC8vIDJ4MiBtYXRyaXggZm9yIHJvdGF0aW5nIHBvaW50c1xuICAgICAgICB0aGlzLnJvdGF0aW9uTWF0cml4ID0gbWF0Mi5jcmVhdGUoKTtcbiAgICAgICAgbWF0Mi5yb3RhdGUodGhpcy5yb3RhdGlvbk1hdHJpeCwgdGhpcy5yb3RhdGlvbk1hdHJpeCwgdGhpcy5hbmdsZSk7XG4gICAgfVxuXG4gICAgZ2V0IHBpdGNoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9waXRjaCAvIE1hdGguUEkgKiAxODA7XG4gICAgfVxuICAgIHNldCBwaXRjaChwaXRjaDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHAgPSBjbGFtcChwaXRjaCwgdGhpcy5taW5QaXRjaCwgdGhpcy5tYXhQaXRjaCkgLyAxODAgKiBNYXRoLlBJO1xuICAgICAgICBpZiAodGhpcy5fcGl0Y2ggPT09IHApIHJldHVybjtcbiAgICAgICAgdGhpcy5fdW5tb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9waXRjaCA9IHA7XG4gICAgICAgIHRoaXMuX2NhbGNNYXRyaWNlcygpO1xuICAgIH1cblxuICAgIGdldCBmb3YoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvdiAvIE1hdGguUEkgKiAxODA7XG4gICAgfVxuICAgIHNldCBmb3YoZm92OiBudW1iZXIpIHtcbiAgICAgICAgZm92ID0gTWF0aC5tYXgoMC4wMSwgTWF0aC5taW4oNjAsIGZvdikpO1xuICAgICAgICBpZiAodGhpcy5fZm92ID09PSBmb3YpIHJldHVybjtcbiAgICAgICAgdGhpcy5fdW5tb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9mb3YgPSBmb3YgLyAxODAgKiBNYXRoLlBJO1xuICAgICAgICB0aGlzLl9jYWxjTWF0cmljZXMoKTtcbiAgICB9XG5cbiAgICBnZXQgem9vbSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fem9vbTsgfVxuICAgIHNldCB6b29tKHpvb206IG51bWJlcikge1xuICAgICAgICBjb25zdCB6ID0gTWF0aC5taW4oTWF0aC5tYXgoem9vbSwgdGhpcy5taW5ab29tKSwgdGhpcy5tYXhab29tKTtcbiAgICAgICAgaWYgKHRoaXMuX3pvb20gPT09IHopIHJldHVybjtcbiAgICAgICAgdGhpcy5fdW5tb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl96b29tID0gejtcbiAgICAgICAgdGhpcy5zY2FsZSA9IHRoaXMuem9vbVNjYWxlKHopO1xuICAgICAgICB0aGlzLnRpbGVab29tID0gTWF0aC5mbG9vcih6KTtcbiAgICAgICAgdGhpcy56b29tRnJhY3Rpb24gPSB6IC0gdGhpcy50aWxlWm9vbTtcbiAgICAgICAgdGhpcy5fY29uc3RyYWluKCk7XG4gICAgICAgIHRoaXMuX2NhbGNNYXRyaWNlcygpO1xuICAgIH1cblxuICAgIGdldCBjZW50ZXIoKTogTG5nTGF0IHsgcmV0dXJuIHRoaXMuX2NlbnRlcjsgfVxuICAgIHNldCBjZW50ZXIoY2VudGVyOiBMbmdMYXQpIHtcbiAgICAgICAgaWYgKGNlbnRlci5sYXQgPT09IHRoaXMuX2NlbnRlci5sYXQgJiYgY2VudGVyLmxuZyA9PT0gdGhpcy5fY2VudGVyLmxuZykgcmV0dXJuO1xuICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NlbnRlciA9IGNlbnRlcjtcbiAgICAgICAgdGhpcy5fY29uc3RyYWluKCk7XG4gICAgICAgIHRoaXMuX2NhbGNNYXRyaWNlcygpO1xuICAgIH1cblxuICAgIGdldCBwYWRkaW5nKCk6IFBhZGRpbmdPcHRpb25zIHsgcmV0dXJuIHRoaXMuX2VkZ2VJbnNldHMudG9KU09OKCk7IH1cbiAgICBzZXQgcGFkZGluZyhwYWRkaW5nOiBQYWRkaW5nT3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5fZWRnZUluc2V0cy5lcXVhbHMocGFkZGluZykpIHJldHVybjtcbiAgICAgICAgdGhpcy5fdW5tb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICAvL1VwZGF0ZSBlZGdlLWluc2V0cyBpbnBsYWNlXG4gICAgICAgIHRoaXMuX2VkZ2VJbnNldHMuaW50ZXJwb2xhdGUodGhpcy5fZWRnZUluc2V0cywgcGFkZGluZywgMSk7XG4gICAgICAgIHRoaXMuX2NhbGNNYXRyaWNlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjZW50ZXIgb2YgdGhlIHNjcmVlbiBpbiBwaXhlbHMgd2l0aCB0aGUgdG9wLWxlZnQgY29ybmVyIGJlaW5nICgwLDApXG4gICAgICogYW5kICt5IGF4aXMgcG9pbnRpbmcgZG93bndhcmRzLiBUaGlzIGFjY291bnRzIGZvciBwYWRkaW5nLlxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHR5cGUge1BvaW50fVxuICAgICAqIEBtZW1iZXJvZiBUcmFuc2Zvcm1cbiAgICAgKi9cbiAgICBnZXQgY2VudGVyUG9pbnQoKTogUG9pbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWRnZUluc2V0cy5nZXRDZW50ZXIodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWYgdGhlIHBhZGRpbmcgcGFyYW1zIG1hdGNoXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BhZGRpbmdPcHRpb25zfSBwYWRkaW5nXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIFRyYW5zZm9ybVxuICAgICAqL1xuICAgIGlzUGFkZGluZ0VxdWFsKHBhZGRpbmc6IFBhZGRpbmdPcHRpb25zKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lZGdlSW5zZXRzLmVxdWFscyhwYWRkaW5nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgbWV0aG9kIHRvIHVwYWR0ZSBlZGdlLWluc2V0cyBpbnBsYWNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BhZGRpbmdPcHRpb25zfSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdFxuICAgICAqIEBtZW1iZXJvZiBUcmFuc2Zvcm1cbiAgICAgKi9cbiAgICBpbnRlcnBvbGF0ZVBhZGRpbmcoc3RhcnQ6IFBhZGRpbmdPcHRpb25zLCB0YXJnZXQ6IFBhZGRpbmdPcHRpb25zLCB0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fdW5tb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9lZGdlSW5zZXRzLmludGVycG9sYXRlKHN0YXJ0LCB0YXJnZXQsIHQpO1xuICAgICAgICB0aGlzLl9jb25zdHJhaW4oKTtcbiAgICAgICAgdGhpcy5fY2FsY01hdHJpY2VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgem9vbSBsZXZlbCB0aGF0IHdpbGwgY292ZXIgYWxsIHRpbGVzIHRoZSB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMudGlsZVNpemUgVGlsZSBzaXplLCBleHByZXNzZWQgaW4gc2NyZWVuIHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMucm91bmRab29tIFRhcmdldCB6b29tIGxldmVsLiBJZiB0cnVlLCB0aGUgdmFsdWUgd2lsbCBiZSByb3VuZGVkIHRvIHRoZSBjbG9zZXN0IGludGVnZXIuIE90aGVyd2lzZSB0aGUgdmFsdWUgd2lsbCBiZSBmbG9vcmVkLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IHpvb20gbGV2ZWwgQW4gaW50ZWdlciB6b29tIGxldmVsIGF0IHdoaWNoIGFsbCB0aWxlcyB3aWxsIGJlIHZpc2libGUuXG4gICAgICovXG4gICAgY292ZXJpbmdab29tTGV2ZWwob3B0aW9uczoge3JvdW5kWm9vbT86IGJvb2xlYW4sIHRpbGVTaXplOiBudW1iZXJ9KSB7XG4gICAgICAgIGNvbnN0IHogPSAob3B0aW9ucy5yb3VuZFpvb20gPyBNYXRoLnJvdW5kIDogTWF0aC5mbG9vcikoXG4gICAgICAgICAgICB0aGlzLnpvb20gKyB0aGlzLnNjYWxlWm9vbSh0aGlzLnRpbGVTaXplIC8gb3B0aW9ucy50aWxlU2l6ZSlcbiAgICAgICAgKTtcbiAgICAgICAgLy8gQXQgbmVnYXRpdmUgem9vbSBsZXZlbHMgbG9hZCB0aWxlcyBmcm9tIHowIGJlY2F1c2UgbmVnYXRpdmUgdGlsZSB6b29tIGxldmVscyBkb24ndCBleGlzdC5cbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIHopO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbnkgXCJ3cmFwcGVkXCIgY29waWVzIG9mIGEgZ2l2ZW4gdGlsZSBjb29yZGluYXRlIHRoYXQgYXJlIHZpc2libGVcbiAgICAgKiBpbiB0aGUgY3VycmVudCB2aWV3LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRWaXNpYmxlVW53cmFwcGVkQ29vcmRpbmF0ZXModGlsZUlEOiBDYW5vbmljYWxUaWxlSUQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW25ldyBVbndyYXBwZWRUaWxlSUQoMCwgdGlsZUlEKV07XG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJXb3JsZENvcGllcykge1xuICAgICAgICAgICAgY29uc3QgdXRsID0gdGhpcy5wb2ludENvb3JkaW5hdGUobmV3IFBvaW50KDAsIDApKTtcbiAgICAgICAgICAgIGNvbnN0IHV0ciA9IHRoaXMucG9pbnRDb29yZGluYXRlKG5ldyBQb2ludCh0aGlzLndpZHRoLCAwKSk7XG4gICAgICAgICAgICBjb25zdCB1YmwgPSB0aGlzLnBvaW50Q29vcmRpbmF0ZShuZXcgUG9pbnQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpKTtcbiAgICAgICAgICAgIGNvbnN0IHViciA9IHRoaXMucG9pbnRDb29yZGluYXRlKG5ldyBQb2ludCgwLCB0aGlzLmhlaWdodCkpO1xuICAgICAgICAgICAgY29uc3QgdzAgPSBNYXRoLmZsb29yKE1hdGgubWluKHV0bC54LCB1dHIueCwgdWJsLngsIHVici54KSk7XG4gICAgICAgICAgICBjb25zdCB3MSA9IE1hdGguZmxvb3IoTWF0aC5tYXgodXRsLngsIHV0ci54LCB1YmwueCwgdWJyLngpKTtcblxuICAgICAgICAgICAgLy8gQWRkIGFuIGV4dHJhIGNvcHkgb2YgdGhlIHdvcmxkIG9uIGVhY2ggc2lkZSB0byBwcm9wZXJseSByZW5kZXIgSW1hZ2VTb3VyY2VzIGFuZCBDYW52YXNTb3VyY2VzLlxuICAgICAgICAgICAgLy8gQm90aCBzb3VyY2VzIGRyYXcgb3V0c2lkZSB0aGUgdGlsZSBib3VuZGFyaWVzIG9mIHRoZSB0aWxlIHRoYXQgXCJjb250YWlucyB0aGVtXCIgc28gd2UgbmVlZFxuICAgICAgICAgICAgLy8gdG8gYWRkIGV4dHJhIGNvcGllcyBvbiBib3RoIHNpZGVzIGluIGNhc2Ugb2Zmc2NyZWVuIHRpbGVzIG5lZWQgdG8gZHJhdyBpbnRvIG9uLXNjcmVlbiBvbmVzLlxuICAgICAgICAgICAgY29uc3QgZXh0cmFXb3JsZENvcHkgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKGxldCB3ID0gdzAgLSBleHRyYVdvcmxkQ29weTsgdyA8PSB3MSArIGV4dHJhV29ybGRDb3B5OyB3KyspIHtcbiAgICAgICAgICAgICAgICBpZiAodyA9PT0gMCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFVud3JhcHBlZFRpbGVJRCh3LCB0aWxlSUQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbGwgY29vcmRpbmF0ZXMgdGhhdCBjb3VsZCBjb3ZlciB0aGlzIHRyYW5zZm9ybSBmb3IgYSBjb3ZlcmluZ1xuICAgICAqIHpvb20gbGV2ZWwuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy50aWxlU2l6ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLm1pbnpvb21cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5tYXh6b29tXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLnJvdW5kWm9vbVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5yZXBhcnNlT3ZlcnNjYWxlZFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5yZW5kZXJXb3JsZENvcGllc1xuICAgICAqIEByZXR1cm5zIHtBcnJheTxPdmVyc2NhbGVkVGlsZUlEPn0gT3ZlcnNjYWxlZFRpbGVJRHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvdmVyaW5nVGlsZXMoXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHRpbGVTaXplOiBudW1iZXIsXG4gICAgICAgICAgICBtaW56b29tPzogbnVtYmVyLFxuICAgICAgICAgICAgbWF4em9vbT86IG51bWJlcixcbiAgICAgICAgICAgIHJvdW5kWm9vbT86IGJvb2xlYW4sXG4gICAgICAgICAgICByZXBhcnNlT3ZlcnNjYWxlZD86IGJvb2xlYW4sXG4gICAgICAgICAgICByZW5kZXJXb3JsZENvcGllcz86IGJvb2xlYW5cbiAgICAgICAgfVxuICAgICk6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+IHtcbiAgICAgICAgbGV0IHogPSB0aGlzLmNvdmVyaW5nWm9vbUxldmVsKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBhY3R1YWxaID0gejtcblxuICAgICAgICBpZiAob3B0aW9ucy5taW56b29tICE9PSB1bmRlZmluZWQgJiYgeiA8IG9wdGlvbnMubWluem9vbSkgcmV0dXJuIFtdO1xuICAgICAgICBpZiAob3B0aW9ucy5tYXh6b29tICE9PSB1bmRlZmluZWQgJiYgeiA+IG9wdGlvbnMubWF4em9vbSkgeiA9IG9wdGlvbnMubWF4em9vbTtcblxuICAgICAgICBjb25zdCBjZW50ZXJDb29yZCA9IE1lcmNhdG9yQ29vcmRpbmF0ZS5mcm9tTG5nTGF0KHRoaXMuY2VudGVyKTtcbiAgICAgICAgY29uc3QgbnVtVGlsZXMgPSBNYXRoLnBvdygyLCB6KTtcbiAgICAgICAgY29uc3QgY2VudGVyUG9pbnQgPSBbbnVtVGlsZXMgKiBjZW50ZXJDb29yZC54LCBudW1UaWxlcyAqIGNlbnRlckNvb3JkLnksIDBdO1xuICAgICAgICBjb25zdCBjYW1lcmFGcnVzdHVtID0gRnJ1c3R1bS5mcm9tSW52UHJvamVjdGlvbk1hdHJpeCh0aGlzLmludlByb2pNYXRyaXgsIHRoaXMud29ybGRTaXplLCB6KTtcblxuICAgICAgICAvLyBObyBjaGFuZ2Ugb2YgTE9EIGJlaGF2aW9yIGZvciBwaXRjaCBsb3dlciB0aGFuIDYwIGFuZCB3aGVuIHRoZXJlIGlzIG5vIHRvcCBwYWRkaW5nOiByZXR1cm4gb25seSB0aWxlIGlkcyBmcm9tIHRoZSByZXF1ZXN0ZWQgem9vbSBsZXZlbFxuICAgICAgICBsZXQgbWluWm9vbSA9IG9wdGlvbnMubWluem9vbSB8fCAwO1xuICAgICAgICAvLyBVc2UgMC4xIGFzIGFuIGVwc2lsb24gdG8gYXZvaWQgZm9yIGV4cGxpY2l0ID09IDAuMCBmbG9hdGluZyBwb2ludCBjaGVja3NcbiAgICAgICAgaWYgKHRoaXMucGl0Y2ggPD0gNjAuMCAmJiB0aGlzLl9lZGdlSW5zZXRzLnRvcCA8IDAuMSlcbiAgICAgICAgICAgIG1pblpvb20gPSB6O1xuXG4gICAgICAgIC8vIFRoZXJlIHNob3VsZCBhbHdheXMgYmUgYSBjZXJ0YWluIG51bWJlciBvZiBtYXhpbXVtIHpvb20gbGV2ZWwgdGlsZXMgc3Vycm91bmRpbmcgdGhlIGNlbnRlciBsb2NhdGlvblxuICAgICAgICBjb25zdCByYWRpdXNPZk1heEx2bExvZEluVGlsZXMgPSAzO1xuXG4gICAgICAgIGNvbnN0IG5ld1Jvb3RUaWxlID0gKHdyYXA6IG51bWJlcik6IGFueSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC8vIEFsbCB0aWxlcyBhcmUgb24gemVybyBlbGV2YXRpb24gcGxhbmUgPT4geiBkaWZmZXJlbmNlIGlzIHplcm9cbiAgICAgICAgICAgICAgICBhYWJiOiBuZXcgQWFiYihbd3JhcCAqIG51bVRpbGVzLCAwLCAwXSwgWyh3cmFwICsgMSkgKiBudW1UaWxlcywgbnVtVGlsZXMsIDBdKSxcbiAgICAgICAgICAgICAgICB6b29tOiAwLFxuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgICB3cmFwLFxuICAgICAgICAgICAgICAgIGZ1bGx5VmlzaWJsZTogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gRG8gYSBkZXB0aC1maXJzdCB0cmF2ZXJzYWwgdG8gZmluZCB2aXNpYmxlIHRpbGVzIGFuZCBwcm9wZXIgbGV2ZWxzIG9mIGRldGFpbFxuICAgICAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgY29uc3QgbWF4Wm9vbSA9IHo7XG4gICAgICAgIGNvbnN0IG92ZXJzY2FsZWRaID0gb3B0aW9ucy5yZXBhcnNlT3ZlcnNjYWxlZCA/IGFjdHVhbFogOiB6O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJXb3JsZENvcGllcykge1xuICAgICAgICAgICAgLy8gUmVuZGVyIGNvcHkgb2YgdGhlIGdsb2JlIHRocmljZSBvbiBib3RoIHNpZGVzXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5ld1Jvb3RUaWxlKC1pKSk7XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXdSb290VGlsZShpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGFjay5wdXNoKG5ld1Jvb3RUaWxlKDApKTtcblxuICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaXQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBpdC54O1xuICAgICAgICAgICAgY29uc3QgeSA9IGl0Lnk7XG4gICAgICAgICAgICBsZXQgZnVsbHlWaXNpYmxlID0gaXQuZnVsbHlWaXNpYmxlO1xuXG4gICAgICAgICAgICAvLyBWaXNpYmlsaXR5IG9mIGEgdGlsZSBpcyBub3QgcmVxdWlyZWQgaWYgYW55IG9mIGl0cyBhbmNlc3RvciBpZiBmdWxseSBpbnNpZGUgdGhlIGZydXN0dW1cbiAgICAgICAgICAgIGlmICghZnVsbHlWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0UmVzdWx0ID0gaXQuYWFiYi5pbnRlcnNlY3RzKGNhbWVyYUZydXN0dW0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdFJlc3VsdCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBmdWxseVZpc2libGUgPSBpbnRlcnNlY3RSZXN1bHQgPT09IDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlWCA9IGl0LmFhYmIuZGlzdGFuY2VYKGNlbnRlclBvaW50KTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlWSA9IGl0LmFhYmIuZGlzdGFuY2VZKGNlbnRlclBvaW50KTtcbiAgICAgICAgICAgIGNvbnN0IGxvbmdlc3REaW0gPSBNYXRoLm1heChNYXRoLmFicyhkaXN0YW5jZVgpLCBNYXRoLmFicyhkaXN0YW5jZVkpKTtcblxuICAgICAgICAgICAgLy8gV2UncmUgdXNpbmcgZGlzdGFuY2UgYmFzZWQgaGV1cmlzdGljcyB0byBkZXRlcm1pbmUgaWYgYSB0aWxlIHNob3VsZCBiZSBzcGxpdCBpbnRvIHF1YWRyYW50cyBvciBub3QuXG4gICAgICAgICAgICAvLyByYWRpdXNPZk1heEx2bExvZEluVGlsZXMgZGVmaW5lcyB0aGF0IHRoZXJlJ3MgYWx3YXlzIGEgY2VydGFpbiBudW1iZXIgb2YgbWF4TGV2ZWwgdGlsZXMgbmV4dCB0byB0aGUgbWFwIGNlbnRlci5cbiAgICAgICAgICAgIC8vIFVzaW5nIHRoZSBmYWN0IHRoYXQgYSBwYXJlbnQgbm9kZSBpbiBxdWFkdHJlZSBpcyB0d2ljZSB0aGUgc2l6ZSBvZiBpdHMgY2hpbGRyZW4gKHBlciBkaW1lbnNpb24pXG4gICAgICAgICAgICAvLyB3ZSBjYW4gZGVmaW5lIGRpc3RhbmNlIHRocmVzaG9sZHMgZm9yIGVhY2ggcmVsYXRpdmUgbGV2ZWw6XG4gICAgICAgICAgICAvLyBmKGspID0gb2Zmc2V0ICsgMiArIDQgKyA4ICsgMTYgKyAuLi4gKyAyXmsuIFRoaXMgaXMgdGhlIHNhbWUgYXMgXCJvZmZzZXQrMl4oaysxKS0yXCJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RUb1NwbGl0ID0gcmFkaXVzT2ZNYXhMdmxMb2RJblRpbGVzICsgKDEgPDwgKG1heFpvb20gLSBpdC56b29tKSkgLSAyO1xuXG4gICAgICAgICAgICAvLyBIYXZlIHdlIHJlYWNoZWQgdGhlIHRhcmdldCBkZXB0aCBvciBpcyB0aGUgdGlsZSB0b28gZmFyIGF3YXkgdG8gYmUgYW55IHNwbGl0IGZ1cnRoZXI/XG4gICAgICAgICAgICBpZiAoaXQuem9vbSA9PT0gbWF4Wm9vbSB8fCAobG9uZ2VzdERpbSA+IGRpc3RUb1NwbGl0ICYmIGl0Lnpvb20gPj0gbWluWm9vbSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpbGVJRDogbmV3IE92ZXJzY2FsZWRUaWxlSUQoaXQuem9vbSA9PT0gbWF4Wm9vbSA/IG92ZXJzY2FsZWRaIDogaXQuem9vbSwgaXQud3JhcCwgaXQuem9vbSwgeCwgeSksXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlU3E6IHZlYzIuc3FyTGVuKFtjZW50ZXJQb2ludFswXSAtIDAuNSAtIHgsIGNlbnRlclBvaW50WzFdIC0gMC41IC0geV0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRYID0gKHggPDwgMSkgKyAoaSAlIDIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkWSA9ICh5IDw8IDEpICsgKGkgPj4gMSk7XG5cbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHthYWJiOiBpdC5hYWJiLnF1YWRyYW50KGkpLCB6b29tOiBpdC56b29tICsgMSwgeDogY2hpbGRYLCB5OiBjaGlsZFksIHdyYXA6IGl0LndyYXAsIGZ1bGx5VmlzaWJsZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5zb3J0KChhLCBiKSA9PiBhLmRpc3RhbmNlU3EgLSBiLmRpc3RhbmNlU3EpLm1hcChhID0+IGEudGlsZUlEKTtcbiAgICB9XG5cbiAgICByZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB0aGlzLnBpeGVsc1RvR0xVbml0cyA9IFsyIC8gd2lkdGgsIC0yIC8gaGVpZ2h0XTtcbiAgICAgICAgdGhpcy5fY29uc3RyYWluKCk7XG4gICAgICAgIHRoaXMuX2NhbGNNYXRyaWNlcygpO1xuICAgIH1cblxuICAgIGdldCB1bm1vZGlmaWVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fdW5tb2RpZmllZDsgfVxuXG4gICAgem9vbVNjYWxlKHpvb206IG51bWJlcikgeyByZXR1cm4gTWF0aC5wb3coMiwgem9vbSk7IH1cbiAgICBzY2FsZVpvb20oc2NhbGU6IG51bWJlcikgeyByZXR1cm4gTWF0aC5sb2coc2NhbGUpIC8gTWF0aC5MTjI7IH1cblxuICAgIHByb2plY3QobG5nbGF0OiBMbmdMYXQpIHtcbiAgICAgICAgY29uc3QgbGF0ID0gY2xhbXAobG5nbGF0LmxhdCwgLXRoaXMubWF4VmFsaWRMYXRpdHVkZSwgdGhpcy5tYXhWYWxpZExhdGl0dWRlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgICAgICAgICAgICBtZXJjYXRvclhmcm9tTG5nKGxuZ2xhdC5sbmcpICogdGhpcy53b3JsZFNpemUsXG4gICAgICAgICAgICAgICAgbWVyY2F0b3JZZnJvbUxhdChsYXQpICogdGhpcy53b3JsZFNpemUpO1xuICAgIH1cblxuICAgIHVucHJvamVjdChwb2ludDogUG9pbnQpOiBMbmdMYXQge1xuICAgICAgICByZXR1cm4gbmV3IE1lcmNhdG9yQ29vcmRpbmF0ZShwb2ludC54IC8gdGhpcy53b3JsZFNpemUsIHBvaW50LnkgLyB0aGlzLndvcmxkU2l6ZSkudG9MbmdMYXQoKTtcbiAgICB9XG5cbiAgICBnZXQgcG9pbnQoKTogUG9pbnQgeyByZXR1cm4gdGhpcy5wcm9qZWN0KHRoaXMuY2VudGVyKTsgfVxuXG4gICAgc2V0TG9jYXRpb25BdFBvaW50KGxuZ2xhdDogTG5nTGF0LCBwb2ludDogUG9pbnQpIHtcbiAgICAgICAgY29uc3QgYSA9IHRoaXMucG9pbnRDb29yZGluYXRlKHBvaW50KTtcbiAgICAgICAgY29uc3QgYiA9IHRoaXMucG9pbnRDb29yZGluYXRlKHRoaXMuY2VudGVyUG9pbnQpO1xuICAgICAgICBjb25zdCBsb2MgPSB0aGlzLmxvY2F0aW9uQ29vcmRpbmF0ZShsbmdsYXQpO1xuICAgICAgICBjb25zdCBuZXdDZW50ZXIgPSBuZXcgTWVyY2F0b3JDb29yZGluYXRlKFxuICAgICAgICAgICAgICAgIGxvYy54IC0gKGEueCAtIGIueCksXG4gICAgICAgICAgICAgICAgbG9jLnkgLSAoYS55IC0gYi55KSk7XG4gICAgICAgIHRoaXMuY2VudGVyID0gdGhpcy5jb29yZGluYXRlTG9jYXRpb24obmV3Q2VudGVyKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcldvcmxkQ29waWVzKSB7XG4gICAgICAgICAgICB0aGlzLmNlbnRlciA9IHRoaXMuY2VudGVyLndyYXAoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgbG9jYXRpb24sIHJldHVybiB0aGUgc2NyZWVuIHBvaW50IHRoYXQgY29ycmVzcG9uZHMgdG8gaXRcbiAgICAgKiBAcGFyYW0ge0xuZ0xhdH0gbG5nbGF0IGxvY2F0aW9uXG4gICAgICogQHJldHVybnMge1BvaW50fSBzY3JlZW4gcG9pbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGxvY2F0aW9uUG9pbnQobG5nbGF0OiBMbmdMYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29vcmRpbmF0ZVBvaW50KHRoaXMubG9jYXRpb25Db29yZGluYXRlKGxuZ2xhdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcG9pbnQgb24gc2NyZWVuLCByZXR1cm4gaXRzIGxuZ2xhdFxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHAgc2NyZWVuIHBvaW50XG4gICAgICogQHJldHVybnMge0xuZ0xhdH0gbG5nbGF0IGxvY2F0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwb2ludExvY2F0aW9uKHA6IFBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvb3JkaW5hdGVMb2NhdGlvbih0aGlzLnBvaW50Q29vcmRpbmF0ZShwKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBnZW9ncmFwaGljYWwgbG5nbGF0LCByZXR1cm4gYW4gdW5yb3VuZGVkXG4gICAgICogY29vcmRpbmF0ZSB0aGF0IHJlcHJlc2VudHMgaXQgYXQgdGhpcyB0cmFuc2Zvcm0ncyB6b29tIGxldmVsLlxuICAgICAqIEBwYXJhbSB7TG5nTGF0fSBsbmdsYXRcbiAgICAgKiBAcmV0dXJucyB7Q29vcmRpbmF0ZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGxvY2F0aW9uQ29vcmRpbmF0ZShsbmdsYXQ6IExuZ0xhdCkge1xuICAgICAgICByZXR1cm4gTWVyY2F0b3JDb29yZGluYXRlLmZyb21MbmdMYXQobG5nbGF0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIENvb3JkaW5hdGUsIHJldHVybiBpdHMgZ2VvZ3JhcGhpY2FsIHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7Q29vcmRpbmF0ZX0gY29vcmRcbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0fSBsbmdsYXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvb3JkaW5hdGVMb2NhdGlvbihjb29yZDogTWVyY2F0b3JDb29yZGluYXRlKSB7XG4gICAgICAgIHJldHVybiBjb29yZC50b0xuZ0xhdCgpO1xuICAgIH1cblxuICAgIHBvaW50Q29vcmRpbmF0ZShwOiBQb2ludCkge1xuICAgICAgICBjb25zdCB0YXJnZXRaID0gMDtcbiAgICAgICAgLy8gc2luY2Ugd2UgZG9uJ3Qga25vdyB0aGUgY29ycmVjdCBwcm9qZWN0ZWQgeiB2YWx1ZSBmb3IgdGhlIHBvaW50LFxuICAgICAgICAvLyB1bnByb2plY3QgdHdvIHBvaW50cyB0byBnZXQgYSBsaW5lIGFuZCB0aGVuIGZpbmQgdGhlIHBvaW50IG9uIHRoYXRcbiAgICAgICAgLy8gbGluZSB3aXRoIHo9MFxuXG4gICAgICAgIGNvbnN0IGNvb3JkMCA9IFtwLngsIHAueSwgMCwgMV07XG4gICAgICAgIGNvbnN0IGNvb3JkMSA9IFtwLngsIHAueSwgMSwgMV07XG5cbiAgICAgICAgdmVjNC50cmFuc2Zvcm1NYXQ0KGNvb3JkMCwgY29vcmQwLCB0aGlzLnBpeGVsTWF0cml4SW52ZXJzZSk7XG4gICAgICAgIHZlYzQudHJhbnNmb3JtTWF0NChjb29yZDEsIGNvb3JkMSwgdGhpcy5waXhlbE1hdHJpeEludmVyc2UpO1xuXG4gICAgICAgIGNvbnN0IHcwID0gY29vcmQwWzNdO1xuICAgICAgICBjb25zdCB3MSA9IGNvb3JkMVszXTtcbiAgICAgICAgY29uc3QgeDAgPSBjb29yZDBbMF0gLyB3MDtcbiAgICAgICAgY29uc3QgeDEgPSBjb29yZDFbMF0gLyB3MTtcbiAgICAgICAgY29uc3QgeTAgPSBjb29yZDBbMV0gLyB3MDtcbiAgICAgICAgY29uc3QgeTEgPSBjb29yZDFbMV0gLyB3MTtcbiAgICAgICAgY29uc3QgejAgPSBjb29yZDBbMl0gLyB3MDtcbiAgICAgICAgY29uc3QgejEgPSBjb29yZDFbMl0gLyB3MTtcblxuICAgICAgICBjb25zdCB0ID0gejAgPT09IHoxID8gMCA6ICh0YXJnZXRaIC0gejApIC8gKHoxIC0gejApO1xuXG4gICAgICAgIHJldHVybiBuZXcgTWVyY2F0b3JDb29yZGluYXRlKFxuICAgICAgICAgICAgaW50ZXJwb2xhdGUoeDAsIHgxLCB0KSAvIHRoaXMud29ybGRTaXplLFxuICAgICAgICAgICAgaW50ZXJwb2xhdGUoeTAsIHkxLCB0KSAvIHRoaXMud29ybGRTaXplKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGNvb3JkaW5hdGUsIHJldHVybiB0aGUgc2NyZWVuIHBvaW50IHRoYXQgY29ycmVzcG9uZHMgdG8gaXRcbiAgICAgKiBAcGFyYW0ge0Nvb3JkaW5hdGV9IGNvb3JkXG4gICAgICogQHJldHVybnMge1BvaW50fSBzY3JlZW4gcG9pbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvb3JkaW5hdGVQb2ludChjb29yZDogTWVyY2F0b3JDb29yZGluYXRlKSB7XG4gICAgICAgIGNvbnN0IHAgPSBbY29vcmQueCAqIHRoaXMud29ybGRTaXplLCBjb29yZC55ICogdGhpcy53b3JsZFNpemUsIDAsIDFdO1xuICAgICAgICB2ZWM0LnRyYW5zZm9ybU1hdDQocCwgcCwgdGhpcy5waXhlbE1hdHJpeCk7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQocFswXSAvIHBbM10sIHBbMV0gLyBwWzNdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBnZW9ncmFwaGljYWwgYm91bmRzLiBXaGVuIHRoZSBiZWFyaW5nIG9yIHBpdGNoIGlzIG5vbi16ZXJvLCB0aGUgdmlzaWJsZSByZWdpb24gaXMgbm90XG4gICAgICogYW4gYXhpcy1hbGlnbmVkIHJlY3RhbmdsZSwgYW5kIHRoZSByZXN1bHQgaXMgdGhlIHNtYWxsZXN0IGJvdW5kcyB0aGF0IGVuY29tcGFzc2VzIHRoZSB2aXNpYmxlIHJlZ2lvbi5cbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0Qm91bmRzfSBSZXR1cm5zIGEge0BsaW5rIExuZ0xhdEJvdW5kc30gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG1hcCdzIGdlb2dyYXBoaWNhbCBib3VuZHMuXG4gICAgICovXG4gICAgZ2V0Qm91bmRzKCk6IExuZ0xhdEJvdW5kcyB7XG4gICAgICAgIHJldHVybiBuZXcgTG5nTGF0Qm91bmRzKClcbiAgICAgICAgICAgIC5leHRlbmQodGhpcy5wb2ludExvY2F0aW9uKG5ldyBQb2ludCgwLCAwKSkpXG4gICAgICAgICAgICAuZXh0ZW5kKHRoaXMucG9pbnRMb2NhdGlvbihuZXcgUG9pbnQodGhpcy53aWR0aCwgMCkpKVxuICAgICAgICAgICAgLmV4dGVuZCh0aGlzLnBvaW50TG9jYXRpb24obmV3IFBvaW50KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KSkpXG4gICAgICAgICAgICAuZXh0ZW5kKHRoaXMucG9pbnRMb2NhdGlvbihuZXcgUG9pbnQoMCwgdGhpcy5oZWlnaHQpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWF4aW11bSBnZW9ncmFwaGljYWwgYm91bmRzIHRoZSBtYXAgaXMgY29uc3RyYWluZWQgdG8sIG9yIGBudWxsYCBpZiBub25lIHNldC5cbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0Qm91bmRzfSB7QGxpbmsgTG5nTGF0Qm91bmRzfVxuICAgICAqL1xuICAgIGdldE1heEJvdW5kcygpOiBMbmdMYXRCb3VuZHMgfCBudWxsIHtcbiAgICAgICAgaWYgKCF0aGlzLmxhdFJhbmdlIHx8IHRoaXMubGF0UmFuZ2UubGVuZ3RoICE9PSAyIHx8XG4gICAgICAgICAgICAhdGhpcy5sbmdSYW5nZSB8fCB0aGlzLmxuZ1JhbmdlLmxlbmd0aCAhPT0gMikgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBMbmdMYXRCb3VuZHMoW3RoaXMubG5nUmFuZ2VbMF0sIHRoaXMubGF0UmFuZ2VbMF1dLCBbdGhpcy5sbmdSYW5nZVsxXSwgdGhpcy5sYXRSYW5nZVsxXV0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgb3IgY2xlYXJzIHRoZSBtYXAncyBnZW9ncmFwaGljYWwgY29uc3RyYWludHMuXG4gICAgICogQHBhcmFtIHtMbmdMYXRCb3VuZHN9IGJvdW5kcyBBIHtAbGluayBMbmdMYXRCb3VuZHN9IG9iamVjdCBkZXNjcmliaW5nIHRoZSBuZXcgZ2VvZ3JhcGhpYyBib3VuZGFyaWVzIG9mIHRoZSBtYXAuXG4gICAgICovXG4gICAgc2V0TWF4Qm91bmRzKGJvdW5kcz86IExuZ0xhdEJvdW5kcykge1xuICAgICAgICBpZiAoYm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLmxuZ1JhbmdlID0gW2JvdW5kcy5nZXRXZXN0KCksIGJvdW5kcy5nZXRFYXN0KCldO1xuICAgICAgICAgICAgdGhpcy5sYXRSYW5nZSA9IFtib3VuZHMuZ2V0U291dGgoKSwgYm91bmRzLmdldE5vcnRoKCldO1xuICAgICAgICAgICAgdGhpcy5fY29uc3RyYWluKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxuZ1JhbmdlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubGF0UmFuZ2UgPSBbLXRoaXMubWF4VmFsaWRMYXRpdHVkZSwgdGhpcy5tYXhWYWxpZExhdGl0dWRlXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgcG9zTWF0cml4IHRoYXQsIGdpdmVuIGEgdGlsZSBjb29yZGluYXRlLCB3b3VsZCBiZSB1c2VkIHRvIGRpc3BsYXkgdGhlIHRpbGUgb24gYSBtYXAuXG4gICAgICogQHBhcmFtIHtVbndyYXBwZWRUaWxlSUR9IHVud3JhcHBlZFRpbGVJRDtcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNhbGN1bGF0ZVBvc01hdHJpeCh1bndyYXBwZWRUaWxlSUQ6IFVud3JhcHBlZFRpbGVJRCwgYWxpZ25lZDogYm9vbGVhbiA9IGZhbHNlKTogRmxvYXQzMkFycmF5IHtcbiAgICAgICAgY29uc3QgcG9zTWF0cml4S2V5ID0gdW53cmFwcGVkVGlsZUlELmtleTtcbiAgICAgICAgY29uc3QgY2FjaGUgPSBhbGlnbmVkID8gdGhpcy5fYWxpZ25lZFBvc01hdHJpeENhY2hlIDogdGhpcy5fcG9zTWF0cml4Q2FjaGU7XG4gICAgICAgIGlmIChjYWNoZVtwb3NNYXRyaXhLZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVbcG9zTWF0cml4S2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbm9uaWNhbCA9IHVud3JhcHBlZFRpbGVJRC5jYW5vbmljYWw7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy53b3JsZFNpemUgLyB0aGlzLnpvb21TY2FsZShjYW5vbmljYWwueik7XG4gICAgICAgIGNvbnN0IHVud3JhcHBlZFggPSBjYW5vbmljYWwueCArIE1hdGgucG93KDIsIGNhbm9uaWNhbC56KSAqIHVud3JhcHBlZFRpbGVJRC53cmFwO1xuXG4gICAgICAgIGNvbnN0IHBvc01hdHJpeCA9IG1hdDQuaWRlbnRpdHkobmV3IEZsb2F0NjRBcnJheSgxNikpO1xuICAgICAgICBtYXQ0LnRyYW5zbGF0ZShwb3NNYXRyaXgsIHBvc01hdHJpeCwgW3Vud3JhcHBlZFggKiBzY2FsZSwgY2Fub25pY2FsLnkgKiBzY2FsZSwgMF0pO1xuICAgICAgICBtYXQ0LnNjYWxlKHBvc01hdHJpeCwgcG9zTWF0cml4LCBbc2NhbGUgLyBFWFRFTlQsIHNjYWxlIC8gRVhURU5ULCAxXSk7XG4gICAgICAgIG1hdDQubXVsdGlwbHkocG9zTWF0cml4LCBhbGlnbmVkID8gdGhpcy5hbGlnbmVkUHJvak1hdHJpeCA6IHRoaXMucHJvak1hdHJpeCwgcG9zTWF0cml4KTtcblxuICAgICAgICBjYWNoZVtwb3NNYXRyaXhLZXldID0gbmV3IEZsb2F0MzJBcnJheShwb3NNYXRyaXgpO1xuICAgICAgICByZXR1cm4gY2FjaGVbcG9zTWF0cml4S2V5XTtcbiAgICB9XG5cbiAgICBjdXN0b21MYXllck1hdHJpeCgpOiBBcnJheTxudW1iZXI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVyY2F0b3JNYXRyaXguc2xpY2UoKTtcbiAgICB9XG5cbiAgICBfY29uc3RyYWluKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2VudGVyIHx8ICF0aGlzLndpZHRoIHx8ICF0aGlzLmhlaWdodCB8fCB0aGlzLl9jb25zdHJhaW5pbmcpIHJldHVybjtcblxuICAgICAgICB0aGlzLl9jb25zdHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgICAgIGxldCBtaW5ZID0gLTkwO1xuICAgICAgICBsZXQgbWF4WSA9IDkwO1xuICAgICAgICBsZXQgbWluWCA9IC0xODA7XG4gICAgICAgIGxldCBtYXhYID0gMTgwO1xuICAgICAgICBsZXQgc3ksIHN4LCB4MiwgeTI7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLnNpemUsXG4gICAgICAgICAgICB1bm1vZGlmaWVkID0gdGhpcy5fdW5tb2RpZmllZDtcblxuICAgICAgICBpZiAodGhpcy5sYXRSYW5nZSkge1xuICAgICAgICAgICAgY29uc3QgbGF0UmFuZ2UgPSB0aGlzLmxhdFJhbmdlO1xuICAgICAgICAgICAgbWluWSA9IG1lcmNhdG9yWWZyb21MYXQobGF0UmFuZ2VbMV0pICogdGhpcy53b3JsZFNpemU7XG4gICAgICAgICAgICBtYXhZID0gbWVyY2F0b3JZZnJvbUxhdChsYXRSYW5nZVswXSkgKiB0aGlzLndvcmxkU2l6ZTtcbiAgICAgICAgICAgIHN5ID0gbWF4WSAtIG1pblkgPCBzaXplLnkgPyBzaXplLnkgLyAobWF4WSAtIG1pblkpIDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmxuZ1JhbmdlKSB7XG4gICAgICAgICAgICBjb25zdCBsbmdSYW5nZSA9IHRoaXMubG5nUmFuZ2U7XG4gICAgICAgICAgICBtaW5YID0gbWVyY2F0b3JYZnJvbUxuZyhsbmdSYW5nZVswXSkgKiB0aGlzLndvcmxkU2l6ZTtcbiAgICAgICAgICAgIG1heFggPSBtZXJjYXRvclhmcm9tTG5nKGxuZ1JhbmdlWzFdKSAqIHRoaXMud29ybGRTaXplO1xuICAgICAgICAgICAgc3ggPSBtYXhYIC0gbWluWCA8IHNpemUueCA/IHNpemUueCAvIChtYXhYIC0gbWluWCkgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLnBvaW50O1xuXG4gICAgICAgIC8vIGhvdyBtdWNoIHRoZSBtYXAgc2hvdWxkIHNjYWxlIHRvIGZpdCB0aGUgc2NyZWVuIGludG8gZ2l2ZW4gbGF0aXR1ZGUvbG9uZ2l0dWRlIHJhbmdlc1xuICAgICAgICBjb25zdCBzID0gTWF0aC5tYXgoc3ggfHwgMCwgc3kgfHwgMCk7XG5cbiAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyID0gdGhpcy51bnByb2plY3QobmV3IFBvaW50KFxuICAgICAgICAgICAgICAgIHN4ID8gKG1heFggKyBtaW5YKSAvIDIgOiBwb2ludC54LFxuICAgICAgICAgICAgICAgIHN5ID8gKG1heFkgKyBtaW5ZKSAvIDIgOiBwb2ludC55KSk7XG4gICAgICAgICAgICB0aGlzLnpvb20gKz0gdGhpcy5zY2FsZVpvb20ocyk7XG4gICAgICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gdW5tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMuX2NvbnN0cmFpbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubGF0UmFuZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBwb2ludC55LFxuICAgICAgICAgICAgICAgIGgyID0gc2l6ZS55IC8gMjtcblxuICAgICAgICAgICAgaWYgKHkgLSBoMiA8IG1pblkpIHkyID0gbWluWSArIGgyO1xuICAgICAgICAgICAgaWYgKHkgKyBoMiA+IG1heFkpIHkyID0gbWF4WSAtIGgyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubG5nUmFuZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBwb2ludC54LFxuICAgICAgICAgICAgICAgIHcyID0gc2l6ZS54IC8gMjtcblxuICAgICAgICAgICAgaWYgKHggLSB3MiA8IG1pblgpIHgyID0gbWluWCArIHcyO1xuICAgICAgICAgICAgaWYgKHggKyB3MiA+IG1heFgpIHgyID0gbWF4WCAtIHcyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFuIHRoZSBtYXAgaWYgdGhlIHNjcmVlbiBnb2VzIG9mZiB0aGUgcmFuZ2VcbiAgICAgICAgaWYgKHgyICE9PSB1bmRlZmluZWQgfHwgeTIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jZW50ZXIgPSB0aGlzLnVucHJvamVjdChuZXcgUG9pbnQoXG4gICAgICAgICAgICAgICAgeDIgIT09IHVuZGVmaW5lZCA/IHgyIDogcG9pbnQueCxcbiAgICAgICAgICAgICAgICB5MiAhPT0gdW5kZWZpbmVkID8geTIgOiBwb2ludC55KSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gdW5tb2RpZmllZDtcbiAgICAgICAgdGhpcy5fY29uc3RyYWluaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX2NhbGNNYXRyaWNlcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhlaWdodCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGhhbGZGb3YgPSB0aGlzLl9mb3YgLyAyO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmNlbnRlck9mZnNldDtcbiAgICAgICAgdGhpcy5jYW1lcmFUb0NlbnRlckRpc3RhbmNlID0gMC41IC8gTWF0aC50YW4oaGFsZkZvdikgKiB0aGlzLmhlaWdodDtcblxuICAgICAgICAvLyBGaW5kIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjZW50ZXIgcG9pbnQgW3dpZHRoLzIgKyBvZmZzZXQueCwgaGVpZ2h0LzIgKyBvZmZzZXQueV0gdG8gdGhlXG4gICAgICAgIC8vIGNlbnRlciB0b3AgcG9pbnQgW3dpZHRoLzIgKyBvZmZzZXQueCwgMF0gaW4gWiB1bml0cywgdXNpbmcgdGhlIGxhdyBvZiBzaW5lcy5cbiAgICAgICAgLy8gMSBaIHVuaXQgaXMgZXF1aXZhbGVudCB0byAxIGhvcml6b250YWwgcHggYXQgdGhlIGNlbnRlciBvZiB0aGUgbWFwXG4gICAgICAgIC8vICh0aGUgZGlzdGFuY2UgYmV0d2Vlblt3aWR0aC8yLCBoZWlnaHQvMl0gYW5kIFt3aWR0aC8yICsgMSwgaGVpZ2h0LzJdKVxuICAgICAgICBjb25zdCBncm91bmRBbmdsZSA9IE1hdGguUEkgLyAyICsgdGhpcy5fcGl0Y2g7XG4gICAgICAgIGNvbnN0IGZvdkFib3ZlQ2VudGVyID0gdGhpcy5fZm92ICogKDAuNSArIG9mZnNldC55IC8gdGhpcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCB0b3BIYWxmU3VyZmFjZURpc3RhbmNlID0gTWF0aC5zaW4oZm92QWJvdmVDZW50ZXIpICogdGhpcy5jYW1lcmFUb0NlbnRlckRpc3RhbmNlIC8gTWF0aC5zaW4oY2xhbXAoTWF0aC5QSSAtIGdyb3VuZEFuZ2xlIC0gZm92QWJvdmVDZW50ZXIsIDAuMDEsIE1hdGguUEkgLSAwLjAxKSk7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5wb2ludDtcbiAgICAgICAgY29uc3QgeCA9IHBvaW50LngsIHkgPSBwb2ludC55O1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSB6IGRpc3RhbmNlIG9mIHRoZSBmYXJ0aGVzdCBmcmFnbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICAgICAgY29uc3QgZnVydGhlc3REaXN0YW5jZSA9IE1hdGguY29zKE1hdGguUEkgLyAyIC0gdGhpcy5fcGl0Y2gpICogdG9wSGFsZlN1cmZhY2VEaXN0YW5jZSArIHRoaXMuY2FtZXJhVG9DZW50ZXJEaXN0YW5jZTtcbiAgICAgICAgLy8gQWRkIGEgYml0IGV4dHJhIHRvIGF2b2lkIHByZWNpc2lvbiBwcm9ibGVtcyB3aGVuIGEgZnJhZ21lbnQncyBkaXN0YW5jZSBpcyBleGFjdGx5IGBmdXJ0aGVzdERpc3RhbmNlYFxuICAgICAgICBjb25zdCBmYXJaID0gZnVydGhlc3REaXN0YW5jZSAqIDEuMDE7XG5cbiAgICAgICAgLy8gVGhlIGxhcmdlciB0aGUgdmFsdWUgb2YgbmVhclogaXNcbiAgICAgICAgLy8gLSB0aGUgbW9yZSBkZXB0aCBwcmVjaXNpb24gaXMgYXZhaWxhYmxlIGZvciBmZWF0dXJlcyAoZ29vZClcbiAgICAgICAgLy8gLSBjbGlwcGluZyBzdGFydHMgYXBwZWFyaW5nIHNvb25lciB3aGVuIHRoZSBjYW1lcmEgaXMgY2xvc2UgdG8gM2QgZmVhdHVyZXMgKGJhZClcbiAgICAgICAgLy9cbiAgICAgICAgLy8gU21hbGxlciB2YWx1ZXMgd29ya2VkIHdlbGwgZm9yIG1hcGJveC1nbC1qcyBidXQgZGVja2dsIHdhcyBlbmNvdW50ZXJpbmcgcHJlY2lzaW9uIGlzc3Vlc1xuICAgICAgICAvLyB3aGVuIHJlbmRlcmluZyBpdCdzIGxheWVycyB1c2luZyBjdXN0b20gbGF5ZXJzLiBUaGlzIHZhbHVlIHdhcyBleHBlcmltZW50YWxseSBjaG9zZW4gYW5kXG4gICAgICAgIC8vIHNlZW1zIHRvIHNvbHZlIHotZmlnaHRpbmcgaXNzdWVzIGluIGRlY2tnbCB3aGlsZSBub3QgY2xpcHBpbmcgYnVpbGRpbmdzIHRvbyBjbG9zZSB0byB0aGUgY2FtZXJhLlxuICAgICAgICBjb25zdCBuZWFyWiA9IHRoaXMuaGVpZ2h0IC8gNTA7XG5cbiAgICAgICAgLy8gbWF0cml4IGZvciBjb252ZXJzaW9uIGZyb20gbG9jYXRpb24gdG8gR0wgY29vcmRpbmF0ZXMgKC0xIC4uIDEpXG4gICAgICAgIGxldCBtID0gbmV3IEZsb2F0NjRBcnJheSgxNik7XG4gICAgICAgIG1hdDQucGVyc3BlY3RpdmUobSwgdGhpcy5fZm92LCB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQsIG5lYXJaLCBmYXJaKTtcblxuICAgICAgICAvL0FwcGx5IGNlbnRlciBvZiBwZXJzcGVjdGl2ZSBvZmZzZXRcbiAgICAgICAgbVs4XSA9IC1vZmZzZXQueCAqIDIgLyB0aGlzLndpZHRoO1xuICAgICAgICBtWzldID0gb2Zmc2V0LnkgKiAyIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICAgICAgbWF0NC5zY2FsZShtLCBtLCBbMSwgLTEsIDFdKTtcbiAgICAgICAgbWF0NC50cmFuc2xhdGUobSwgbSwgWzAsIDAsIC10aGlzLmNhbWVyYVRvQ2VudGVyRGlzdGFuY2VdKTtcbiAgICAgICAgbWF0NC5yb3RhdGVYKG0sIG0sIHRoaXMuX3BpdGNoKTtcbiAgICAgICAgbWF0NC5yb3RhdGVaKG0sIG0sIHRoaXMuYW5nbGUpO1xuICAgICAgICBtYXQ0LnRyYW5zbGF0ZShtLCBtLCBbLXgsIC15LCAwXSk7XG5cbiAgICAgICAgLy8gVGhlIG1lcmNhdG9yTWF0cml4IGNhbiBiZSB1c2VkIHRvIHRyYW5zZm9ybSBwb2ludHMgZnJvbSBtZXJjYXRvciBjb29yZGluYXRlc1xuICAgICAgICAvLyAoWzAsIDBdIG53LCBbMSwgMV0gc2UpIHRvIEdMIGNvb3JkaW5hdGVzLlxuICAgICAgICB0aGlzLm1lcmNhdG9yTWF0cml4ID0gbWF0NC5zY2FsZShbXSwgbSwgW3RoaXMud29ybGRTaXplLCB0aGlzLndvcmxkU2l6ZSwgdGhpcy53b3JsZFNpemVdKTtcblxuICAgICAgICAvLyBzY2FsZSB2ZXJ0aWNhbGx5IHRvIG1ldGVycyBwZXIgcGl4ZWwgKGludmVyc2Ugb2YgZ3JvdW5kIHJlc29sdXRpb24pOlxuICAgICAgICBtYXQ0LnNjYWxlKG0sIG0sIFsxLCAxLCBtZXJjYXRvclpmcm9tQWx0aXR1ZGUoMSwgdGhpcy5jZW50ZXIubGF0KSAqIHRoaXMud29ybGRTaXplLCAxXSk7XG5cbiAgICAgICAgdGhpcy5wcm9qTWF0cml4ID0gbTtcbiAgICAgICAgdGhpcy5pbnZQcm9qTWF0cml4ID0gbWF0NC5pbnZlcnQoW10sIHRoaXMucHJvak1hdHJpeCk7XG5cbiAgICAgICAgLy8gTWFrZSBhIHNlY29uZCBwcm9qZWN0aW9uIG1hdHJpeCB0aGF0IGlzIGFsaWduZWQgdG8gYSBwaXhlbCBncmlkIGZvciByZW5kZXJpbmcgcmFzdGVyIHRpbGVzLlxuICAgICAgICAvLyBXZSdyZSByb3VuZGluZyB0aGUgKGZsb2F0aW5nIHBvaW50KSB4L3kgdmFsdWVzIHRvIGFjaGlldmUgdG8gYXZvaWQgcmVuZGVyaW5nIHJhc3RlciBpbWFnZXMgdG8gZnJhY3Rpb25hbFxuICAgICAgICAvLyBjb29yZGluYXRlcy4gQWRkaXRpb25hbGx5LCB3ZSBhZGp1c3QgYnkgaGFsZiBhIHBpeGVsIGluIGVpdGhlciBkaXJlY3Rpb24gaW4gY2FzZSB0aGF0IHZpZXdwb3J0IGRpbWVuc2lvblxuICAgICAgICAvLyBpcyBhbiBvZGQgaW50ZWdlciB0byBwcmVzZXJ2ZSByZW5kZXJpbmcgdG8gdGhlIHBpeGVsIGdyaWQuIFdlJ3JlIHJvdGF0aW5nIHRoaXMgc2hpZnQgYmFzZWQgb24gdGhlIGFuZ2xlXG4gICAgICAgIC8vIG9mIHRoZSB0cmFuc2Zvcm1hdGlvbiBzbyB0aGF0IDDCsCwgOTDCsCwgMTgwwrAsIGFuZCAyNzDCsCByYXN0ZXJzIGFyZSBjcmlzcCwgYW5kIGFkanVzdCB0aGUgc2hpZnQgc28gdGhhdFxuICAgICAgICAvLyBpdCBpcyBhbHdheXMgPD0gMC41IHBpeGVscy5cbiAgICAgICAgY29uc3QgeFNoaWZ0ID0gKHRoaXMud2lkdGggJSAyKSAvIDIsIHlTaGlmdCA9ICh0aGlzLmhlaWdodCAlIDIpIC8gMixcbiAgICAgICAgICAgIGFuZ2xlQ29zID0gTWF0aC5jb3ModGhpcy5hbmdsZSksIGFuZ2xlU2luID0gTWF0aC5zaW4odGhpcy5hbmdsZSksXG4gICAgICAgICAgICBkeCA9IHggLSBNYXRoLnJvdW5kKHgpICsgYW5nbGVDb3MgKiB4U2hpZnQgKyBhbmdsZVNpbiAqIHlTaGlmdCxcbiAgICAgICAgICAgIGR5ID0geSAtIE1hdGgucm91bmQoeSkgKyBhbmdsZUNvcyAqIHlTaGlmdCArIGFuZ2xlU2luICogeFNoaWZ0O1xuICAgICAgICBjb25zdCBhbGlnbmVkTSA9IG5ldyBGbG9hdDY0QXJyYXkobSk7XG4gICAgICAgIG1hdDQudHJhbnNsYXRlKGFsaWduZWRNLCBhbGlnbmVkTSwgWyBkeCA+IDAuNSA/IGR4IC0gMSA6IGR4LCBkeSA+IDAuNSA/IGR5IC0gMSA6IGR5LCAwIF0pO1xuICAgICAgICB0aGlzLmFsaWduZWRQcm9qTWF0cml4ID0gYWxpZ25lZE07XG5cbiAgICAgICAgbSA9IG1hdDQuY3JlYXRlKCk7XG4gICAgICAgIG1hdDQuc2NhbGUobSwgbSwgW3RoaXMud2lkdGggLyAyLCAtdGhpcy5oZWlnaHQgLyAyLCAxXSk7XG4gICAgICAgIG1hdDQudHJhbnNsYXRlKG0sIG0sIFsxLCAtMSwgMF0pO1xuICAgICAgICB0aGlzLmxhYmVsUGxhbmVNYXRyaXggPSBtO1xuXG4gICAgICAgIG0gPSBtYXQ0LmNyZWF0ZSgpO1xuICAgICAgICBtYXQ0LnNjYWxlKG0sIG0sIFsxLCAtMSwgMV0pO1xuICAgICAgICBtYXQ0LnRyYW5zbGF0ZShtLCBtLCBbLTEsIC0xLCAwXSk7XG4gICAgICAgIG1hdDQuc2NhbGUobSwgbSwgWzIgLyB0aGlzLndpZHRoLCAyIC8gdGhpcy5oZWlnaHQsIDFdKTtcbiAgICAgICAgdGhpcy5nbENvb3JkTWF0cml4ID0gbTtcblxuICAgICAgICAvLyBtYXRyaXggZm9yIGNvbnZlcnNpb24gZnJvbSBsb2NhdGlvbiB0byBzY3JlZW4gY29vcmRpbmF0ZXNcbiAgICAgICAgdGhpcy5waXhlbE1hdHJpeCA9IG1hdDQubXVsdGlwbHkobmV3IEZsb2F0NjRBcnJheSgxNiksIHRoaXMubGFiZWxQbGFuZU1hdHJpeCwgdGhpcy5wcm9qTWF0cml4KTtcblxuICAgICAgICAvLyBpbnZlcnNlIG1hdHJpeCBmb3IgY29udmVyc2lvbiBmcm9tIHNjcmVlbiBjb29yZGluYWVzIHRvIGxvY2F0aW9uXG4gICAgICAgIG0gPSBtYXQ0LmludmVydChuZXcgRmxvYXQ2NEFycmF5KDE2KSwgdGhpcy5waXhlbE1hdHJpeCk7XG4gICAgICAgIGlmICghbSkgdGhyb3cgbmV3IEVycm9yKFwiZmFpbGVkIHRvIGludmVydCBtYXRyaXhcIik7XG4gICAgICAgIHRoaXMucGl4ZWxNYXRyaXhJbnZlcnNlID0gbTtcblxuICAgICAgICB0aGlzLl9wb3NNYXRyaXhDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9hbGlnbmVkUG9zTWF0cml4Q2FjaGUgPSB7fTtcbiAgICB9XG5cbiAgICBtYXhQaXRjaFNjYWxlRmFjdG9yKCkge1xuICAgICAgICAvLyBjYWxjTWF0cmljZXMgaGFzbid0IHJ1biB5ZXRcbiAgICAgICAgaWYgKCF0aGlzLnBpeGVsTWF0cml4SW52ZXJzZSkgcmV0dXJuIDE7XG5cbiAgICAgICAgY29uc3QgY29vcmQgPSB0aGlzLnBvaW50Q29vcmRpbmF0ZShuZXcgUG9pbnQoMCwgMCkpO1xuICAgICAgICBjb25zdCBwID0gW2Nvb3JkLnggKiB0aGlzLndvcmxkU2l6ZSwgY29vcmQueSAqIHRoaXMud29ybGRTaXplLCAwLCAxXTtcbiAgICAgICAgY29uc3QgdG9wUG9pbnQgPSB2ZWM0LnRyYW5zZm9ybU1hdDQocCwgcCwgdGhpcy5waXhlbE1hdHJpeCk7XG4gICAgICAgIHJldHVybiB0b3BQb2ludFszXSAvIHRoaXMuY2FtZXJhVG9DZW50ZXJEaXN0YW5jZTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFRoZSBjYW1lcmEgbG9va3MgYXQgdGhlIG1hcCBmcm9tIGEgM0QgKGxuZywgbGF0LCBhbHRpdHVkZSkgbG9jYXRpb24uIExldCdzIHVzZSBgY2FtZXJhTG9jYXRpb25gXG4gICAgICogYXMgdGhlIG5hbWUgZm9yIHRoZSBsb2NhdGlvbiB1bmRlciB0aGUgY2FtZXJhIGFuZCBvbiB0aGUgc3VyZmFjZSBvZiB0aGUgZWFydGggKGxuZywgbGF0LCAwKS5cbiAgICAgKiBgY2FtZXJhUG9pbnRgIGlzIHRoZSBwcm9qZWN0ZWQgcG9zaXRpb24gb2YgdGhlIGBjYW1lcmFMb2NhdGlvbmAuXG4gICAgICpcbiAgICAgKiBUaGlzIHBvaW50IGlzIHVzZWZ1bCB0byB1cyBiZWNhdXNlIG9ubHkgZmlsbC1leHRydXNpb25zIHRoYXQgYXJlIGJldHdlZW4gYGNhbWVyYVBvaW50YCBhbmRcbiAgICAgKiB0aGUgcXVlcnkgcG9pbnQgb24gdGhlIHN1cmZhY2Ugb2YgdGhlIGVhcnRoIGNhbiBleHRlbmQgYW5kIGludGVyc2VjdCB0aGUgcXVlcnkuXG4gICAgICpcbiAgICAgKiBXaGVuIHRoZSBtYXAgaXMgbm90IHBpdGNoZWQgdGhlIGBjYW1lcmFQb2ludGAgaXMgZXF1aXZhbGVudCB0byB0aGUgY2VudGVyIG9mIHRoZSBtYXAgYmVjYXVzZVxuICAgICAqIHRoZSBjYW1lcmEgaXMgcmlnaHQgYWJvdmUgdGhlIGNlbnRlciBvZiB0aGUgbWFwLlxuICAgICAqL1xuICAgIGdldENhbWVyYVBvaW50KCkge1xuICAgICAgICBjb25zdCBwaXRjaCA9IHRoaXMuX3BpdGNoO1xuICAgICAgICBjb25zdCB5T2Zmc2V0ID0gTWF0aC50YW4ocGl0Y2gpICogKHRoaXMuY2FtZXJhVG9DZW50ZXJEaXN0YW5jZSB8fCAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2VudGVyUG9pbnQuYWRkKG5ldyBQb2ludCgwLCB5T2Zmc2V0KSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBXaGVuIHRoZSBtYXAgaXMgcGl0Y2hlZCwgc29tZSBvZiB0aGUgM0QgZmVhdHVyZXMgdGhhdCBpbnRlcnNlY3QgYSBxdWVyeSB3aWxsIG5vdCBpbnRlcnNlY3RcbiAgICAgKiB0aGUgcXVlcnkgYXQgdGhlIHN1cmZhY2Ugb2YgdGhlIGVhcnRoLiBJbnN0ZWFkIHRoZSBmZWF0dXJlIG1heSBiZSBjbG9zZXIgYW5kIG9ubHkgaW50ZXJzZWN0XG4gICAgICogdGhlIHF1ZXJ5IGJlY2F1c2UgaXQgZXh0cnVkZXMgaW50byB0aGUgYWlyLlxuICAgICAqXG4gICAgICogVGhpcyByZXR1cm5zIGEgZ2VvbWV0cnkgdGhhdCBpbmNsdWRlcyBhbGwgb2YgdGhlIG9yaWdpbmFsIHF1ZXJ5IGFzIHdlbGwgYXMgYWxsIHBvc3NpYmxlIGFyZXMgb2YgdGhlXG4gICAgICogc2NyZWVuIHdoZXJlIHRoZSAqYmFzZSogb2YgYSB2aXNpYmxlIGV4dHJ1c2lvbiBjb3VsZCBiZS5cbiAgICAgKiAgLSBGb3IgcG9pbnQgcXVlcmllcywgdGhlIGxpbmUgZnJvbSB0aGUgcXVlcnkgcG9pbnQgdG8gdGhlIFwiY2FtZXJhIHBvaW50XCJcbiAgICAgKiAgLSBGb3Igb3RoZXIgZ2VvbWV0cmllcywgdGhlIGVudmVsb3BlIG9mIHRoZSBxdWVyeSBnZW9tZXRyeSBhbmQgdGhlIFwiY2FtZXJhIHBvaW50XCJcbiAgICAgKi9cbiAgICBnZXRDYW1lcmFRdWVyeUdlb21ldHJ5KHF1ZXJ5R2VvbWV0cnk6IEFycmF5PFBvaW50Pik6IEFycmF5PFBvaW50PiB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENhbWVyYVBvaW50KCk7XG5cbiAgICAgICAgaWYgKHF1ZXJ5R2VvbWV0cnkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gW3F1ZXJ5R2VvbWV0cnlbMF0sIGNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG1pblggPSBjLng7XG4gICAgICAgICAgICBsZXQgbWluWSA9IGMueTtcbiAgICAgICAgICAgIGxldCBtYXhYID0gYy54O1xuICAgICAgICAgICAgbGV0IG1heFkgPSBjLnk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgcXVlcnlHZW9tZXRyeSkge1xuICAgICAgICAgICAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBwLngpO1xuICAgICAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBwLnkpO1xuICAgICAgICAgICAgICAgIG1heFggPSBNYXRoLm1heChtYXhYLCBwLngpO1xuICAgICAgICAgICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBwLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBuZXcgUG9pbnQobWluWCwgbWluWSksXG4gICAgICAgICAgICAgICAgbmV3IFBvaW50KG1heFgsIG1pblkpLFxuICAgICAgICAgICAgICAgIG5ldyBQb2ludChtYXhYLCBtYXhZKSxcbiAgICAgICAgICAgICAgICBuZXcgUG9pbnQobWluWCwgbWF4WSksXG4gICAgICAgICAgICAgICAgbmV3IFBvaW50KG1pblgsIG1pblkpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmFuc2Zvcm07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge2JpbmRBbGx9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uL3V0aWwvd2luZG93JztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICcuLi91dGlsL3Rocm90dGxlJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4vbWFwJztcblxuLypcbiAqIEFkZHMgdGhlIG1hcCdzIHBvc2l0aW9uIHRvIGl0cyBwYWdlJ3MgbG9jYXRpb24gaGFzaC5cbiAqIFBhc3NlZCBhcyBhbiBvcHRpb24gdG8gdGhlIG1hcCBvYmplY3QuXG4gKlxuICogQHJldHVybnMge0hhc2h9IGB0aGlzYFxuICovXG5jbGFzcyBIYXNoIHtcbiAgICBfbWFwOiBNYXA7XG4gICAgX3VwZGF0ZUhhc2g6ICgpID0+ID9UaW1lb3V0SUQ7XG4gICAgX2hhc2hOYW1lOiA/c3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoaGFzaE5hbWU6ID9zdHJpbmcpIHtcbiAgICAgICAgdGhpcy5faGFzaE5hbWUgPSBoYXNoTmFtZSAmJiBlbmNvZGVVUklDb21wb25lbnQoaGFzaE5hbWUpO1xuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfZ2V0Q3VycmVudEhhc2gnLFxuICAgICAgICAgICAgJ19vbkhhc2hDaGFuZ2UnLFxuICAgICAgICAgICAgJ191cGRhdGVIYXNoJ1xuICAgICAgICBdLCB0aGlzKTtcblxuICAgICAgICAvLyBNb2JpbGUgU2FmYXJpIGRvZXNuJ3QgYWxsb3cgdXBkYXRpbmcgdGhlIGhhc2ggbW9yZSB0aGFuIDEwMCB0aW1lcyBwZXIgMzAgc2Vjb25kcy5cbiAgICAgICAgdGhpcy5fdXBkYXRlSGFzaCA9IHRocm90dGxlKHRoaXMuX3VwZGF0ZUhhc2hVbnRocm90dGxlZC5iaW5kKHRoaXMpLCAzMCAqIDEwMDAgLyAxMDApO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogTWFwIGVsZW1lbnQgdG8gbGlzdGVuIGZvciBjb29yZGluYXRlIGNoYW5nZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXBcbiAgICAgKiBAcmV0dXJucyB7SGFzaH0gYHRoaXNgXG4gICAgICovXG4gICAgYWRkVG8obWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRoaXMuX29uSGFzaENoYW5nZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9tYXAub24oJ21vdmVlbmQnLCB0aGlzLl91cGRhdGVIYXNoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBSZW1vdmVzIGhhc2hcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQb3B1cH0gYHRoaXNgXG4gICAgICovXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRoaXMuX29uSGFzaENoYW5nZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9tYXAub2ZmKCdtb3ZlZW5kJywgdGhpcy5fdXBkYXRlSGFzaCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl91cGRhdGVIYXNoKCkpO1xuXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tYXA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldEhhc2hTdHJpbmcobWFwRmVlZGJhY2s/OiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuX21hcC5nZXRDZW50ZXIoKSxcbiAgICAgICAgICAgIHpvb20gPSBNYXRoLnJvdW5kKHRoaXMuX21hcC5nZXRab29tKCkgKiAxMDApIC8gMTAwLFxuICAgICAgICAgICAgLy8gZGVyaXZlZCBmcm9tIGVxdWF0aW9uOiA1MTJweCAqIDJeeiAvIDM2MCAvIDEwXmQgPCAwLjVweFxuICAgICAgICAgICAgcHJlY2lzaW9uID0gTWF0aC5jZWlsKCh6b29tICogTWF0aC5MTjIgKyBNYXRoLmxvZyg1MTIgLyAzNjAgLyAwLjUpKSAvIE1hdGguTE4xMCksXG4gICAgICAgICAgICBtID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbiksXG4gICAgICAgICAgICBsbmcgPSBNYXRoLnJvdW5kKGNlbnRlci5sbmcgKiBtKSAvIG0sXG4gICAgICAgICAgICBsYXQgPSBNYXRoLnJvdW5kKGNlbnRlci5sYXQgKiBtKSAvIG0sXG4gICAgICAgICAgICBiZWFyaW5nID0gdGhpcy5fbWFwLmdldEJlYXJpbmcoKSxcbiAgICAgICAgICAgIHBpdGNoID0gdGhpcy5fbWFwLmdldFBpdGNoKCk7XG4gICAgICAgIGxldCBoYXNoID0gJyc7XG4gICAgICAgIGlmIChtYXBGZWVkYmFjaykge1xuICAgICAgICAgICAgLy8gbmV3IG1hcCBmZWVkYmFjayBzaXRlIGhhcyBzb21lIGNvbnN0cmFpbnRzIHRoYXQgZG9uJ3QgYWxsb3dcbiAgICAgICAgICAgIC8vIHVzIHRvIHVzZSB0aGUgc2FtZSBoYXNoIGZvcm1hdCBhcyB3ZSBkbyBmb3IgdGhlIE1hcCBoYXNoIG9wdGlvbi5cbiAgICAgICAgICAgIGhhc2ggKz0gYC8ke2xuZ30vJHtsYXR9LyR7em9vbX1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGFzaCArPSBgJHt6b29tfS8ke2xhdH0vJHtsbmd9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiZWFyaW5nIHx8IHBpdGNoKSBoYXNoICs9IChgLyR7TWF0aC5yb3VuZChiZWFyaW5nICogMTApIC8gMTB9YCk7XG4gICAgICAgIGlmIChwaXRjaCkgaGFzaCArPSAoYC8ke01hdGgucm91bmQocGl0Y2gpfWApO1xuXG4gICAgICAgIGlmICh0aGlzLl9oYXNoTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgaGFzaE5hbWUgPSB0aGlzLl9oYXNoTmFtZTtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgcGFydHMgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSgxKS5zcGxpdCgnJicpLm1hcChwYXJ0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwYXJ0LnNwbGl0KCc9JylbMF07XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gaGFzaE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7a2V5fT0ke2hhc2h9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnQ7XG4gICAgICAgICAgICB9KS5maWx0ZXIoYSA9PiBhKTtcbiAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGAke2hhc2hOYW1lfT0ke2hhc2h9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYCMke3BhcnRzLmpvaW4oJyYnKX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGAjJHtoYXNofWA7XG4gICAgfVxuXG4gICAgX2dldEN1cnJlbnRIYXNoKCkge1xuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgaGFzaCBmcm9tIGxvY2F0aW9uLCBzdHJpcHBlZCBmcm9tIGl0cyBudW1iZXIgc2lnblxuICAgICAgICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICAgICAgaWYgKHRoaXMuX2hhc2hOYW1lKSB7XG4gICAgICAgICAgICAvLyBTcGxpdCB0aGUgcGFyYW1ldGVyLXN0eWxlZCBoYXNoIGludG8gcGFydHMgYW5kIGZpbmQgdGhlIHZhbHVlIHdlIG5lZWRcbiAgICAgICAgICAgIGxldCBrZXl2YWw7XG4gICAgICAgICAgICBoYXNoLnNwbGl0KCcmJykubWFwKFxuICAgICAgICAgICAgICAgIHBhcnQgPT4gcGFydC5zcGxpdCgnPScpXG4gICAgICAgICAgICApLmZvckVhY2gocGFydCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRbMF0gPT09IHRoaXMuX2hhc2hOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXZhbCA9IHBhcnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKGtleXZhbCA/IGtleXZhbFsxXSB8fCAnJyA6ICcnKS5zcGxpdCgnLycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNoLnNwbGl0KCcvJyk7XG4gICAgfVxuXG4gICAgX29uSGFzaENoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgbG9jID0gdGhpcy5fZ2V0Q3VycmVudEhhc2goKTtcbiAgICAgICAgaWYgKGxvYy5sZW5ndGggPj0gMyAmJiAhbG9jLnNvbWUodiA9PiBpc05hTih2KSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGJlYXJpbmcgPSB0aGlzLl9tYXAuZHJhZ1JvdGF0ZS5pc0VuYWJsZWQoKSAmJiB0aGlzLl9tYXAudG91Y2hab29tUm90YXRlLmlzRW5hYmxlZCgpID8gKyhsb2NbM10gfHwgMCkgOiB0aGlzLl9tYXAuZ2V0QmVhcmluZygpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLmp1bXBUbyh7XG4gICAgICAgICAgICAgICAgY2VudGVyOiBbK2xvY1syXSwgK2xvY1sxXV0sXG4gICAgICAgICAgICAgICAgem9vbTogK2xvY1swXSxcbiAgICAgICAgICAgICAgICBiZWFyaW5nLFxuICAgICAgICAgICAgICAgIHBpdGNoOiArKGxvY1s0XSB8fCAwKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgX3VwZGF0ZUhhc2hVbnRocm90dGxlZCgpIHtcbiAgICAgICAgLy8gUmVwbGFjZSBpZiBhbHJlYWR5IHByZXNlbnQsIGVsc2UgYXBwZW5kIHRoZSB1cGRhdGVkIGhhc2ggc3RyaW5nXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvKCMuKyk/JC8sIHRoaXMuZ2V0SGFzaFN0cmluZygpKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh3aW5kb3cuaGlzdG9yeS5zdGF0ZSwgbnVsbCwgbG9jYXRpb24pO1xuICAgICAgICB9IGNhdGNoIChTZWN1cml0eUVycm9yKSB7XG4gICAgICAgICAgICAvLyBJRTExIGRvZXMgbm90IGFsbG93IHRoaXMgaWYgdGhlIHBhZ2UgaXMgd2l0aGluIGFuIGlmcmFtZSBjcmVhdGVkXG4gICAgICAgICAgICAvLyB3aXRoIGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50LndyaXRlKC4uLikuXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvNzQxMFxuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2g7XG4iLCIvLyBAZmxvdyBzdHJpY3RcblxuLyoqXG4gKiBUaHJvdHRsZSB0aGUgZ2l2ZW4gZnVuY3Rpb24gdG8gcnVuIGF0IG1vc3QgZXZlcnkgYHBlcmlvZGAgbWlsbGlzZWNvbmRzLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyb3R0bGUoZm46ICgpID0+IHZvaWQsIHRpbWU6IG51bWJlcik6ICgpID0+ID9UaW1lb3V0SUQge1xuICAgIGxldCBwZW5kaW5nID0gZmFsc2U7XG4gICAgbGV0IHRpbWVySWQ6ID9UaW1lb3V0SUQgPSBudWxsO1xuXG4gICAgY29uc3QgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICAgIHRpbWVySWQgPSBudWxsO1xuICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KGxhdGVyLCB0aW1lKTtcbiAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aW1lcklkKSB7XG4gICAgICAgICAgICBsYXRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aW1lcklkO1xuICAgIH07XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4vbWFwJztcbmltcG9ydCB7YmV6aWVyLCBjbGFtcCwgZXh0ZW5kfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHR5cGUge0RyYWdQYW5PcHRpb25zfSBmcm9tICcuL2hhbmRsZXIvc2hpbS9kcmFnX3Bhbic7XG5cbmNvbnN0IGRlZmF1bHRJbmVydGlhT3B0aW9ucyA9IHtcbiAgICBsaW5lYXJpdHk6IDAuMyxcbiAgICBlYXNpbmc6IGJlemllcigwLCAwLCAwLjMsIDEpLFxufTtcblxuY29uc3QgZGVmYXVsdFBhbkluZXJ0aWFPcHRpb25zID0gZXh0ZW5kKHtcbiAgICBkZWNlbGVyYXRpb246IDI1MDAsXG4gICAgbWF4U3BlZWQ6IDE0MDBcbn0sIGRlZmF1bHRJbmVydGlhT3B0aW9ucyk7XG5cbmNvbnN0IGRlZmF1bHRab29tSW5lcnRpYU9wdGlvbnMgPSBleHRlbmQoe1xuICAgIGRlY2VsZXJhdGlvbjogMjAsXG4gICAgbWF4U3BlZWQ6IDE0MDBcbn0sIGRlZmF1bHRJbmVydGlhT3B0aW9ucyk7XG5cbmNvbnN0IGRlZmF1bHRCZWFyaW5nSW5lcnRpYU9wdGlvbnMgPSBleHRlbmQoe1xuICAgIGRlY2VsZXJhdGlvbjogMTAwMCxcbiAgICBtYXhTcGVlZDogMzYwXG59LCBkZWZhdWx0SW5lcnRpYU9wdGlvbnMpO1xuXG5jb25zdCBkZWZhdWx0UGl0Y2hJbmVydGlhT3B0aW9ucyA9IGV4dGVuZCh7XG4gICAgZGVjZWxlcmF0aW9uOiAxMDAwLFxuICAgIG1heFNwZWVkOiA5MFxufSwgZGVmYXVsdEluZXJ0aWFPcHRpb25zKTtcblxuZXhwb3J0IHR5cGUgSW5lcnRpYU9wdGlvbnMgPSB7XG4gICAgbGluZWFyaXR5OiBudW1iZXI7XG4gICAgZWFzaW5nOiAodDogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgZGVjZWxlcmF0aW9uOiBudW1iZXI7XG4gICAgbWF4U3BlZWQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIElucHV0RXZlbnQgPSBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCB8IEtleWJvYXJkRXZlbnQgfCBXaGVlbEV2ZW50O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYW5kbGVySW5lcnRpYSB7XG4gICAgX21hcDogTWFwO1xuICAgIF9pbmVydGlhQnVmZmVyOiBBcnJheTx7IHRpbWU6IG51bWJlciwgc2V0dGluZ3M6IE9iamVjdCB9PjtcblxuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9pbmVydGlhQnVmZmVyID0gW107XG4gICAgfVxuXG4gICAgcmVjb3JkKHNldHRpbmdzOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fZHJhaW5JbmVydGlhQnVmZmVyKCk7XG4gICAgICAgIHRoaXMuX2luZXJ0aWFCdWZmZXIucHVzaCh7dGltZTogYnJvd3Nlci5ub3coKSwgc2V0dGluZ3N9KTtcbiAgICB9XG5cbiAgICBfZHJhaW5JbmVydGlhQnVmZmVyKCkge1xuICAgICAgICBjb25zdCBpbmVydGlhID0gdGhpcy5faW5lcnRpYUJ1ZmZlcixcbiAgICAgICAgICAgIG5vdyA9IGJyb3dzZXIubm93KCksXG4gICAgICAgICAgICBjdXRvZmYgPSAxNjA7ICAgLy9tc2VjXG5cbiAgICAgICAgd2hpbGUgKGluZXJ0aWEubGVuZ3RoID4gMCAmJiBub3cgLSBpbmVydGlhWzBdLnRpbWUgPiBjdXRvZmYpXG4gICAgICAgICAgICBpbmVydGlhLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgX29uTW92ZUVuZChwYW5JbmVydGlhT3B0aW9ucz86IERyYWdQYW5PcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2RyYWluSW5lcnRpYUJ1ZmZlcigpO1xuICAgICAgICBpZiAodGhpcy5faW5lcnRpYUJ1ZmZlci5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWx0YXMgPSB7XG4gICAgICAgICAgICB6b29tOiAwLFxuICAgICAgICAgICAgYmVhcmluZzogMCxcbiAgICAgICAgICAgIHBpdGNoOiAwLFxuICAgICAgICAgICAgcGFuOiBuZXcgUG9pbnQoMCwgMCksXG4gICAgICAgICAgICBwaW5jaEFyb3VuZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJvdW5kOiB1bmRlZmluZWRcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGNvbnN0IHtzZXR0aW5nc30gb2YgdGhpcy5faW5lcnRpYUJ1ZmZlcikge1xuICAgICAgICAgICAgZGVsdGFzLnpvb20gKz0gc2V0dGluZ3Muem9vbURlbHRhIHx8IDA7XG4gICAgICAgICAgICBkZWx0YXMuYmVhcmluZyArPSBzZXR0aW5ncy5iZWFyaW5nRGVsdGEgfHwgMDtcbiAgICAgICAgICAgIGRlbHRhcy5waXRjaCArPSBzZXR0aW5ncy5waXRjaERlbHRhIHx8IDA7XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MucGFuRGVsdGEpIGRlbHRhcy5wYW4uX2FkZChzZXR0aW5ncy5wYW5EZWx0YSk7XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuYXJvdW5kKSBkZWx0YXMuYXJvdW5kID0gc2V0dGluZ3MuYXJvdW5kO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLnBpbmNoQXJvdW5kKSBkZWx0YXMucGluY2hBcm91bmQgPSBzZXR0aW5ncy5waW5jaEFyb3VuZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxhc3RFbnRyeSA9IHRoaXMuX2luZXJ0aWFCdWZmZXJbdGhpcy5faW5lcnRpYUJ1ZmZlci5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSAobGFzdEVudHJ5LnRpbWUgLSB0aGlzLl9pbmVydGlhQnVmZmVyWzBdLnRpbWUpO1xuXG4gICAgICAgIGNvbnN0IGVhc2VPcHRpb25zID0ge307XG5cbiAgICAgICAgaWYgKGRlbHRhcy5wYW4ubWFnKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGN1bGF0ZUVhc2luZyhkZWx0YXMucGFuLm1hZygpLCBkdXJhdGlvbiwgZXh0ZW5kKHt9LCBkZWZhdWx0UGFuSW5lcnRpYU9wdGlvbnMsIHBhbkluZXJ0aWFPcHRpb25zIHx8IHt9KSk7XG4gICAgICAgICAgICBlYXNlT3B0aW9ucy5vZmZzZXQgPSBkZWx0YXMucGFuLm11bHQocmVzdWx0LmFtb3VudCAvIGRlbHRhcy5wYW4ubWFnKCkpO1xuICAgICAgICAgICAgZWFzZU9wdGlvbnMuY2VudGVyID0gdGhpcy5fbWFwLnRyYW5zZm9ybS5jZW50ZXI7XG4gICAgICAgICAgICBleHRlbmREdXJhdGlvbihlYXNlT3B0aW9ucywgcmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWx0YXMuem9vbSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsY3VsYXRlRWFzaW5nKGRlbHRhcy56b29tLCBkdXJhdGlvbiwgZGVmYXVsdFpvb21JbmVydGlhT3B0aW9ucyk7XG4gICAgICAgICAgICBlYXNlT3B0aW9ucy56b29tID0gdGhpcy5fbWFwLnRyYW5zZm9ybS56b29tICsgcmVzdWx0LmFtb3VudDtcbiAgICAgICAgICAgIGV4dGVuZER1cmF0aW9uKGVhc2VPcHRpb25zLCByZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlbHRhcy5iZWFyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGVFYXNpbmcoZGVsdGFzLmJlYXJpbmcsIGR1cmF0aW9uLCBkZWZhdWx0QmVhcmluZ0luZXJ0aWFPcHRpb25zKTtcbiAgICAgICAgICAgIGVhc2VPcHRpb25zLmJlYXJpbmcgPSB0aGlzLl9tYXAudHJhbnNmb3JtLmJlYXJpbmcgKyBjbGFtcChyZXN1bHQuYW1vdW50LCAtMTc5LCAxNzkpO1xuICAgICAgICAgICAgZXh0ZW5kRHVyYXRpb24oZWFzZU9wdGlvbnMsIHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVsdGFzLnBpdGNoKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxjdWxhdGVFYXNpbmcoZGVsdGFzLnBpdGNoLCBkdXJhdGlvbiwgZGVmYXVsdFBpdGNoSW5lcnRpYU9wdGlvbnMpO1xuICAgICAgICAgICAgZWFzZU9wdGlvbnMucGl0Y2ggPSB0aGlzLl9tYXAudHJhbnNmb3JtLnBpdGNoICsgcmVzdWx0LmFtb3VudDtcbiAgICAgICAgICAgIGV4dGVuZER1cmF0aW9uKGVhc2VPcHRpb25zLCByZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVhc2VPcHRpb25zLnpvb20gfHwgZWFzZU9wdGlvbnMuYmVhcmluZykge1xuICAgICAgICAgICAgY29uc3QgbGFzdCA9IGRlbHRhcy5waW5jaEFyb3VuZCA9PT0gdW5kZWZpbmVkID8gZGVsdGFzLmFyb3VuZCA6IGRlbHRhcy5waW5jaEFyb3VuZDtcbiAgICAgICAgICAgIGVhc2VPcHRpb25zLmFyb3VuZCA9IGxhc3QgPyB0aGlzLl9tYXAudW5wcm9qZWN0KGxhc3QpIDogdGhpcy5fbWFwLmdldENlbnRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICByZXR1cm4gZXh0ZW5kKGVhc2VPcHRpb25zLCB7XG4gICAgICAgICAgICBub01vdmVTdGFydDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgIH1cbn1cblxuLy8gVW5mb3J0dW5hdGVseSB6b29tLCBiZWFyaW5nLCBldGMgY2FuJ3QgaGF2ZSBkaWZmZXJlbnQgZHVyYXRpb25zIGFuZCBlYXNpbmdzIHNvXG4vLyB3ZSBuZWVkIHRvIGNob29zZSBvbmUuIFdlIHVzZSB0aGUgbG9uZ2VzdCBkdXJhdGlvbiBhbmQgaXQncyBjb3JyZXNwb25kaW5nIGVhc2luZy5cbmZ1bmN0aW9uIGV4dGVuZER1cmF0aW9uKGVhc2VPcHRpb25zLCByZXN1bHQpIHtcbiAgICBpZiAoIWVhc2VPcHRpb25zLmR1cmF0aW9uIHx8IGVhc2VPcHRpb25zLmR1cmF0aW9uIDwgcmVzdWx0LmR1cmF0aW9uKSB7XG4gICAgICAgIGVhc2VPcHRpb25zLmR1cmF0aW9uID0gcmVzdWx0LmR1cmF0aW9uO1xuICAgICAgICBlYXNlT3B0aW9ucy5lYXNpbmcgPSByZXN1bHQuZWFzaW5nO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRWFzaW5nKGFtb3VudCwgaW5lcnRpYUR1cmF0aW9uOiBudW1iZXIsIGluZXJ0aWFPcHRpb25zKSB7XG4gICAgY29uc3Qge21heFNwZWVkLCBsaW5lYXJpdHksIGRlY2VsZXJhdGlvbn0gPSBpbmVydGlhT3B0aW9ucztcbiAgICBjb25zdCBzcGVlZCA9IGNsYW1wKFxuICAgICAgICBhbW91bnQgKiBsaW5lYXJpdHkgLyAoaW5lcnRpYUR1cmF0aW9uIC8gMTAwMCksXG4gICAgICAgIC1tYXhTcGVlZCxcbiAgICAgICAgbWF4U3BlZWQpO1xuICAgIGNvbnN0IGR1cmF0aW9uID0gTWF0aC5hYnMoc3BlZWQpIC8gKGRlY2VsZXJhdGlvbiAqIGxpbmVhcml0eSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWFzaW5nOiBpbmVydGlhT3B0aW9ucy5lYXNpbmcsXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAqIDEwMDAsXG4gICAgICAgIGFtb3VudDogc3BlZWQgKiAoZHVyYXRpb24gLyAyKVxuICAgIH07XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge0V2ZW50fSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuXG5pbXBvcnQgRE9NIGZyb20gJy4uL3V0aWwvZG9tJztcbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHR5cGUgTG5nTGF0IGZyb20gJy4uL2dlby9sbmdfbGF0JztcblxuLyoqXG4gKiBgTWFwTW91c2VFdmVudGAgaXMgdGhlIGV2ZW50IHR5cGUgZm9yIG1vdXNlLXJlbGF0ZWQgbWFwIGV2ZW50cy5cbiAqIEBleHRlbmRzIHtPYmplY3R9XG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGBjbGlja2AgZXZlbnQgaXMgYW4gZXhhbXBsZSBvZiBhIGBNYXBNb3VzZUV2ZW50YC5cbiAqIC8vIFNldCB1cCBhbiBldmVudCBsaXN0ZW5lciBvbiB0aGUgbWFwLlxuICogbWFwLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAqICAgLy8gVGhlIGV2ZW50IG9iamVjdCAoZSkgY29udGFpbnMgaW5mb3JtYXRpb24gbGlrZSB0aGVcbiAqICAgLy8gY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IG9uIHRoZSBtYXAgdGhhdCB3YXMgY2xpY2tlZC5cbiAqICAgY29uc29sZS5sb2coJ0EgY2xpY2sgZXZlbnQgaGFzIG9jY3VycmVkIGF0ICcgKyBlLmxuZ0xhdCk7XG4gKiB9KTtcbiAqL1xuZXhwb3J0IGNsYXNzIE1hcE1vdXNlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHR5cGUgKG9uZSBvZiB7QGxpbmsgTWFwLmV2ZW50Om1vdXNlZG93bn0sXG4gICAgICoge0BsaW5rIE1hcC5ldmVudDptb3VzZXVwfSxcbiAgICAgKiB7QGxpbmsgTWFwLmV2ZW50OmNsaWNrfSxcbiAgICAgKiB7QGxpbmsgTWFwLmV2ZW50OmRibGNsaWNrfSxcbiAgICAgKiB7QGxpbmsgTWFwLmV2ZW50Om1vdXNlbW92ZX0sXG4gICAgICoge0BsaW5rIE1hcC5ldmVudDptb3VzZW92ZXJ9LFxuICAgICAqIHtAbGluayBNYXAuZXZlbnQ6bW91c2VlbnRlcn0sXG4gICAgICoge0BsaW5rIE1hcC5ldmVudDptb3VzZWxlYXZlfSxcbiAgICAgKiB7QGxpbmsgTWFwLmV2ZW50Om1vdXNlb3V0fSxcbiAgICAgKiB7QGxpbmsgTWFwLmV2ZW50OmNvbnRleHRtZW51fSkuXG4gICAgICovXG4gICAgdHlwZTogJ21vdXNlZG93bidcbiAgICAgICAgfCAnbW91c2V1cCdcbiAgICAgICAgfCAnY2xpY2snXG4gICAgICAgIHwgJ2RibGNsaWNrJ1xuICAgICAgICB8ICdtb3VzZW1vdmUnXG4gICAgICAgIHwgJ21vdXNlb3ZlcidcbiAgICAgICAgfCAnbW91c2VlbnRlcidcbiAgICAgICAgfCAnbW91c2VsZWF2ZSdcbiAgICAgICAgfCAnbW91c2VvdXQnXG4gICAgICAgIHwgJ2NvbnRleHRtZW51JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBgTWFwYCBvYmplY3QgdGhhdCBmaXJlZCB0aGUgZXZlbnQuXG4gICAgICovXG4gICAgdGFyZ2V0OiBNYXA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgRE9NIGV2ZW50IHdoaWNoIGNhdXNlZCB0aGUgbWFwIGV2ZW50LlxuICAgICAqL1xuICAgIG9yaWdpbmFsRXZlbnQ6IE1vdXNlRXZlbnQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGl4ZWwgY29vcmRpbmF0ZXMgb2YgdGhlIG1vdXNlIGN1cnNvciwgcmVsYXRpdmUgdG8gdGhlIG1hcCBhbmQgbWVhc3VyZWQgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyLlxuICAgICAqL1xuICAgIHBvaW50OiBQb2ludDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBnZW9ncmFwaGljIGxvY2F0aW9uIG9uIHRoZSBtYXAgb2YgdGhlIG1vdXNlIGN1cnNvci5cbiAgICAgKi9cbiAgICBsbmdMYXQ6IExuZ0xhdDtcblxuICAgIC8qKlxuICAgICAqIFByZXZlbnRzIHN1YnNlcXVlbnQgZGVmYXVsdCBwcm9jZXNzaW5nIG9mIHRoZSBldmVudCBieSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aWxsIHByZXZlbnQgdGhlIGZvbGxvd2luZyBkZWZhdWx0IG1hcCBiZWhhdmlvcnM6XG4gICAgICpcbiAgICAgKiAgICogT24gYG1vdXNlZG93bmAgZXZlbnRzLCB0aGUgYmVoYXZpb3Igb2Yge0BsaW5rIERyYWdQYW5IYW5kbGVyfVxuICAgICAqICAgKiBPbiBgbW91c2Vkb3duYCBldmVudHMsIHRoZSBiZWhhdmlvciBvZiB7QGxpbmsgRHJhZ1JvdGF0ZUhhbmRsZXJ9XG4gICAgICogICAqIE9uIGBtb3VzZWRvd25gIGV2ZW50cywgdGhlIGJlaGF2aW9yIG9mIHtAbGluayBCb3hab29tSGFuZGxlcn1cbiAgICAgKiAgICogT24gYGRibGNsaWNrYCBldmVudHMsIHRoZSBiZWhhdmlvciBvZiB7QGxpbmsgRG91YmxlQ2xpY2tab29tSGFuZGxlcn1cbiAgICAgKlxuICAgICAqL1xuICAgIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBgdHJ1ZWAgaWYgYHByZXZlbnREZWZhdWx0YCBoYXMgYmVlbiBjYWxsZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXQgZGVmYXVsdFByZXZlbnRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgfVxuXG4gICAgX2RlZmF1bHRQcmV2ZW50ZWQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHR5cGU6IHN0cmluZywgbWFwOiBNYXAsIG9yaWdpbmFsRXZlbnQ6IE1vdXNlRXZlbnQsIGRhdGE6IE9iamVjdCA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gRE9NLm1vdXNlUG9zKG1hcC5nZXRDYW52YXNDb250YWluZXIoKSwgb3JpZ2luYWxFdmVudCk7XG4gICAgICAgIGNvbnN0IGxuZ0xhdCA9IG1hcC51bnByb2plY3QocG9pbnQpO1xuICAgICAgICBzdXBlcih0eXBlLCBleHRlbmQoe3BvaW50LCBsbmdMYXQsIG9yaWdpbmFsRXZlbnR9LCBkYXRhKSk7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBtYXA7XG4gICAgfVxufVxuXG4vKipcbiAqIGBNYXBUb3VjaEV2ZW50YCBpcyB0aGUgZXZlbnQgdHlwZSBmb3IgdG91Y2gtcmVsYXRlZCBtYXAgZXZlbnRzLlxuICogQGV4dGVuZHMge09iamVjdH1cbiAqL1xuZXhwb3J0IGNsYXNzIE1hcFRvdWNoRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHR5cGUuXG4gICAgICovXG4gICAgdHlwZTogJ3RvdWNoc3RhcnQnXG4gICAgICAgIHwgJ3RvdWNoZW5kJ1xuICAgICAgICB8ICd0b3VjaGNhbmNlbCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYE1hcGAgb2JqZWN0IHRoYXQgZmlyZWQgdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIHRhcmdldDogTWFwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIERPTSBldmVudCB3aGljaCBjYXVzZWQgdGhlIG1hcCBldmVudC5cbiAgICAgKi9cbiAgICBvcmlnaW5hbEV2ZW50OiBUb3VjaEV2ZW50O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdlb2dyYXBoaWMgbG9jYXRpb24gb24gdGhlIG1hcCBvZiB0aGUgY2VudGVyIG9mIHRoZSB0b3VjaCBldmVudCBwb2ludHMuXG4gICAgICovXG4gICAgbG5nTGF0OiBMbmdMYXQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGl4ZWwgY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBvZiB0aGUgdG91Y2ggZXZlbnQgcG9pbnRzLCByZWxhdGl2ZSB0byB0aGUgbWFwIGFuZCBtZWFzdXJlZCBmcm9tIHRoZSB0b3AgbGVmdFxuICAgICAqIGNvcm5lci5cbiAgICAgKi9cbiAgICBwb2ludDogUG9pbnQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXJyYXkgb2YgcGl4ZWwgY29vcmRpbmF0ZXMgY29ycmVzcG9uZGluZyB0byBhXG4gICAgICogW3RvdWNoIGV2ZW50J3MgYHRvdWNoZXNgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVG91Y2hFdmVudC90b3VjaGVzKSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBwb2ludHM6IEFycmF5PFBvaW50PjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBnZW9ncmFwaGljYWwgbG9jYXRpb25zIG9uIHRoZSBtYXAgY29ycmVzcG9uZGluZyB0byBhXG4gICAgICogW3RvdWNoIGV2ZW50J3MgYHRvdWNoZXNgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVG91Y2hFdmVudC90b3VjaGVzKSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBsbmdMYXRzOiBBcnJheTxMbmdMYXQ+O1xuXG4gICAgLyoqXG4gICAgICogUHJldmVudHMgc3Vic2VxdWVudCBkZWZhdWx0IHByb2Nlc3Npbmcgb2YgdGhlIGV2ZW50IGJ5IHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBDYWxsaW5nIHRoaXMgbWV0aG9kIHdpbGwgcHJldmVudCB0aGUgZm9sbG93aW5nIGRlZmF1bHQgbWFwIGJlaGF2aW9yczpcbiAgICAgKlxuICAgICAqICAgKiBPbiBgdG91Y2hzdGFydGAgZXZlbnRzLCB0aGUgYmVoYXZpb3Igb2Yge0BsaW5rIERyYWdQYW5IYW5kbGVyfVxuICAgICAqICAgKiBPbiBgdG91Y2hzdGFydGAgZXZlbnRzLCB0aGUgYmVoYXZpb3Igb2Yge0BsaW5rIFRvdWNoWm9vbVJvdGF0ZUhhbmRsZXJ9XG4gICAgICpcbiAgICAgKi9cbiAgICBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYHRydWVgIGlmIGBwcmV2ZW50RGVmYXVsdGAgaGFzIGJlZW4gY2FsbGVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0IGRlZmF1bHRQcmV2ZW50ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0UHJldmVudGVkO1xuICAgIH1cblxuICAgIF9kZWZhdWx0UHJldmVudGVkOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBzdHJpbmcsIG1hcDogTWFwLCBvcmlnaW5hbEV2ZW50OiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHRvdWNoZXMgPSB0eXBlID09PSBcInRvdWNoZW5kXCIgPyBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzIDogb3JpZ2luYWxFdmVudC50b3VjaGVzO1xuICAgICAgICBjb25zdCBwb2ludHMgPSBET00udG91Y2hQb3MobWFwLmdldENhbnZhc0NvbnRhaW5lcigpLCB0b3VjaGVzKTtcbiAgICAgICAgY29uc3QgbG5nTGF0cyA9IHBvaW50cy5tYXAoKHQpID0+IG1hcC51bnByb2plY3QodCkpO1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50cy5yZWR1Y2UoKHByZXYsIGN1cnIsIGksIGFycikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHByZXYuYWRkKGN1cnIuZGl2KGFyci5sZW5ndGgpKTtcbiAgICAgICAgfSwgbmV3IFBvaW50KDAsIDApKTtcbiAgICAgICAgY29uc3QgbG5nTGF0ID0gbWFwLnVucHJvamVjdChwb2ludCk7XG4gICAgICAgIHN1cGVyKHR5cGUsIHtwb2ludHMsIHBvaW50LCBsbmdMYXRzLCBsbmdMYXQsIG9yaWdpbmFsRXZlbnR9KTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBgTWFwV2hlZWxFdmVudGAgaXMgdGhlIGV2ZW50IHR5cGUgZm9yIHRoZSBgd2hlZWxgIG1hcCBldmVudC5cbiAqIEBleHRlbmRzIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjbGFzcyBNYXBXaGVlbEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSBldmVudCB0eXBlLlxuICAgICAqL1xuICAgIHR5cGU6ICd3aGVlbCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYE1hcGAgb2JqZWN0IHRoYXQgZmlyZWQgdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIHRhcmdldDogTWFwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIERPTSBldmVudCB3aGljaCBjYXVzZWQgdGhlIG1hcCBldmVudC5cbiAgICAgKi9cbiAgICBvcmlnaW5hbEV2ZW50OiBXaGVlbEV2ZW50O1xuXG4gICAgLyoqXG4gICAgICogUHJldmVudHMgc3Vic2VxdWVudCBkZWZhdWx0IHByb2Nlc3Npbmcgb2YgdGhlIGV2ZW50IGJ5IHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBDYWxsaW5nIHRoaXMgbWV0aG9kIHdpbGwgcHJldmVudCB0aGUgdGhlIGJlaGF2aW9yIG9mIHtAbGluayBTY3JvbGxab29tSGFuZGxlcn0uXG4gICAgICovXG4gICAgcHJldmVudERlZmF1bHQoKSB7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGB0cnVlYCBpZiBgcHJldmVudERlZmF1bHRgIGhhcyBiZWVuIGNhbGxlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldCBkZWZhdWx0UHJldmVudGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9XG5cbiAgICBfZGVmYXVsdFByZXZlbnRlZDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBtYXA6IE1hcCwgb3JpZ2luYWxFdmVudDogV2hlZWxFdmVudCkge1xuICAgICAgICBzdXBlcih0eXBlLCB7b3JpZ2luYWxFdmVudH0pO1xuICAgICAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYE1hcEJveFpvb21FdmVudGAgaXMgdGhlIGV2ZW50IHR5cGUgZm9yIHRoZSBib3h6b29tLXJlbGF0ZWQgbWFwIGV2ZW50cyBlbWl0dGVkIGJ5IHRoZSB7QGxpbmsgQm94Wm9vbUhhbmRsZXJ9LlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1hcEJveFpvb21FdmVudFxuICogQHByb3BlcnR5IHtNb3VzZUV2ZW50fSBvcmlnaW5hbEV2ZW50IFRoZSBET00gZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIGJveHpvb20gZXZlbnQuIENhbiBiZSBhIGBNb3VzZUV2ZW50YCBvciBgS2V5Ym9hcmRFdmVudGBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIGJveHpvb20gZXZlbnQuIE9uZSBvZiBgYm94em9vbXN0YXJ0YCwgYGJveHpvb21lbmRgIG9yIGBib3h6b29tY2FuY2VsYFxuICogQHByb3BlcnR5IHtNYXB9IHRhcmdldCBUaGUgYE1hcGAgaW5zdGFuY2UgdGhhdCB0cmlnZ2VycmVkIHRoZSBldmVudFxuICovXG5leHBvcnQgdHlwZSBNYXBCb3hab29tRXZlbnQgPSB7XG4gICAgdHlwZTogJ2JveHpvb21zdGFydCdcbiAgICAgICAgfCAnYm94em9vbWVuZCdcbiAgICAgICAgfCAnYm94em9vbWNhbmNlbCcsXG4gICAgdGFyZ2V0OiBNYXAsXG4gICAgb3JpZ2luYWxFdmVudDogTW91c2VFdmVudFxufTtcblxuLyoqXG4gKiBBIGBNYXBEYXRhRXZlbnRgIG9iamVjdCBpcyBlbWl0dGVkIHdpdGggdGhlIHtAbGluayBNYXAuZXZlbnQ6ZGF0YX1cbiAqIGFuZCB7QGxpbmsgTWFwLmV2ZW50OmRhdGFsb2FkaW5nfSBldmVudHMuIFBvc3NpYmxlIHZhbHVlcyBmb3JcbiAqIGBkYXRhVHlwZWBzIGFyZTpcbiAqXG4gKiAtIGAnc291cmNlJ2A6IFRoZSBub24tdGlsZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhbnkgc291cmNlXG4gKiAtIGAnc3R5bGUnYDogVGhlIFtzdHlsZV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8pIHVzZWQgYnkgdGhlIG1hcFxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1hcERhdGFFdmVudFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGF0YVR5cGUgVGhlIHR5cGUgb2YgZGF0YSB0aGF0IGhhcyBjaGFuZ2VkLiBPbmUgb2YgYCdzb3VyY2UnYCwgYCdzdHlsZSdgLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbaXNTb3VyY2VMb2FkZWRdIFRydWUgaWYgdGhlIGV2ZW50IGhhcyBhIGBkYXRhVHlwZWAgb2YgYHNvdXJjZWAgYW5kIHRoZSBzb3VyY2UgaGFzIG5vIG91dHN0YW5kaW5nIG5ldHdvcmsgcmVxdWVzdHMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gW3NvdXJjZV0gVGhlIFtzdHlsZSBzcGVjIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzb3VyY2VdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvI3NvdXJjZXMpIGlmIHRoZSBldmVudCBoYXMgYSBgZGF0YVR5cGVgIG9mIGBzb3VyY2VgLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzb3VyY2VEYXRhVHlwZV0gSW5jbHVkZWQgaWYgdGhlIGV2ZW50IGhhcyBhIGBkYXRhVHlwZWAgb2YgYHNvdXJjZWAgYW5kIHRoZSBldmVudCBzaWduYWxzXG4gKiB0aGF0IGludGVybmFsIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWQgb3IgY2hhbmdlZC4gUG9zc2libGUgdmFsdWVzIGFyZSBgbWV0YWRhdGFgLCBgY29udGVudGAgYW5kIGB2aXNpYmlsaXR5YC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbdGlsZV0gVGhlIHRpbGUgYmVpbmcgbG9hZGVkIG9yIGNoYW5nZWQsIGlmIHRoZSBldmVudCBoYXMgYSBgZGF0YVR5cGVgIG9mIGBzb3VyY2VgIGFuZFxuICogdGhlIGV2ZW50IGlzIHJlbGF0ZWQgdG8gbG9hZGluZyBvZiBhIHRpbGUuXG4gKiBAcHJvcGVydHkge0Nvb3JkaW5hdGV9IFtjb29yZF0gVGhlIGNvb3JkaW5hdGUgb2YgdGhlIHRpbGUgaWYgdGhlIGV2ZW50IGhhcyBhIGBkYXRhVHlwZWAgb2YgYHNvdXJjZWAgYW5kXG4gKiB0aGUgZXZlbnQgaXMgcmVsYXRlZCB0byBsb2FkaW5nIG9mIGEgdGlsZS5cbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc291cmNlZGF0YSBldmVudCBpcyBhbiBleGFtcGxlIG9mIE1hcERhdGFFdmVudC5cbiAqIC8vIFNldCB1cCBhbiBldmVudCBsaXN0ZW5lciBvbiB0aGUgbWFwLlxuICogbWFwLm9uKCdzb3VyY2VkYXRhJywgZnVuY3Rpb24oZSkge1xuICogICAgaWYgKGUuaXNTb3VyY2VMb2FkZWQpIHtcbiAqICAgICAgICAvLyBEbyBzb21ldGhpbmcgd2hlbiB0aGUgc291cmNlIGhhcyBmaW5pc2hlZCBsb2FkaW5nXG4gKiAgICB9XG4gKiB9KTtcbiAqL1xuZXhwb3J0IHR5cGUgTWFwRGF0YUV2ZW50ID0ge1xuICAgIHR5cGU6IHN0cmluZyxcbiAgICBkYXRhVHlwZTogc3RyaW5nXG59O1xuXG5leHBvcnQgdHlwZSBNYXBDb250ZXh0RXZlbnQgPSB7XG4gICAgdHlwZTogJ3dlYmdsY29udGV4dGxvc3QnIHwgJ3dlYmdsY29udGV4dHJlc3RvcmVkJyxcbiAgICBvcmlnaW5hbEV2ZW50OiBXZWJHTENvbnRleHRFdmVudFxufVxuXG5leHBvcnQgdHlwZSBNYXBFdmVudCA9XG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBvaW50aW5nIGRldmljZSAodXN1YWxseSBhIG1vdXNlKSBpcyBwcmVzc2VkIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZXZlbnQgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBvcHRpb25hbCBgbGF5ZXJJZGAgcGFyYW1ldGVyLlxuICAgICAqIElmIGBsYXllcklkYCBpcyBpbmNsdWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IGluIHtAbGluayBNYXAjb259LCB0aGUgZXZlbnQgbGlzdGVuZXIgd2lsbCBmaXJlIG9ubHkgd2hlbiB0aGVcbiAgICAgKiB0aGUgY3Vyc29yIGlzIHByZXNzZWQgd2hpbGUgaW5zaWRlIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBzcGVjaWZlZCBsYXllci5cbiAgICAgKlxuICAgICAqIEBldmVudCBtb3VzZWRvd25cbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lclxuICAgICAqIG1hcC5vbignbW91c2Vkb3duJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBtb3VzZWRvd24gZXZlbnQgaGFzIG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWMgbGF5ZXJcbiAgICAgKiBtYXAub24oJ21vdXNlZG93bicsICdwb2ktbGFiZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIG1vdXNlZG93biBldmVudCBoYXMgb2NjdXJyZWQgb24gYSB2aXNpYmxlIHBvcnRpb24gb2YgdGhlIHBvaS1sYWJlbCBsYXllci4nKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtIaWdobGlnaHQgZmVhdHVyZXMgd2l0aGluIGEgYm91bmRpbmcgYm94XShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS91c2luZy1ib3gtcXVlcnlyZW5kZXJlZGZlYXR1cmVzLylcbiAgICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgcG9pbnRdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2RyYWctYS1wb2ludC8pXG4gICAgICovXG4gICAgfCAnbW91c2Vkb3duJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBvaW50aW5nIGRldmljZSAodXN1YWxseSBhIG1vdXNlKSBpcyByZWxlYXNlZCB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGV2ZW50IGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgb3B0aW9uYWwgYGxheWVySWRgIHBhcmFtZXRlci5cbiAgICAgKiBJZiBgbGF5ZXJJZGAgaXMgaW5jbHVkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCBpbiB7QGxpbmsgTWFwI29ufSwgdGhlIGV2ZW50IGxpc3RlbmVyIHdpbGwgZmlyZSBvbmx5IHdoZW4gdGhlXG4gICAgICogdGhlIGN1cnNvciBpcyByZWxlYXNlZCB3aGlsZSBpbnNpZGUgYSB2aXNpYmxlIHBvcnRpb24gb2YgdGhlIHNwZWNpZmVkIGxheWVyLlxuICAgICAqXG4gICAgICogQGV2ZW50IG1vdXNldXBcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lclxuICAgICAqIG1hcC5vbignbW91c2V1cCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgbW91c2V1cCBldmVudCBoYXMgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciBmb3IgYSBzcGVjaWZpYyBsYXllclxuICAgICAqIG1hcC5vbignbW91c2V1cCcsICdwb2ktbGFiZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIG1vdXNldXAgZXZlbnQgaGFzIG9jY3VycmVkIG9uIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBwb2ktbGFiZWwgbGF5ZXIuJyk7XG4gICAgICogfSk7XG4gICAgICogQHNlZSBbSGlnaGxpZ2h0IGZlYXR1cmVzIHdpdGhpbiBhIGJvdW5kaW5nIGJveF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvdXNpbmctYm94LXF1ZXJ5cmVuZGVyZWRmZWF0dXJlcy8pXG4gICAgICogQHNlZSBbQ3JlYXRlIGEgZHJhZ2dhYmxlIHBvaW50XShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9kcmFnLWEtcG9pbnQvKVxuICAgICAqL1xuICAgIHwgJ21vdXNldXAnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgcG9pbnRpbmcgZGV2aWNlICh1c3VhbGx5IGEgbW91c2UpIGlzIG1vdmVkIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqIEFzIHlvdSBtb3ZlIHRoZSBjdXJzb3IgYWNyb3NzIGEgd2ViIHBhZ2UgY29udGFpbmluZyBhIG1hcCxcbiAgICAgKiB0aGUgZXZlbnQgd2lsbCBmaXJlIGVhY2ggdGltZSBpdCBlbnRlcnMgdGhlIG1hcCBvciBhbnkgY2hpbGQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBldmVudCBpcyBjb21wYXRpYmxlIHdpdGggdGhlIG9wdGlvbmFsIGBsYXllcklkYCBwYXJhbWV0ZXIuXG4gICAgICogSWYgYGxheWVySWRgIGlzIGluY2x1ZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgaW4ge0BsaW5rIE1hcCNvbn0sIHRoZSBldmVudCBsaXN0ZW5lciB3aWxsIGZpcmUgb25seSB3aGVuIHRoZVxuICAgICAqIHRoZSBjdXJzb3IgaXMgbW92ZWQgaW5zaWRlIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBzcGVjaWZlZCBsYXllci5cbiAgICAgKlxuICAgICAqIEBldmVudCBtb3VzZW92ZXJcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lclxuICAgICAqIG1hcC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBtb3VzZW92ZXIgZXZlbnQgaGFzIG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWMgbGF5ZXJcbiAgICAgKiBtYXAub24oJ21vdXNlb3ZlcicsICdwb2ktbGFiZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIG1vdXNlb3ZlciBldmVudCBoYXMgb2NjdXJyZWQgb24gYSB2aXNpYmxlIHBvcnRpb24gb2YgdGhlIHBvaS1sYWJlbCBsYXllci4nKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtHZXQgY29vcmRpbmF0ZXMgb2YgdGhlIG1vdXNlIHBvaW50ZXJdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvbW91c2UtcG9zaXRpb24vKVxuICAgICAqIEBzZWUgW0hpZ2hsaWdodCBmZWF0dXJlcyB1bmRlciB0aGUgbW91c2UgcG9pbnRlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9ob3Zlci1zdHlsZXMvKVxuICAgICAqIEBzZWUgW0Rpc3BsYXkgYSBwb3B1cCBvbiBob3Zlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9wb3B1cC1vbi1ob3Zlci8pXG4gICAgICovXG4gICAgfCAnbW91c2VvdmVyJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBvaW50aW5nIGRldmljZSAodXN1YWxseSBhIG1vdXNlKSBpcyBtb3ZlZCB3aGlsZSB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgbWFwLlxuICAgICAqIEFzIHlvdSBtb3ZlIHRoZSBjdXJzb3IgYWNyb3NzIHRoZSBtYXAsIHRoZSBldmVudCB3aWxsIGZpcmUgZXZlcnkgdGltZSB0aGUgY3Vyc29yIGNoYW5nZXMgcG9zaXRpb24gd2l0aGluIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBldmVudCBpcyBjb21wYXRpYmxlIHdpdGggdGhlIG9wdGlvbmFsIGBsYXllcklkYCBwYXJhbWV0ZXIuXG4gICAgICogSWYgYGxheWVySWRgIGlzIGluY2x1ZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgaW4ge0BsaW5rIE1hcCNvbn0sIHRoZSBldmVudCBsaXN0ZW5lciB3aWxsIGZpcmUgb25seSB3aGVuIHRoZVxuICAgICAqIHRoZSBjdXJzb3IgaXMgaW5zaWRlIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBzcGVjaWZpZWQgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW91c2Vtb3ZlXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBtYXAub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgbW91c2Vtb3ZlIGV2ZW50IGhhcyBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIGZvciBhIHNwZWNpZmljIGxheWVyXG4gICAgICogbWFwLm9uKCdtb3VzZW1vdmUnLCAncG9pLWxhYmVsJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBtb3VzZW1vdmUgZXZlbnQgaGFzIG9jY3VycmVkIG9uIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBwb2ktbGFiZWwgbGF5ZXIuJyk7XG4gICAgICogfSk7XG4gICAgICogQHNlZSBbR2V0IGNvb3JkaW5hdGVzIG9mIHRoZSBtb3VzZSBwb2ludGVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL21vdXNlLXBvc2l0aW9uLylcbiAgICAgKiBAc2VlIFtIaWdobGlnaHQgZmVhdHVyZXMgdW5kZXIgdGhlIG1vdXNlIHBvaW50ZXJdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvaG92ZXItc3R5bGVzLylcbiAgICAgKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXAgb24gb3Zlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9wb3B1cC1vbi1ob3Zlci8pXG4gICAgICovXG4gICAgfCAnbW91c2Vtb3ZlJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBvaW50aW5nIGRldmljZSAodXN1YWxseSBhIG1vdXNlKSBpcyBwcmVzc2VkIGFuZCByZWxlYXNlZCBhdCB0aGUgc2FtZSBwb2ludCBvbiB0aGUgbWFwLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZXZlbnQgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBvcHRpb25hbCBgbGF5ZXJJZGAgcGFyYW1ldGVyLlxuICAgICAqIElmIGBsYXllcklkYCBpcyBpbmNsdWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IGluIHtAbGluayBNYXAjb259LCB0aGUgZXZlbnQgbGlzdGVuZXIgd2lsbCBmaXJlIG9ubHkgd2hlbiB0aGVcbiAgICAgKiBwb2ludCB0aGF0IGlzIHByZXNzZWQgYW5kIHJlbGVhc2VkIGNvbnRhaW5zIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBzcGVjaWZlZCBsYXllci5cbiAgICAgKlxuICAgICAqIEBldmVudCBjbGlja1xuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcE1vdXNlRXZlbnR9IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyXG4gICAgICogbWFwLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIGNsaWNrIGV2ZW50IGhhcyBvY2N1cnJlZCBhdCAnICsgZS5sbmdMYXQpO1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWMgbGF5ZXJcbiAgICAgKiBtYXAub24oJ2NsaWNrJywgJ3BvaS1sYWJlbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIGNsaWNrIGV2ZW50IGhhcyBvY2N1cnJlZCBvbiBhIHZpc2libGUgcG9ydGlvbiBvZiB0aGUgcG9pLWxhYmVsIGxheWVyIGF0ICcgKyBlLmxuZ0xhdCk7XG4gICAgICogfSk7XG4gICAgICogQHNlZSBbTWVhc3VyZSBkaXN0YW5jZXNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvbWVhc3VyZS8pXG4gICAgICogQHNlZSBbQ2VudGVyIHRoZSBtYXAgb24gYSBjbGlja2VkIHN5bWJvbF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jZW50ZXItb24tc3ltYm9sLylcbiAgICAgKi9cbiAgICB8ICdjbGljaydcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBwb2ludGluZyBkZXZpY2UgKHVzdWFsbHkgYSBtb3VzZSkgaXMgcHJlc3NlZCBhbmQgcmVsZWFzZWQgdHdpY2UgYXQgdGhlIHNhbWUgcG9pbnQgb25cbiAgICAgKiB0aGUgbWFwIGluIHJhcGlkIHN1Y2Nlc3Npb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBldmVudCBpcyBjb21wYXRpYmxlIHdpdGggdGhlIG9wdGlvbmFsIGBsYXllcklkYCBwYXJhbWV0ZXIuXG4gICAgICogSWYgYGxheWVySWRgIGlzIGluY2x1ZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgaW4ge0BsaW5rIE1hcCNvbn0sIHRoZSBldmVudCBsaXN0ZW5lciB3aWxsIGZpcmUgb25seVxuICAgICAqIHdoZW4gdGhlIHBvaW50IHRoYXQgaXMgY2xpY2tlZCB0d2ljZSBjb250YWlucyBhIHZpc2libGUgcG9ydGlvbiBvZiB0aGUgc3BlY2lmZWQgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZGJsY2xpY2tcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lclxuICAgICAqIG1hcC5vbignZGJsY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBkYmxjbGljayBldmVudCBoYXMgb2NjdXJyZWQgYXQgJyArIGUubG5nTGF0KTtcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIGZvciBhIHNwZWNpZmljIGxheWVyXG4gICAgICogbWFwLm9uKCdkYmxjbGljaycsICdwb2ktbGFiZWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBkYmxjbGljayBldmVudCBoYXMgb2NjdXJyZWQgb24gYSB2aXNpYmxlIHBvcnRpb24gb2YgdGhlIHBvaS1sYWJlbCBsYXllciBhdCAnICsgZS5sbmdMYXQpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ2RibGNsaWNrJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBvaW50aW5nIGRldmljZSAodXN1YWxseSBhIG1vdXNlKSBlbnRlcnMgYSB2aXNpYmxlIHBvcnRpb24gb2YgYSBzcGVjaWZpZWQgbGF5ZXIgZnJvbVxuICAgICAqIG91dHNpZGUgdGhhdCBsYXllciBvciBvdXRzaWRlIHRoZSBtYXAgY2FudmFzLlxuICAgICAqXG4gICAgICogKipJbXBvcnRhbnQ6KiogVGhpcyBldmVudCBjYW4gb25seSBiZSBsaXN0ZW5lZCBmb3Igd2hlbiB7QGxpbmsgTWFwI29ufSBpbmNsdWRlcyB0aHJlZSBhcmd1bWVudHMsXG4gICAgICogd2hlcmUgdGhlIHNlY29uZCBhcmd1bWVudCBzcGVjaWZpZXMgdGhlIGRlc2lyZWQgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW91c2VlbnRlclxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcE1vdXNlRXZlbnR9IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyXG4gICAgICogbWFwLm9uKCdtb3VzZWVudGVyJywgJ3dhdGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBtb3VzZWVudGVyIGV2ZW50IG9jY3VycmVkIG9uIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSB3YXRlciBsYXllci4nKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtDZW50ZXIgdGhlIG1hcCBvbiBhIGNsaWNrZWQgc3ltYm9sXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jZW50ZXItb24tc3ltYm9sLylcbiAgICAgKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXAgb24gY2xpY2tdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvcHVwLW9uLWNsaWNrLylcbiAgICAgKi9cbiAgICB8ICdtb3VzZWVudGVyJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBvaW50aW5nIGRldmljZSAodXN1YWxseSBhIG1vdXNlKSBsZWF2ZXMgYSB2aXNpYmxlIHBvcnRpb24gb2YgYSBzcGVjaWZpZWQgbGF5ZXIsIG9yIGxlYXZlc1xuICAgICAqIHRoZSBtYXAgY2FudmFzLlxuICAgICAqXG4gICAgICogKipJbXBvcnRhbnQ6KiogVGhpcyBldmVudCBjYW4gb25seSBiZSBsaXN0ZW5lZCBmb3Igd2hlbiB7QGxpbmsgTWFwI29ufSBpbmNsdWRlcyB0aHJlZSBhcmd1ZW1lbnRzLFxuICAgICAqIHdoZXJlIHRoZSBzZWNvbmQgYXJndW1lbnQgc3BlY2lmaWVzIHRoZSBkZXNpcmVkIGxheWVyLlxuICAgICAqXG4gICAgICogQGV2ZW50IG1vdXNlbGVhdmVcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gd2hlbiB0aGUgcG9pbnRpbmcgZGV2aWNlIGxlYXZlc1xuICAgICAqIC8vIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBzcGVjaWZpZWQgbGF5ZXIuXG4gICAgICogbWFwLm9uKCdtb3VzZWxlYXZlJywgJ3dhdGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBtb3VzZWxlYXZlIGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqIEBzZWUgW0hpZ2hsaWdodCBmZWF0dXJlcyB1bmRlciB0aGUgbW91c2UgcG9pbnRlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9ob3Zlci1zdHlsZXMvKVxuICAgICAqIEBzZWUgW0Rpc3BsYXkgYSBwb3B1cCBvbiBjbGlja10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAtb24tY2xpY2svKVxuICAgICAqL1xuICAgIHwgJ21vdXNlbGVhdmUnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgcG9pbnQgZGV2aWNlICh1c3VhbGx5IGEgbW91c2UpIGxlYXZlcyB0aGUgbWFwJ3MgY2FudmFzLlxuICAgICAqXG4gICAgICogQGV2ZW50IG1vdXNlb3V0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHdoZW4gdGhlIHBvaW50aW5nIGRldmljZSBsZWF2ZSdzXG4gICAgICogLy8gdGhlIG1hcCdzIGNhbnZhcy5cbiAgICAgKiBtYXAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBtb3VzZW91dCBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICdtb3VzZW91dCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIHJpZ2h0IGJ1dHRvbiBvZiB0aGUgbW91c2UgaXMgY2xpY2tlZCBvciB0aGUgY29udGV4dCBtZW51IGtleSBpcyBwcmVzc2VkIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQGV2ZW50IGNvbnRleHRtZW51XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHdoZW4gdGhlIHJpZ2h0IG1vdXNlIGJ1dHRvbiBpc1xuICAgICAqIC8vIHByZXNzZWQgd2l0aGluIHRoZSBtYXAuXG4gICAgICogbWFwLm9uKCdjb250ZXh0bWVudScsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgY29udGV4dG1lbnUgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnY29udGV4dG1lbnUnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgW2B3aGVlbGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbCkgZXZlbnQgb2NjdXJzIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQGV2ZW50IHdoZWVsXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwV2hlZWxFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHdoZW4gYSB3aGVlbCBldmVudCBvY2N1cnMgd2l0aGluIHRoZSBtYXAuXG4gICAgICogbWFwLm9uKCd3aGVlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egd2hlZWwgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnd2hlZWwnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgW2B0b3VjaHN0YXJ0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3RvdWNoc3RhcnQpIGV2ZW50IG9jY3VycyB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCB0b3VjaHN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwVG91Y2hFdmVudH0gZGF0YVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyB3aGVuIGEgdG91Y2hzdGFydCBldmVudCBvY2N1cnMgd2l0aGluIHRoZSBtYXAuXG4gICAgICogbWFwLm9uKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSB0b3VjaHN0YXJ0IGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqIEBzZWUgW0NyZWF0ZSBhIGRyYWdnYWJsZSBwb2ludF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZHJhZy1hLXBvaW50LylcbiAgICAgKi9cbiAgICB8ICd0b3VjaHN0YXJ0J1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIFtgdG91Y2hlbmRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvdG91Y2hlbmQpIGV2ZW50IG9jY3VycyB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCB0b3VjaGVuZFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyB3aGVuIGEgdG91Y2hzdGFydCBldmVudCBvY2N1cnMgd2l0aGluIHRoZSBtYXAuXG4gICAgICogbWFwLm9uKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSB0b3VjaHN0YXJ0IGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqIEBzZWUgW0NyZWF0ZSBhIGRyYWdnYWJsZSBwb2ludF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZHJhZy1hLXBvaW50LylcbiAgICAgKi9cbiAgICB8ICd0b3VjaGVuZCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBbYHRvdWNobW92ZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy90b3VjaG1vdmUpIGV2ZW50IG9jY3VycyB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCB0b3VjaG1vdmVcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBUb3VjaEV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gd2hlbiBhIHRvdWNobW92ZSBldmVudCBvY2N1cnMgd2l0aGluIHRoZSBtYXAuXG4gICAgICogbWFwLm9uKCd0b3VjaG1vdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIHRvdWNobW92ZSBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgcG9pbnRdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2RyYWctYS1wb2ludC8pXG4gICAgICovXG4gICAgfCAndG91Y2htb3ZlJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIFtgdG91Y2hjYW5jZWxgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvdG91Y2hjYW5jZWwpIGV2ZW50IG9jY3VycyB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCB0b3VjaGNhbmNlbFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyB3aGVuIGEgdG91Y2hjYW5jZWwgZXZlbnQgb2NjdXJzIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqIG1hcC5vbigndG91Y2hjYW5jZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIHRvdWNoY2FuY2VsIGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ3RvdWNoY2FuY2VsJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQganVzdCBiZWZvcmUgdGhlIG1hcCBiZWdpbnMgYSB0cmFuc2l0aW9uIGZyb20gb25lXG4gICAgICogdmlldyB0byBhbm90aGVyLCBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2p1bXBUb30uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW92ZXN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7e29yaWdpbmFsRXZlbnQ6IERyYWdFdmVudH19IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyBqdXN0IGJlZm9yZSB0aGUgbWFwIGJlZ2lucyBhIHRyYW5zaXRpb25cbiAgICAgKiAvLyBmcm9tIG9uZSB2aWV3IHRvIGFub3RoZXIuXG4gICAgICogbWFwLm9uKCdtb3Zlc3RhcnQnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIG1vdmVzdGFydGAgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnbW92ZXN0YXJ0J1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgcmVwZWF0ZWRseSBkdXJpbmcgYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbiBmcm9tIG9uZSB2aWV3IHRvXG4gICAgICogYW5vdGhlciwgYXMgdGhlIHJlc3VsdCBvZiBlaXRoZXIgdXNlciBpbnRlcmFjdGlvbiBvciBtZXRob2RzIHN1Y2ggYXMge0BsaW5rIE1hcCNmbHlUb30uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW92ZVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcE1vdXNlRXZlbnQgfCBNYXBUb3VjaEV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gcmVwZWF0ZWRseSBkdXJpbmcgYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi5cbiAgICAgKiBtYXAub24oJ21vdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIG1vdmUgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICogQHNlZSBbRGlzcGxheSBIVE1MIGNsdXN0ZXJzIHdpdGggY3VzdG9tIHByb3BlcnRpZXNdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2NsdXN0ZXItaHRtbC8pXG4gICAgICogQHNlZSBbRmlsdGVyIGZlYXR1cmVzIHdpdGhpbiBtYXAgdmlld10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZmlsdGVyLWZlYXR1cmVzLXdpdGhpbi1tYXAtdmlldy8pXG4gICAgICovXG4gICAgfCAnbW92ZSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGp1c3QgYWZ0ZXIgdGhlIG1hcCBjb21wbGV0ZXMgYSB0cmFuc2l0aW9uIGZyb20gb25lXG4gICAgICogdmlldyB0byBhbm90aGVyLCBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2p1bXBUb30uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW92ZWVuZFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge3tvcmlnaW5hbEV2ZW50OiBEcmFnRXZlbnR9fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8ganVzdCBhZnRlciB0aGUgbWFwIGNvbXBsZXRlcyBhIHRyYW5zaXRpb24uXG4gICAgICogbWFwLm9uKCdtb3ZlZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBtb3ZlZW5kIGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqIEBzZWUgW1BsYXkgbWFwIGxvY2F0aW9ucyBhcyBhIHNsaWRlc2hvd10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9wbGF5YmFjay1sb2NhdGlvbnMvKVxuICAgICAqIEBzZWUgW0ZpbHRlciBmZWF0dXJlcyB3aXRoaW4gbWFwIHZpZXddKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZmlsdGVyLWZlYXR1cmVzLXdpdGhpbi1tYXAtdmlldy8pXG4gICAgICogQHNlZSBbRGlzcGxheSBIVE1MIGNsdXN0ZXJzIHdpdGggY3VzdG9tIHByb3BlcnRpZXNdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2NsdXN0ZXItaHRtbC8pXG4gICAgICovXG4gICAgfCAnbW92ZWVuZCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBcImRyYWcgdG8gcGFuXCIgaW50ZXJhY3Rpb24gc3RhcnRzLiBTZWUge0BsaW5rIERyYWdQYW5IYW5kbGVyfS5cbiAgICAgKlxuICAgICAqIEBldmVudCBkcmFnc3RhcnRcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHt7b3JpZ2luYWxFdmVudDogRHJhZ0V2ZW50fX0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHdoZW4gYSBcImRyYWcgdG8gcGFuXCIgaW50ZXJhY3Rpb24gc3RhcnRzLlxuICAgICAqIG1hcC5vbignZHJhZ3N0YXJ0JywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBkcmFnc3RhcnQgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnZHJhZ3N0YXJ0J1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgcmVwZWF0ZWRseSBkdXJpbmcgYSBcImRyYWcgdG8gcGFuXCIgaW50ZXJhY3Rpb24uIFNlZSB7QGxpbmsgRHJhZ1BhbkhhbmRsZXJ9LlxuICAgICAqXG4gICAgICogQGV2ZW50IGRyYWdcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHJlcGVhdGVkbHkgIGR1cmluZyBhIFwiZHJhZyB0byBwYW5cIiBpbnRlcmFjdGlvbi5cbiAgICAgKiBtYXAub24oJ2RyYWcnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIGRyYWcgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnZHJhZydcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBcImRyYWcgdG8gcGFuXCIgaW50ZXJhY3Rpb24gZW5kcy4gU2VlIHtAbGluayBEcmFnUGFuSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZHJhZ2VuZFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge3tvcmlnaW5hbEV2ZW50OiBEcmFnRXZlbnR9fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gd2hlbiBhIFwiZHJhZyB0byBwYW5cIiBpbnRlcmFjdGlvbiBlbmRzLlxuICAgICAqIG1hcC5vbignZHJhZ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgZHJhZ2VuZCBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgbWFya2VyXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9kcmFnLWEtbWFya2VyLylcbiAgICAgKi9cbiAgICB8ICdkcmFnZW5kJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQganVzdCBiZWZvcmUgdGhlIG1hcCBiZWdpbnMgYSB0cmFuc2l0aW9uIGZyb20gb25lIHpvb20gbGV2ZWwgdG8gYW5vdGhlcixcbiAgICAgKiBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2ZseVRvfS5cbiAgICAgKlxuICAgICAqIEBldmVudCB6b29tc3RhcnRcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIGp1c3QgYmVmb3JlIGEgem9vbSB0cmFuc2l0aW9uIHN0YXJ0cy5cbiAgICAgKiBtYXAub24oJ3pvb21zdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egem9vbXN0YXJ0IGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ3pvb21zdGFydCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHJlcGVhdGVkbHkgZHVyaW5nIGFuIGFuaW1hdGVkIHRyYW5zaXRpb24gZnJvbSBvbmUgem9vbSBsZXZlbCB0byBhbm90aGVyLFxuICAgICAqIGFzIHRoZSByZXN1bHQgb2YgZWl0aGVyIHVzZXIgaW50ZXJhY3Rpb24gb3IgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBNYXAjZmx5VG99LlxuICAgICAqXG4gICAgICogQGV2ZW50IHpvb21cbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHJlcGVhdGVkbHkgZHVyaW5nIGEgem9vbSB0cmFuc2l0aW9uLlxuICAgICAqIG1hcC5vbignem9vbScsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egem9vbSBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtVcGRhdGUgYSBjaG9yb3BsZXRoIGxheWVyIGJ5IHpvb20gbGV2ZWxdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvdXBkYXRpbmctY2hvcm9wbGV0aC8pXG4gICAgICovXG4gICAgfCAnem9vbSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGp1c3QgYWZ0ZXIgdGhlIG1hcCBjb21wbGV0ZXMgYSB0cmFuc2l0aW9uIGZyb20gb25lIHpvb20gbGV2ZWwgdG8gYW5vdGhlcixcbiAgICAgKiBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2ZseVRvfS5cbiAgICAgKlxuICAgICAqIEBldmVudCB6b29tZW5kXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyBqdXN0IGFmdGVyIGEgem9vbSB0cmFuc2l0aW9uIGZpbmlzaGVzLlxuICAgICAqIG1hcC5vbignem9vbWVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egem9vbWVuZCBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICd6b29tZW5kJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiBzdGFydHMuIFNlZSB7QGxpbmsgRHJhZ1JvdGF0ZUhhbmRsZXJ9LlxuICAgICAqXG4gICAgICogQGV2ZW50IHJvdGF0ZXN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyBqdXN0IGJlZm9yZSBhIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiBzdGFydHMuXG4gICAgICogbWFwLm9uKCdyb3RhdGVzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egcm90YXRlc3RhcnQgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAncm90YXRlc3RhcnQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCByZXBlYXRlZGx5IGR1cmluZyBhIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbi4gU2VlIHtAbGluayBEcmFnUm90YXRlSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgcm90YXRlXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyByZXBlYXRlZGx5IGR1cmluZyBcImRyYWcgdG8gcm90YXRlXCIgaW50ZXJhY3Rpb24uXG4gICAgICogbWFwLm9uKCdyb3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIHJvdGF0ZSBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICdyb3RhdGUnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uIGVuZHMuIFNlZSB7QGxpbmsgRHJhZ1JvdGF0ZUhhbmRsZXJ9LlxuICAgICAqXG4gICAgICogQGV2ZW50IHJvdGF0ZWVuZFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcE1vdXNlRXZlbnQgfCBNYXBUb3VjaEV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8ganVzdCBhZnRlciBhIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiBlbmRzLlxuICAgICAqIG1hcC5vbigncm90YXRlZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSByb3RhdGVlbmQgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAncm90YXRlZW5kJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIG1hcCdzIHBpdGNoICh0aWx0KSBiZWdpbnMgYSBjaGFuZ2UgYXNcbiAgICAgKiB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2ZseVRvfSAuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgcGl0Y2hzdGFydFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcEV2ZW50RGF0YX0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIGp1c3QgYmVmb3JlIGEgcGl0Y2ggKHRpbHQpIHRyYW5zaXRpb24gc3RhcnRzLlxuICAgICAqIG1hcC5vbigncGl0Y2hzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgcGl0Y2hzdGFydCBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICdwaXRjaHN0YXJ0J1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgcmVwZWF0ZWRseSBkdXJpbmcgdGhlIG1hcCdzIHBpdGNoICh0aWx0KSBhbmltYXRpb24gYmV0d2VlblxuICAgICAqIG9uZSBzdGF0ZSBhbmQgYW5vdGhlciBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uXG4gICAgICogb3IgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBNYXAjZmx5VG99LlxuICAgICAqXG4gICAgICogQGV2ZW50IHBpdGNoXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwRXZlbnREYXRhfSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gcmVwZWF0ZWRseSBkdXJpbmcgYSBwaXRjaCAodGlsdCkgdHJhbnNpdGlvbi5cbiAgICAgKiBtYXAub24oJ3BpdGNoJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBwaXRjaCBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICdwaXRjaCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBtYXAncyBwaXRjaCAodGlsdCkgZmluaXNoZXMgY2hhbmdpbmcgYXNcbiAgICAgKiB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2ZseVRvfS5cbiAgICAgKlxuICAgICAqIEBldmVudCBwaXRjaGVuZFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcEV2ZW50RGF0YX0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIGp1c3QgYWZ0ZXIgYSBwaXRjaCAodGlsdCkgdHJhbnNpdGlvbiBlbmRzLlxuICAgICAqIG1hcC5vbigncGl0Y2hlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIHBpdGNoZW5kIGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ3BpdGNoZW5kJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiBzdGFydHMuIFNlZSB7QGxpbmsgQm94Wm9vbUhhbmRsZXJ9LlxuICAgICAqXG4gICAgICogQGV2ZW50IGJveHpvb21zdGFydFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcEJveFpvb21FdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIGp1c3QgYmVmb3JlIGEgXCJib3ggem9vbVwiIGludGVyYWN0aW9uIHN0YXJ0cy5cbiAgICAgKiBtYXAub24oJ2JveHpvb21zdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgYm94em9vbXN0YXJ0IGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ2JveHpvb21zdGFydCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBcImJveCB6b29tXCIgaW50ZXJhY3Rpb24gZW5kcy4gIFNlZSB7QGxpbmsgQm94Wm9vbUhhbmRsZXJ9LlxuICAgICAqXG4gICAgICogQGV2ZW50IGJveHpvb21lbmRcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJvcGVydHkge01hcEJveFpvb21FdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIGp1c3QgYWZ0ZXIgYSBcImJveCB6b29tXCIgaW50ZXJhY3Rpb24gZW5kcy5cbiAgICAgKiBtYXAub24oJ2JveHpvb21lbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIGJveHpvb21lbmQgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnYm94em9vbWVuZCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIHVzZXIgY2FuY2VscyBhIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiwgb3Igd2hlbiB0aGUgYm91bmRpbmcgYm94IGRvZXMgbm90IG1lZXQgdGhlIG1pbmltdW0gc2l6ZSB0aHJlc2hvbGQuXG4gICAgICogU2VlIHtAbGluayBCb3hab29tSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgYm94em9vbWNhbmNlbFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcEJveFpvb21FdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHRoZSB1c2VyIGNhbmNlbHMgYSBcImJveCB6b29tXCIgaW50ZXJhY3Rpb24uXG4gICAgICogbWFwLm9uKCdib3h6b29tY2FuY2VsJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBib3h6b29tY2FuY2VsIGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ2JveHpvb21jYW5jZWwnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgbWFwIGhhcyBiZWVuIHJlc2l6ZWQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgcmVzaXplXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBtYXAgaGFzIGJlZW4gcmVzaXplZC5cbiAgICAgKiBtYXAub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgcmVzaXplIGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ3Jlc2l6ZSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIFdlYkdMIGNvbnRleHQgaXMgbG9zdC5cbiAgICAgKlxuICAgICAqIEBldmVudCB3ZWJnbGNvbnRleHRsb3N0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHdoZW4gdGhlIFdlYkdMIGNvbnRleHQgaXMgbG9zdC5cbiAgICAgKiBtYXAub24oJ3dlYmdsY29udGV4dGxvc3QnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIHdlYmdsY29udGV4dGxvc3QgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnd2ViZ2xjb250ZXh0bG9zdCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIFdlYkdMIGNvbnRleHQgaXMgcmVzdG9yZWQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgd2ViZ2xjb250ZXh0cmVzdG9yZWRcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gd2hlbiB0aGUgV2ViR0wgY29udGV4dCBpcyByZXN0b3JlZC5cbiAgICAgKiBtYXAub24oJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSB3ZWJnbGNvbnRleHRyZXN0b3JlZCBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICd3ZWJnbGNvbnRleHRyZXN0b3JlZCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIGFsbCBuZWNlc3NhcnkgcmVzb3VyY2VzIGhhdmUgYmVlbiBkb3dubG9hZGVkXG4gICAgICogYW5kIHRoZSBmaXJzdCB2aXN1YWxseSBjb21wbGV0ZSByZW5kZXJpbmcgb2YgdGhlIG1hcCBoYXMgb2NjdXJyZWQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbG9hZFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHdoZW4gdGhlIG1hcCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAgICAgKiBtYXAub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIGxvYWQgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICogQHNlZSBbRHJhdyBHZW9KU09OIHBvaW50c10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9nZW9qc29uLW1hcmtlcnMvKVxuICAgICAqIEBzZWUgW0FkZCBsaXZlIHJlYWx0aW1lIGRhdGFdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvbGl2ZS1nZW9qc29uLylcbiAgICAgKiBAc2VlIFtBbmltYXRlIGEgcG9pbnRdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYW5pbWF0ZS1wb2ludC1hbG9uZy1saW5lLylcbiAgICAgKi9cbiAgICB8ICdsb2FkJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIG1hcCBpcyBkcmF3biB0byB0aGUgc2NyZWVuLCBhcyB0aGUgcmVzdWx0IG9mXG4gICAgICpcbiAgICAgKiAtIGEgY2hhbmdlIHRvIHRoZSBtYXAncyBwb3NpdGlvbiwgem9vbSwgcGl0Y2gsIG9yIGJlYXJpbmdcbiAgICAgKiAtIGEgY2hhbmdlIHRvIHRoZSBtYXAncyBzdHlsZVxuICAgICAqIC0gYSBjaGFuZ2UgdG8gYSBHZW9KU09OIHNvdXJjZVxuICAgICAqIC0gdGhlIGxvYWRpbmcgb2YgYSB2ZWN0b3IgdGlsZSwgR2VvSlNPTiBmaWxlLCBnbHlwaCwgb3Igc3ByaXRlXG4gICAgICpcbiAgICAgKiBAZXZlbnQgcmVuZGVyXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIHdoZW5ldmVyIHRoZSBtYXAgaXMgZHJhd24gdG8gdGhlIHNjcmVlbi5cbiAgICAgKiBtYXAub24oJ3JlbmRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgcmVuZGVyIGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ3JlbmRlcidcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGFmdGVyIHRoZSBsYXN0IGZyYW1lIHJlbmRlcmVkIGJlZm9yZSB0aGUgbWFwIGVudGVycyBhblxuICAgICAqIFwiaWRsZVwiIHN0YXRlOlxuICAgICAqXG4gICAgICogLSBObyBjYW1lcmEgdHJhbnNpdGlvbnMgYXJlIGluIHByb2dyZXNzXG4gICAgICogLSBBbGwgY3VycmVudGx5IHJlcXVlc3RlZCB0aWxlcyBoYXZlIGxvYWRlZFxuICAgICAqIC0gQWxsIGZhZGUvdHJhbnNpdGlvbiBhbmltYXRpb25zIGhhdmUgY29tcGxldGVkXG4gICAgICpcbiAgICAgKiBAZXZlbnQgaWRsZVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyBqdXN0IGJlZm9yZSB0aGUgbWFwIGVudGVycyBhbiBcImlkbGVcIiBzdGF0ZS5cbiAgICAgKiBtYXAub24oJ2lkbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIGlkbGUgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnaWRsZSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBtYXAgaGFzIGJlZW4gcmVtb3ZlZCB3aXRoIHtAbGluayBNYXAuZXZlbnQ6cmVtb3ZlfS5cbiAgICAgKlxuICAgICAqIEBldmVudCByZW1vdmVcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8ganVzdCBhZnRlciB0aGUgbWFwIGlzIHJlbW92ZWQuXG4gICAgICogbWFwLm9uKCdyZW1vdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIHJlbW92ZSBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICdyZW1vdmUnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy4gVGhpcyBpcyBHTCBKUydzIHByaW1hcnkgZXJyb3IgcmVwb3J0aW5nXG4gICAgICogbWVjaGFuaXNtLiBXZSB1c2UgYW4gZXZlbnQgaW5zdGVhZCBvZiBgdGhyb3dgIHRvIGJldHRlciBhY2NvbW1vZGF0ZVxuICAgICAqIGFzeW5jcm9ub3VzIG9wZXJhdGlvbnMuIElmIG5vIGxpc3RlbmVycyBhcmUgYm91bmQgdG8gdGhlIGBlcnJvcmAgZXZlbnQsIHRoZVxuICAgICAqIGVycm9yIHdpbGwgYmUgcHJpbnRlZCB0byB0aGUgY29uc29sZS5cbiAgICAgKlxuICAgICAqIEBldmVudCBlcnJvclxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge3tlcnJvcjoge21lc3NhZ2U6IHN0cmluZ319fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gd2hlbiBhbiBlcnJvciBvY2N1cnMuXG4gICAgICogbWFwLm9uKCdlcnJvcicsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgZXJyb3IgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnZXJyb3InXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGFueSBtYXAgZGF0YSBsb2FkcyBvciBjaGFuZ2VzLiBTZWUge0BsaW5rIE1hcERhdGFFdmVudH1cbiAgICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBldmVudCBkYXRhXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwRGF0YUV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gd2hlbiBtYXAgZGF0YSBsb2FkcyBvciBjaGFuZ2VzLlxuICAgICAqIG1hcC5vbignZGF0YScsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0EgZGF0YSBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtEaXNwbGF5IEhUTUwgY2x1c3RlcnMgd2l0aCBjdXN0b20gcHJvcGVydGllc10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvY2x1c3Rlci1odG1sLylcbiAgICAgKi9cbiAgICB8ICdkYXRhJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgbWFwJ3Mgc3R5bGUgbG9hZHMgb3IgY2hhbmdlcy4gU2VlXG4gICAgICoge0BsaW5rIE1hcERhdGFFdmVudH0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgc3R5bGVkYXRhXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwRGF0YUV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gd2hlbiB0aGUgbWFwJ3Mgc3R5bGUgbG9hZHMgb3IgY2hhbmdlcy5cbiAgICAgKiBtYXAub24oJ3N0eWxlZGF0YScsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egc3R5bGVkYXRhIGV2ZW50IG9jY3VycmVkLicpO1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHwgJ3N0eWxlZGF0YSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gb25lIG9mIHRoZSBtYXAncyBzb3VyY2VzIGxvYWRzIG9yIGNoYW5nZXMsIGluY2x1ZGluZyBpZiBhIHRpbGUgYmVsb25naW5nXG4gICAgICogdG8gYSBzb3VyY2UgbG9hZHMgb3IgY2hhbmdlcy4gU2VlIHtAbGluayBNYXBEYXRhRXZlbnR9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQGV2ZW50IHNvdXJjZWRhdGFcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBEYXRhRXZlbnR9IGRhdGFcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEluaXRpYWxpemUgdGhlIG1hcFxuICAgICAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsgLy8gbWFwIG9wdGlvbnMgfSk7XG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAgICAgKiAvLyB3aGVuIG9uZSBvZiB0aGUgbWFwJ3Mgc291cmNlcyBsb2FkcyBvciBjaGFuZ2VzLlxuICAgICAqIG1hcC5vbignc291cmNlZGF0YScsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egc291cmNlZGF0YSBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICdzb3VyY2VkYXRhJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhbnkgbWFwIGRhdGEgKHN0eWxlLCBzb3VyY2UsIHRpbGUsIGV0YykgYmVnaW5zIGxvYWRpbmcgb3JcbiAgICAgKiBjaGFuZ2luZyBhc3luY3Jvbm91c2x5LiBBbGwgYGRhdGFsb2FkaW5nYCBldmVudHMgYXJlIGZvbGxvd2VkIGJ5IGEgYGRhdGFgXG4gICAgICogb3IgYGVycm9yYCBldmVudC4gU2VlIHtAbGluayBNYXBEYXRhRXZlbnR9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQGV2ZW50IGRhdGFsb2FkaW5nXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwRGF0YUV2ZW50fSBkYXRhXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gd2hlbiBhbnkgbWFwIGRhdGEgYmVnaW5zIGxvYWRpbmdcbiAgICAgKiAvLyBvciBjaGFuZ2luZyBhc3luY2hyb25vdXNseS5cbiAgICAgKiBtYXAub24oJ2RhdGFsb2FkaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQSBkYXRhbG9hZGluZyBldmVudCBvY2N1cnJlZC4nKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB8ICdkYXRhbG9hZGluZydcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIG1hcCdzIHN0eWxlIGJlZ2lucyBsb2FkaW5nIG9yIGNoYW5naW5nIGFzeW5jcm9ub3VzbHkuXG4gICAgICogQWxsIGBzdHlsZWRhdGFsb2FkaW5nYCBldmVudHMgYXJlIGZvbGxvd2VkIGJ5IGEgYHN0eWxlZGF0YWBcbiAgICAgKiBvciBgZXJyb3JgIGV2ZW50LiBTZWUge0BsaW5rIE1hcERhdGFFdmVudH0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgc3R5bGVkYXRhbG9hZGluZ1xuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcERhdGFFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIG1hcCdzIHN0eWxlIGJlZ2lucyBsb2FkaW5nIG9yXG4gICAgICogLy8gY2hhbmdpbmcgYXN5bmNyb25vdXNseS5cbiAgICAgKiBtYXAub24oJ3N0eWxlZGF0YWxvYWRpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdBIHN0eWxlZGF0YWxvYWRpbmcgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnc3R5bGVkYXRhbG9hZGluZydcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gb25lIG9mIHRoZSBtYXAncyBzb3VyY2VzIGJlZ2lucyBsb2FkaW5nIG9yIGNoYW5naW5nIGFzeW5jcm9ub3VzbHkuXG4gICAgICogQWxsIGBzb3VyY2VkYXRhbG9hZGluZ2AgZXZlbnRzIGFyZSBmb2xsb3dlZCBieSBhIGBzb3VyY2VkYXRhYCBvciBgZXJyb3JgIGV2ZW50LlxuICAgICAqIFNlZSB7QGxpbmsgTWFwRGF0YUV2ZW50fSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBldmVudCBzb3VyY2VkYXRhbG9hZGluZ1xuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcERhdGFFdmVudH0gZGF0YVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSW5pdGlhbGl6ZSB0aGUgbWFwXG4gICAgICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoeyAvLyBtYXAgb3B0aW9ucyB9KTtcbiAgICAgKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICAgICAqIC8vIG1hcCdzIHNvdXJjZXMgYmVnaW4gbG9hZGluZyBvclxuICAgICAqIC8vIGNoYW5naW5nIGFzeW5jcm9ub3VzbHkuXG4gICAgICogbWFwLm9uKCdzb3VyY2VkYXRhbG9hZGluZycsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egc291cmNlZGF0YWxvYWRpbmcgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICovXG4gICAgfCAnc291cmNlZGF0YWxvYWRpbmcnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGFuIGljb24gb3IgcGF0dGVybiBuZWVkZWQgYnkgdGhlIHN0eWxlIGlzIG1pc3NpbmcuIFRoZSBtaXNzaW5nIGltYWdlIGNhblxuICAgICAqIGJlIGFkZGVkIHdpdGgge0BsaW5rIE1hcCNhZGRJbWFnZX0gd2l0aGluIHRoaXMgZXZlbnQgbGlzdGVuZXIgY2FsbGJhY2sgdG8gcHJldmVudCB0aGUgaW1hZ2UgZnJvbVxuICAgICAqIGJlaW5nIHNraXBwZWQuIFRoaXMgZXZlbnQgY2FuIGJlIHVzZWQgdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgaWNvbnMgYW5kIHBhdHRlcm5zLlxuICAgICAqXG4gICAgICogQGV2ZW50IHN0eWxlaW1hZ2VtaXNzaW5nXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZCBUaGUgaWQgb2YgdGhlIG1pc3NpbmcgaW1hZ2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIHRoZSBtYXBcbiAgICAgKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7IC8vIG1hcCBvcHRpb25zIH0pO1xuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGZpcmVzXG4gICAgICogLy8gYW4gaWNvbiBvciBwYXR0ZXJuIGlzIG1pc3NpbmcuXG4gICAgICogbWFwLm9uKCdzdHlsZWltYWdlbWlzc2luZycsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ0Egc3R5bGVpbWFnZW1pc3NpbmcgZXZlbnQgb2NjdXJyZWQuJyk7XG4gICAgICogfSk7XG4gICAgICogQHNlZSBbR2VuZXJhdGUgYW5kIGFkZCBhIG1pc3NpbmcgaWNvbiB0byB0aGUgbWFwXShodHRwczovL21hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYWRkLWltYWdlLW1pc3NpbmctZ2VuZXJhdGVkLylcbiAgICAgKi9cbiAgICB8ICdzdHlsZWltYWdlbWlzc2luZydcblxuICAgIC8qKlxuICAgICAqIEBldmVudCBzdHlsZS5sb2FkXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgfCAnc3R5bGUubG9hZCc7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge01hcE1vdXNlRXZlbnQsIE1hcFRvdWNoRXZlbnQsIE1hcFdoZWVsRXZlbnR9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcblxuZXhwb3J0IGNsYXNzIE1hcEV2ZW50SGFuZGxlciB7XG5cbiAgICBfbW91c2Vkb3duUG9zOiBQb2ludDtcbiAgICBfY2xpY2tUb2xlcmFuY2U6IG51bWJlcjtcbiAgICBfbWFwOiBNYXA7XG5cbiAgICBjb25zdHJ1Y3RvcihtYXA6IE1hcCwgb3B0aW9uczogeyBjbGlja1RvbGVyYW5jZTogbnVtYmVyIH0pIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICB0aGlzLl9jbGlja1RvbGVyYW5jZSA9IG9wdGlvbnMuY2xpY2tUb2xlcmFuY2U7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tb3VzZWRvd25Qb3M7XG4gICAgfVxuXG4gICAgd2hlZWwoZTogV2hlZWxFdmVudCkge1xuICAgICAgICAvLyBJZiBtYXBFdmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIGNhbGxlZCBieSB0aGUgdXNlciwgcHJldmVudCBoYW5kbGVycyBzdWNoIGFzOlxuICAgICAgICAvLyAtIFNjcm9sbFpvb21cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVQcmV2ZW50YWJsZShuZXcgTWFwV2hlZWxFdmVudChlLnR5cGUsIHRoaXMuX21hcCwgZSkpO1xuICAgIH1cblxuICAgIG1vdXNlZG93bihlOiBNb3VzZUV2ZW50LCBwb2ludDogUG9pbnQpIHtcbiAgICAgICAgdGhpcy5fbW91c2Vkb3duUG9zID0gcG9pbnQ7XG4gICAgICAgIC8vIElmIG1hcEV2ZW50LnByZXZlbnREZWZhdWx0KCkgaXMgY2FsbGVkIGJ5IHRoZSB1c2VyLCBwcmV2ZW50IGhhbmRsZXJzIHN1Y2ggYXM6XG4gICAgICAgIC8vIC0gTW91c2VQYW5cbiAgICAgICAgLy8gLSBNb3VzZVJvdGF0ZVxuICAgICAgICAvLyAtIE1vdXNlUGl0Y2hcbiAgICAgICAgLy8gLSBEYmxjbGlja0hhbmRsZXJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVQcmV2ZW50YWJsZShuZXcgTWFwTW91c2VFdmVudChlLnR5cGUsIHRoaXMuX21hcCwgZSkpO1xuICAgIH1cblxuICAgIG1vdXNldXAoZTogTW91c2VFdmVudCkge1xuICAgICAgICB0aGlzLl9tYXAuZmlyZShuZXcgTWFwTW91c2VFdmVudChlLnR5cGUsIHRoaXMuX21hcCwgZSkpO1xuICAgIH1cblxuICAgIGNsaWNrKGU6IE1vdXNlRXZlbnQsIHBvaW50OiBQb2ludCkge1xuICAgICAgICBpZiAodGhpcy5fbW91c2Vkb3duUG9zICYmIHRoaXMuX21vdXNlZG93blBvcy5kaXN0KHBvaW50KSA+PSB0aGlzLl9jbGlja1RvbGVyYW5jZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9tYXAuZmlyZShuZXcgTWFwTW91c2VFdmVudChlLnR5cGUsIHRoaXMuX21hcCwgZSkpO1xuICAgIH1cblxuICAgIGRibGNsaWNrKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgLy8gSWYgbWFwRXZlbnQucHJldmVudERlZmF1bHQoKSBpcyBjYWxsZWQgYnkgdGhlIHVzZXIsIHByZXZlbnQgaGFuZGxlcnMgc3VjaCBhczpcbiAgICAgICAgLy8gLSBEYmxDbGlja1pvb21cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcmVQcmV2ZW50YWJsZShuZXcgTWFwTW91c2VFdmVudChlLnR5cGUsIHRoaXMuX21hcCwgZSkpO1xuICAgIH1cblxuICAgIG1vdXNlb3ZlcihlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBNYXBNb3VzZUV2ZW50KGUudHlwZSwgdGhpcy5fbWFwLCBlKSk7XG4gICAgfVxuXG4gICAgbW91c2VvdXQoZTogTW91c2VFdmVudCkge1xuICAgICAgICB0aGlzLl9tYXAuZmlyZShuZXcgTWFwTW91c2VFdmVudChlLnR5cGUsIHRoaXMuX21hcCwgZSkpO1xuICAgIH1cblxuICAgIHRvdWNoc3RhcnQoZTogVG91Y2hFdmVudCkge1xuICAgICAgICAvLyBJZiBtYXBFdmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIGNhbGxlZCBieSB0aGUgdXNlciwgcHJldmVudCBoYW5kbGVycyBzdWNoIGFzOlxuICAgICAgICAvLyAtIFRvdWNoUGFuXG4gICAgICAgIC8vIC0gVG91Y2hab29tXG4gICAgICAgIC8vIC0gVG91Y2hSb3RhdGVcbiAgICAgICAgLy8gLSBUb3VjaFBpdGNoXG4gICAgICAgIC8vIC0gVGFwWm9vbVxuICAgICAgICAvLyAtIFN3aXBlWm9vbVxuICAgICAgICByZXR1cm4gdGhpcy5fZmlyZVByZXZlbnRhYmxlKG5ldyBNYXBUb3VjaEV2ZW50KGUudHlwZSwgdGhpcy5fbWFwLCBlKSk7XG4gICAgfVxuXG4gICAgdG91Y2htb3ZlKGU6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fbWFwLmZpcmUobmV3IE1hcFRvdWNoRXZlbnQoZS50eXBlLCB0aGlzLl9tYXAsIGUpKTtcbiAgICB9XG5cbiAgICB0b3VjaGVuZChlOiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBNYXBUb3VjaEV2ZW50KGUudHlwZSwgdGhpcy5fbWFwLCBlKSk7XG4gICAgfVxuXG4gICAgdG91Y2hjYW5jZWwoZTogVG91Y2hFdmVudCkge1xuICAgICAgICB0aGlzLl9tYXAuZmlyZShuZXcgTWFwVG91Y2hFdmVudChlLnR5cGUsIHRoaXMuX21hcCwgZSkpO1xuICAgIH1cblxuICAgIF9maXJlUHJldmVudGFibGUobWFwRXZlbnQ6IE1hcE1vdXNlRXZlbnQgfCBNYXBUb3VjaEV2ZW50IHwgTWFwV2hlZWxFdmVudCkge1xuICAgICAgICB0aGlzLl9tYXAuZmlyZShtYXBFdmVudCk7XG4gICAgICAgIGlmIChtYXBFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAvLyByZXR1cm5pbmcgYW4gb2JqZWN0IG1hcmtzIHRoZSBoYW5kbGVyIGFzIGFjdGl2ZSBhbmQgcmVzZXRzIG90aGVyIGhhbmRsZXJzXG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVuYWJsZSgpIHt9XG4gICAgZGlzYWJsZSgpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBCbG9ja2FibGVNYXBFdmVudEhhbmRsZXIge1xuICAgIF9tYXA6IE1hcDtcbiAgICBfZGVsYXlDb250ZXh0TWVudTogYm9vbGVhbjtcbiAgICBfY29udGV4dE1lbnVFdmVudDogTW91c2VFdmVudDtcblxuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fZGVsYXlDb250ZXh0TWVudSA9IGZhbHNlO1xuICAgICAgICBkZWxldGUgdGhpcy5fY29udGV4dE1lbnVFdmVudDtcbiAgICB9XG5cbiAgICBtb3VzZW1vdmUoZTogTW91c2VFdmVudCkge1xuICAgICAgICAvLyBtb3VzZW1vdmUgbWFwIGV2ZW50cyBzaG91bGQgbm90IGJlIGZpcmVkIHdoZW4gaW50ZXJhY3Rpb24gaGFuZGxlcnMgKHBhbiwgcm90YXRlLCBldGMpIGFyZSBhY3RpdmVcbiAgICAgICAgdGhpcy5fbWFwLmZpcmUobmV3IE1hcE1vdXNlRXZlbnQoZS50eXBlLCB0aGlzLl9tYXAsIGUpKTtcbiAgICB9XG5cbiAgICBtb3VzZWRvd24oKSB7XG4gICAgICAgIHRoaXMuX2RlbGF5Q29udGV4dE1lbnUgPSB0cnVlO1xuICAgIH1cblxuICAgIG1vdXNldXAoKSB7XG4gICAgICAgIHRoaXMuX2RlbGF5Q29udGV4dE1lbnUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRleHRNZW51RXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBNYXBNb3VzZUV2ZW50KCdjb250ZXh0bWVudScsIHRoaXMuX21hcCwgdGhpcy5fY29udGV4dE1lbnVFdmVudCkpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NvbnRleHRNZW51RXZlbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29udGV4dG1lbnUoZTogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5fZGVsYXlDb250ZXh0TWVudSkge1xuICAgICAgICAgICAgLy8gTWFjOiBjb250ZXh0bWVudSBmaXJlZCBvbiBtb3VzZWRvd247IHdlIHNhdmUgaXQgdW50aWwgbW91c2V1cCBmb3IgY29uc2lzdGVuY3kncyBzYWtlXG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0TWVudUV2ZW50ID0gZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdpbmRvd3M6IGNvbnRleHRtZW51IGZpcmVkIG9uIG1vdXNldXAsIHNvIGZpcmUgZXZlbnQgbm93XG4gICAgICAgICAgICB0aGlzLl9tYXAuZmlyZShuZXcgTWFwTW91c2VFdmVudChlLnR5cGUsIHRoaXMuX21hcCwgZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJldmVudCBicm93c2VyIGNvbnRleHQgbWVudSB3aGVuIG5lY2Vzc2FyeVxuICAgICAgICBpZiAodGhpcy5fbWFwLmxpc3RlbnMoJ2NvbnRleHRtZW51JykpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZW5hYmxlKCkge31cbiAgICBkaXNhYmxlKCkge31cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBET00gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuXG5pbXBvcnQge0V2ZW50fSBmcm9tICcuLi8uLi91dGlsL2V2ZW50ZWQnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcblxuLyoqXG4gKiBUaGUgYEJveFpvb21IYW5kbGVyYCBhbGxvd3MgdGhlIHVzZXIgdG8gem9vbSB0aGUgbWFwIHRvIGZpdCB3aXRoaW4gYSBib3VuZGluZyBib3guXG4gKiBUaGUgYm91bmRpbmcgYm94IGlzIGRlZmluZWQgYnkgY2xpY2tpbmcgYW5kIGhvbGRpbmcgYHNoaWZ0YCB3aGlsZSBkcmFnZ2luZyB0aGUgY3Vyc29yLlxuICovXG5jbGFzcyBCb3hab29tSGFuZGxlciB7XG4gICAgX21hcDogTWFwO1xuICAgIF9lbDogSFRNTEVsZW1lbnQ7XG4gICAgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgX2VuYWJsZWQ6IGJvb2xlYW47XG4gICAgX2FjdGl2ZTogYm9vbGVhbjtcbiAgICBfc3RhcnRQb3M6IFBvaW50O1xuICAgIF9sYXN0UG9zOiBQb2ludDtcbiAgICBfYm94OiBIVE1MRWxlbWVudDtcbiAgICBfY2xpY2tUb2xlcmFuY2U6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWFwOiBNYXAsIG9wdGlvbnM6IHtcbiAgICAgICAgY2xpY2tUb2xlcmFuY2U6IG51bWJlclxuICAgIH0pIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICB0aGlzLl9lbCA9IG1hcC5nZXRDYW52YXNDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gbWFwLmdldENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLl9jbGlja1RvbGVyYW5jZSA9IG9wdGlvbnMuY2xpY2tUb2xlcmFuY2UgfHwgMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgXCJib3ggem9vbVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9lbmFibGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgXCJib3ggem9vbVwiIGludGVyYWN0aW9uIGlzIGFjdGl2ZSwgaS5lLiBjdXJyZW50bHkgYmVpbmcgdXNlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2FjdGl2ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSBcImJveCB6b29tXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLmJveFpvb20uZW5hYmxlKCk7XG4gICAgICovXG4gICAgZW5hYmxlKCkge1xuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgXCJib3ggem9vbVwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIG1hcC5ib3hab29tLmRpc2FibGUoKTtcbiAgICAgKi9cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIG1vdXNlZG93bihlOiBNb3VzZUV2ZW50LCBwb2ludDogUG9pbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgICAgIGlmICghKGUuc2hpZnRLZXkgJiYgZS5idXR0b24gPT09IDApKSByZXR1cm47XG5cbiAgICAgICAgRE9NLmRpc2FibGVEcmFnKCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zID0gdGhpcy5fbGFzdFBvcyA9IHBvaW50O1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIG1vdXNlbW92ZVdpbmRvdyhlOiBNb3VzZUV2ZW50LCBwb2ludDogUG9pbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmUpIHJldHVybjtcblxuICAgICAgICBjb25zdCBwb3MgPSBwb2ludDtcblxuICAgICAgICBpZiAodGhpcy5fbGFzdFBvcy5lcXVhbHMocG9zKSB8fCAoIXRoaXMuX2JveCAmJiBwb3MuZGlzdCh0aGlzLl9zdGFydFBvcykgPCB0aGlzLl9jbGlja1RvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHAwID0gdGhpcy5fc3RhcnRQb3M7XG4gICAgICAgIHRoaXMuX2xhc3RQb3MgPSBwb3M7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9ib3gpIHtcbiAgICAgICAgICAgIHRoaXMuX2JveCA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC1ib3h6b29tJywgdGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jcm9zc2hhaXInKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnYm94em9vbXN0YXJ0JywgZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtaW5YID0gTWF0aC5taW4ocDAueCwgcG9zLngpLFxuICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KHAwLngsIHBvcy54KSxcbiAgICAgICAgICAgIG1pblkgPSBNYXRoLm1pbihwMC55LCBwb3MueSksXG4gICAgICAgICAgICBtYXhZID0gTWF0aC5tYXgocDAueSwgcG9zLnkpO1xuXG4gICAgICAgIERPTS5zZXRUcmFuc2Zvcm0odGhpcy5fYm94LCBgdHJhbnNsYXRlKCR7bWluWH1weCwke21pbll9cHgpYCk7XG5cbiAgICAgICAgdGhpcy5fYm94LnN0eWxlLndpZHRoID0gYCR7bWF4WCAtIG1pblh9cHhgO1xuICAgICAgICB0aGlzLl9ib3guc3R5bGUuaGVpZ2h0ID0gYCR7bWF4WSAtIG1pbll9cHhgO1xuICAgIH1cblxuICAgIG1vdXNldXBXaW5kb3coZTogTW91c2VFdmVudCwgcG9pbnQ6IFBvaW50KSB7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGUuYnV0dG9uICE9PSAwKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcDAgPSB0aGlzLl9zdGFydFBvcyxcbiAgICAgICAgICAgIHAxID0gcG9pbnQ7XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgIERPTS5zdXBwcmVzc0NsaWNrKCk7XG5cbiAgICAgICAgaWYgKHAwLnggPT09IHAxLnggJiYgcDAueSA9PT0gcDEueSkge1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdib3h6b29tY2FuY2VsJywgZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAuZmlyZShuZXcgRXZlbnQoJ2JveHpvb21lbmQnLCB7b3JpZ2luYWxFdmVudDogZX0pKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY2FtZXJhQW5pbWF0aW9uOiBtYXAgPT4gbWFwLmZpdFNjcmVlbkNvb3JkaW5hdGVzKHAwLCBwMSwgdGhpcy5fbWFwLmdldEJlYXJpbmcoKSwge2xpbmVhcjogdHJ1ZX0pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAga2V5ZG93bihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnYm94em9vbWNhbmNlbCcsIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jcm9zc2hhaXInKTtcblxuICAgICAgICBpZiAodGhpcy5fYm94KSB7XG4gICAgICAgICAgICBET00ucmVtb3ZlKHRoaXMuX2JveCk7XG4gICAgICAgICAgICB0aGlzLl9ib3ggPSAobnVsbDogYW55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIERPTS5lbmFibGVEcmFnKCk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMuX3N0YXJ0UG9zO1xuICAgICAgICBkZWxldGUgdGhpcy5fbGFzdFBvcztcbiAgICB9XG5cbiAgICBfZmlyZUV2ZW50KHR5cGU6IHN0cmluZywgZTogKikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwLmZpcmUobmV3IEV2ZW50KHR5cGUsIHtvcmlnaW5hbEV2ZW50OiBlfSkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQm94Wm9vbUhhbmRsZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleFRvdWNoZXModG91Y2hlczogQXJyYXk8VG91Y2g+LCBwb2ludHM6IEFycmF5PFBvaW50Pikge1xuICAgIGFzc2VydCh0b3VjaGVzLmxlbmd0aCA9PT0gcG9pbnRzLmxlbmd0aCk7XG4gICAgY29uc3Qgb2JqID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG9ialt0b3VjaGVzW2ldLmlkZW50aWZpZXJdID0gcG9pbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHtpbmRleFRvdWNoZXN9IGZyb20gJy4vaGFuZGxlcl91dGlsJztcblxuZnVuY3Rpb24gZ2V0Q2VudHJvaWQocG9pbnRzOiBBcnJheTxQb2ludD4pIHtcbiAgICBjb25zdCBzdW0gPSBuZXcgUG9pbnQoMCwgMCk7XG4gICAgZm9yIChjb25zdCBwb2ludCBvZiBwb2ludHMpIHtcbiAgICAgICAgc3VtLl9hZGQocG9pbnQpO1xuICAgIH1cbiAgICByZXR1cm4gc3VtLmRpdihwb2ludHMubGVuZ3RoKTtcbn1cblxuZXhwb3J0IGNvbnN0IE1BWF9UQVBfSU5URVJWQUwgPSA1MDA7XG5jb25zdCBNQVhfVE9VQ0hfVElNRSA9IDUwMDtcbmNvbnN0IE1BWF9ESVNUID0gMzA7XG5cbmV4cG9ydCBjbGFzcyBTaW5nbGVUYXBSZWNvZ25pemVyIHtcblxuICAgIG51bVRvdWNoZXM6IG51bWJlcjtcbiAgICBjZW50cm9pZDogUG9pbnQ7XG4gICAgc3RhcnRUaW1lOiBudW1iZXI7XG4gICAgYWJvcnRlZDogYm9vbGVhbjtcbiAgICB0b3VjaGVzOiB7IFtudW1iZXIgfCBzdHJpbmddOiBQb2ludCB9O1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogeyBudW1Ub3VjaGVzOiBudW1iZXIgfSkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMubnVtVG91Y2hlcyA9IG9wdGlvbnMubnVtVG91Y2hlcztcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuY2VudHJvaWQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnN0YXJ0VGltZTtcbiAgICAgICAgZGVsZXRlIHRoaXMudG91Y2hlcztcbiAgICAgICAgdGhpcy5hYm9ydGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdG91Y2hzdGFydChlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSB7XG5cbiAgICAgICAgaWYgKHRoaXMuY2VudHJvaWQgfHwgbWFwVG91Y2hlcy5sZW5ndGggPiB0aGlzLm51bVRvdWNoZXMpIHtcbiAgICAgICAgICAgIHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYWJvcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhcnRUaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gZS50aW1lU3RhbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwVG91Y2hlcy5sZW5ndGggPT09IHRoaXMubnVtVG91Y2hlcykge1xuICAgICAgICAgICAgdGhpcy5jZW50cm9pZCA9IGdldENlbnRyb2lkKHBvaW50cyk7XG4gICAgICAgICAgICB0aGlzLnRvdWNoZXMgPSBpbmRleFRvdWNoZXMobWFwVG91Y2hlcywgcG9pbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvdWNobW92ZShlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSB7XG4gICAgICAgIGlmICh0aGlzLmFib3J0ZWQgfHwgIXRoaXMuY2VudHJvaWQpIHJldHVybjtcblxuICAgICAgICBjb25zdCBuZXdUb3VjaGVzID0gaW5kZXhUb3VjaGVzKG1hcFRvdWNoZXMsIHBvaW50cyk7XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy50b3VjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2UG9zID0gdGhpcy50b3VjaGVzW2lkXTtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IG5ld1RvdWNoZXNbaWRdO1xuICAgICAgICAgICAgaWYgKCFwb3MgfHwgcG9zLmRpc3QocHJldlBvcykgPiBNQVhfRElTVCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b3VjaGVuZChlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSB7XG4gICAgICAgIGlmICghdGhpcy5jZW50cm9pZCB8fCBlLnRpbWVTdGFtcCAtIHRoaXMuc3RhcnRUaW1lID4gTUFYX1RPVUNIX1RJTUUpIHtcbiAgICAgICAgICAgIHRoaXMuYWJvcnRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWFwVG91Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRyb2lkID0gIXRoaXMuYWJvcnRlZCAmJiB0aGlzLmNlbnRyb2lkO1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgaWYgKGNlbnRyb2lkKSByZXR1cm4gY2VudHJvaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIFRhcFJlY29nbml6ZXIge1xuXG4gICAgc2luZ2xlVGFwOiBTaW5nbGVUYXBSZWNvZ25pemVyO1xuICAgIG51bVRhcHM6IG51bWJlcjtcbiAgICBsYXN0VGltZTogbnVtYmVyO1xuICAgIGxhc3RUYXA6IFBvaW50O1xuICAgIGNvdW50OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7IG51bVRhcHM6IG51bWJlciwgbnVtVG91Y2hlczogbnVtYmVyIH0pIHtcbiAgICAgICAgdGhpcy5zaW5nbGVUYXAgPSBuZXcgU2luZ2xlVGFwUmVjb2duaXplcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5udW1UYXBzID0gb3B0aW9ucy5udW1UYXBzO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSBJbmZpbml0eTtcbiAgICAgICAgZGVsZXRlIHRoaXMubGFzdFRhcDtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuc2luZ2xlVGFwLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgdG91Y2hzdGFydChlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSB7XG4gICAgICAgIHRoaXMuc2luZ2xlVGFwLnRvdWNoc3RhcnQoZSwgcG9pbnRzLCBtYXBUb3VjaGVzKTtcbiAgICB9XG5cbiAgICB0b3VjaG1vdmUoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikge1xuICAgICAgICB0aGlzLnNpbmdsZVRhcC50b3VjaG1vdmUoZSwgcG9pbnRzLCBtYXBUb3VjaGVzKTtcbiAgICB9XG5cbiAgICB0b3VjaGVuZChlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSB7XG4gICAgICAgIGNvbnN0IHRhcCA9IHRoaXMuc2luZ2xlVGFwLnRvdWNoZW5kKGUsIHBvaW50cywgbWFwVG91Y2hlcyk7XG4gICAgICAgIGlmICh0YXApIHtcbiAgICAgICAgICAgIGNvbnN0IHNvb25Fbm91Z2ggPSBlLnRpbWVTdGFtcCAtIHRoaXMubGFzdFRpbWUgPCBNQVhfVEFQX0lOVEVSVkFMO1xuICAgICAgICAgICAgY29uc3QgY2xvc2VFbm91Z2ggPSAhdGhpcy5sYXN0VGFwIHx8IHRoaXMubGFzdFRhcC5kaXN0KHRhcCkgPCBNQVhfRElTVDtcblxuICAgICAgICAgICAgaWYgKCFzb29uRW5vdWdoIHx8ICFjbG9zZUVub3VnaCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICAgICAgdGhpcy5sYXN0VGltZSA9IGUudGltZVN0YW1wO1xuICAgICAgICAgICAgdGhpcy5sYXN0VGFwID0gdGFwO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb3VudCA9PT0gdGhpcy5udW1UYXBzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge1RhcFJlY29nbml6ZXJ9IGZyb20gJy4vdGFwX3JlY29nbml6ZXInO1xuaW1wb3J0IHR5cGUgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFwWm9vbUhhbmRsZXIge1xuXG4gICAgX2VuYWJsZWQ6IGJvb2xlYW47XG4gICAgX2FjdGl2ZTogYm9vbGVhbjtcbiAgICBfem9vbUluOiBUYXBSZWNvZ25pemVyO1xuICAgIF96b29tT3V0OiBUYXBSZWNvZ25pemVyO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3pvb21JbiA9IG5ldyBUYXBSZWNvZ25pemVyKHtcbiAgICAgICAgICAgIG51bVRvdWNoZXM6IDEsXG4gICAgICAgICAgICBudW1UYXBzOiAyXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3pvb21PdXQgPSBuZXcgVGFwUmVjb2duaXplcih7XG4gICAgICAgICAgICBudW1Ub3VjaGVzOiAyLFxuICAgICAgICAgICAgbnVtVGFwczogMVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl96b29tSW4ucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fem9vbU91dC5yZXNldCgpO1xuICAgIH1cblxuICAgIHRvdWNoc3RhcnQoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikge1xuICAgICAgICB0aGlzLl96b29tSW4udG91Y2hzdGFydChlLCBwb2ludHMsIG1hcFRvdWNoZXMpO1xuICAgICAgICB0aGlzLl96b29tT3V0LnRvdWNoc3RhcnQoZSwgcG9pbnRzLCBtYXBUb3VjaGVzKTtcbiAgICB9XG5cbiAgICB0b3VjaG1vdmUoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikge1xuICAgICAgICB0aGlzLl96b29tSW4udG91Y2htb3ZlKGUsIHBvaW50cywgbWFwVG91Y2hlcyk7XG4gICAgICAgIHRoaXMuX3pvb21PdXQudG91Y2htb3ZlKGUsIHBvaW50cywgbWFwVG91Y2hlcyk7XG4gICAgfVxuXG4gICAgdG91Y2hlbmQoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikge1xuICAgICAgICBjb25zdCB6b29tSW5Qb2ludCA9IHRoaXMuX3pvb21Jbi50b3VjaGVuZChlLCBwb2ludHMsIG1hcFRvdWNoZXMpO1xuICAgICAgICBjb25zdCB6b29tT3V0UG9pbnQgPSB0aGlzLl96b29tT3V0LnRvdWNoZW5kKGUsIHBvaW50cywgbWFwVG91Y2hlcyk7XG5cbiAgICAgICAgaWYgKHpvb21JblBvaW50KSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlc2V0KCksIDApO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjYW1lcmFBbmltYXRpb246IChtYXA6IE1hcCkgPT4gbWFwLmVhc2VUbyh7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICAgICAgICAgIHpvb206IG1hcC5nZXRab29tKCkgKyAxLFxuICAgICAgICAgICAgICAgICAgICBhcm91bmQ6IG1hcC51bnByb2plY3Qoem9vbUluUG9pbnQpXG4gICAgICAgICAgICAgICAgfSwge29yaWdpbmFsRXZlbnQ6IGV9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh6b29tT3V0UG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVzZXQoKSwgMCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNhbWVyYUFuaW1hdGlvbjogKG1hcDogTWFwKSA9PiBtYXAuZWFzZVRvKHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgem9vbTogbWFwLmdldFpvb20oKSAtIDEsXG4gICAgICAgICAgICAgICAgICAgIGFyb3VuZDogbWFwLnVucHJvamVjdCh6b29tT3V0UG9pbnQpXG4gICAgICAgICAgICAgICAgfSwge29yaWdpbmFsRXZlbnQ6IGV9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvdWNoY2FuY2VsKCkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgZW5hYmxlKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVkO1xuICAgIH1cblxuICAgIGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBET00gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuaW1wb3J0IHR5cGUgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5cbmNvbnN0IExFRlRfQlVUVE9OID0gMDtcbmNvbnN0IFJJR0hUX0JVVFRPTiA9IDI7XG5cbi8vIHRoZSB2YWx1ZXMgZm9yIGVhY2ggYnV0dG9uIGluIE1vdXNlRXZlbnQuYnV0dG9uc1xuY29uc3QgQlVUVE9OU19GTEFHUyA9IHtcbiAgICBbTEVGVF9CVVRUT05dOiAxLFxuICAgIFtSSUdIVF9CVVRUT05dOiAyXG59O1xuXG5mdW5jdGlvbiBidXR0b25TdGlsbFByZXNzZWQoZTogTW91c2VFdmVudCwgYnV0dG9uOiBudW1iZXIpIHtcbiAgICBjb25zdCBmbGFnID0gQlVUVE9OU19GTEFHU1tidXR0b25dO1xuICAgIHJldHVybiBlLmJ1dHRvbnMgPT09IHVuZGVmaW5lZCB8fCAoZS5idXR0b25zICYgZmxhZykgIT09IGZsYWc7XG59XG5cbmNsYXNzIE1vdXNlSGFuZGxlciB7XG5cbiAgICBfZW5hYmxlZDogYm9vbGVhbjtcbiAgICBfYWN0aXZlOiBib29sZWFuO1xuICAgIF9sYXN0UG9pbnQ6IFBvaW50O1xuICAgIF9ldmVudEJ1dHRvbjogbnVtYmVyO1xuICAgIF9tb3ZlZDogYm9vbGVhbjtcbiAgICBfY2xpY2tUb2xlcmFuY2U6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHsgY2xpY2tUb2xlcmFuY2U6IG51bWJlciB9KSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fY2xpY2tUb2xlcmFuY2UgPSBvcHRpb25zLmNsaWNrVG9sZXJhbmNlIHx8IDE7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9tb3ZlZCA9IGZhbHNlO1xuICAgICAgICBkZWxldGUgdGhpcy5fbGFzdFBvaW50O1xuICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRCdXR0b247XG4gICAgfVxuXG4gICAgX2NvcnJlY3RCdXR0b24oZTogTW91c2VFdmVudCwgYnV0dG9uOiBudW1iZXIpIHsgIC8vZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGltcGxlbWVudGVkIGJ5IGNoaWxkXG4gICAgfVxuXG4gICAgX21vdmUobGFzdFBvaW50OiBQb2ludCwgcG9pbnQ6IFBvaW50KSB7ICAvL2VzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmV0dXJuIHt9OyAvLyBpbXBsZW1lbnRlZCBieSBjaGlsZFxuICAgIH1cblxuICAgIG1vdXNlZG93bihlOiBNb3VzZUV2ZW50LCBwb2ludDogUG9pbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xhc3RQb2ludCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGV2ZW50QnV0dG9uID0gRE9NLm1vdXNlQnV0dG9uKGUpO1xuICAgICAgICBpZiAoIXRoaXMuX2NvcnJlY3RCdXR0b24oZSwgZXZlbnRCdXR0b24pKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fbGFzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgIHRoaXMuX2V2ZW50QnV0dG9uID0gZXZlbnRCdXR0b247XG4gICAgfVxuXG4gICAgbW91c2Vtb3ZlV2luZG93KGU6IE1vdXNlRXZlbnQsIHBvaW50OiBQb2ludCkge1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSB0aGlzLl9sYXN0UG9pbnQ7XG4gICAgICAgIGlmICghbGFzdFBvaW50KSByZXR1cm47XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoYnV0dG9uU3RpbGxQcmVzc2VkKGUsIHRoaXMuX2V2ZW50QnV0dG9uKSkge1xuICAgICAgICAgICAgLy8gU29tZSBicm93c2VycyBkb24ndCBmaXJlIGEgYG1vdXNldXBgIHdoZW4gdGhlIG1vdXNldXAgb2NjdXJzIG91dHNpZGVcbiAgICAgICAgICAgIC8vIHRoZSB3aW5kb3cgb3IgaWZyYW1lOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtanMvaXNzdWVzLzQ2MjJcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBJZiB0aGUgYnV0dG9uIGlzIG5vIGxvbmdlciBwcmVzc2VkIGR1cmluZyB0aGlzIGBtb3VzZW1vdmVgIGl0IG1heSBoYXZlXG4gICAgICAgICAgICAvLyBiZWVuIHJlbGVhc2VkIG91dHNpZGUgb2YgdGhlIHdpbmRvdyBvciBpZnJhbWUuXG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21vdmVkICYmIHBvaW50LmRpc3QobGFzdFBvaW50KSA8IHRoaXMuX2NsaWNrVG9sZXJhbmNlKSByZXR1cm47XG4gICAgICAgIHRoaXMuX21vdmVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fbGFzdFBvaW50ID0gcG9pbnQ7XG5cbiAgICAgICAgLy8gaW1wbGVtZW50ZWQgYnkgY2hpbGQgY2xhc3NcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vdmUobGFzdFBvaW50LCBwb2ludCk7XG4gICAgfVxuXG4gICAgbW91c2V1cFdpbmRvdyhlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5fbGFzdFBvaW50KSByZXR1cm47XG4gICAgICAgIGNvbnN0IGV2ZW50QnV0dG9uID0gRE9NLm1vdXNlQnV0dG9uKGUpO1xuICAgICAgICBpZiAoZXZlbnRCdXR0b24gIT09IHRoaXMuX2V2ZW50QnV0dG9uKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLl9tb3ZlZCkgRE9NLnN1cHByZXNzQ2xpY2soKTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZDtcbiAgICB9XG5cbiAgICBpc0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb3VzZVBhbkhhbmRsZXIgZXh0ZW5kcyBNb3VzZUhhbmRsZXIge1xuXG4gICAgbW91c2Vkb3duKGU6IE1vdXNlRXZlbnQsIHBvaW50OiBQb2ludCkge1xuICAgICAgICBzdXBlci5tb3VzZWRvd24oZSwgcG9pbnQpO1xuICAgICAgICBpZiAodGhpcy5fbGFzdFBvaW50KSB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgIH1cbiAgICBfY29ycmVjdEJ1dHRvbihlOiBNb3VzZUV2ZW50LCBidXR0b246IG51bWJlcikge1xuICAgICAgICByZXR1cm4gYnV0dG9uID09PSBMRUZUX0JVVFRPTiAmJiAhZS5jdHJsS2V5O1xuICAgIH1cblxuICAgIF9tb3ZlKGxhc3RQb2ludDogUG9pbnQsIHBvaW50OiBQb2ludCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXJvdW5kOiBwb2ludCxcbiAgICAgICAgICAgIHBhbkRlbHRhOiBwb2ludC5zdWIobGFzdFBvaW50KVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vdXNlUm90YXRlSGFuZGxlciBleHRlbmRzIE1vdXNlSGFuZGxlciB7XG4gICAgX2NvcnJlY3RCdXR0b24oZTogTW91c2VFdmVudCwgYnV0dG9uOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIChidXR0b24gPT09IExFRlRfQlVUVE9OICYmIGUuY3RybEtleSkgfHwgKGJ1dHRvbiA9PT0gUklHSFRfQlVUVE9OKTtcbiAgICB9XG5cbiAgICBfbW92ZShsYXN0UG9pbnQ6IFBvaW50LCBwb2ludDogUG9pbnQpIHtcbiAgICAgICAgY29uc3QgZGVncmVlc1BlclBpeGVsTW92ZWQgPSAwLjg7XG4gICAgICAgIGNvbnN0IGJlYXJpbmdEZWx0YSA9IChwb2ludC54IC0gbGFzdFBvaW50LngpICogZGVncmVlc1BlclBpeGVsTW92ZWQ7XG4gICAgICAgIGlmIChiZWFyaW5nRGVsdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4ge2JlYXJpbmdEZWx0YX07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb250ZXh0bWVudShlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIC8vIHByZXZlbnQgYnJvd3NlciBjb250ZXh0IG1lbnUgd2hlbiBuZWNlc3Nhcnk7IHdlIGRvbid0IGFsbG93IGl0IHdpdGggcm90YXRpb25cbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBjYW4ndCBkaXNjZXJuIHJvdGF0aW9uIGdlc3R1cmUgc3RhcnQgZnJvbSBjb250ZXh0bWVudSBvbiBNYWNcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vdXNlUGl0Y2hIYW5kbGVyIGV4dGVuZHMgTW91c2VIYW5kbGVyIHtcbiAgICBfY29ycmVjdEJ1dHRvbihlOiBNb3VzZUV2ZW50LCBidXR0b246IG51bWJlcikge1xuICAgICAgICByZXR1cm4gKGJ1dHRvbiA9PT0gTEVGVF9CVVRUT04gJiYgZS5jdHJsS2V5KSB8fCAoYnV0dG9uID09PSBSSUdIVF9CVVRUT04pO1xuICAgIH1cblxuICAgIF9tb3ZlKGxhc3RQb2ludDogUG9pbnQsIHBvaW50OiBQb2ludCkge1xuICAgICAgICBjb25zdCBkZWdyZWVzUGVyUGl4ZWxNb3ZlZCA9IC0wLjU7XG4gICAgICAgIGNvbnN0IHBpdGNoRGVsdGEgPSAocG9pbnQueSAtIGxhc3RQb2ludC55KSAqIGRlZ3JlZXNQZXJQaXhlbE1vdmVkO1xuICAgICAgICBpZiAocGl0Y2hEZWx0YSkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB7cGl0Y2hEZWx0YX07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb250ZXh0bWVudShlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIC8vIHByZXZlbnQgYnJvd3NlciBjb250ZXh0IG1lbnUgd2hlbiBuZWNlc3Nhcnk7IHdlIGRvbid0IGFsbG93IGl0IHdpdGggcm90YXRpb25cbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBjYW4ndCBkaXNjZXJuIHJvdGF0aW9uIGdlc3R1cmUgc3RhcnQgZnJvbSBjb250ZXh0bWVudSBvbiBNYWNcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB7aW5kZXhUb3VjaGVzfSBmcm9tICcuL2hhbmRsZXJfdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvdWNoUGFuSGFuZGxlciB7XG5cbiAgICBfZW5hYmxlZDogYm9vbGVhbjtcbiAgICBfYWN0aXZlOiBib29sZWFuO1xuICAgIF90b3VjaGVzOiB7IFtzdHJpbmcgfCBudW1iZXJdOiBQb2ludCB9O1xuICAgIF9taW5Ub3VjaGVzOiBudW1iZXI7XG4gICAgX2NsaWNrVG9sZXJhbmNlOiBudW1iZXI7XG4gICAgX3N1bTogUG9pbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7IGNsaWNrVG9sZXJhbmNlOiBudW1iZXIgfSkge1xuICAgICAgICB0aGlzLl9taW5Ub3VjaGVzID0gMTtcbiAgICAgICAgdGhpcy5fY2xpY2tUb2xlcmFuY2UgPSBvcHRpb25zLmNsaWNrVG9sZXJhbmNlIHx8IDE7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3RvdWNoZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fc3VtID0gbmV3IFBvaW50KDAsIDApO1xuICAgIH1cblxuICAgIHRvdWNoc3RhcnQoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsY3VsYXRlVHJhbnNmb3JtKGUsIHBvaW50cywgbWFwVG91Y2hlcyk7XG4gICAgfVxuXG4gICAgdG91Y2htb3ZlKGU6IFRvdWNoRXZlbnQsIHBvaW50czogQXJyYXk8UG9pbnQ+LCBtYXBUb3VjaGVzOiBBcnJheTxUb3VjaD4pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmUgfHwgbWFwVG91Y2hlcy5sZW5ndGggPCB0aGlzLl9taW5Ub3VjaGVzKSByZXR1cm47XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGN1bGF0ZVRyYW5zZm9ybShlLCBwb2ludHMsIG1hcFRvdWNoZXMpO1xuICAgIH1cblxuICAgIHRvdWNoZW5kKGU6IFRvdWNoRXZlbnQsIHBvaW50czogQXJyYXk8UG9pbnQ+LCBtYXBUb3VjaGVzOiBBcnJheTxUb3VjaD4pIHtcbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlVHJhbnNmb3JtKGUsIHBvaW50cywgbWFwVG91Y2hlcyk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSAmJiBtYXBUb3VjaGVzLmxlbmd0aCA8IHRoaXMuX21pblRvdWNoZXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvdWNoY2FuY2VsKCkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgX2NhbGN1bGF0ZVRyYW5zZm9ybShlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSB7XG4gICAgICAgIGlmIChtYXBUb3VjaGVzLmxlbmd0aCA+IDApIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgY29uc3QgdG91Y2hlcyA9IGluZGV4VG91Y2hlcyhtYXBUb3VjaGVzLCBwb2ludHMpO1xuXG4gICAgICAgIGNvbnN0IHRvdWNoUG9pbnRTdW0gPSBuZXcgUG9pbnQoMCwgMCk7XG4gICAgICAgIGNvbnN0IHRvdWNoRGVsdGFTdW0gPSBuZXcgUG9pbnQoMCwgMCk7XG4gICAgICAgIGxldCB0b3VjaERlbHRhQ291bnQgPSAwO1xuXG4gICAgICAgIGZvciAoY29uc3QgaWRlbnRpZmllciBpbiB0b3VjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHRvdWNoZXNbaWRlbnRpZmllcl07XG4gICAgICAgICAgICBjb25zdCBwcmV2UG9pbnQgPSB0aGlzLl90b3VjaGVzW2lkZW50aWZpZXJdO1xuICAgICAgICAgICAgaWYgKHByZXZQb2ludCkge1xuICAgICAgICAgICAgICAgIHRvdWNoUG9pbnRTdW0uX2FkZChwb2ludCk7XG4gICAgICAgICAgICAgICAgdG91Y2hEZWx0YVN1bS5fYWRkKHBvaW50LnN1YihwcmV2UG9pbnQpKTtcbiAgICAgICAgICAgICAgICB0b3VjaERlbHRhQ291bnQrKztcbiAgICAgICAgICAgICAgICB0b3VjaGVzW2lkZW50aWZpZXJdID0gcG9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl90b3VjaGVzID0gdG91Y2hlcztcblxuICAgICAgICBpZiAodG91Y2hEZWx0YUNvdW50IDwgdGhpcy5fbWluVG91Y2hlcyB8fCAhdG91Y2hEZWx0YVN1bS5tYWcoKSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHBhbkRlbHRhID0gdG91Y2hEZWx0YVN1bS5kaXYodG91Y2hEZWx0YUNvdW50KTtcbiAgICAgICAgdGhpcy5fc3VtLl9hZGQocGFuRGVsdGEpO1xuICAgICAgICBpZiAodGhpcy5fc3VtLm1hZygpIDwgdGhpcy5fY2xpY2tUb2xlcmFuY2UpIHJldHVybjtcblxuICAgICAgICBjb25zdCBhcm91bmQgPSB0b3VjaFBvaW50U3VtLmRpdih0b3VjaERlbHRhQ291bnQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhcm91bmQsXG4gICAgICAgICAgICBwYW5EZWx0YVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZDtcbiAgICB9XG5cbiAgICBpc0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL3V0aWwvZG9tJztcblxuY2xhc3MgVHdvVG91Y2hIYW5kbGVyIHtcblxuICAgIF9lbmFibGVkOiBib29sZWFuO1xuICAgIF9hY3RpdmU6IGJvb2xlYW47XG4gICAgX2ZpcnN0VHdvVG91Y2hlczogW251bWJlciwgbnVtYmVyXTtcbiAgICBfdmVjdG9yOiBQb2ludDtcbiAgICBfc3RhcnRWZWN0b3I6IFBvaW50O1xuICAgIF9hcm91bmRDZW50ZXI6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2ZpcnN0VHdvVG91Y2hlcztcbiAgICB9XG5cbiAgICBfc3RhcnQocG9pbnRzOiBbUG9pbnQsIFBvaW50XSkge30gLy9lc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgX21vdmUocG9pbnRzOiBbUG9pbnQsIFBvaW50XSwgcGluY2hBcm91bmQ6IFBvaW50LCBlOiBUb3VjaEV2ZW50KSB7IHJldHVybiB7fTsgfSAvL2VzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHRvdWNoc3RhcnQoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikge1xuICAgICAgICAvL2NvbnNvbGUubG9nKGUudGFyZ2V0LCBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID8gZS50YXJnZXRUb3VjaGVzWzBdLnRhcmdldCA6IG51bGwpO1xuICAgICAgICAvL2xvZygndG91Y2hzdGFydCcsIHBvaW50cywgZS50YXJnZXQuaW5uZXJIVE1MLCBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID8gZS50YXJnZXRUb3VjaGVzWzBdLnRhcmdldC5pbm5lckhUTUw6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICh0aGlzLl9maXJzdFR3b1RvdWNoZXMgfHwgbWFwVG91Y2hlcy5sZW5ndGggPCAyKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fZmlyc3RUd29Ub3VjaGVzID0gW1xuICAgICAgICAgICAgbWFwVG91Y2hlc1swXS5pZGVudGlmaWVyLFxuICAgICAgICAgICAgbWFwVG91Y2hlc1sxXS5pZGVudGlmaWVyXG4gICAgICAgIF07XG5cbiAgICAgICAgLy8gaW1wbGVtZW50ZWQgYnkgY2hpbGQgY2xhc3Nlc1xuICAgICAgICB0aGlzLl9zdGFydChbcG9pbnRzWzBdLCBwb2ludHNbMV1dKTtcbiAgICB9XG5cbiAgICB0b3VjaG1vdmUoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikge1xuICAgICAgICBpZiAoIXRoaXMuX2ZpcnN0VHdvVG91Y2hlcykgcmV0dXJuO1xuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCBbaWRBLCBpZEJdID0gdGhpcy5fZmlyc3RUd29Ub3VjaGVzO1xuICAgICAgICBjb25zdCBhID0gZ2V0VG91Y2hCeUlkKG1hcFRvdWNoZXMsIHBvaW50cywgaWRBKTtcbiAgICAgICAgY29uc3QgYiA9IGdldFRvdWNoQnlJZChtYXBUb3VjaGVzLCBwb2ludHMsIGlkQik7XG4gICAgICAgIGlmICghYSB8fCAhYikgcmV0dXJuO1xuICAgICAgICBjb25zdCBwaW5jaEFyb3VuZCA9IHRoaXMuX2Fyb3VuZENlbnRlciA/IG51bGwgOiBhLmFkZChiKS5kaXYoMik7XG5cbiAgICAgICAgLy8gaW1wbGVtZW50ZWQgYnkgY2hpbGQgY2xhc3Nlc1xuICAgICAgICByZXR1cm4gdGhpcy5fbW92ZShbYSwgYl0sIHBpbmNoQXJvdW5kLCBlKTtcblxuICAgIH1cblxuICAgIHRvdWNoZW5kKGU6IFRvdWNoRXZlbnQsIHBvaW50czogQXJyYXk8UG9pbnQ+LCBtYXBUb3VjaGVzOiBBcnJheTxUb3VjaD4pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maXJzdFR3b1RvdWNoZXMpIHJldHVybjtcblxuICAgICAgICBjb25zdCBbaWRBLCBpZEJdID0gdGhpcy5fZmlyc3RUd29Ub3VjaGVzO1xuICAgICAgICBjb25zdCBhID0gZ2V0VG91Y2hCeUlkKG1hcFRvdWNoZXMsIHBvaW50cywgaWRBKTtcbiAgICAgICAgY29uc3QgYiA9IGdldFRvdWNoQnlJZChtYXBUb3VjaGVzLCBwb2ludHMsIGlkQik7XG4gICAgICAgIGlmIChhICYmIGIpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSBET00uc3VwcHJlc3NDbGljaygpO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICB0b3VjaGNhbmNlbCgpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIGVuYWJsZShvcHRpb25zOiA/e2Fyb3VuZD86ICdjZW50ZXInfSkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYXJvdW5kQ2VudGVyID0gISFvcHRpb25zICYmIG9wdGlvbnMuYXJvdW5kID09PSAnY2VudGVyJztcbiAgICB9XG5cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVkO1xuICAgIH1cblxuICAgIGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0VG91Y2hCeUlkKG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPiwgcG9pbnRzOiBBcnJheTxQb2ludD4sIGlkZW50aWZpZXI6IG51bWJlcikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwVG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobWFwVG91Y2hlc1tpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSByZXR1cm4gcG9pbnRzW2ldO1xuICAgIH1cbn1cblxuLyogWk9PTSAqL1xuXG5jb25zdCBaT09NX1RIUkVTSE9MRCA9IDAuMTtcblxuZnVuY3Rpb24gZ2V0Wm9vbURlbHRhKGRpc3RhbmNlLCBsYXN0RGlzdGFuY2UpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coZGlzdGFuY2UgLyBsYXN0RGlzdGFuY2UpIC8gTWF0aC5MTjI7XG59XG5cbmV4cG9ydCBjbGFzcyBUb3VjaFpvb21IYW5kbGVyIGV4dGVuZHMgVHdvVG91Y2hIYW5kbGVyIHtcblxuICAgIF9kaXN0YW5jZTogbnVtYmVyO1xuICAgIF9zdGFydERpc3RhbmNlOiBudW1iZXI7XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgc3VwZXIucmVzZXQoKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2Rpc3RhbmNlO1xuICAgICAgICBkZWxldGUgdGhpcy5fc3RhcnREaXN0YW5jZTtcbiAgICB9XG5cbiAgICBfc3RhcnQocG9pbnRzOiBbUG9pbnQsIFBvaW50XSkge1xuICAgICAgICB0aGlzLl9zdGFydERpc3RhbmNlID0gdGhpcy5fZGlzdGFuY2UgPSBwb2ludHNbMF0uZGlzdChwb2ludHNbMV0pO1xuICAgIH1cblxuICAgIF9tb3ZlKHBvaW50czogW1BvaW50LCBQb2ludF0sIHBpbmNoQXJvdW5kOiBQb2ludCkge1xuICAgICAgICBjb25zdCBsYXN0RGlzdGFuY2UgPSB0aGlzLl9kaXN0YW5jZTtcbiAgICAgICAgdGhpcy5fZGlzdGFuY2UgPSBwb2ludHNbMF0uZGlzdChwb2ludHNbMV0pO1xuICAgICAgICBpZiAoIXRoaXMuX2FjdGl2ZSAmJiBNYXRoLmFicyhnZXRab29tRGVsdGEodGhpcy5fZGlzdGFuY2UsIHRoaXMuX3N0YXJ0RGlzdGFuY2UpKSA8IFpPT01fVEhSRVNIT0xEKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB6b29tRGVsdGE6IGdldFpvb21EZWx0YSh0aGlzLl9kaXN0YW5jZSwgbGFzdERpc3RhbmNlKSxcbiAgICAgICAgICAgIHBpbmNoQXJvdW5kXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKiBST1RBVEUgKi9cblxuY29uc3QgUk9UQVRJT05fVEhSRVNIT0xEID0gMjU7IC8vIHBpeGVscyBhbG9uZyBjaXJjdW1mZXJlbmNlIG9mIHRvdWNoIGNpcmNsZVxuXG5mdW5jdGlvbiBnZXRCZWFyaW5nRGVsdGEoYSwgYikge1xuICAgIHJldHVybiBhLmFuZ2xlV2l0aChiKSAqIDE4MCAvIE1hdGguUEk7XG59XG5cbmV4cG9ydCBjbGFzcyBUb3VjaFJvdGF0ZUhhbmRsZXIgZXh0ZW5kcyBUd29Ub3VjaEhhbmRsZXIge1xuICAgIF9taW5EaWFtZXRlcjogbnVtYmVyO1xuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHN1cGVyLnJlc2V0KCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9taW5EaWFtZXRlcjtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3N0YXJ0VmVjdG9yO1xuICAgICAgICBkZWxldGUgdGhpcy5fdmVjdG9yO1xuICAgIH1cblxuICAgIF9zdGFydChwb2ludHM6IFtQb2ludCwgUG9pbnRdKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0VmVjdG9yID0gdGhpcy5fdmVjdG9yID0gcG9pbnRzWzBdLnN1Yihwb2ludHNbMV0pO1xuICAgICAgICB0aGlzLl9taW5EaWFtZXRlciA9IHBvaW50c1swXS5kaXN0KHBvaW50c1sxXSk7XG4gICAgfVxuXG4gICAgX21vdmUocG9pbnRzOiBbUG9pbnQsIFBvaW50XSwgcGluY2hBcm91bmQ6IFBvaW50KSB7XG4gICAgICAgIGNvbnN0IGxhc3RWZWN0b3IgPSB0aGlzLl92ZWN0b3I7XG4gICAgICAgIHRoaXMuX3ZlY3RvciA9IHBvaW50c1swXS5zdWIocG9pbnRzWzFdKTtcblxuICAgICAgICBpZiAoIXRoaXMuX2FjdGl2ZSAmJiB0aGlzLl9pc0JlbG93VGhyZXNob2xkKHRoaXMuX3ZlY3RvcikpIHJldHVybjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmVhcmluZ0RlbHRhOiBnZXRCZWFyaW5nRGVsdGEodGhpcy5fdmVjdG9yLCBsYXN0VmVjdG9yKSxcbiAgICAgICAgICAgIHBpbmNoQXJvdW5kXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2lzQmVsb3dUaHJlc2hvbGQodmVjdG9yOiBQb2ludCkge1xuICAgICAgICAvKlxuICAgICAgICAgKiBUaGUgdGhyZXNob2xkIGJlZm9yZSBhIHJvdGF0aW9uIGFjdHVhbGx5IGhhcHBlbnMgaXMgY29uZmlndXJlZCBpblxuICAgICAgICAgKiBwaXhlbHMgYWxvbmd0aCBjaXJjdW1mZXJlbmNlIG9mIHRoZSBjaXJjbGUgZm9ybWVkIGJ5IHRoZSB0d28gZmluZ2Vycy5cbiAgICAgICAgICogVGhpcyBtYWtlcyB0aGUgdGhyZXNob2xkIGluIGRlZ3JlZXMgbGFyZ2VyIHdoZW4gdGhlIGZpbmdlcnMgYXJlIGNsb3NlXG4gICAgICAgICAqIHRvZ2V0aGVyIGFuZCBzbWFsbGVyIHdoZW4gdGhlIGZpbmdlcnMgYXJlIGZhciBhcGFydC5cbiAgICAgICAgICpcbiAgICAgICAgICogVXNlIHRoZSBzbWFsbGVzdCBkaWFtZXRlciBmcm9tIHRoZSB3aG9sZSBnZXN0dXJlIHRvIHJlZHVjZSBzZW5zaXRpdml0eVxuICAgICAgICAgKiB3aGVuIHBpbmNoaW5nIGluIGFuZCBvdXQuXG4gICAgICAgICAqL1xuXG4gICAgICAgIHRoaXMuX21pbkRpYW1ldGVyID0gTWF0aC5taW4odGhpcy5fbWluRGlhbWV0ZXIsIHZlY3Rvci5tYWcoKSk7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBNYXRoLlBJICogdGhpcy5fbWluRGlhbWV0ZXI7XG4gICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IFJPVEFUSU9OX1RIUkVTSE9MRCAvIGNpcmN1bWZlcmVuY2UgKiAzNjA7XG5cbiAgICAgICAgY29uc3QgYmVhcmluZ0RlbHRhU2luY2VTdGFydCA9IGdldEJlYXJpbmdEZWx0YSh2ZWN0b3IsIHRoaXMuX3N0YXJ0VmVjdG9yKTtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGJlYXJpbmdEZWx0YVNpbmNlU3RhcnQpIDwgdGhyZXNob2xkO1xuICAgIH1cbn1cblxuLyogUElUQ0ggKi9cblxuZnVuY3Rpb24gaXNWZXJ0aWNhbCh2ZWN0b3IpIHtcbiAgICByZXR1cm4gTWF0aC5hYnModmVjdG9yLnkpID4gTWF0aC5hYnModmVjdG9yLngpO1xufVxuXG5jb25zdCBBTExPV0VEX1NJTkdMRV9UT1VDSF9USU1FID0gMTAwO1xuXG4vKipcbiAqIFRoZSBgVG91Y2hQaXRjaEhhbmRsZXJgIGFsbG93cyB0aGUgdXNlciB0byBwaXRjaCB0aGUgbWFwIGJ5IGRyYWdnaW5nIHVwIGFuZCBkb3duIHdpdGggdHdvIGZpbmdlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUb3VjaFBpdGNoSGFuZGxlciBleHRlbmRzIFR3b1RvdWNoSGFuZGxlciB7XG5cbiAgICBfdmFsaWQ6IGJvb2xlYW4gfCB2b2lkO1xuICAgIF9maXJzdE1vdmU6IG51bWJlcjtcbiAgICBfbGFzdFBvaW50czogW1BvaW50LCBQb2ludF07XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgc3VwZXIucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fdmFsaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9maXJzdE1vdmU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9sYXN0UG9pbnRzO1xuICAgIH1cblxuICAgIF9zdGFydChwb2ludHM6IFtQb2ludCwgUG9pbnRdKSB7XG4gICAgICAgIHRoaXMuX2xhc3RQb2ludHMgPSBwb2ludHM7XG4gICAgICAgIGlmIChpc1ZlcnRpY2FsKHBvaW50c1swXS5zdWIocG9pbnRzWzFdKSkpIHtcbiAgICAgICAgICAgIC8vIGZpbmdlcnMgYXJlIG1vcmUgaG9yaXpvbnRhbCB0aGFuIHZlcnRpY2FsXG4gICAgICAgICAgICB0aGlzLl92YWxpZCA9IGZhbHNlO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfbW92ZShwb2ludHM6IFtQb2ludCwgUG9pbnRdLCBjZW50ZXI6IFBvaW50LCBlOiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHZlY3RvckEgPSBwb2ludHNbMF0uc3ViKHRoaXMuX2xhc3RQb2ludHNbMF0pO1xuICAgICAgICBjb25zdCB2ZWN0b3JCID0gcG9pbnRzWzFdLnN1Yih0aGlzLl9sYXN0UG9pbnRzWzFdKTtcblxuICAgICAgICB0aGlzLl92YWxpZCA9IHRoaXMuZ2VzdHVyZUJlZ2luc1ZlcnRpY2FsbHkodmVjdG9yQSwgdmVjdG9yQiwgZS50aW1lU3RhbXApO1xuICAgICAgICBpZiAoIXRoaXMuX3ZhbGlkKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fbGFzdFBvaW50cyA9IHBvaW50cztcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgeURlbHRhQXZlcmFnZSA9ICh2ZWN0b3JBLnkgKyB2ZWN0b3JCLnkpIC8gMjtcbiAgICAgICAgY29uc3QgZGVncmVlc1BlclBpeGVsTW92ZWQgPSAtMC41O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGl0Y2hEZWx0YTogeURlbHRhQXZlcmFnZSAqIGRlZ3JlZXNQZXJQaXhlbE1vdmVkXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2VzdHVyZUJlZ2luc1ZlcnRpY2FsbHkodmVjdG9yQTogUG9pbnQsIHZlY3RvckI6IFBvaW50LCB0aW1lU3RhbXA6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5fdmFsaWQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuX3ZhbGlkO1xuXG4gICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IDI7XG4gICAgICAgIGNvbnN0IG1vdmVkQSA9IHZlY3RvckEubWFnKCkgPj0gdGhyZXNob2xkO1xuICAgICAgICBjb25zdCBtb3ZlZEIgPSB2ZWN0b3JCLm1hZygpID49IHRocmVzaG9sZDtcblxuICAgICAgICAvLyBuZWl0aGVyIGZpbmdlciBoYXMgbW92ZWQgYSBtZWFuaW5nZnVsIGFtb3VudCwgd2FpdFxuICAgICAgICBpZiAoIW1vdmVkQSAmJiAhbW92ZWRCKSByZXR1cm47XG5cbiAgICAgICAgLy8gT25lIGZpbmdlciBoYXMgbW92ZWQgYW5kIHRoZSBvdGhlciBoYXMgbm90LlxuICAgICAgICAvLyBJZiBlbm91Z2ggdGltZSBoYXMgcGFzc2VkLCBkZWNpZGUgaXQgaXMgbm90IGEgcGl0Y2guXG4gICAgICAgIGlmICghbW92ZWRBIHx8ICFtb3ZlZEIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9maXJzdE1vdmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcnN0TW92ZSA9IHRpbWVTdGFtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRpbWVTdGFtcCAtIHRoaXMuX2ZpcnN0TW92ZSA8IEFMTE9XRURfU0lOR0xFX1RPVUNIX1RJTUUpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGlsbCB3YWl0aW5nIGZvciBhIG1vdmVtZW50IGZyb20gdGhlIHNlY29uZCBmaW5nZXJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc1NhbWVEaXJlY3Rpb24gPSB2ZWN0b3JBLnkgPiAwID09PSB2ZWN0b3JCLnkgPiAwO1xuICAgICAgICByZXR1cm4gaXNWZXJ0aWNhbCh2ZWN0b3JBKSAmJiBpc1ZlcnRpY2FsKHZlY3RvckIpICYmIGlzU2FtZURpcmVjdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwiZHJhZyB0byBwaXRjaFwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgVG91Y2hQaXRjaEhhbmRsZXJcbiAgICAgKiBAbmFtZSBpc0VuYWJsZWRcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBcImRyYWcgdG8gcGl0Y2hcIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcImRyYWcgdG8gcGl0Y2hcIiBpbnRlcmFjdGlvbiBpcyBhY3RpdmUsIGkuZS4gY3VycmVudGx5IGJlaW5nIHVzZWQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgVG91Y2hQaXRjaEhhbmRsZXJcbiAgICAgKiBAbmFtZSBpc0FjdGl2ZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwiZHJhZyB0byBwaXRjaFwiIGludGVyYWN0aW9uIGlzIGFjdGl2ZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwiZHJhZyB0byBwaXRjaFwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFRvdWNoUGl0Y2hIYW5kbGVyXG4gICAgICogQG5hbWUgZW5hYmxlXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAudG91Y2hQaXRjaC5lbmFibGUoKTtcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIERpc2FibGVzIHRoZSBcImRyYWcgdG8gcGl0Y2hcIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBUb3VjaFBpdGNoSGFuZGxlclxuICAgICAqIEBuYW1lIGRpc2FibGVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC50b3VjaFBpdGNoLmRpc2FibGUoKTtcbiAgICAgKi9cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi9tYXAnO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBwYW5TdGVwOiAxMDAsXG4gICAgYmVhcmluZ1N0ZXA6IDE1LFxuICAgIHBpdGNoU3RlcDogMTBcbn07XG5cbi8qKlxuICogVGhlIGBLZXlib2FyZEhhbmRsZXJgIGFsbG93cyB0aGUgdXNlciB0byB6b29tLCByb3RhdGUsIGFuZCBwYW4gdGhlIG1hcCB1c2luZ1xuICogdGhlIGZvbGxvd2luZyBrZXlib2FyZCBzaG9ydGN1dHM6XG4gKlxuICogLSBgPWAgLyBgK2A6IEluY3JlYXNlIHRoZSB6b29tIGxldmVsIGJ5IDEuXG4gKiAtIGBTaGlmdC09YCAvIGBTaGlmdC0rYDogSW5jcmVhc2UgdGhlIHpvb20gbGV2ZWwgYnkgMi5cbiAqIC0gYC1gOiBEZWNyZWFzZSB0aGUgem9vbSBsZXZlbCBieSAxLlxuICogLSBgU2hpZnQtLWA6IERlY3JlYXNlIHRoZSB6b29tIGxldmVsIGJ5IDIuXG4gKiAtIEFycm93IGtleXM6IFBhbiBieSAxMDAgcGl4ZWxzLlxuICogLSBgU2hpZnQr4oeiYDogSW5jcmVhc2UgdGhlIHJvdGF0aW9uIGJ5IDE1IGRlZ3JlZXMuXG4gKiAtIGBTaGlmdCvih6BgOiBEZWNyZWFzZSB0aGUgcm90YXRpb24gYnkgMTUgZGVncmVlcy5cbiAqIC0gYFNoaWZ0K+KHoWA6IEluY3JlYXNlIHRoZSBwaXRjaCBieSAxMCBkZWdyZWVzLlxuICogLSBgU2hpZnQr4oejYDogRGVjcmVhc2UgdGhlIHBpdGNoIGJ5IDEwIGRlZ3JlZXMuXG4gKi9cbmNsYXNzIEtleWJvYXJkSGFuZGxlciB7XG4gICAgX2VuYWJsZWQ6IGJvb2xlYW47XG4gICAgX2FjdGl2ZTogYm9vbGVhbjtcbiAgICBfcGFuU3RlcDogbnVtYmVyO1xuICAgIF9iZWFyaW5nU3RlcDogbnVtYmVyO1xuICAgIF9waXRjaFN0ZXA6IG51bWJlcjtcbiAgICBfcm90YXRpb25EaXNhYmxlZDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICogQHByaXZhdGVcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBzdGVwT3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgICAgICB0aGlzLl9wYW5TdGVwID0gc3RlcE9wdGlvbnMucGFuU3RlcDtcbiAgICAgICAgdGhpcy5fYmVhcmluZ1N0ZXAgPSBzdGVwT3B0aW9ucy5iZWFyaW5nU3RlcDtcbiAgICAgICAgdGhpcy5fcGl0Y2hTdGVwID0gc3RlcE9wdGlvbnMucGl0Y2hTdGVwO1xuICAgICAgICB0aGlzLl9yb3RhdGlvbkRpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGtleWRvd24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgcmV0dXJuO1xuXG4gICAgICAgIGxldCB6b29tRGlyID0gMDtcbiAgICAgICAgbGV0IGJlYXJpbmdEaXIgPSAwO1xuICAgICAgICBsZXQgcGl0Y2hEaXIgPSAwO1xuICAgICAgICBsZXQgeERpciA9IDA7XG4gICAgICAgIGxldCB5RGlyID0gMDtcblxuICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDYxOlxuICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgY2FzZSAxNzE6XG4gICAgICAgIGNhc2UgMTg3OlxuICAgICAgICAgICAgem9vbURpciA9IDE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDE4OTpcbiAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgIGNhc2UgMTczOlxuICAgICAgICAgICAgem9vbURpciA9IC0xO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgYmVhcmluZ0RpciA9IC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgeERpciA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgYmVhcmluZ0RpciA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB4RGlyID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIHBpdGNoRGlyID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHlEaXIgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIHBpdGNoRGlyID0gLTE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB5RGlyID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fcm90YXRpb25EaXNhYmxlZCkge1xuICAgICAgICAgICAgYmVhcmluZ0RpciA9IDA7XG4gICAgICAgICAgICBwaXRjaERpciA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FtZXJhQW5pbWF0aW9uOiAobWFwOiBNYXApID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB6b29tID0gbWFwLmdldFpvb20oKTtcbiAgICAgICAgICAgICAgICBtYXAuZWFzZVRvKHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgZWFzZUlkOiAna2V5Ym9hcmRIYW5kbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBlYXNlT3V0LFxuXG4gICAgICAgICAgICAgICAgICAgIHpvb206IHpvb21EaXIgPyBNYXRoLnJvdW5kKHpvb20pICsgem9vbURpciAqIChlLnNoaWZ0S2V5ID8gMiA6IDEpIDogem9vbSxcbiAgICAgICAgICAgICAgICAgICAgYmVhcmluZzogbWFwLmdldEJlYXJpbmcoKSArIGJlYXJpbmdEaXIgKiB0aGlzLl9iZWFyaW5nU3RlcCxcbiAgICAgICAgICAgICAgICAgICAgcGl0Y2g6IG1hcC5nZXRQaXRjaCgpICsgcGl0Y2hEaXIgKiB0aGlzLl9waXRjaFN0ZXAsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogWy14RGlyICogdGhpcy5fcGFuU3RlcCwgLXlEaXIgKiB0aGlzLl9wYW5TdGVwXSxcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiBtYXAuZ2V0Q2VudGVyKClcbiAgICAgICAgICAgICAgICB9LCB7b3JpZ2luYWxFdmVudDogZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwia2V5Ym9hcmQgcm90YXRlIGFuZCB6b29tXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLmtleWJvYXJkLmVuYWJsZSgpO1xuICAgICAqL1xuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgdGhlIFwia2V5Ym9hcmQgcm90YXRlIGFuZCB6b29tXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLmtleWJvYXJkLmRpc2FibGUoKTtcbiAgICAgKi9cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwia2V5Ym9hcmQgcm90YXRlIGFuZCB6b29tXCJcbiAgICAgKiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgXCJrZXlib2FyZCByb3RhdGUgYW5kIHpvb21cIlxuICAgICAqIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGhhbmRsZXIgaXMgZW5hYmxlZCBhbmQgaGFzIGRldGVjdGVkIHRoZSBzdGFydCBvZiBhXG4gICAgICogem9vbS9yb3RhdGUgZ2VzdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIGhhbmRsZXIgaXMgZW5hYmxlZCBhbmQgaGFzIGRldGVjdGVkIHRoZVxuICAgICAqIHN0YXJ0IG9mIGEgem9vbS9yb3RhdGUgZ2VzdHVyZS5cbiAgICAgKi9cbiAgICBpc0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgXCJrZXlib2FyZCBwYW4vcm90YXRlXCIgaW50ZXJhY3Rpb24sIGxlYXZpbmcgdGhlXG4gICAgICogXCJrZXlib2FyZCB6b29tXCIgaW50ZXJhY3Rpb24gZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtYXAua2V5Ym9hcmQuZGlzYWJsZVJvdGF0aW9uKCk7XG4gICAgICovXG4gICAgZGlzYWJsZVJvdGF0aW9uKCkge1xuICAgICAgICB0aGlzLl9yb3RhdGlvbkRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSBcImtleWJvYXJkIHBhbi9yb3RhdGVcIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtYXAua2V5Ym9hcmQuZW5hYmxlKCk7XG4gICAgICogICBtYXAua2V5Ym9hcmQuZW5hYmxlUm90YXRpb24oKTtcbiAgICAgKi9cbiAgICBlbmFibGVSb3RhdGlvbigpIHtcbiAgICAgICAgdGhpcy5fcm90YXRpb25EaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZWFzZU91dCh0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdCAqICgyIC0gdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleWJvYXJkSGFuZGxlcjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuXG5pbXBvcnQge2Vhc2UgYXMgX2Vhc2UsIGJpbmRBbGwsIGJlemllcn0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uLy4uL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uLy4uL3V0aWwvd2luZG93JztcbmltcG9ydCB7bnVtYmVyIGFzIGludGVycG9sYXRlfSBmcm9tICcuLi8uLi9zdHlsZS1zcGVjL3V0aWwvaW50ZXJwb2xhdGUnO1xuaW1wb3J0IExuZ0xhdCBmcm9tICcuLi8uLi9nZW8vbG5nX2xhdCc7XG5cbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi9tYXAnO1xuaW1wb3J0IHR5cGUgSGFuZGxlck1hbmFnZXIgZnJvbSAnLi4vaGFuZGxlcl9tYW5hZ2VyJztcbmltcG9ydCB0eXBlIFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuXG4vLyBkZWx0YVkgdmFsdWUgZm9yIG1vdXNlIHNjcm9sbCB3aGVlbCBpZGVudGlmaWNhdGlvblxuY29uc3Qgd2hlZWxab29tRGVsdGEgPSA0LjAwMDI0NDE0MDYyNTtcblxuLy8gVGhlc2UgbWFnaWMgbnVtYmVycyBjb250cm9sIHRoZSByYXRlIG9mIHpvb20uIFRyYWNrcGFkIGV2ZW50cyBmaXJlIGF0IGEgZ3JlYXRlclxuLy8gZnJlcXVlbmN5IHRoYW4gbW91c2Ugc2Nyb2xsIHdoZWVsLCBzbyByZWR1Y2UgdGhlIHpvb20gcmF0ZSBwZXIgd2hlZWwgdGlja1xuY29uc3QgZGVmYXVsdFpvb21SYXRlID0gMSAvIDEwMDtcbmNvbnN0IHdoZWVsWm9vbVJhdGUgPSAxIC8gNDUwO1xuXG4vLyB1cHBlciBib3VuZCBvbiBob3cgbXVjaCB3ZSBzY2FsZSB0aGUgbWFwIGluIGFueSBzaW5nbGUgcmVuZGVyIGZyYW1lOyB0aGlzXG4vLyBpcyB1c2VkIHRvIGxpbWl0IHpvb20gcmF0ZSBpbiB0aGUgY2FzZSBvZiB2ZXJ5IGZhc3Qgc2Nyb2xsaW5nXG5jb25zdCBtYXhTY2FsZVBlckZyYW1lID0gMjtcblxuLyoqXG4gKiBUaGUgYFNjcm9sbFpvb21IYW5kbGVyYCBhbGxvd3MgdGhlIHVzZXIgdG8gem9vbSB0aGUgbWFwIGJ5IHNjcm9sbGluZy5cbiAqL1xuY2xhc3MgU2Nyb2xsWm9vbUhhbmRsZXIge1xuICAgIF9tYXA6IE1hcDtcbiAgICBfZWw6IEhUTUxFbGVtZW50O1xuICAgIF9lbmFibGVkOiBib29sZWFuO1xuICAgIF9hY3RpdmU6IGJvb2xlYW47XG4gICAgX3pvb21pbmc6IGJvb2xlYW47XG4gICAgX2Fyb3VuZENlbnRlcjogYm9vbGVhbjtcbiAgICBfYXJvdW5kOiBQb2ludDtcbiAgICBfYXJvdW5kUG9pbnQ6IFBvaW50O1xuICAgIF90eXBlOiAnd2hlZWwnIHwgJ3RyYWNrcGFkJyB8IG51bGw7XG4gICAgX2xhc3RWYWx1ZTogbnVtYmVyO1xuICAgIF90aW1lb3V0OiA/VGltZW91dElEOyAvLyB1c2VkIGZvciBkZWxheWVkLWhhbmRsaW5nIG9mIGEgc2luZ2xlIHdoZWVsIG1vdmVtZW50XG4gICAgX2ZpbmlzaFRpbWVvdXQ6ID9UaW1lb3V0SUQ7IC8vIHVzZWQgdG8gZGVsYXkgZmluYWwgJ3ttb3ZlLHpvb219ZW5kJyBldmVudHNcblxuICAgIF9sYXN0V2hlZWxFdmVudDogYW55O1xuICAgIF9sYXN0V2hlZWxFdmVudFRpbWU6IG51bWJlcjtcblxuICAgIF9zdGFydFpvb206ID9udW1iZXI7XG4gICAgX3RhcmdldFpvb206ID9udW1iZXI7XG4gICAgX2RlbHRhOiBudW1iZXI7XG4gICAgX2Vhc2luZzogPygobnVtYmVyKSA9PiBudW1iZXIpO1xuICAgIF9wcmV2RWFzZTogP3tzdGFydDogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCBlYXNpbmc6IChfOiBudW1iZXIpID0+IG51bWJlcn07XG5cbiAgICBfZnJhbWVJZDogP2Jvb2xlYW47XG4gICAgX2hhbmRsZXI6IEhhbmRsZXJNYW5hZ2VyO1xuXG4gICAgX2RlZmF1bHRab29tUmF0ZTogbnVtYmVyO1xuICAgIF93aGVlbFpvb21SYXRlOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwLCBoYW5kbGVyOiBIYW5kbGVyTWFuYWdlcikge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2VsID0gbWFwLmdldENhbnZhc0NvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLl9oYW5kbGVyID0gaGFuZGxlcjtcblxuICAgICAgICB0aGlzLl9kZWx0YSA9IDA7XG5cbiAgICAgICAgdGhpcy5fZGVmYXVsdFpvb21SYXRlID0gZGVmYXVsdFpvb21SYXRlO1xuICAgICAgICB0aGlzLl93aGVlbFpvb21SYXRlID0gd2hlZWxab29tUmF0ZTtcblxuICAgICAgICBiaW5kQWxsKFsnX29uVGltZW91dCddLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHpvb20gcmF0ZSBvZiBhIHRyYWNrcGFkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt6b29tUmF0ZT0xLzEwMF0gVGhlIHJhdGUgdXNlZCB0byBzY2FsZSB0cmFja3BhZCBtb3ZlbWVudCB0byBhIHpvb20gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBTcGVlZCB1cCB0cmFja3BhZCB6b29tXG4gICAgICogbWFwLnNjcm9sbFpvb20uc2V0Wm9vbVJhdGUoMS8yNSk7XG4gICAgICovXG4gICAgc2V0Wm9vbVJhdGUoem9vbVJhdGU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9kZWZhdWx0Wm9vbVJhdGUgPSB6b29tUmF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFNldCB0aGUgem9vbSByYXRlIG9mIGEgbW91c2Ugd2hlZWxcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2hlZWxab29tUmF0ZT0xLzQ1MF0gVGhlIHJhdGUgdXNlZCB0byBzY2FsZSBtb3VzZSB3aGVlbCBtb3ZlbWVudCB0byBhIHpvb20gdmFsdWUuXG4gICAgKiBAZXhhbXBsZVxuICAgICogLy8gU2xvdyBkb3duIHpvb20gb2YgbW91c2Ugd2hlZWxcbiAgICAqIG1hcC5zY3JvbGxab29tLnNldFdoZWVsWm9vbVJhdGUoMS82MDApO1xuICAgICovXG4gICAgc2V0V2hlZWxab29tUmF0ZSh3aGVlbFpvb21SYXRlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fd2hlZWxab29tUmF0ZSA9IHdoZWVsWm9vbVJhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcInNjcm9sbCB0byB6b29tXCIgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwic2Nyb2xsIHRvIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZW5hYmxlZDtcbiAgICB9XG5cbiAgICAvKlxuICAgICogQWN0aXZlIHN0YXRlIGlzIHR1cm5lZCBvbiBhbmQgb2ZmIHdpdGggZXZlcnkgc2Nyb2xsIHdoZWVsIGV2ZW50IGFuZCBpcyBzZXQgYmFjayB0byBmYWxzZSBiZWZvcmUgdGhlIG1hcFxuICAgICogcmVuZGVyIGlzIGNhbGxlZCwgc28gX2FjdGl2ZSBpcyBub3QgYSBnb29kIGNhbmRpZGF0ZSBmb3IgZGV0ZXJtaW5pbmcgaWYgYSBzY3JvbGwgem9vbSBhbmltYXRpb24gaXMgaW5cbiAgICAqIHByb2dyZXNzLlxuICAgICovXG4gICAgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2FjdGl2ZSB8fCB0aGlzLl9maW5pc2hUaW1lb3V0ICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaXNab29taW5nKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl96b29taW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwic2Nyb2xsIHRvIHpvb21cIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFyb3VuZF0gSWYgXCJjZW50ZXJcIiBpcyBwYXNzZWQsIG1hcCB3aWxsIHpvb20gYXJvdW5kIGNlbnRlciBvZiBtYXBcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtYXAuc2Nyb2xsWm9vbS5lbmFibGUoKTtcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICBtYXAuc2Nyb2xsWm9vbS5lbmFibGUoeyBhcm91bmQ6ICdjZW50ZXInIH0pXG4gICAgICovXG4gICAgZW5hYmxlKG9wdGlvbnM6IGFueSkge1xuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYXJvdW5kQ2VudGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmFyb3VuZCA9PT0gJ2NlbnRlcic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgdGhlIFwic2Nyb2xsIHRvIHpvb21cIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtYXAuc2Nyb2xsWm9vbS5kaXNhYmxlKCk7XG4gICAgICovXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB3aGVlbChlOiBXaGVlbEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFJlbW92ZSBgYW55YCBjYXN0IHdoZW4gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQ4NzkgaXMgZml4ZWQuXG4gICAgICAgIGxldCB2YWx1ZSA9IGUuZGVsdGFNb2RlID09PSAod2luZG93LldoZWVsRXZlbnQ6IGFueSkuRE9NX0RFTFRBX0xJTkUgPyBlLmRlbHRhWSAqIDQwIDogZS5kZWx0YVk7XG4gICAgICAgIGNvbnN0IG5vdyA9IGJyb3dzZXIubm93KCksXG4gICAgICAgICAgICB0aW1lRGVsdGEgPSBub3cgLSAodGhpcy5fbGFzdFdoZWVsRXZlbnRUaW1lIHx8IDApO1xuXG4gICAgICAgIHRoaXMuX2xhc3RXaGVlbEV2ZW50VGltZSA9IG5vdztcblxuICAgICAgICBpZiAodmFsdWUgIT09IDAgJiYgKHZhbHVlICUgd2hlZWxab29tRGVsdGEpID09PSAwKSB7XG4gICAgICAgICAgICAvLyBUaGlzIG9uZSBpcyBkZWZpbml0ZWx5IGEgbW91c2Ugd2hlZWwgZXZlbnQuXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gJ3doZWVsJztcblxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICE9PSAwICYmIE1hdGguYWJzKHZhbHVlKSA8IDQpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgb25lIGlzIGRlZmluaXRlbHkgYSB0cmFja3BhZCBldmVudCBiZWNhdXNlIGl0IGlzIHNvIHNtYWxsLlxuICAgICAgICAgICAgdGhpcy5fdHlwZSA9ICd0cmFja3BhZCc7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0aW1lRGVsdGEgPiA0MDApIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbGlrZWx5IGEgbmV3IHNjcm9sbCBhY3Rpb24uXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAvLyBTdGFydCBhIHRpbWVvdXQgaW4gY2FzZSB0aGlzIHdhcyBhIHNpbmd1bGFyIGV2ZW50LCBhbmQgZGVseSBpdCBieSB1cCB0byA0MG1zLlxuICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5fb25UaW1lb3V0LCA0MCwgZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fdHlwZSkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHJlcGVhdGluZyBldmVudCwgYnV0IHdlIGRvbid0IGtub3cgdGhlIHR5cGUgb2YgZXZlbnQganVzdCB5ZXQuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGVsdGEgcGVyIHRpbWUgaXMgc21hbGwsIHdlIGFzc3VtZSBpdCdzIGEgZmFzdCB0cmFja3BhZDsgb3RoZXJ3aXNlIHdlIHN3aXRjaCBpbnRvIHdoZWVsIG1vZGUuXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gKE1hdGguYWJzKHRpbWVEZWx0YSAqIHZhbHVlKSA8IDIwMCkgPyAndHJhY2twYWQnIDogJ3doZWVsJztcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIG91ciBkZWxheWVkIGV2ZW50IGlzbid0IGZpcmVkIGFnYWluLCBiZWNhdXNlIHdlIGFjY3VtdWxhdGVcbiAgICAgICAgICAgIC8vIHRoZSBwcmV2aW91cyBldmVudCAod2hpY2ggd2FzIGxlc3MgdGhhbiA0MG1zIGFnbykgaW50byB0aGlzIGV2ZW50LlxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy5fbGFzdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2xvdyBkb3duIHpvb20gaWYgc2hpZnQga2V5IGlzIGhlbGQgZm9yIG1vcmUgcHJlY2lzZSB6b29taW5nXG4gICAgICAgIGlmIChlLnNoaWZ0S2V5ICYmIHZhbHVlKSB2YWx1ZSA9IHZhbHVlIC8gNDtcblxuICAgICAgICAvLyBPbmx5IGZpcmUgdGhlIGNhbGxiYWNrIGlmIHdlIGFjdHVhbGx5IGtub3cgd2hhdCB0eXBlIG9mIHNjcm9sbGluZyBkZXZpY2UgdGhlIHVzZXIgdXNlcy5cbiAgICAgICAgaWYgKHRoaXMuX3R5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RXaGVlbEV2ZW50ID0gZTtcbiAgICAgICAgICAgIHRoaXMuX2RlbHRhIC09IHZhbHVlO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBfb25UaW1lb3V0KGluaXRpYWxFdmVudDogYW55KSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSAnd2hlZWwnO1xuICAgICAgICB0aGlzLl9kZWx0YSAtPSB0aGlzLl9sYXN0VmFsdWU7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydChpbml0aWFsRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3N0YXJ0KGU6IGFueSkge1xuICAgICAgICBpZiAoIXRoaXMuX2RlbHRhKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lSWQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzWm9vbWluZygpKSB7XG4gICAgICAgICAgICB0aGlzLl96b29taW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fZmluaXNoVGltZW91dCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZmluaXNoVGltZW91dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBvcyA9IERPTS5tb3VzZVBvcyh0aGlzLl9lbCwgZSk7XG5cbiAgICAgICAgdGhpcy5fYXJvdW5kID0gTG5nTGF0LmNvbnZlcnQodGhpcy5fYXJvdW5kQ2VudGVyID8gdGhpcy5fbWFwLmdldENlbnRlcigpIDogdGhpcy5fbWFwLnVucHJvamVjdChwb3MpKTtcbiAgICAgICAgdGhpcy5fYXJvdW5kUG9pbnQgPSB0aGlzLl9tYXAudHJhbnNmb3JtLmxvY2F0aW9uUG9pbnQodGhpcy5fYXJvdW5kKTtcbiAgICAgICAgaWYgKCF0aGlzLl9mcmFtZUlkKSB7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZUlkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZXIuX3RyaWdnZXJSZW5kZXJGcmFtZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyRnJhbWUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZnJhbWVJZCkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9mcmFtZUlkID0gbnVsbDtcblxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCB0ciA9IHRoaXMuX21hcC50cmFuc2Zvcm07XG5cbiAgICAgICAgLy8gaWYgd2UndmUgaGFkIHNjcm9sbCBldmVudHMgc2luY2UgdGhlIGxhc3QgcmVuZGVyIGZyYW1lLCBjb25zdW1lIHRoZVxuICAgICAgICAvLyBhY2N1bXVsYXRlZCBkZWx0YSwgYW5kIHVwZGF0ZSB0aGUgdGFyZ2V0IHpvb20gbGV2ZWwgYWNjb3JkaW5nbHlcbiAgICAgICAgaWYgKHRoaXMuX2RlbHRhICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBGb3IgdHJhY2twYWQgZXZlbnRzIGFuZCBzaW5nbGUgbW91c2Ugd2hlZWwgdGlja3MsIHVzZSB0aGUgZGVmYXVsdCB6b29tIHJhdGVcbiAgICAgICAgICAgIGNvbnN0IHpvb21SYXRlID0gKHRoaXMuX3R5cGUgPT09ICd3aGVlbCcgJiYgTWF0aC5hYnModGhpcy5fZGVsdGEpID4gd2hlZWxab29tRGVsdGEpID8gdGhpcy5fd2hlZWxab29tUmF0ZSA6IHRoaXMuX2RlZmF1bHRab29tUmF0ZTtcbiAgICAgICAgICAgIC8vIFNjYWxlIGJ5IHNpZ21vaWQgb2Ygc2Nyb2xsIHdoZWVsIGRlbHRhLlxuICAgICAgICAgICAgbGV0IHNjYWxlID0gbWF4U2NhbGVQZXJGcmFtZSAvICgxICsgTWF0aC5leHAoLU1hdGguYWJzKHRoaXMuX2RlbHRhICogem9vbVJhdGUpKSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWx0YSA8IDAgJiYgc2NhbGUgIT09IDApIHtcbiAgICAgICAgICAgICAgICBzY2FsZSA9IDEgLyBzY2FsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZnJvbVNjYWxlID0gdHlwZW9mIHRoaXMuX3RhcmdldFpvb20gPT09ICdudW1iZXInID8gdHIuem9vbVNjYWxlKHRoaXMuX3RhcmdldFpvb20pIDogdHIuc2NhbGU7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRab29tID0gTWF0aC5taW4odHIubWF4Wm9vbSwgTWF0aC5tYXgodHIubWluWm9vbSwgdHIuc2NhbGVab29tKGZyb21TY2FsZSAqIHNjYWxlKSkpO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgbW91c2Ugd2hlZWwsIHJlZnJlc2ggdGhlIHN0YXJ0aW5nIHpvb20gYW5kIGVhc2luZ1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gd2UncmUgdXNpbmcgdG8gc21vb3RoIG91dCB0aGUgem9vbWluZyBiZXR3ZWVuIHdoZWVsXG4gICAgICAgICAgICAvLyBldmVudHNcbiAgICAgICAgICAgIGlmICh0aGlzLl90eXBlID09PSAnd2hlZWwnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRab29tID0gdHIuem9vbTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lYXNpbmcgPSB0aGlzLl9zbW9vdGhPdXRFYXNpbmcoMjAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZGVsdGEgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFyZ2V0Wm9vbSA9IHR5cGVvZiB0aGlzLl90YXJnZXRab29tID09PSAnbnVtYmVyJyA/XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRab29tIDogdHIuem9vbTtcbiAgICAgICAgY29uc3Qgc3RhcnRab29tID0gdGhpcy5fc3RhcnRab29tO1xuICAgICAgICBjb25zdCBlYXNpbmcgPSB0aGlzLl9lYXNpbmc7XG5cbiAgICAgICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIGxldCB6b29tO1xuICAgICAgICBpZiAodGhpcy5fdHlwZSA9PT0gJ3doZWVsJyAmJiBzdGFydFpvb20gJiYgZWFzaW5nKSB7XG4gICAgICAgICAgICBhc3NlcnQoZWFzaW5nICYmIHR5cGVvZiBzdGFydFpvb20gPT09ICdudW1iZXInKTtcblxuICAgICAgICAgICAgY29uc3QgdCA9IE1hdGgubWluKChicm93c2VyLm5vdygpIC0gdGhpcy5fbGFzdFdoZWVsRXZlbnRUaW1lKSAvIDIwMCwgMSk7XG4gICAgICAgICAgICBjb25zdCBrID0gZWFzaW5nKHQpO1xuICAgICAgICAgICAgem9vbSA9IGludGVycG9sYXRlKHN0YXJ0Wm9vbSwgdGFyZ2V0Wm9vbSwgayk7XG4gICAgICAgICAgICBpZiAodCA8IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2ZyYW1lSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVJZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB6b29tID0gdGFyZ2V0Wm9vbTtcbiAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl96b29taW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlci5fdHJpZ2dlclJlbmRlckZyYW1lKCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RhcmdldFpvb207XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2ZpbmlzaFRpbWVvdXQ7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vSW5lcnRpYTogdHJ1ZSxcbiAgICAgICAgICAgIG5lZWRzUmVuZGVyRnJhbWU6ICFmaW5pc2hlZCxcbiAgICAgICAgICAgIHpvb21EZWx0YTogem9vbSAtIHRyLnpvb20sXG4gICAgICAgICAgICBhcm91bmQ6IHRoaXMuX2Fyb3VuZFBvaW50LFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogdGhpcy5fbGFzdFdoZWVsRXZlbnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfc21vb3RoT3V0RWFzaW5nKGR1cmF0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgbGV0IGVhc2luZyA9IF9lYXNlO1xuXG4gICAgICAgIGlmICh0aGlzLl9wcmV2RWFzZSkge1xuICAgICAgICAgICAgY29uc3QgZWFzZSA9IHRoaXMuX3ByZXZFYXNlLFxuICAgICAgICAgICAgICAgIHQgPSAoYnJvd3Nlci5ub3coKSAtIGVhc2Uuc3RhcnQpIC8gZWFzZS5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICBzcGVlZCA9IGVhc2UuZWFzaW5nKHQgKyAwLjAxKSAtIGVhc2UuZWFzaW5nKHQpLFxuXG4gICAgICAgICAgICAgICAgLy8gUXVpY2sgaGFjayB0byBtYWtlIG5ldyBiZXppZXIgdGhhdCBpcyBjb250aW51b3VzIHdpdGggbGFzdFxuICAgICAgICAgICAgICAgIHggPSAwLjI3IC8gTWF0aC5zcXJ0KHNwZWVkICogc3BlZWQgKyAwLjAwMDEpICogMC4wMSxcbiAgICAgICAgICAgICAgICB5ID0gTWF0aC5zcXJ0KDAuMjcgKiAwLjI3IC0geCAqIHgpO1xuXG4gICAgICAgICAgICBlYXNpbmcgPSBiZXppZXIoeCwgeSwgMC4yNSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wcmV2RWFzZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBicm93c2VyLm5vdygpLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmdcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZWFzaW5nO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbFpvb21IYW5kbGVyO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUgQ2xpY2tab29tSGFuZGxlciBmcm9tICcuLi9jbGlja196b29tJztcbmltcG9ydCB0eXBlIFRhcFpvb21IYW5kbGVyIGZyb20gJy4vLi4vdGFwX3pvb20nO1xuXG4vKipcbiAqIFRoZSBgRG91YmxlQ2xpY2tab29tSGFuZGxlcmAgYWxsb3dzIHRoZSB1c2VyIHRvIHpvb20gdGhlIG1hcCBhdCBhIHBvaW50IGJ5XG4gKiBkb3VibGUgY2xpY2tpbmcgb3IgZG91YmxlIHRhcHBpbmcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvdWJsZUNsaWNrWm9vbUhhbmRsZXIge1xuXG4gICAgX2NsaWNrWm9vbTogQ2xpY2tab29tSGFuZGxlcjtcbiAgICBfdGFwWm9vbTogVGFwWm9vbUhhbmRsZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICovXG4gICAgY29uc3RydWN0b3IoY2xpY2tab29tOiBDbGlja1pvb21IYW5kbGVyLCBUYXBab29tOiBUYXBab29tSGFuZGxlcikge1xuICAgICAgICB0aGlzLl9jbGlja1pvb20gPSBjbGlja1pvb207XG4gICAgICAgIHRoaXMuX3RhcFpvb20gPSBUYXBab29tO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwiZG91YmxlIGNsaWNrIHRvIHpvb21cIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLmRvdWJsZUNsaWNrWm9vbS5lbmFibGUoKTtcbiAgICAgKi9cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIHRoaXMuX2NsaWNrWm9vbS5lbmFibGUoKTtcbiAgICAgICAgdGhpcy5fdGFwWm9vbS5lbmFibGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgXCJkb3VibGUgY2xpY2sgdG8gem9vbVwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuZG91YmxlQ2xpY2tab29tLmRpc2FibGUoKTtcbiAgICAgKi9cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLl9jbGlja1pvb20uZGlzYWJsZSgpO1xuICAgICAgICB0aGlzLl90YXBab29tLmRpc2FibGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwiZG91YmxlIGNsaWNrIHRvIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgXCJkb3VibGUgY2xpY2sgdG8gem9vbVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpY2tab29tLmlzRW5hYmxlZCgpICYmIHRoaXMuX3RhcFpvb20uaXNFbmFibGVkKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcImRvdWJsZSBjbGljayB0byB6b29tXCIgaW50ZXJhY3Rpb24gaXMgYWN0aXZlLCBpLmUuIGN1cnJlbnRseSBiZWluZyB1c2VkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgXCJkb3VibGUgY2xpY2sgdG8gem9vbVwiIGludGVyYWN0aW9uIGlzIGFjdGl2ZS5cbiAgICAgKi9cbiAgICBpc0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWNrWm9vbS5pc0FjdGl2ZSgpIHx8IHRoaXMuX3RhcFpvb20uaXNBY3RpdmUoKTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi9tYXAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbGlja1pvb21IYW5kbGVyIHtcblxuICAgIF9lbmFibGVkOiBib29sZWFuO1xuICAgIF9hY3RpdmU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBkYmxjbGljayhlOiBNb3VzZUV2ZW50LCBwb2ludDogUG9pbnQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FtZXJhQW5pbWF0aW9uOiAobWFwOiBNYXApID0+IHtcbiAgICAgICAgICAgICAgICBtYXAuZWFzZVRvKHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgem9vbTogbWFwLmdldFpvb20oKSArIChlLnNoaWZ0S2V5ID8gLTEgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgYXJvdW5kOiBtYXAudW5wcm9qZWN0KHBvaW50KVxuICAgICAgICAgICAgICAgIH0sIHtvcmlnaW5hbEV2ZW50OiBlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZW5hYmxlKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVkO1xuICAgIH1cblxuICAgIGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7VGFwUmVjb2duaXplciwgTUFYX1RBUF9JTlRFUlZBTH0gZnJvbSAnLi90YXBfcmVjb2duaXplcic7XG5pbXBvcnQgdHlwZSBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFwRHJhZ1pvb21IYW5kbGVyIHtcblxuICAgIF9lbmFibGVkOiBib29sZWFuO1xuICAgIF9hY3RpdmU6IGJvb2xlYW47XG4gICAgX3N3aXBlUG9pbnQ6IFBvaW50O1xuICAgIF9zd2lwZVRvdWNoOiBudW1iZXI7XG4gICAgX3RhcFRpbWU6IG51bWJlcjtcbiAgICBfdGFwOiBUYXBSZWNvZ25pemVyO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgdGhpcy5fdGFwID0gbmV3IFRhcFJlY29nbml6ZXIoe1xuICAgICAgICAgICAgbnVtVG91Y2hlczogMSxcbiAgICAgICAgICAgIG51bVRhcHM6IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3N3aXBlUG9pbnQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zd2lwZVRvdWNoO1xuICAgICAgICBkZWxldGUgdGhpcy5fdGFwVGltZTtcbiAgICAgICAgdGhpcy5fdGFwLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgdG91Y2hzdGFydChlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSB7XG4gICAgICAgIGlmICh0aGlzLl9zd2lwZVBvaW50KSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuX3RhcFRpbWUgJiYgZS50aW1lU3RhbXAgLSB0aGlzLl90YXBUaW1lID4gTUFYX1RBUF9JTlRFUlZBTCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl90YXBUaW1lKSB7XG4gICAgICAgICAgICB0aGlzLl90YXAudG91Y2hzdGFydChlLCBwb2ludHMsIG1hcFRvdWNoZXMpO1xuICAgICAgICB9IGVsc2UgaWYgKG1hcFRvdWNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fc3dpcGVQb2ludCA9IHBvaW50c1swXTtcbiAgICAgICAgICAgIHRoaXMuX3N3aXBlVG91Y2ggPSBtYXBUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHRvdWNobW92ZShlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSB7XG4gICAgICAgIGlmICghdGhpcy5fdGFwVGltZSkge1xuICAgICAgICAgICAgdGhpcy5fdGFwLnRvdWNobW92ZShlLCBwb2ludHMsIG1hcFRvdWNoZXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N3aXBlUG9pbnQpIHtcbiAgICAgICAgICAgIGlmIChtYXBUb3VjaGVzWzBdLmlkZW50aWZpZXIgIT09IHRoaXMuX3N3aXBlVG91Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld1N3aXBlUG9pbnQgPSBwb2ludHNbMF07XG4gICAgICAgICAgICBjb25zdCBkaXN0ID0gbmV3U3dpcGVQb2ludC55IC0gdGhpcy5fc3dpcGVQb2ludC55O1xuICAgICAgICAgICAgdGhpcy5fc3dpcGVQb2ludCA9IG5ld1N3aXBlUG9pbnQ7XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgem9vbURlbHRhOiBkaXN0IC8gMTI4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG91Y2hlbmQoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikge1xuICAgICAgICBpZiAoIXRoaXMuX3RhcFRpbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5fdGFwLnRvdWNoZW5kKGUsIHBvaW50cywgbWFwVG91Y2hlcyk7XG4gICAgICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90YXBUaW1lID0gZS50aW1lU3RhbXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3dpcGVQb2ludCkge1xuICAgICAgICAgICAgaWYgKG1hcFRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG91Y2hjYW5jZWwoKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZWQ7XG4gICAgfVxuXG4gICAgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUge01vdXNlUGFuSGFuZGxlcn0gZnJvbSAnLi4vbW91c2UnO1xuaW1wb3J0IHR5cGUgVG91Y2hQYW5IYW5kbGVyIGZyb20gJy4vLi4vdG91Y2hfcGFuJztcblxuZXhwb3J0IHR5cGUgRHJhZ1Bhbk9wdGlvbnMgPSB7XG4gICAgbGluZWFyaXR5PzogbnVtYmVyO1xuICAgIGVhc2luZz86ICh0OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBkZWNlbGVyYXRpb24/OiBudW1iZXI7XG4gICAgbWF4U3BlZWQ/OiBudW1iZXI7XG59O1xuXG4vKipcbiAqIFRoZSBgRHJhZ1BhbkhhbmRsZXJgIGFsbG93cyB0aGUgdXNlciB0byBwYW4gdGhlIG1hcCBieSBjbGlja2luZyBhbmQgZHJhZ2dpbmdcbiAqIHRoZSBjdXJzb3IuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyYWdQYW5IYW5kbGVyIHtcblxuICAgIF9lbDogSFRNTEVsZW1lbnQ7XG4gICAgX21vdXNlUGFuOiBNb3VzZVBhbkhhbmRsZXI7XG4gICAgX3RvdWNoUGFuOiBUb3VjaFBhbkhhbmRsZXI7XG4gICAgX2luZXJ0aWFPcHRpb25zOiBEcmFnUGFuT3B0aW9uc1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVsOiBIVE1MRWxlbWVudCwgbW91c2VQYW46IE1vdXNlUGFuSGFuZGxlciwgdG91Y2hQYW46IFRvdWNoUGFuSGFuZGxlcikge1xuICAgICAgICB0aGlzLl9lbCA9IGVsO1xuICAgICAgICB0aGlzLl9tb3VzZVBhbiA9IG1vdXNlUGFuO1xuICAgICAgICB0aGlzLl90b3VjaFBhbiA9IHRvdWNoUGFuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwiZHJhZyB0byBwYW5cIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGluZWFyaXR5PTBdIGZhY3RvciB1c2VkIHRvIHNjYWxlIHRoZSBkcmFnIHZlbG9jaXR5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZWFzaW5nPWJlemllcigwLCAwLCAwLjMsIDEpXSBlYXNpbmcgZnVuY3Rpb24gYXBwbGxlZCB0byBgbWFwLnBhblRvYCB3aGVuIGFwcGx5aW5nIHRoZSBkcmFnLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhTcGVlZD0xNDAwXSB0aGUgbWF4aW11bSB2YWx1ZSBvZiB0aGUgZHJhZyB2ZWxvY2l0eS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZGVjZWxlcmF0aW9uPTI1MDBdIHRoZSByYXRlIGF0IHdoaWNoIHRoZSBzcGVlZCByZWR1Y2VzIGFmdGVyIHRoZSBwYW4gZW5kcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtYXAuZHJhZ1Bhbi5lbmFibGUoKTtcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLmRyYWdQYW4uZW5hYmxlKHtcbiAgICAgKiAgICAgIGxpbmVhcml0eTogMC4zLFxuICAgICAqICAgICAgZWFzaW5nOiBiZXppZXIoMCwgMCwgMC4zLCAxKSxcbiAgICAgKiAgICAgIG1heFNwZWVkOiAxNDAwLFxuICAgICAqICAgICAgZGVjZWxlcmF0aW9uOiAyNTAwLFxuICAgICAqICAgfSk7XG4gICAgICovXG4gICAgZW5hYmxlKG9wdGlvbnM/OiBEcmFnUGFuT3B0aW9ucykge1xuICAgICAgICB0aGlzLl9pbmVydGlhT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMuX21vdXNlUGFuLmVuYWJsZSgpO1xuICAgICAgICB0aGlzLl90b3VjaFBhbi5lbmFibGUoKTtcbiAgICAgICAgdGhpcy5fZWwuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtdG91Y2gtZHJhZy1wYW4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgXCJkcmFnIHRvIHBhblwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuZHJhZ1Bhbi5kaXNhYmxlKCk7XG4gICAgICovXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fbW91c2VQYW4uZGlzYWJsZSgpO1xuICAgICAgICB0aGlzLl90b3VjaFBhbi5kaXNhYmxlKCk7XG4gICAgICAgIHRoaXMuX2VsLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLXRvdWNoLWRyYWctcGFuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcImRyYWcgdG8gcGFuXCIgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwiZHJhZyB0byBwYW5cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vdXNlUGFuLmlzRW5hYmxlZCgpICYmIHRoaXMuX3RvdWNoUGFuLmlzRW5hYmxlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgXCJkcmFnIHRvIHBhblwiIGludGVyYWN0aW9uIGlzIGFjdGl2ZSwgaS5lLiBjdXJyZW50bHkgYmVpbmcgdXNlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwiZHJhZyB0byBwYW5cIiBpbnRlcmFjdGlvbiBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb3VzZVBhbi5pc0FjdGl2ZSgpIHx8IHRoaXMuX3RvdWNoUGFuLmlzQWN0aXZlKCk7XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUge01vdXNlUm90YXRlSGFuZGxlciwgTW91c2VQaXRjaEhhbmRsZXJ9IGZyb20gJy4uL21vdXNlJztcblxuLyoqXG4gKiBUaGUgYERyYWdSb3RhdGVIYW5kbGVyYCBhbGxvd3MgdGhlIHVzZXIgdG8gcm90YXRlIHRoZSBtYXAgYnkgY2xpY2tpbmcgYW5kXG4gKiBkcmFnZ2luZyB0aGUgY3Vyc29yIHdoaWxlIGhvbGRpbmcgdGhlIHJpZ2h0IG1vdXNlIGJ1dHRvbiBvciBgY3RybGAga2V5LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmFnUm90YXRlSGFuZGxlciB7XG5cbiAgICBfbW91c2VSb3RhdGU6IE1vdXNlUm90YXRlSGFuZGxlcjtcbiAgICBfbW91c2VQaXRjaDogTW91c2VQaXRjaEhhbmRsZXI7XG4gICAgX3BpdGNoV2l0aFJvdGF0ZTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYmVhcmluZ1NuYXBdIFRoZSB0aHJlc2hvbGQsIG1lYXN1cmVkIGluIGRlZ3JlZXMsIHRoYXQgZGV0ZXJtaW5lcyB3aGVuIHRoZSBtYXAnc1xuICAgICAqICAgYmVhcmluZyB3aWxsIHNuYXAgdG8gbm9ydGguXG4gICAgICogQHBhcmFtIHtib29sfSBbb3B0aW9ucy5waXRjaFdpdGhSb3RhdGU9dHJ1ZV0gQ29udHJvbCB0aGUgbWFwIHBpdGNoIGluIGFkZGl0aW9uIHRvIHRoZSBiZWFyaW5nXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7cGl0Y2hXaXRoUm90YXRlOiBib29sZWFufSwgbW91c2VSb3RhdGU6IE1vdXNlUm90YXRlSGFuZGxlciwgbW91c2VQaXRjaDogTW91c2VQaXRjaEhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fcGl0Y2hXaXRoUm90YXRlID0gb3B0aW9ucy5waXRjaFdpdGhSb3RhdGU7XG4gICAgICAgIHRoaXMuX21vdXNlUm90YXRlID0gbW91c2VSb3RhdGU7XG4gICAgICAgIHRoaXMuX21vdXNlUGl0Y2ggPSBtb3VzZVBpdGNoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLmRyYWdSb3RhdGUuZW5hYmxlKCk7XG4gICAgICovXG4gICAgZW5hYmxlKCkge1xuICAgICAgICB0aGlzLl9tb3VzZVJvdGF0ZS5lbmFibGUoKTtcbiAgICAgICAgaWYgKHRoaXMuX3BpdGNoV2l0aFJvdGF0ZSkgdGhpcy5fbW91c2VQaXRjaC5lbmFibGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuZHJhZ1JvdGF0ZS5kaXNhYmxlKCk7XG4gICAgICovXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fbW91c2VSb3RhdGUuZGlzYWJsZSgpO1xuICAgICAgICB0aGlzLl9tb3VzZVBpdGNoLmRpc2FibGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW91c2VSb3RhdGUuaXNFbmFibGVkKCkgJiYgKCF0aGlzLl9waXRjaFdpdGhSb3RhdGUgfHwgdGhpcy5fbW91c2VQaXRjaC5pc0VuYWJsZWQoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcImRyYWcgdG8gcm90YXRlXCIgaW50ZXJhY3Rpb24gaXMgYWN0aXZlLCBpLmUuIGN1cnJlbnRseSBiZWluZyB1c2VkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uIGlzIGFjdGl2ZS5cbiAgICAgKi9cbiAgICBpc0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vdXNlUm90YXRlLmlzQWN0aXZlKCkgfHwgdGhpcy5fbW91c2VQaXRjaC5pc0FjdGl2ZSgpO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtUb3VjaFpvb21IYW5kbGVyLCBUb3VjaFJvdGF0ZUhhbmRsZXJ9IGZyb20gJy4uL3RvdWNoX3pvb21fcm90YXRlJztcbmltcG9ydCB0eXBlIFRhcERyYWdab29tSGFuZGxlciBmcm9tICcuLi90YXBfZHJhZ196b29tJztcblxuLyoqXG4gKiBUaGUgYFRvdWNoWm9vbVJvdGF0ZUhhbmRsZXJgIGFsbG93cyB0aGUgdXNlciB0byB6b29tIGFuZCByb3RhdGUgdGhlIG1hcCBieVxuICogcGluY2hpbmcgb24gYSB0b3VjaHNjcmVlbi5cbiAqXG4gKiBUaGV5IGNhbiB6b29tIHdpdGggb25lIGZpbmdlciBieSBkb3VibGUgdGFwcGluZyBhbmQgZHJhZ2dpbmcuIE9uIHRoZSBzZWNvbmQgdGFwLFxuICogaG9sZCB0aGUgZmluZ2VyIGRvd24gYW5kIGRyYWcgdXAgb3IgZG93biB0byB6b29tIGluIG9yIG91dC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG91Y2hab29tUm90YXRlSGFuZGxlciB7XG5cbiAgICBfZWw6IEhUTUxFbGVtZW50O1xuICAgIF90b3VjaFpvb206IFRvdWNoWm9vbUhhbmRsZXI7XG4gICAgX3RvdWNoUm90YXRlOiBUb3VjaFJvdGF0ZUhhbmRsZXI7XG4gICAgX3RhcERyYWdab29tOiBUYXBEcmFnWm9vbUhhbmRsZXI7XG4gICAgX3JvdGF0aW9uRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgX2VuYWJsZWQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICovXG4gICAgY29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50LCB0b3VjaFpvb206IFRvdWNoWm9vbUhhbmRsZXIsIHRvdWNoUm90YXRlOiBUb3VjaFJvdGF0ZUhhbmRsZXIsIHRhcERyYWdab29tOiBUYXBEcmFnWm9vbUhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fZWwgPSBlbDtcbiAgICAgICAgdGhpcy5fdG91Y2hab29tID0gdG91Y2hab29tO1xuICAgICAgICB0aGlzLl90b3VjaFJvdGF0ZSA9IHRvdWNoUm90YXRlO1xuICAgICAgICB0aGlzLl90YXBEcmFnWm9vbSA9IHRhcERyYWdab29tO1xuICAgICAgICB0aGlzLl9yb3RhdGlvbkRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwicGluY2ggdG8gcm90YXRlIGFuZCB6b29tXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hcm91bmRdIElmIFwiY2VudGVyXCIgaXMgcGFzc2VkLCBtYXAgd2lsbCB6b29tIGFyb3VuZCB0aGUgY2VudGVyXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5lbmFibGUoKTtcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5lbmFibGUoeyBhcm91bmQ6ICdjZW50ZXInIH0pO1xuICAgICAqL1xuICAgIGVuYWJsZShvcHRpb25zOiA/e2Fyb3VuZD86ICdjZW50ZXInfSkge1xuICAgICAgICB0aGlzLl90b3VjaFpvb20uZW5hYmxlKG9wdGlvbnMpO1xuICAgICAgICBpZiAoIXRoaXMuX3JvdGF0aW9uRGlzYWJsZWQpIHRoaXMuX3RvdWNoUm90YXRlLmVuYWJsZShvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fdGFwRHJhZ1pvb20uZW5hYmxlKCk7XG4gICAgICAgIHRoaXMuX2VsLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLXRvdWNoLXpvb20tcm90YXRlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgdGhlIFwicGluY2ggdG8gcm90YXRlIGFuZCB6b29tXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5kaXNhYmxlKCk7XG4gICAgICovXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fdG91Y2hab29tLmRpc2FibGUoKTtcbiAgICAgICAgdGhpcy5fdG91Y2hSb3RhdGUuZGlzYWJsZSgpO1xuICAgICAgICB0aGlzLl90YXBEcmFnWm9vbS5kaXNhYmxlKCk7XG4gICAgICAgIHRoaXMuX2VsLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLXRvdWNoLXpvb20tcm90YXRlJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcInBpbmNoIHRvIHJvdGF0ZSBhbmQgem9vbVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBcInBpbmNoIHRvIHJvdGF0ZSBhbmQgem9vbVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG91Y2hab29tLmlzRW5hYmxlZCgpICYmXG4gICAgICAgICAgICAodGhpcy5fcm90YXRpb25EaXNhYmxlZCB8fCB0aGlzLl90b3VjaFJvdGF0ZS5pc0VuYWJsZWQoKSkgJiZcbiAgICAgICAgICAgIHRoaXMuX3RhcERyYWdab29tLmlzRW5hYmxlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgaGFuZGxlciBpcyBlbmFibGVkIGFuZCBoYXMgZGV0ZWN0ZWQgdGhlIHN0YXJ0IG9mIGEgem9vbS9yb3RhdGUgZ2VzdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSAvL2VzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgKi9cbiAgICBpc0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvdWNoWm9vbS5pc0FjdGl2ZSgpIHx8IHRoaXMuX3RvdWNoUm90YXRlLmlzQWN0aXZlKCkgfHwgdGhpcy5fdGFwRHJhZ1pvb20uaXNBY3RpdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgXCJwaW5jaCB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiwgbGVhdmluZyB0aGUgXCJwaW5jaCB0byB6b29tXCJcbiAgICAgKiBpbnRlcmFjdGlvbiBlbmFibGVkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIG1hcC50b3VjaFpvb21Sb3RhdGUuZGlzYWJsZVJvdGF0aW9uKCk7XG4gICAgICovXG4gICAgZGlzYWJsZVJvdGF0aW9uKCkge1xuICAgICAgICB0aGlzLl9yb3RhdGlvbkRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fdG91Y2hSb3RhdGUuZGlzYWJsZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwicGluY2ggdG8gcm90YXRlXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5lbmFibGUoKTtcbiAgICAgKiAgIG1hcC50b3VjaFpvb21Sb3RhdGUuZW5hYmxlUm90YXRpb24oKTtcbiAgICAgKi9cbiAgICBlbmFibGVSb3RhdGlvbigpIHtcbiAgICAgICAgdGhpcy5fcm90YXRpb25EaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fdG91Y2hab29tLmlzRW5hYmxlZCgpKSB0aGlzLl90b3VjaFJvdGF0ZS5lbmFibGUoKTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge0V2ZW50fSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IERPTSBmcm9tICcuLi91dGlsL2RvbSc7XG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi9tYXAnO1xuaW1wb3J0IEhhbmRsZXJJbmVydGlhIGZyb20gJy4vaGFuZGxlcl9pbmVydGlhJztcbmltcG9ydCB7TWFwRXZlbnRIYW5kbGVyLCBCbG9ja2FibGVNYXBFdmVudEhhbmRsZXJ9IGZyb20gJy4vaGFuZGxlci9tYXBfZXZlbnQnO1xuaW1wb3J0IEJveFpvb21IYW5kbGVyIGZyb20gJy4vaGFuZGxlci9ib3hfem9vbSc7XG5pbXBvcnQgVGFwWm9vbUhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL3RhcF96b29tJztcbmltcG9ydCB7TW91c2VQYW5IYW5kbGVyLCBNb3VzZVJvdGF0ZUhhbmRsZXIsIE1vdXNlUGl0Y2hIYW5kbGVyfSBmcm9tICcuL2hhbmRsZXIvbW91c2UnO1xuaW1wb3J0IFRvdWNoUGFuSGFuZGxlciBmcm9tICcuL2hhbmRsZXIvdG91Y2hfcGFuJztcbmltcG9ydCB7VG91Y2hab29tSGFuZGxlciwgVG91Y2hSb3RhdGVIYW5kbGVyLCBUb3VjaFBpdGNoSGFuZGxlcn0gZnJvbSAnLi9oYW5kbGVyL3RvdWNoX3pvb21fcm90YXRlJztcbmltcG9ydCBLZXlib2FyZEhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL2tleWJvYXJkJztcbmltcG9ydCBTY3JvbGxab29tSGFuZGxlciBmcm9tICcuL2hhbmRsZXIvc2Nyb2xsX3pvb20nO1xuaW1wb3J0IERvdWJsZUNsaWNrWm9vbUhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL3NoaW0vZGJsY2xpY2tfem9vbSc7XG5pbXBvcnQgQ2xpY2tab29tSGFuZGxlciBmcm9tICcuL2hhbmRsZXIvY2xpY2tfem9vbSc7XG5pbXBvcnQgVGFwRHJhZ1pvb21IYW5kbGVyIGZyb20gJy4vaGFuZGxlci90YXBfZHJhZ196b29tJztcbmltcG9ydCBEcmFnUGFuSGFuZGxlciBmcm9tICcuL2hhbmRsZXIvc2hpbS9kcmFnX3Bhbic7XG5pbXBvcnQgRHJhZ1JvdGF0ZUhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL3NoaW0vZHJhZ19yb3RhdGUnO1xuaW1wb3J0IFRvdWNoWm9vbVJvdGF0ZUhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL3NoaW0vdG91Y2hfem9vbV9yb3RhdGUnO1xuaW1wb3J0IHtiaW5kQWxsLCBleHRlbmR9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uL3V0aWwvd2luZG93JztcbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuZXhwb3J0IHR5cGUgSW5wdXRFdmVudCA9IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50IHwgS2V5Ym9hcmRFdmVudCB8IFdoZWVsRXZlbnQ7XG5cbmNvbnN0IGlzTW92aW5nID0gcCA9PiBwLnpvb20gfHwgcC5kcmFnIHx8IHAucGl0Y2ggfHwgcC5yb3RhdGU7XG5cbmNsYXNzIFJlbmRlckZyYW1lRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgdHlwZTogJ3JlbmRlckZyYW1lJztcbiAgICB0aW1lU3RhbXA6IG51bWJlcjtcbn1cblxuLy8gSGFuZGxlcnMgaW50ZXJwcmV0IGRvbSBldmVudHMgYW5kIHJldHVybiBjYW1lcmEgY2hhbmdlcyB0aGF0IHNob3VsZCBiZVxuLy8gYXBwbGllZCB0byB0aGUgbWFwIChgSGFuZGxlclJlc3VsdGBzKS4gVGhlIGNhbWVyYSBjaGFuZ2VzIGFyZSBhbGwgZGVsdGFzLlxuLy8gVGhlIGhhbmRsZXIgaXRzZWxmIHNob3VsZCBoYXZlIG5vIGtub3dsZWRnZSBvZiB0aGUgbWFwJ3MgY3VycmVudCBzdGF0ZS5cbi8vIFRoaXMgbWFrZXMgaXQgZWFzaWVyIHRvIG1lcmdlIG11bHRpcGxlIHJlc3VsdHMgYW5kIGtlZXBzIGhhbmRsZXJzIHNpbXBsZXIuXG4vLyBGb3IgZXhhbXBsZSwgaWYgdGhlcmUgaXMgYSBtb3VzZWRvd24gYW5kIG1vdXNlbW92ZSwgdGhlIG1vdXNlUGFuIGhhbmRsZXJcbi8vIHdvdWxkIHJldHVybiBhIGBwYW5EZWx0YWAgb24gdGhlIG1vdXNlbW92ZS5cbmV4cG9ydCBpbnRlcmZhY2UgSGFuZGxlciB7XG4gICAgZW5hYmxlKCk6IHZvaWQ7XG4gICAgZGlzYWJsZSgpOiB2b2lkO1xuICAgIGlzRW5hYmxlZCgpOiBib29sZWFuO1xuICAgIGlzQWN0aXZlKCk6IGJvb2xlYW47XG5cbiAgICAvLyBgcmVzZXRgIGNhbiBiZSBjYWxsZWQgYnkgdGhlIG1hbmFnZXIgYXQgYW55IHRpbWUgYW5kIG11c3QgcmVzZXQgZXZlcnl0aGluZyB0byBpdCdzIG9yaWdpbmFsIHN0YXRlXG4gICAgcmVzZXQoKTogdm9pZDtcblxuICAgIC8vIEhhbmRsZXJzIGNhbiBvcHRpb25hbGx5IGltcGxlbWVudCB0aGVzZSBtZXRob2RzLlxuICAgIC8vIFRoZXkgYXJlIGNhbGxlZCB3aXRoIGRvbSBldmVudHMgd2hlbmV2ZXIgdGhvc2UgZG9tIGV2ZW5zIGFyZSByZWNlaXZlZC5cbiAgICArdG91Y2hzdGFydD86IChlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSA9PiBIYW5kbGVyUmVzdWx0IHwgdm9pZDtcbiAgICArdG91Y2htb3ZlPzogKGU6IFRvdWNoRXZlbnQsIHBvaW50czogQXJyYXk8UG9pbnQ+LCBtYXBUb3VjaGVzOiBBcnJheTxUb3VjaD4pID0+IEhhbmRsZXJSZXN1bHQgfCB2b2lkO1xuICAgICt0b3VjaGVuZD86IChlOiBUb3VjaEV2ZW50LCBwb2ludHM6IEFycmF5PFBvaW50PiwgbWFwVG91Y2hlczogQXJyYXk8VG91Y2g+KSA9PiBIYW5kbGVyUmVzdWx0IHwgdm9pZDtcbiAgICArdG91Y2hjYW5jZWw/OiAoZTogVG91Y2hFdmVudCwgcG9pbnRzOiBBcnJheTxQb2ludD4sIG1hcFRvdWNoZXM6IEFycmF5PFRvdWNoPikgPT4gSGFuZGxlclJlc3VsdCB8IHZvaWQ7XG4gICAgK21vdXNlZG93bj86IChlOiBNb3VzZUV2ZW50LCBwb2ludDogUG9pbnQpID0+IEhhbmRsZXJSZXN1bHQgfCB2b2lkO1xuICAgICttb3VzZW1vdmU/OiAoZTogTW91c2VFdmVudCwgcG9pbnQ6IFBvaW50KSA9PiBIYW5kbGVyUmVzdWx0IHwgdm9pZDtcbiAgICArbW91c2V1cD86IChlOiBNb3VzZUV2ZW50LCBwb2ludDogUG9pbnQpID0+IEhhbmRsZXJSZXN1bHQgfCB2b2lkO1xuICAgICtkYmxjbGljaz86IChlOiBNb3VzZUV2ZW50LCBwb2ludDogUG9pbnQpID0+IEhhbmRsZXJSZXN1bHQgfCB2b2lkO1xuICAgICt3aGVlbD86IChlOiBXaGVlbEV2ZW50LCBwb2ludDogUG9pbnQpID0+IEhhbmRsZXJSZXN1bHQgfCB2b2lkO1xuICAgICtrZXlkb3duPzogKGU6IEtleWJvYXJkRXZlbnQpID0+IEhhbmRsZXJSZXN1bHQgfCB2b2lkO1xuICAgICtrZXl1cD86IChlOiBLZXlib2FyZEV2ZW50KSA9PiBIYW5kbGVyUmVzdWx0IHwgdm9pZDtcblxuICAgIC8vIGByZW5kZXJGcmFtZWAgaXMgdGhlIG9ubHkgbm9uLWRvbSBldmVudC4gSXQgaXMgY2FsbGVkIGR1cmluZyByZW5kZXJcbiAgICAvLyBmcmFtZXMgYW5kIGNhbiBiZSB1c2VkIHRvIHNtb290aCBjYW1lcmEgY2hhbmdlcyAoc2VlIHNjcm9sbCBoYW5kbGVyKS5cbiAgICArcmVuZGVyRnJhbWU/OiAoKSA9PiBIYW5kbGVyUmVzdWx0IHwgdm9pZDtcbn1cblxuLy8gQWxsIGhhbmRsZXIgbWV0aG9kcyB0aGF0IGFyZSBjYWxsZWQgd2l0aCBldmVudHMgY2FuIG9wdGlvbmFsbHkgcmV0dXJuIGEgYEhhbmRsZXJSZXN1bHRgLlxuZXhwb3J0IHR5cGUgSGFuZGxlclJlc3VsdCA9IHt8XG4gICAgcGFuRGVsdGE/OiBQb2ludCxcbiAgICB6b29tRGVsdGE/OiBudW1iZXIsXG4gICAgYmVhcmluZ0RlbHRhPzogbnVtYmVyLFxuICAgIHBpdGNoRGVsdGE/OiBudW1iZXIsXG4gICAgLy8gdGhlIHBvaW50IHRvIG5vdCBtb3ZlIHdoZW4gY2hhbmdpbmcgdGhlIGNhbWVyYVxuICAgIGFyb3VuZD86IFBvaW50IHwgbnVsbCxcbiAgICAvLyBzYW1lIGFzIGFib3ZlLCBleGNlcHQgZm9yIHBpbmNoIGFjdGlvbnMsIHdoaWNoIGFyZSBnaXZlbiBoaWdoZXIgcHJpb3JpdHlcbiAgICBwaW5jaEFyb3VuZD86IFBvaW50IHwgbnVsbCxcbiAgICAvLyBBIG1ldGhvZCB0aGF0IGNhbiBmaXJlIGEgb25lLW9mZiBlYXNpbmcgYnkgZGlyZWN0bHkgY2hhbmdpbmcgdGhlIG1hcCdzIGNhbWVyYS5cbiAgICBjYW1lcmFBbmltYXRpb24/OiAobWFwOiBNYXApID0+IGFueTtcblxuICAgIC8vIFRoZSBsYXN0IHRocmVlIHByb3BlcnRpZXMgYXJlIG5lZWRlZCBieSBvbmx5IG9uZSBoYW5kbGVyOiBzY3JvbGx6b29tLlxuICAgIC8vIFRoZSBET00gZXZlbnQgdG8gYmUgdXNlZCBhcyB0aGUgYG9yaWdpbmFsRXZlbnRgIG9uIGFueSBjYW1lcmEgY2hhbmdlIGV2ZW50cy5cbiAgICBvcmlnaW5hbEV2ZW50PzogYW55LFxuICAgIC8vIE1ha2VzIHRoZSBtYW5hZ2VyIHRyaWdnZXIgYSBmcmFtZSwgYWxsb3dpbmcgdGhlIGhhbmRsZXIgdG8gcmV0dXJuIG11bHRpcGxlIHJlc3VsdHMgb3ZlciB0aW1lIChzZWUgc2Nyb2xsem9vbSkuXG4gICAgbmVlZHNSZW5kZXJGcmFtZT86IGJvb2xlYW4sXG4gICAgLy8gVGhlIGNhbWVyYSBjaGFuZ2VzIHdvbid0IGdldCByZWNvcmRlZCBmb3IgaW5lcnRpYWwgem9vbWluZy5cbiAgICBub0luZXJ0aWE/OiBib29sZWFuXG58fTtcblxuZnVuY3Rpb24gaGFzQ2hhbmdlKHJlc3VsdDogSGFuZGxlclJlc3VsdCkge1xuICAgIHJldHVybiAocmVzdWx0LnBhbkRlbHRhICYmIHJlc3VsdC5wYW5EZWx0YS5tYWcoKSkgfHwgcmVzdWx0Lnpvb21EZWx0YSB8fCByZXN1bHQuYmVhcmluZ0RlbHRhIHx8IHJlc3VsdC5waXRjaERlbHRhO1xufVxuXG5jbGFzcyBIYW5kbGVyTWFuYWdlciB7XG4gICAgX21hcDogTWFwO1xuICAgIF9lbDogSFRNTEVsZW1lbnQ7XG4gICAgX2hhbmRsZXJzOiBBcnJheTx7IGhhbmRsZXJOYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIsIGFsbG93ZWQ6IGFueSB9PjtcbiAgICBfZXZlbnRzSW5Qcm9ncmVzczogT2JqZWN0O1xuICAgIF9mcmFtZUlkOiBudW1iZXI7XG4gICAgX2luZXJ0aWE6IEhhbmRsZXJJbmVydGlhO1xuICAgIF9iZWFyaW5nU25hcDogbnVtYmVyO1xuICAgIF9oYW5kbGVyc0J5SWQ6IHsgW3N0cmluZ106IEhhbmRsZXIgfTtcbiAgICBfdXBkYXRpbmdDYW1lcmE6IGJvb2xlYW47XG4gICAgX2NoYW5nZXM6IEFycmF5PFtIYW5kbGVyUmVzdWx0LCBPYmplY3QsIGFueV0+O1xuICAgIF9wcmV2aW91c0FjdGl2ZUhhbmRsZXJzOiB7IFtzdHJpbmddOiBIYW5kbGVyIH07XG4gICAgX2xpc3RlbmVyczogQXJyYXk8W0hUTUxFbGVtZW50LCBzdHJpbmcsIHZvaWQgfCB7cGFzc2l2ZT86IGJvb2xlYW4sIGNhcHR1cmU/OiBib29sZWFufV0+O1xuXG4gICAgY29uc3RydWN0b3IobWFwOiBNYXAsIG9wdGlvbnM6IHsgaW50ZXJhY3RpdmU6IGJvb2xlYW4sIHBpdGNoV2l0aFJvdGF0ZTogYm9vbGVhbiwgY2xpY2tUb2xlcmFuY2U6IG51bWJlciwgYmVhcmluZ1NuYXA6IG51bWJlcn0pIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICB0aGlzLl9lbCA9IHRoaXMuX21hcC5nZXRDYW52YXNDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5faGFuZGxlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5faGFuZGxlcnNCeUlkID0ge307XG4gICAgICAgIHRoaXMuX2NoYW5nZXMgPSBbXTtcblxuICAgICAgICB0aGlzLl9pbmVydGlhID0gbmV3IEhhbmRsZXJJbmVydGlhKG1hcCk7XG4gICAgICAgIHRoaXMuX2JlYXJpbmdTbmFwID0gb3B0aW9ucy5iZWFyaW5nU25hcDtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNBY3RpdmVIYW5kbGVycyA9IHt9O1xuXG4gICAgICAgIC8vIFRyYWNrIHdoZXRoZXIgbWFwIGlzIGN1cnJlbnRseSBtb3ZpbmcsIHRvIGNvbXB1dGUgc3RhcnQvbW92ZS9lbmQgZXZlbnRzXG4gICAgICAgIHRoaXMuX2V2ZW50c0luUHJvZ3Jlc3MgPSB7fTtcblxuICAgICAgICB0aGlzLl9hZGREZWZhdWx0SGFuZGxlcnMob3B0aW9ucyk7XG5cbiAgICAgICAgYmluZEFsbChbJ2hhbmRsZUV2ZW50JywgJ2hhbmRsZVdpbmRvd0V2ZW50J10sIHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy5fZWw7XG5cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW1xuICAgICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBgcGFzc2l2ZTogdHJ1ZWAgc28gdGhhdCBhIGRvdWJsZSB0YXAgZmlyZXMgdHdvXG4gICAgICAgICAgICAvLyBwYWlycyBvZiB0b3VjaHN0YXJ0L2VuZCBldmVudHMgaW4gaU9TIFNhZmFyaSAxMy4gSWYgdGhpcyBpcyBzZXQgdG9cbiAgICAgICAgICAgIC8vIGBwYXNzaXZlOiBmYWxzZWAgdGhlbiB0aGUgc2Vjb25kIHBhaXIgb2YgZXZlbnRzIGlzIG9ubHkgZmlyZWQgaWZcbiAgICAgICAgICAgIC8vIHByZXZlbnREZWZhdWx0KCkgaXMgY2FsbGVkIG9uIHRoZSBmaXJzdCB0b3VjaHN0YXJ0LiBDYWxsaW5nIHByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIC8vIHVuZGVzaXJhYmx5IHByZXZlbnRzIGNsaWNrIGV2ZW50cy5cbiAgICAgICAgICAgIFtlbCwgJ3RvdWNoc3RhcnQnLCB7cGFzc2l2ZTogdHJ1ZX1dLFxuICAgICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBgcGFzc2l2ZTogZmFsc2VgIHNvIHRoYXQgc2Nyb2xscyBhbmQgcGluY2hlcyBjYW4gYmVcbiAgICAgICAgICAgIC8vIHByZXZlbnRlZCBpbiBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgYHRvdWNoLWFjdGlvbnM6IG5vbmVgLCBmb3IgZXhhbXBsZSBpT1MgU2FmYXJpIDEyLlxuICAgICAgICAgICAgW2VsLCAndG91Y2htb3ZlJywge3Bhc3NpdmU6IGZhbHNlfV0sXG4gICAgICAgICAgICBbZWwsICd0b3VjaGVuZCcsIHVuZGVmaW5lZF0sXG4gICAgICAgICAgICBbZWwsICd0b3VjaGNhbmNlbCcsIHVuZGVmaW5lZF0sXG5cbiAgICAgICAgICAgIFtlbCwgJ21vdXNlZG93bicsIHVuZGVmaW5lZF0sXG4gICAgICAgICAgICBbZWwsICdtb3VzZW1vdmUnLCB1bmRlZmluZWRdLFxuICAgICAgICAgICAgW2VsLCAnbW91c2V1cCcsIHVuZGVmaW5lZF0sXG5cbiAgICAgICAgICAgIC8vIEJpbmQgd2luZG93LWxldmVsIGV2ZW50IGxpc3RlbmVycyBmb3IgbW92ZSBhbmQgdXAvZW5kIGV2ZW50cy4gSW4gdGhlIGFic2VuY2Ugb2ZcbiAgICAgICAgICAgIC8vIHRoZSBwb2ludGVyIGNhcHR1cmUgQVBJLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGJ5IGFsbCBuZWNlc3NhcnkgcGxhdGZvcm1zLFxuICAgICAgICAgICAgLy8gd2luZG93LWxldmVsIGV2ZW50IGxpc3RlbmVycyBnaXZlIHVzIHRoZSBiZXN0IHNob3QgYXQgY2FwdHVyaW5nIGV2ZW50cyB0aGF0XG4gICAgICAgICAgICAvLyBmYWxsIG91dHNpZGUgdGhlIG1hcCBjYW52YXMgZWxlbWVudC4gVXNlIGB7Y2FwdHVyZTogdHJ1ZX1gIGZvciB0aGUgbW92ZSBldmVudFxuICAgICAgICAgICAgLy8gdG8gcHJldmVudCBtYXAgbW92ZSBldmVudHMgZnJvbSBiZWluZyBmaXJlZCBkdXJpbmcgYSBkcmFnLlxuICAgICAgICAgICAgW3dpbmRvdy5kb2N1bWVudCwgJ21vdXNlbW92ZScsIHtjYXB0dXJlOiB0cnVlfV0sXG4gICAgICAgICAgICBbd2luZG93LmRvY3VtZW50LCAnbW91c2V1cCcsIHVuZGVmaW5lZF0sXG5cbiAgICAgICAgICAgIFtlbCwgJ21vdXNlb3ZlcicsIHVuZGVmaW5lZF0sXG4gICAgICAgICAgICBbZWwsICdtb3VzZW91dCcsIHVuZGVmaW5lZF0sXG4gICAgICAgICAgICBbZWwsICdkYmxjbGljaycsIHVuZGVmaW5lZF0sXG4gICAgICAgICAgICBbZWwsICdjbGljaycsIHVuZGVmaW5lZF0sXG5cbiAgICAgICAgICAgIFtlbCwgJ2tleWRvd24nLCB7Y2FwdHVyZTogZmFsc2V9XSxcbiAgICAgICAgICAgIFtlbCwgJ2tleXVwJywgdW5kZWZpbmVkXSxcblxuICAgICAgICAgICAgW2VsLCAnd2hlZWwnLCB7cGFzc2l2ZTogZmFsc2V9XSxcbiAgICAgICAgICAgIFtlbCwgJ2NvbnRleHRtZW51JywgdW5kZWZpbmVkXSxcblxuICAgICAgICAgICAgW3dpbmRvdywgJ2JsdXInLCB1bmRlZmluZWRdXG4gICAgICAgIF07XG5cbiAgICAgICAgZm9yIChjb25zdCBbdGFyZ2V0LCB0eXBlLCBsaXN0ZW5lck9wdGlvbnNdIG9mIHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgICAgICAgRE9NLmFkZEV2ZW50TGlzdGVuZXIodGFyZ2V0LCB0eXBlLCB0YXJnZXQgPT09IHdpbmRvdy5kb2N1bWVudCA/IHRoaXMuaGFuZGxlV2luZG93RXZlbnQgOiB0aGlzLmhhbmRsZUV2ZW50LCBsaXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBbdGFyZ2V0LCB0eXBlLCBsaXN0ZW5lck9wdGlvbnNdIG9mIHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIodGFyZ2V0LCB0eXBlLCB0YXJnZXQgPT09IHdpbmRvdy5kb2N1bWVudCA/IHRoaXMuaGFuZGxlV2luZG93RXZlbnQgOiB0aGlzLmhhbmRsZUV2ZW50LCBsaXN0ZW5lck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2FkZERlZmF1bHRIYW5kbGVycyhvcHRpb25zOiB7IGludGVyYWN0aXZlOiBib29sZWFuLCBwaXRjaFdpdGhSb3RhdGU6IGJvb2xlYW4sIGNsaWNrVG9sZXJhbmNlOiBudW1iZXIgfSkge1xuICAgICAgICBjb25zdCBtYXAgPSB0aGlzLl9tYXA7XG4gICAgICAgIGNvbnN0IGVsID0gbWFwLmdldENhbnZhc0NvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLl9hZGQoJ21hcEV2ZW50JywgbmV3IE1hcEV2ZW50SGFuZGxlcihtYXAsIG9wdGlvbnMpKTtcblxuICAgICAgICBjb25zdCBib3hab29tID0gbWFwLmJveFpvb20gPSBuZXcgQm94Wm9vbUhhbmRsZXIobWFwLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fYWRkKCdib3hab29tJywgYm94Wm9vbSk7XG5cbiAgICAgICAgY29uc3QgdGFwWm9vbSA9IG5ldyBUYXBab29tSGFuZGxlcigpO1xuICAgICAgICBjb25zdCBjbGlja1pvb20gPSBuZXcgQ2xpY2tab29tSGFuZGxlcigpO1xuICAgICAgICBtYXAuZG91YmxlQ2xpY2tab29tID0gbmV3IERvdWJsZUNsaWNrWm9vbUhhbmRsZXIoY2xpY2tab29tLCB0YXBab29tKTtcbiAgICAgICAgdGhpcy5fYWRkKCd0YXBab29tJywgdGFwWm9vbSk7XG4gICAgICAgIHRoaXMuX2FkZCgnY2xpY2tab29tJywgY2xpY2tab29tKTtcblxuICAgICAgICBjb25zdCB0YXBEcmFnWm9vbSA9IG5ldyBUYXBEcmFnWm9vbUhhbmRsZXIoKTtcbiAgICAgICAgdGhpcy5fYWRkKCd0YXBEcmFnWm9vbScsIHRhcERyYWdab29tKTtcblxuICAgICAgICBjb25zdCB0b3VjaFBpdGNoID0gbWFwLnRvdWNoUGl0Y2ggPSBuZXcgVG91Y2hQaXRjaEhhbmRsZXIoKTtcbiAgICAgICAgdGhpcy5fYWRkKCd0b3VjaFBpdGNoJywgdG91Y2hQaXRjaCk7XG5cbiAgICAgICAgY29uc3QgbW91c2VSb3RhdGUgPSBuZXcgTW91c2VSb3RhdGVIYW5kbGVyKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBtb3VzZVBpdGNoID0gbmV3IE1vdXNlUGl0Y2hIYW5kbGVyKG9wdGlvbnMpO1xuICAgICAgICBtYXAuZHJhZ1JvdGF0ZSA9IG5ldyBEcmFnUm90YXRlSGFuZGxlcihvcHRpb25zLCBtb3VzZVJvdGF0ZSwgbW91c2VQaXRjaCk7XG4gICAgICAgIHRoaXMuX2FkZCgnbW91c2VSb3RhdGUnLCBtb3VzZVJvdGF0ZSwgWydtb3VzZVBpdGNoJ10pO1xuICAgICAgICB0aGlzLl9hZGQoJ21vdXNlUGl0Y2gnLCBtb3VzZVBpdGNoLCBbJ21vdXNlUm90YXRlJ10pO1xuXG4gICAgICAgIGNvbnN0IG1vdXNlUGFuID0gbmV3IE1vdXNlUGFuSGFuZGxlcihvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdG91Y2hQYW4gPSBuZXcgVG91Y2hQYW5IYW5kbGVyKG9wdGlvbnMpO1xuICAgICAgICBtYXAuZHJhZ1BhbiA9IG5ldyBEcmFnUGFuSGFuZGxlcihlbCwgbW91c2VQYW4sIHRvdWNoUGFuKTtcbiAgICAgICAgdGhpcy5fYWRkKCdtb3VzZVBhbicsIG1vdXNlUGFuKTtcbiAgICAgICAgdGhpcy5fYWRkKCd0b3VjaFBhbicsIHRvdWNoUGFuLCBbJ3RvdWNoWm9vbScsICd0b3VjaFJvdGF0ZSddKTtcblxuICAgICAgICBjb25zdCB0b3VjaFJvdGF0ZSA9IG5ldyBUb3VjaFJvdGF0ZUhhbmRsZXIoKTtcbiAgICAgICAgY29uc3QgdG91Y2hab29tID0gbmV3IFRvdWNoWm9vbUhhbmRsZXIoKTtcbiAgICAgICAgbWFwLnRvdWNoWm9vbVJvdGF0ZSA9IG5ldyBUb3VjaFpvb21Sb3RhdGVIYW5kbGVyKGVsLCB0b3VjaFpvb20sIHRvdWNoUm90YXRlLCB0YXBEcmFnWm9vbSk7XG4gICAgICAgIHRoaXMuX2FkZCgndG91Y2hSb3RhdGUnLCB0b3VjaFJvdGF0ZSwgWyd0b3VjaFBhbicsICd0b3VjaFpvb20nXSk7XG4gICAgICAgIHRoaXMuX2FkZCgndG91Y2hab29tJywgdG91Y2hab29tLCBbJ3RvdWNoUGFuJywgJ3RvdWNoUm90YXRlJ10pO1xuXG4gICAgICAgIGNvbnN0IHNjcm9sbFpvb20gPSBtYXAuc2Nyb2xsWm9vbSA9IG5ldyBTY3JvbGxab29tSGFuZGxlcihtYXAsIHRoaXMpO1xuICAgICAgICB0aGlzLl9hZGQoJ3Njcm9sbFpvb20nLCBzY3JvbGxab29tLCBbJ21vdXNlUGFuJ10pO1xuXG4gICAgICAgIGNvbnN0IGtleWJvYXJkID0gbWFwLmtleWJvYXJkID0gbmV3IEtleWJvYXJkSGFuZGxlcigpO1xuICAgICAgICB0aGlzLl9hZGQoJ2tleWJvYXJkJywga2V5Ym9hcmQpO1xuXG4gICAgICAgIHRoaXMuX2FkZCgnYmxvY2thYmxlTWFwRXZlbnQnLCBuZXcgQmxvY2thYmxlTWFwRXZlbnRIYW5kbGVyKG1hcCkpO1xuXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBbJ2JveFpvb20nLCAnZG91YmxlQ2xpY2tab29tJywgJ3RhcERyYWdab29tJywgJ3RvdWNoUGl0Y2gnLCAnZHJhZ1JvdGF0ZScsICdkcmFnUGFuJywgJ3RvdWNoWm9vbVJvdGF0ZScsICdzY3JvbGxab29tJywgJ2tleWJvYXJkJ10pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmludGVyYWN0aXZlICYmIChvcHRpb25zOiBhbnkpW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgKG1hcDogYW55KVtuYW1lXS5lbmFibGUoKG9wdGlvbnM6IGFueSlbbmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2FkZChoYW5kbGVyTmFtZTogc3RyaW5nLCBoYW5kbGVyOiBIYW5kbGVyLCBhbGxvd2VkPzogQXJyYXk8c3RyaW5nPikge1xuICAgICAgICB0aGlzLl9oYW5kbGVycy5wdXNoKHtoYW5kbGVyTmFtZSwgaGFuZGxlciwgYWxsb3dlZH0pO1xuICAgICAgICB0aGlzLl9oYW5kbGVyc0J5SWRbaGFuZGxlck5hbWVdID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICBzdG9wKGFsbG93RW5kQW5pbWF0aW9uOiBib29sZWFuKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcgaWYgdGhpcyBtZXRob2Qgd2FzIHRyaWdnZXJlZCBieSBhIGdlc3R1cmUgdXBkYXRlXG4gICAgICAgIGlmICh0aGlzLl91cGRhdGluZ0NhbWVyYSkgcmV0dXJuO1xuXG4gICAgICAgIGZvciAoY29uc3Qge2hhbmRsZXJ9IG9mIHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICBoYW5kbGVyLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5lcnRpYS5jbGVhcigpO1xuICAgICAgICB0aGlzLl9maXJlRXZlbnRzKHt9LCB7fSwgYWxsb3dFbmRBbmltYXRpb24pO1xuICAgICAgICB0aGlzLl9jaGFuZ2VzID0gW107XG4gICAgfVxuXG4gICAgaXNBY3RpdmUoKSB7XG4gICAgICAgIGZvciAoY29uc3Qge2hhbmRsZXJ9IG9mIHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlci5pc0FjdGl2ZSgpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaXNab29taW5nKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9ldmVudHNJblByb2dyZXNzLnpvb20gfHwgdGhpcy5fbWFwLnNjcm9sbFpvb20uaXNab29taW5nKCk7XG4gICAgfVxuICAgIGlzUm90YXRpbmcoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2V2ZW50c0luUHJvZ3Jlc3Mucm90YXRlO1xuICAgIH1cblxuICAgIGlzTW92aW5nKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihpc01vdmluZyh0aGlzLl9ldmVudHNJblByb2dyZXNzKSkgfHwgdGhpcy5pc1pvb21pbmcoKTtcbiAgICB9XG5cbiAgICBfYmxvY2tlZEJ5QWN0aXZlKGFjdGl2ZUhhbmRsZXJzOiB7IFtzdHJpbmddOiBIYW5kbGVyIH0sIGFsbG93ZWQ6IEFycmF5PHN0cmluZz4sIG15TmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBhY3RpdmVIYW5kbGVycykge1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09IG15TmFtZSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIWFsbG93ZWQgfHwgYWxsb3dlZC5pbmRleE9mKG5hbWUpIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBoYW5kbGVXaW5kb3dFdmVudChlOiBJbnB1dEV2ZW50KSB7XG4gICAgICAgIHRoaXMuaGFuZGxlRXZlbnQoZSwgYCR7ZS50eXBlfVdpbmRvd2ApO1xuICAgIH1cblxuICAgIF9nZXRNYXBUb3VjaGVzKHRvdWNoZXM6IFRvdWNoTGlzdCkge1xuICAgICAgICBjb25zdCBtYXBUb3VjaGVzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0b3VjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAoKHQudGFyZ2V0OiBhbnkpOiBOb2RlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgbWFwVG91Y2hlcy5wdXNoKHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKG1hcFRvdWNoZXM6IGFueSk6IFRvdWNoTGlzdCk7XG4gICAgfVxuXG4gICAgaGFuZGxlRXZlbnQoZTogSW5wdXRFdmVudCB8IFJlbmRlckZyYW1lRXZlbnQsIGV2ZW50TmFtZT86IHN0cmluZykge1xuXG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdibHVyJykge1xuICAgICAgICAgICAgdGhpcy5zdG9wKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdXBkYXRpbmdDYW1lcmEgPSB0cnVlO1xuICAgICAgICBhc3NlcnQoZS50aW1lU3RhbXAgIT09IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgY29uc3QgaW5wdXRFdmVudCA9IGUudHlwZSA9PT0gJ3JlbmRlckZyYW1lJyA/IHVuZGVmaW5lZCA6ICgoZTogYW55KTogSW5wdXRFdmVudCk7XG5cbiAgICAgICAgLypcbiAgICAgICAgICogV2UgZG9uJ3QgY2FsbCBlLnByZXZlbnREZWZhdWx0KCkgZm9yIGFueSBldmVudHMgYnkgZGVmYXVsdC5cbiAgICAgICAgICogSGFuZGxlcnMgYXJlIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIGl0IHdoZXJlIG5lY2Vzc2FyeS5cbiAgICAgICAgICovXG5cbiAgICAgICAgY29uc3QgbWVyZ2VkSGFuZGxlclJlc3VsdDogSGFuZGxlclJlc3VsdCA9IHtuZWVkc1JlbmRlckZyYW1lOiBmYWxzZX07XG4gICAgICAgIGNvbnN0IGV2ZW50c0luUHJvZ3Jlc3MgPSB7fTtcbiAgICAgICAgY29uc3QgYWN0aXZlSGFuZGxlcnMgPSB7fTtcblxuICAgICAgICBjb25zdCBtYXBUb3VjaGVzID0gZS50b3VjaGVzID8gdGhpcy5fZ2V0TWFwVG91Y2hlcygoKGU6IGFueSk6IFRvdWNoRXZlbnQpLnRvdWNoZXMpIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBwb2ludHMgPSBtYXBUb3VjaGVzID8gRE9NLnRvdWNoUG9zKHRoaXMuX2VsLCBtYXBUb3VjaGVzKSA6IERPTS5tb3VzZVBvcyh0aGlzLl9lbCwgKChlOiBhbnkpOiBNb3VzZUV2ZW50KSk7XG5cbiAgICAgICAgZm9yIChjb25zdCB7aGFuZGxlck5hbWUsIGhhbmRsZXIsIGFsbG93ZWR9IG9mIHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICBpZiAoIWhhbmRsZXIuaXNFbmFibGVkKCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBsZXQgZGF0YTogSGFuZGxlclJlc3VsdCB8IHZvaWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5fYmxvY2tlZEJ5QWN0aXZlKGFjdGl2ZUhhbmRsZXJzLCBhbGxvd2VkLCBoYW5kbGVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLnJlc2V0KCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKChoYW5kbGVyOiBhbnkpW2V2ZW50TmFtZSB8fCBlLnR5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSAoaGFuZGxlcjogYW55KVtldmVudE5hbWUgfHwgZS50eXBlXShlLCBwb2ludHMsIG1hcFRvdWNoZXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lcmdlSGFuZGxlclJlc3VsdChtZXJnZWRIYW5kbGVyUmVzdWx0LCBldmVudHNJblByb2dyZXNzLCBkYXRhLCBoYW5kbGVyTmFtZSwgaW5wdXRFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEubmVlZHNSZW5kZXJGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlclJlbmRlckZyYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhIHx8IGhhbmRsZXIuaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUhhbmRsZXJzW2hhbmRsZXJOYW1lXSA9IGhhbmRsZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWFjdGl2YXRlZEhhbmRsZXJzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB0aGlzLl9wcmV2aW91c0FjdGl2ZUhhbmRsZXJzKSB7XG4gICAgICAgICAgICBpZiAoIWFjdGl2ZUhhbmRsZXJzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgZGVhY3RpdmF0ZWRIYW5kbGVyc1tuYW1lXSA9IGlucHV0RXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJldmlvdXNBY3RpdmVIYW5kbGVycyA9IGFjdGl2ZUhhbmRsZXJzO1xuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhkZWFjdGl2YXRlZEhhbmRsZXJzKS5sZW5ndGggfHwgaGFzQ2hhbmdlKG1lcmdlZEhhbmRsZXJSZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VzLnB1c2goW21lcmdlZEhhbmRsZXJSZXN1bHQsIGV2ZW50c0luUHJvZ3Jlc3MsIGRlYWN0aXZhdGVkSGFuZGxlcnNdKTtcbiAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJSZW5kZXJGcmFtZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGFjdGl2ZUhhbmRsZXJzKS5sZW5ndGggfHwgaGFzQ2hhbmdlKG1lcmdlZEhhbmRsZXJSZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAuX3N0b3AodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91cGRhdGluZ0NhbWVyYSA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHtjYW1lcmFBbmltYXRpb259ID0gbWVyZ2VkSGFuZGxlclJlc3VsdDtcbiAgICAgICAgaWYgKGNhbWVyYUFuaW1hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5faW5lcnRpYS5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50cyh7fSwge30sIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fY2hhbmdlcyA9IFtdO1xuICAgICAgICAgICAgY2FtZXJhQW5pbWF0aW9uKHRoaXMuX21hcCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtZXJnZUhhbmRsZXJSZXN1bHQobWVyZ2VkSGFuZGxlclJlc3VsdDogSGFuZGxlclJlc3VsdCwgZXZlbnRzSW5Qcm9ncmVzczogT2JqZWN0LCBoYW5kbGVyUmVzdWx0OiBIYW5kbGVyUmVzdWx0LCBuYW1lOiBzdHJpbmcsIGU/OiBJbnB1dEV2ZW50KSB7XG4gICAgICAgIGlmICghaGFuZGxlclJlc3VsdCkgcmV0dXJuO1xuXG4gICAgICAgIGV4dGVuZChtZXJnZWRIYW5kbGVyUmVzdWx0LCBoYW5kbGVyUmVzdWx0KTtcblxuICAgICAgICBjb25zdCBldmVudERhdGEgPSB7aGFuZGxlck5hbWU6IG5hbWUsIG9yaWdpbmFsRXZlbnQ6IGhhbmRsZXJSZXN1bHQub3JpZ2luYWxFdmVudCB8fCBlfTtcblxuICAgICAgICAvLyB0cmFjayB3aGljaCBoYW5kbGVyIGNoYW5nZWQgd2hpY2ggY2FtZXJhIHByb3BlcnR5XG4gICAgICAgIGlmIChoYW5kbGVyUmVzdWx0Lnpvb21EZWx0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBldmVudHNJblByb2dyZXNzLnpvb20gPSBldmVudERhdGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZXJSZXN1bHQucGFuRGVsdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXZlbnRzSW5Qcm9ncmVzcy5kcmFnID0gZXZlbnREYXRhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyUmVzdWx0LnBpdGNoRGVsdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXZlbnRzSW5Qcm9ncmVzcy5waXRjaCA9IGV2ZW50RGF0YTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlclJlc3VsdC5iZWFyaW5nRGVsdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXZlbnRzSW5Qcm9ncmVzcy5yb3RhdGUgPSBldmVudERhdGE7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIF9hcHBseUNoYW5nZXMoKSB7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkID0ge307XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkRXZlbnRzSW5Qcm9ncmVzcyA9IHt9O1xuICAgICAgICBjb25zdCBjb21iaW5lZERlYWN0aXZhdGVkSGFuZGxlcnMgPSB7fTtcblxuICAgICAgICBmb3IgKGNvbnN0IFtjaGFuZ2UsIGV2ZW50c0luUHJvZ3Jlc3MsIGRlYWN0aXZhdGVkSGFuZGxlcnNdIG9mIHRoaXMuX2NoYW5nZXMpIHtcblxuICAgICAgICAgICAgaWYgKGNoYW5nZS5wYW5EZWx0YSkgY29tYmluZWQucGFuRGVsdGEgPSAoY29tYmluZWQucGFuRGVsdGEgfHwgbmV3IFBvaW50KDAsIDApKS5fYWRkKGNoYW5nZS5wYW5EZWx0YSk7XG4gICAgICAgICAgICBpZiAoY2hhbmdlLnpvb21EZWx0YSkgY29tYmluZWQuem9vbURlbHRhID0gKGNvbWJpbmVkLnpvb21EZWx0YSB8fCAwKSArIGNoYW5nZS56b29tRGVsdGE7XG4gICAgICAgICAgICBpZiAoY2hhbmdlLmJlYXJpbmdEZWx0YSkgY29tYmluZWQuYmVhcmluZ0RlbHRhID0gKGNvbWJpbmVkLmJlYXJpbmdEZWx0YSB8fCAwKSArIGNoYW5nZS5iZWFyaW5nRGVsdGE7XG4gICAgICAgICAgICBpZiAoY2hhbmdlLnBpdGNoRGVsdGEpIGNvbWJpbmVkLnBpdGNoRGVsdGEgPSAoY29tYmluZWQucGl0Y2hEZWx0YSB8fCAwKSArIGNoYW5nZS5waXRjaERlbHRhO1xuICAgICAgICAgICAgaWYgKGNoYW5nZS5hcm91bmQgIT09IHVuZGVmaW5lZCkgY29tYmluZWQuYXJvdW5kID0gY2hhbmdlLmFyb3VuZDtcbiAgICAgICAgICAgIGlmIChjaGFuZ2UucGluY2hBcm91bmQgIT09IHVuZGVmaW5lZCkgY29tYmluZWQucGluY2hBcm91bmQgPSBjaGFuZ2UucGluY2hBcm91bmQ7XG4gICAgICAgICAgICBpZiAoY2hhbmdlLm5vSW5lcnRpYSkgY29tYmluZWQubm9JbmVydGlhID0gY2hhbmdlLm5vSW5lcnRpYTtcblxuICAgICAgICAgICAgZXh0ZW5kKGNvbWJpbmVkRXZlbnRzSW5Qcm9ncmVzcywgZXZlbnRzSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICBleHRlbmQoY29tYmluZWREZWFjdGl2YXRlZEhhbmRsZXJzLCBkZWFjdGl2YXRlZEhhbmRsZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3VwZGF0ZU1hcFRyYW5zZm9ybShjb21iaW5lZCwgY29tYmluZWRFdmVudHNJblByb2dyZXNzLCBjb21iaW5lZERlYWN0aXZhdGVkSGFuZGxlcnMpO1xuICAgICAgICB0aGlzLl9jaGFuZ2VzID0gW107XG4gICAgfVxuXG4gICAgX3VwZGF0ZU1hcFRyYW5zZm9ybShjb21iaW5lZFJlc3VsdDogYW55LCBjb21iaW5lZEV2ZW50c0luUHJvZ3Jlc3M6IE9iamVjdCwgZGVhY3RpdmF0ZWRIYW5kbGVyczogT2JqZWN0KSB7XG5cbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5fbWFwO1xuICAgICAgICBjb25zdCB0ciA9IG1hcC50cmFuc2Zvcm07XG5cbiAgICAgICAgaWYgKCFoYXNDaGFuZ2UoY29tYmluZWRSZXN1bHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmlyZUV2ZW50cyhjb21iaW5lZEV2ZW50c0luUHJvZ3Jlc3MsIGRlYWN0aXZhdGVkSGFuZGxlcnMsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHtwYW5EZWx0YSwgem9vbURlbHRhLCBiZWFyaW5nRGVsdGEsIHBpdGNoRGVsdGEsIGFyb3VuZCwgcGluY2hBcm91bmR9ID0gY29tYmluZWRSZXN1bHQ7XG5cbiAgICAgICAgaWYgKHBpbmNoQXJvdW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFyb3VuZCA9IHBpbmNoQXJvdW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3RvcCBhbnkgb25nb2luZyBjYW1lcmEgYW5pbWF0aW9ucyAoZWFzZVRvLCBmbHlUbylcbiAgICAgICAgbWFwLl9zdG9wKHRydWUpO1xuXG4gICAgICAgIGFyb3VuZCA9IGFyb3VuZCB8fCBtYXAudHJhbnNmb3JtLmNlbnRlclBvaW50O1xuICAgICAgICBjb25zdCBsb2MgPSB0ci5wb2ludExvY2F0aW9uKHBhbkRlbHRhID8gYXJvdW5kLnN1YihwYW5EZWx0YSkgOiBhcm91bmQpO1xuICAgICAgICBpZiAoYmVhcmluZ0RlbHRhKSB0ci5iZWFyaW5nICs9IGJlYXJpbmdEZWx0YTtcbiAgICAgICAgaWYgKHBpdGNoRGVsdGEpIHRyLnBpdGNoICs9IHBpdGNoRGVsdGE7XG4gICAgICAgIGlmICh6b29tRGVsdGEpIHRyLnpvb20gKz0gem9vbURlbHRhO1xuICAgICAgICB0ci5zZXRMb2NhdGlvbkF0UG9pbnQobG9jLCBhcm91bmQpO1xuXG4gICAgICAgIHRoaXMuX21hcC5fdXBkYXRlKCk7XG4gICAgICAgIGlmICghY29tYmluZWRSZXN1bHQubm9JbmVydGlhKSB0aGlzLl9pbmVydGlhLnJlY29yZChjb21iaW5lZFJlc3VsdCk7XG4gICAgICAgIHRoaXMuX2ZpcmVFdmVudHMoY29tYmluZWRFdmVudHNJblByb2dyZXNzLCBkZWFjdGl2YXRlZEhhbmRsZXJzLCB0cnVlKTtcblxuICAgIH1cblxuICAgIF9maXJlRXZlbnRzKG5ld0V2ZW50c0luUHJvZ3Jlc3M6IHsgW3N0cmluZ106IE9iamVjdCB9LCBkZWFjdGl2YXRlZEhhbmRsZXJzOiBPYmplY3QsIGFsbG93RW5kQW5pbWF0aW9uOiBib29sZWFuKSB7XG5cbiAgICAgICAgY29uc3Qgd2FzTW92aW5nID0gaXNNb3ZpbmcodGhpcy5fZXZlbnRzSW5Qcm9ncmVzcyk7XG4gICAgICAgIGNvbnN0IG5vd01vdmluZyA9IGlzTW92aW5nKG5ld0V2ZW50c0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0RXZlbnRzID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBldmVudE5hbWUgaW4gbmV3RXZlbnRzSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgY29uc3Qge29yaWdpbmFsRXZlbnR9ID0gbmV3RXZlbnRzSW5Qcm9ncmVzc1tldmVudE5hbWVdO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9ldmVudHNJblByb2dyZXNzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgICBzdGFydEV2ZW50c1tgJHtldmVudE5hbWV9c3RhcnRgXSA9IG9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ldmVudHNJblByb2dyZXNzW2V2ZW50TmFtZV0gPSBuZXdFdmVudHNJblByb2dyZXNzW2V2ZW50TmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJlIHN0YXJ0IGV2ZW50cyBvbmx5IGFmdGVyIHRoaXMuX2V2ZW50c0luUHJvZ3Jlc3MgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICBpZiAoIXdhc01vdmluZyAmJiBub3dNb3ZpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnbW92ZXN0YXJ0Jywgbm93TW92aW5nLm9yaWdpbmFsRXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHN0YXJ0RXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQobmFtZSwgc3RhcnRFdmVudHNbbmFtZV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vd01vdmluZykge1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdtb3ZlJywgbm93TW92aW5nLm9yaWdpbmFsRXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBldmVudE5hbWUgaW4gbmV3RXZlbnRzSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgY29uc3Qge29yaWdpbmFsRXZlbnR9ID0gbmV3RXZlbnRzSW5Qcm9ncmVzc1tldmVudE5hbWVdO1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KGV2ZW50TmFtZSwgb3JpZ2luYWxFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbmRFdmVudHMgPSB7fTtcblxuICAgICAgICBsZXQgb3JpZ2luYWxFbmRFdmVudDtcbiAgICAgICAgZm9yIChjb25zdCBldmVudE5hbWUgaW4gdGhpcy5fZXZlbnRzSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgY29uc3Qge2hhbmRsZXJOYW1lLCBvcmlnaW5hbEV2ZW50fSA9IHRoaXMuX2V2ZW50c0luUHJvZ3Jlc3NbZXZlbnROYW1lXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5faGFuZGxlcnNCeUlkW2hhbmRsZXJOYW1lXS5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c0luUHJvZ3Jlc3NbZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVuZEV2ZW50ID0gZGVhY3RpdmF0ZWRIYW5kbGVyc1toYW5kbGVyTmFtZV0gfHwgb3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgICAgICBlbmRFdmVudHNbYCR7ZXZlbnROYW1lfWVuZGBdID0gb3JpZ2luYWxFbmRFdmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBlbmRFdmVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudChuYW1lLCBlbmRFdmVudHNbbmFtZV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RpbGxNb3ZpbmcgPSBpc01vdmluZyh0aGlzLl9ldmVudHNJblByb2dyZXNzKTtcbiAgICAgICAgaWYgKGFsbG93RW5kQW5pbWF0aW9uICYmICh3YXNNb3ZpbmcgfHwgbm93TW92aW5nKSAmJiAhc3RpbGxNb3ZpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nQ2FtZXJhID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGluZXJ0aWFsRWFzZSA9IHRoaXMuX2luZXJ0aWEuX29uTW92ZUVuZCh0aGlzLl9tYXAuZHJhZ1Bhbi5faW5lcnRpYU9wdGlvbnMpO1xuXG4gICAgICAgICAgICBjb25zdCBzaG91bGRTbmFwVG9Ob3J0aCA9IGJlYXJpbmcgPT4gYmVhcmluZyAhPT0gMCAmJiAtdGhpcy5fYmVhcmluZ1NuYXAgPCBiZWFyaW5nICYmIGJlYXJpbmcgPCB0aGlzLl9iZWFyaW5nU25hcDtcblxuICAgICAgICAgICAgaWYgKGluZXJ0aWFsRWFzZSkge1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRTbmFwVG9Ob3J0aChpbmVydGlhbEVhc2UuYmVhcmluZyB8fCB0aGlzLl9tYXAuZ2V0QmVhcmluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICBpbmVydGlhbEVhc2UuYmVhcmluZyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX21hcC5lYXNlVG8oaW5lcnRpYWxFYXNlLCB7b3JpZ2luYWxFdmVudDogb3JpZ2luYWxFbmRFdmVudH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXAuZmlyZShuZXcgRXZlbnQoJ21vdmVlbmQnLCB7b3JpZ2luYWxFdmVudDogb3JpZ2luYWxFbmRFdmVudH0pKTtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU25hcFRvTm9ydGgodGhpcy5fbWFwLmdldEJlYXJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFwLnJlc2V0Tm9ydGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91cGRhdGluZ0NhbWVyYSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBfZmlyZUV2ZW50KHR5cGU6IHN0cmluZywgZTogKikge1xuICAgICAgICB0aGlzLl9tYXAuZmlyZShuZXcgRXZlbnQodHlwZSwgZSA/IHtvcmlnaW5hbEV2ZW50OiBlfSA6IHt9KSk7XG4gICAgfVxuXG4gICAgX3JlcXVlc3RGcmFtZSgpIHtcbiAgICAgICAgdGhpcy5fbWFwLnRyaWdnZXJSZXBhaW50KCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuX3JlbmRlclRhc2tRdWV1ZS5hZGQodGltZVN0YW1wID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9mcmFtZUlkO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFdmVudChuZXcgUmVuZGVyRnJhbWVFdmVudCgncmVuZGVyRnJhbWUnLCB7dGltZVN0YW1wfSkpO1xuICAgICAgICAgICAgdGhpcy5fYXBwbHlDaGFuZ2VzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF90cmlnZ2VyUmVuZGVyRnJhbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9mcmFtZUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lSWQgPSB0aGlzLl9yZXF1ZXN0RnJhbWUoKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBIYW5kbGVyTWFuYWdlcjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7XG4gICAgYmluZEFsbCxcbiAgICBleHRlbmQsXG4gICAgd2Fybk9uY2UsXG4gICAgY2xhbXAsXG4gICAgd3JhcCxcbiAgICBlYXNlIGFzIGRlZmF1bHRFYXNpbmcsXG4gICAgcGlja1xufSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHtudW1iZXIgYXMgaW50ZXJwb2xhdGV9IGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9pbnRlcnBvbGF0ZSc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IExuZ0xhdCBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgTG5nTGF0Qm91bmRzIGZyb20gJy4uL2dlby9sbmdfbGF0X2JvdW5kcyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQge0V2ZW50LCBFdmVudGVkfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHtEZWJ1Z30gZnJvbSAnLi4vdXRpbC9kZWJ1Zyc7XG5cbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIHtMbmdMYXRMaWtlfSBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgdHlwZSB7TG5nTGF0Qm91bmRzTGlrZX0gZnJvbSAnLi4vZ2VvL2xuZ19sYXRfYm91bmRzJztcbmltcG9ydCB0eXBlIHtUYXNrSUR9IGZyb20gJy4uL3V0aWwvdGFza19xdWV1ZSc7XG5pbXBvcnQgdHlwZSB7UG9pbnRMaWtlfSBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB0eXBlIHtQYWRkaW5nT3B0aW9uc30gZnJvbSAnLi4vZ2VvL2VkZ2VfaW5zZXRzJztcblxuLyoqXG4gKiBPcHRpb25zIGNvbW1vbiB0byB7QGxpbmsgTWFwI2p1bXBUb30sIHtAbGluayBNYXAjZWFzZVRvfSwgYW5kIHtAbGluayBNYXAjZmx5VG99LCBjb250cm9sbGluZyB0aGUgZGVzaXJlZCBsb2NhdGlvbixcbiAqIHpvb20sIGJlYXJpbmcsIGFuZCBwaXRjaCBvZiB0aGUgY2FtZXJhLiBBbGwgcHJvcGVydGllcyBhcmUgb3B0aW9uYWwsIGFuZCB3aGVuIGEgcHJvcGVydHkgaXMgb21pdHRlZCwgdGhlIGN1cnJlbnRcbiAqIGNhbWVyYSB2YWx1ZSBmb3IgdGhhdCBwcm9wZXJ0eSB3aWxsIHJlbWFpbiB1bmNoYW5nZWQuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gQ2FtZXJhT3B0aW9uc1xuICogQHByb3BlcnR5IHtMbmdMYXRMaWtlfSBjZW50ZXIgVGhlIGRlc2lyZWQgY2VudGVyLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHpvb20gVGhlIGRlc2lyZWQgem9vbSBsZXZlbC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBiZWFyaW5nIFRoZSBkZXNpcmVkIGJlYXJpbmcgaW4gZGVncmVlcy4gVGhlIGJlYXJpbmcgaXMgdGhlIGNvbXBhc3MgZGlyZWN0aW9uIHRoYXRcbiAqIGlzIFwidXBcIi4gRm9yIGV4YW1wbGUsIGBiZWFyaW5nOiA5MGAgb3JpZW50cyB0aGUgbWFwIHNvIHRoYXQgZWFzdCBpcyB1cC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwaXRjaCBUaGUgZGVzaXJlZCBwaXRjaCBpbiBkZWdyZWVzLiBUaGUgcGl0Y2ggaXMgdGhlIGFuZ2xlIHRvd2FyZHMgdGhlIGhvcml6b25cbiAqIG1lYXN1cmVkIGluIGRlZ3JlZXMgd2l0aCBhIHJhbmdlIGJldHdlZW4gMCBhbmQgNjAgZGVncmVlcy4gRm9yIGV4YW1wbGUsIHBpdGNoOiAwIHByb3ZpZGVzIHRoZSBhcHBlYXJhbmNlXG4gKiBvZiBsb29raW5nIHN0cmFpZ2h0IGRvd24gYXQgdGhlIG1hcCwgd2hpbGUgcGl0Y2g6IDYwIHRpbHRzIHRoZSB1c2VyJ3MgcGVyc3BlY3RpdmUgdG93YXJkcyB0aGUgaG9yaXpvbi5cbiAqIEluY3JlYXNpbmcgdGhlIHBpdGNoIHZhbHVlIGlzIG9mdGVuIHVzZWQgdG8gZGlzcGxheSAzRCBvYmplY3RzLlxuICogQHByb3BlcnR5IHtMbmdMYXRMaWtlfSBhcm91bmQgSWYgYHpvb21gIGlzIHNwZWNpZmllZCwgYGFyb3VuZGAgZGV0ZXJtaW5lcyB0aGUgcG9pbnQgYXJvdW5kIHdoaWNoIHRoZSB6b29tIGlzIGNlbnRlcmVkLlxuICogQHByb3BlcnR5IHtQYWRkaW5nT3B0aW9uc30gcGFkZGluZyBEaW1lbnNpb25zIGluIHBpeGVscyBhcHBsaWVkIG9uIGVhY2ggc2lkZSBvZiB0aGUgdmlld3BvcnQgZm9yIHNoaWZ0aW5nIHRoZSB2YW5pc2hpbmcgcG9pbnQuXG4gKiBAZXhhbXBsZVxuICogLy8gc2V0IHRoZSBtYXAncyBpbml0aWFsIHBlcnNwZWN0aXZlIHdpdGggQ2FtZXJhT3B0aW9uc1xuICogdmFyIG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xuICogICBjb250YWluZXI6ICdtYXAnLFxuICogICBzdHlsZTogJ21hcGJveDovL3N0eWxlcy9tYXBib3gvc3RyZWV0cy12MTEnLFxuICogICBjZW50ZXI6IFstNzMuNTgwNCwgNDUuNTM0ODNdLFxuICogICBwaXRjaDogNjAsXG4gKiAgIGJlYXJpbmc6IC02MCxcbiAqICAgem9vbTogMTBcbiAqIH0pO1xuICogQHNlZSBbU2V0IHBpdGNoIGFuZCBiZWFyaW5nXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9zZXQtcGVyc3BlY3RpdmUvKVxuICogQHNlZSBbSnVtcCB0byBhIHNlcmllcyBvZiBsb2NhdGlvbnNdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2p1bXAtdG8vKVxuICogQHNlZSBbRmx5IHRvIGEgbG9jYXRpb25dKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2ZseXRvLylcbiAqIEBzZWUgW0Rpc3BsYXkgYnVpbGRpbmdzIGluIDNEXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS8zZC1idWlsZGluZ3MvKVxuICovXG5leHBvcnQgdHlwZSBDYW1lcmFPcHRpb25zID0ge1xuICAgIGNlbnRlcj86IExuZ0xhdExpa2UsXG4gICAgem9vbT86IG51bWJlcixcbiAgICBiZWFyaW5nPzogbnVtYmVyLFxuICAgIHBpdGNoPzogbnVtYmVyLFxuICAgIGFyb3VuZD86IExuZ0xhdExpa2UsXG4gICAgcGFkZGluZz86IFBhZGRpbmdPcHRpb25zXG59O1xuXG4vKipcbiAqIE9wdGlvbnMgY29tbW9uIHRvIG1hcCBtb3ZlbWVudCBtZXRob2RzIHRoYXQgaW52b2x2ZSBhbmltYXRpb24sIHN1Y2ggYXMge0BsaW5rIE1hcCNwYW5CeX0gYW5kXG4gKiB7QGxpbmsgTWFwI2Vhc2VUb30sIGNvbnRyb2xsaW5nIHRoZSBkdXJhdGlvbiBhbmQgZWFzaW5nIGZ1bmN0aW9uIG9mIHRoZSBhbmltYXRpb24uIEFsbCBwcm9wZXJ0aWVzXG4gKiBhcmUgb3B0aW9uYWwuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gQW5pbWF0aW9uT3B0aW9uc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGR1cmF0aW9uIFRoZSBhbmltYXRpb24ncyBkdXJhdGlvbiwgbWVhc3VyZWQgaW4gbWlsbGlzZWNvbmRzLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZWFzaW5nIEEgZnVuY3Rpb24gdGFraW5nIGEgdGltZSBpbiB0aGUgcmFuZ2UgMC4uMSBhbmQgcmV0dXJuaW5nIGEgbnVtYmVyIHdoZXJlIDAgaXNcbiAqICAgdGhlIGluaXRpYWwgc3RhdGUgYW5kIDEgaXMgdGhlIGZpbmFsIHN0YXRlLlxuICogQHByb3BlcnR5IHtQb2ludExpa2V9IG9mZnNldCBvZiB0aGUgdGFyZ2V0IGNlbnRlciByZWxhdGl2ZSB0byByZWFsIG1hcCBjb250YWluZXIgY2VudGVyIGF0IHRoZSBlbmQgb2YgYW5pbWF0aW9uLlxuICogQHByb3BlcnR5IHtib29sZWFufSBhbmltYXRlIElmIGBmYWxzZWAsIG5vIGFuaW1hdGlvbiB3aWxsIG9jY3VyLlxuICogQHByb3BlcnR5IHtib29sZWFufSBlc3NlbnRpYWwgSWYgYHRydWVgLCB0aGVuIHRoZSBhbmltYXRpb24gaXMgY29uc2lkZXJlZCBlc3NlbnRpYWwgYW5kIHdpbGwgbm90IGJlIGFmZmVjdGVkIGJ5XG4gKiAgIFtgcHJlZmVycy1yZWR1Y2VkLW1vdGlvbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9AbWVkaWEvcHJlZmVycy1yZWR1Y2VkLW1vdGlvbikuXG4gKi9cbmV4cG9ydCB0eXBlIEFuaW1hdGlvbk9wdGlvbnMgPSB7XG4gICAgZHVyYXRpb24/OiBudW1iZXIsXG4gICAgZWFzaW5nPzogKF86IG51bWJlcikgPT4gbnVtYmVyLFxuICAgIG9mZnNldD86IFBvaW50TGlrZSxcbiAgICBhbmltYXRlPzogYm9vbGVhbixcbiAgICBlc3NlbnRpYWw/OiBib29sZWFuXG59O1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHNldHRpbmcgcGFkZGluZyBvbiBjYWxscyB0byBtZXRob2RzIHN1Y2ggYXMge0BsaW5rIE1hcCNmaXRCb3VuZHN9LCB7QGxpbmsgTWFwI2ZpdFNjcmVlbkNvb3JkaW5hdGVzfSwgYW5kIHtAbGluayBNYXAjc2V0UGFkZGluZ30uIEFkanVzdCB0aGVzZSBvcHRpb25zIHRvIHNldCB0aGUgYW1vdW50IG9mIHBhZGRpbmcgaW4gcGl4ZWxzIGFkZGVkIHRvIHRoZSBlZGdlcyBvZiB0aGUgY2FudmFzLiBTZXQgYSB1bmlmb3JtIHBhZGRpbmcgb24gYWxsIGVkZ2VzIG9yIGluZGl2aWR1YWwgdmFsdWVzIGZvciBlYWNoIGVkZ2UuIEFsbCBwcm9wZXJ0aWVzIG9mIHRoaXMgb2JqZWN0IG11c3QgYmVcbiAqIG5vbi1uZWdhdGl2ZSBpbnRlZ2Vycy5cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQYWRkaW5nT3B0aW9uc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHRvcCBQYWRkaW5nIGluIHBpeGVscyBmcm9tIHRoZSB0b3Agb2YgdGhlIG1hcCBjYW52YXMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gYm90dG9tIFBhZGRpbmcgaW4gcGl4ZWxzIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgbWFwIGNhbnZhcy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsZWZ0IFBhZGRpbmcgaW4gcGl4ZWxzIGZyb20gdGhlIGxlZnQgb2YgdGhlIG1hcCBjYW52YXMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmlnaHQgUGFkZGluZyBpbiBwaXhlbHMgZnJvbSB0aGUgcmlnaHQgb2YgdGhlIG1hcCBjYW52YXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIHZhciBiYm94ID0gW1stNzksIDQzXSwgWy03MywgNDVdXTtcbiAqIG1hcC5maXRCb3VuZHMoYmJveCwge1xuICogICBwYWRkaW5nOiB7dG9wOiAxMCwgYm90dG9tOjI1LCBsZWZ0OiAxNSwgcmlnaHQ6IDV9XG4gKiB9KTtcbiAqXG4gKiBAZXhhbXBsZVxuICogdmFyIGJib3ggPSBbWy03OSwgNDNdLCBbLTczLCA0NV1dO1xuICogbWFwLmZpdEJvdW5kcyhiYm94LCB7XG4gKiAgIHBhZGRpbmc6IDIwXG4gKiB9KTtcbiAqIEBzZWUgW0ZpdCB0byB0aGUgYm91bmRzIG9mIGEgTGluZVN0cmluZ10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvem9vbXRvLWxpbmVzdHJpbmcvKVxuICogQHNlZSBbRml0IGEgbWFwIHRvIGEgYm91bmRpbmcgYm94XShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9maXRib3VuZHMvKVxuICovXG5cbmNsYXNzIENhbWVyYSBleHRlbmRzIEV2ZW50ZWQge1xuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgIF9tb3Zpbmc6IGJvb2xlYW47XG4gICAgX3pvb21pbmc6IGJvb2xlYW47XG4gICAgX3JvdGF0aW5nOiBib29sZWFuO1xuICAgIF9waXRjaGluZzogYm9vbGVhbjtcbiAgICBfcGFkZGluZzogYm9vbGVhbjtcblxuICAgIF9iZWFyaW5nU25hcDogbnVtYmVyO1xuICAgIF9lYXNlU3RhcnQ6IG51bWJlcjtcbiAgICBfZWFzZU9wdGlvbnM6IHtkdXJhdGlvbjogbnVtYmVyLCBlYXNpbmc6IChfOiBudW1iZXIpID0+IG51bWJlcn07XG4gICAgX2Vhc2VJZDogc3RyaW5nIHwgdm9pZDtcblxuICAgIF9vbkVhc2VGcmFtZTogKF86IG51bWJlcikgPT4gdm9pZDtcbiAgICBfb25FYXNlRW5kOiAoZWFzZUlkPzogc3RyaW5nKSA9PiB2b2lkO1xuICAgIF9lYXNlRnJhbWVJZDogP1Rhc2tJRDtcblxuICAgICtfcmVxdWVzdFJlbmRlckZyYW1lOiAoKCkgPT4gdm9pZCkgPT4gVGFza0lEO1xuICAgICtfY2FuY2VsUmVuZGVyRnJhbWU6IChfOiBUYXNrSUQpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm06IFRyYW5zZm9ybSwgb3B0aW9uczoge2JlYXJpbmdTbmFwOiBudW1iZXJ9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX21vdmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl96b29taW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB0aGlzLl9iZWFyaW5nU25hcCA9IG9wdGlvbnMuYmVhcmluZ1NuYXA7XG5cbiAgICAgICAgYmluZEFsbChbJ19yZW5kZXJGcmFtZUNhbGxiYWNrJ10sIHRoaXMpO1xuXG4gICAgICAgIC8vYWRkQXNzZXJ0aW9ucyh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBnZW9ncmFwaGljYWwgY2VudGVycG9pbnQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEByZXR1cm5zIFRoZSBtYXAncyBnZW9ncmFwaGljYWwgY2VudGVycG9pbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyByZXR1cm4gYSBMbmdMYXQgb2JqZWN0IHN1Y2ggYXMge2xuZzogMCwgbGF0OiAwfVxuICAgICAqIHZhciBjZW50ZXIgPSBtYXAuZ2V0Q2VudGVyKCk7XG4gICAgICogLy8gYWNjZXNzIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgdmFsdWVzIGRpcmVjdGx5XG4gICAgICogdmFyIHtsb25naXR1ZGUsIGxhdGl0dWRlfSA9IG1hcC5nZXRDZW50ZXIoKTtcbiAgICAgKiBAc2VlIFR1dG9yaWFsOiBbVXNlIE1hcGJveCBHTCBKUyBpbiBhIFJlYWN0IGFwcF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vaGVscC90dXRvcmlhbHMvdXNlLW1hcGJveC1nbC1qcy13aXRoLXJlYWN0LyNzdG9yZS10aGUtbmV3LWNvb3JkaW5hdGVzKVxuICAgICAqL1xuICAgIGdldENlbnRlcigpOiBMbmdMYXQgeyByZXR1cm4gbmV3IExuZ0xhdCh0aGlzLnRyYW5zZm9ybS5jZW50ZXIubG5nLCB0aGlzLnRyYW5zZm9ybS5jZW50ZXIubGF0KTsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwJ3MgZ2VvZ3JhcGhpY2FsIGNlbnRlcnBvaW50LiBFcXVpdmFsZW50IHRvIGBqdW1wVG8oe2NlbnRlcjogY2VudGVyfSlgLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gY2VudGVyIFRoZSBjZW50ZXJwb2ludCB0byBzZXQuXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnNldENlbnRlcihbLTc0LCAzOF0pO1xuICAgICAqL1xuICAgIHNldENlbnRlcihjZW50ZXI6IExuZ0xhdExpa2UsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qdW1wVG8oe2NlbnRlcn0sIGV2ZW50RGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFucyB0aGUgbWFwIGJ5IHRoZSBzcGVjaWZpZWQgb2Zmc2V0LlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IGB4YCBhbmQgYHlgIGNvb3JkaW5hdGVzIGJ5IHdoaWNoIHRvIHBhbiB0aGUgbWFwLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBzZWUgW05hdmlnYXRlIHRoZSBtYXAgd2l0aCBnYW1lLWxpa2UgY29udHJvbHNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZ2FtZS1jb250cm9scy8pXG4gICAgICovXG4gICAgcGFuQnkob2Zmc2V0OiBQb2ludExpa2UsIG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgb2Zmc2V0ID0gUG9pbnQuY29udmVydChvZmZzZXQpLm11bHQoLTEpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYW5Ubyh0aGlzLnRyYW5zZm9ybS5jZW50ZXIsIGV4dGVuZCh7b2Zmc2V0fSwgb3B0aW9ucyksIGV2ZW50RGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFucyB0aGUgbWFwIHRvIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24gd2l0aCBhbiBhbmltYXRlZCB0cmFuc2l0aW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gbG5nbGF0IFRoZSBsb2NhdGlvbiB0byBwYW4gdGhlIG1hcCB0by5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGRlc2NyaWJpbmcgdGhlIGRlc3RpbmF0aW9uIGFuZCBhbmltYXRpb24gb2YgdGhlIHRyYW5zaXRpb24uXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnBhblRvKFstNzQsIDM4XSk7XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBTcGVjaWZ5IHRoYXQgdGhlIHBhblRvIGFuaW1hdGlvbiBzaG91bGQgbGFzdCA1MDAwIG1pbGxpc2Vjb25kcy5cbiAgICAgKiBtYXAucGFuVG8oWy03NCwgMzhdLCB7ZHVyYXRpb246IDUwMDB9KTtcbiAgICAgKiBAc2VlIFtVcGRhdGUgYSBmZWF0dXJlIGluIHJlYWx0aW1lXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9saXZlLXVwZGF0ZS1mZWF0dXJlLylcbiAgICAgKi9cbiAgICBwYW5UbyhsbmdsYXQ6IExuZ0xhdExpa2UsIG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFzZVRvKGV4dGVuZCh7XG4gICAgICAgICAgICBjZW50ZXI6IGxuZ2xhdFxuICAgICAgICB9LCBvcHRpb25zKSwgZXZlbnREYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBjdXJyZW50IHpvb20gbGV2ZWwuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEByZXR1cm5zIFRoZSBtYXAncyBjdXJyZW50IHpvb20gbGV2ZWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuZ2V0Wm9vbSgpO1xuICAgICAqL1xuICAgIGdldFpvb20oKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnpvb207IH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCdzIHpvb20gbGV2ZWwuIEVxdWl2YWxlbnQgdG8gYGp1bXBUbyh7em9vbTogem9vbX0pYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIHpvb20gVGhlIHpvb20gbGV2ZWwgdG8gc2V0ICgwLTIwKS5cbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyB6b29tc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZVxuICAgICAqIEBmaXJlcyB6b29tXG4gICAgICogQGZpcmVzIG1vdmVlbmRcbiAgICAgKiBAZmlyZXMgem9vbWVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gWm9vbSB0byB0aGUgem9vbSBsZXZlbCA1IHdpdGhvdXQgYW4gYW5pbWF0ZWQgdHJhbnNpdGlvblxuICAgICAqIG1hcC5zZXRab29tKDUpO1xuICAgICAqL1xuICAgIHNldFpvb20oem9vbTogbnVtYmVyLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5qdW1wVG8oe3pvb219LCBldmVudERhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBab29tcyB0aGUgbWFwIHRvIHRoZSBzcGVjaWZpZWQgem9vbSBsZXZlbCwgd2l0aCBhbiBhbmltYXRlZCB0cmFuc2l0aW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gem9vbSBUaGUgem9vbSBsZXZlbCB0byB0cmFuc2l0aW9uIHRvLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgem9vbXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQGZpcmVzIHpvb21lbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFpvb20gdG8gdGhlIHpvb20gbGV2ZWwgNSB3aXRob3V0IGFuIGFuaW1hdGVkIHRyYW5zaXRpb25cbiAgICAgKiBtYXAuem9vbVRvKDUpO1xuICAgICAqIC8vIFpvb20gdG8gdGhlIHpvb20gbGV2ZWwgOCB3aXRoIGFuIGFuaW1hdGVkIHRyYW5zaXRpb25cbiAgICAgKiBtYXAuem9vbVRvKDgsIHtcbiAgICAgKiAgIGR1cmF0aW9uOiAyMDAwLFxuICAgICAqICAgb2Zmc2V0OiBbMTAwLCA1MF1cbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB6b29tVG8oem9vbTogbnVtYmVyLCBvcHRpb25zOiA/IEFuaW1hdGlvbk9wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYXNlVG8oZXh0ZW5kKHtcbiAgICAgICAgICAgIHpvb21cbiAgICAgICAgfSwgb3B0aW9ucyksIGV2ZW50RGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBtYXAncyB6b29tIGxldmVsIGJ5IDEuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgem9vbXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQGZpcmVzIHpvb21lbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIHpvb20gdGhlIG1hcCBpbiBvbmUgbGV2ZWwgd2l0aCBhIGN1c3RvbSBhbmltYXRpb24gZHVyYXRpb25cbiAgICAgKiBtYXAuem9vbUluKHtkdXJhdGlvbjogMTAwMH0pO1xuICAgICAqL1xuICAgIHpvb21JbihvcHRpb25zPzogQW5pbWF0aW9uT3B0aW9ucywgZXZlbnREYXRhPzogT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuem9vbVRvKHRoaXMuZ2V0Wm9vbSgpICsgMSwgb3B0aW9ucywgZXZlbnREYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVjcmVhc2VzIHRoZSBtYXAncyB6b29tIGxldmVsIGJ5IDEuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgem9vbXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQGZpcmVzIHpvb21lbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIHpvb20gdGhlIG1hcCBvdXQgb25lIGxldmVsIHdpdGggYSBjdXN0b20gYW5pbWF0aW9uIG9mZnNldFxuICAgICAqIG1hcC56b29tT3V0KHtvZmZzZXQ6IFs4MCwgNjBdfSk7XG4gICAgICovXG4gICAgem9vbU91dChvcHRpb25zPzogQW5pbWF0aW9uT3B0aW9ucywgZXZlbnREYXRhPzogT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuem9vbVRvKHRoaXMuZ2V0Wm9vbSgpIC0gMSwgb3B0aW9ucywgZXZlbnREYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFwJ3MgY3VycmVudCBiZWFyaW5nLiBUaGUgYmVhcmluZyBpcyB0aGUgY29tcGFzcyBkaXJlY3Rpb24gdGhhdCBpcyBcInVwXCI7IGZvciBleGFtcGxlLCBhIGJlYXJpbmdcbiAgICAgKiBvZiA5MMKwIG9yaWVudHMgdGhlIG1hcCBzbyB0aGF0IGVhc3QgaXMgdXAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEByZXR1cm5zIFRoZSBtYXAncyBjdXJyZW50IGJlYXJpbmcuXG4gICAgICogQHNlZSBbTmF2aWdhdGUgdGhlIG1hcCB3aXRoIGdhbWUtbGlrZSBjb250cm9sc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9nYW1lLWNvbnRyb2xzLylcbiAgICAgKi9cbiAgICBnZXRCZWFyaW5nKCk6IG51bWJlciB7IHJldHVybiB0aGlzLnRyYW5zZm9ybS5iZWFyaW5nOyB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAncyBiZWFyaW5nIChyb3RhdGlvbikuIFRoZSBiZWFyaW5nIGlzIHRoZSBjb21wYXNzIGRpcmVjdGlvbiB0aGF0IGlzIFwidXBcIjsgZm9yIGV4YW1wbGUsIGEgYmVhcmluZ1xuICAgICAqIG9mIDkwwrAgb3JpZW50cyB0aGUgbWFwIHNvIHRoYXQgZWFzdCBpcyB1cC5cbiAgICAgKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gYGp1bXBUbyh7YmVhcmluZzogYmVhcmluZ30pYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIGJlYXJpbmcgVGhlIGRlc2lyZWQgYmVhcmluZy5cbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyByb3RhdGUgdGhlIG1hcCB0byA5MCBkZWdyZWVzXG4gICAgICogbWFwLnNldEJlYXJpbmcoOTApO1xuICAgICAqL1xuICAgIHNldEJlYXJpbmcoYmVhcmluZzogbnVtYmVyLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5qdW1wVG8oe2JlYXJpbmd9LCBldmVudERhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHBhZGRpbmcgYXBwbGllZCBhcm91bmQgdGhlIG1hcCB2aWV3cG9ydC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgcGFkZGluZyBhcm91bmQgdGhlIG1hcCB2aWV3cG9ydC5cbiAgICAgKi9cbiAgICBnZXRQYWRkaW5nKCk6IFBhZGRpbmdPcHRpb25zIHsgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnBhZGRpbmc7IH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBhZGRpbmcgaW4gcGl4ZWxzIGFyb3VuZCB0aGUgdmlld3BvcnQuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIGBqdW1wVG8oe3BhZGRpbmc6IHBhZGRpbmd9KWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBwYWRkaW5nIFRoZSBkZXNpcmVkIHBhZGRpbmcuIEZvcm1hdDogeyBsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIHRvcDogbnVtYmVyLCBib3R0b206IG51bWJlciB9XG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2V0cyBhIGxlZnQgcGFkZGluZyBvZiAzMDBweCwgYW5kIGEgdG9wIHBhZGRpbmcgb2YgNTBweFxuICAgICAqIG1hcC5zZXRQYWRkaW5nKHsgbGVmdDogMzAwLCB0b3A6IDUwIH0pO1xuICAgICAqL1xuICAgIHNldFBhZGRpbmcocGFkZGluZzogUGFkZGluZ09wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICB0aGlzLmp1bXBUbyh7cGFkZGluZ30sIGV2ZW50RGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIG1hcCB0byB0aGUgc3BlY2lmaWVkIGJlYXJpbmcsIHdpdGggYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi4gVGhlIGJlYXJpbmcgaXMgdGhlIGNvbXBhc3MgZGlyZWN0aW9uXG4gICAgICogdGhhdCBpcyBcXFwidXBcXFwiOyBmb3IgZXhhbXBsZSwgYSBiZWFyaW5nIG9mIDkwwrAgb3JpZW50cyB0aGUgbWFwIHNvIHRoYXQgZWFzdCBpcyB1cC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIGJlYXJpbmcgVGhlIGRlc2lyZWQgYmVhcmluZy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGV2ZW50IG9iamVjdHMgb2YgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICByb3RhdGVUbyhiZWFyaW5nOiBudW1iZXIsIG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFzZVRvKGV4dGVuZCh7XG4gICAgICAgICAgICBiZWFyaW5nXG4gICAgICAgIH0sIG9wdGlvbnMpLCBldmVudERhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIG1hcCBzbyB0aGF0IG5vcnRoIGlzIHVwICgwwrAgYmVhcmluZyksIHdpdGggYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgcmVzZXROb3J0aChvcHRpb25zPzogQW5pbWF0aW9uT3B0aW9ucywgZXZlbnREYXRhPzogT2JqZWN0KSB7XG4gICAgICAgIHRoaXMucm90YXRlVG8oMCwgZXh0ZW5kKHtkdXJhdGlvbjogMTAwMH0sIG9wdGlvbnMpLCBldmVudERhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGFuZCBwaXRjaGVzIHRoZSBtYXAgc28gdGhhdCBub3J0aCBpcyB1cCAoMMKwIGJlYXJpbmcpIGFuZCBwaXRjaCBpcyAwwrAsIHdpdGggYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgcmVzZXROb3J0aFBpdGNoKG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5lYXNlVG8oZXh0ZW5kKHtcbiAgICAgICAgICAgIGJlYXJpbmc6IDAsXG4gICAgICAgICAgICBwaXRjaDogMCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwXG4gICAgICAgIH0sIG9wdGlvbnMpLCBldmVudERhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTbmFwcyB0aGUgbWFwIHNvIHRoYXQgbm9ydGggaXMgdXAgKDDCsCBiZWFyaW5nKSwgaWYgdGhlIGN1cnJlbnQgYmVhcmluZyBpcyBjbG9zZSBlbm91Z2ggdG8gaXQgKGkuZS4gd2l0aGluIHRoZVxuICAgICAqIGBiZWFyaW5nU25hcGAgdGhyZXNob2xkKS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgc25hcFRvTm9ydGgob3B0aW9ucz86IEFuaW1hdGlvbk9wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICBpZiAoTWF0aC5hYnModGhpcy5nZXRCZWFyaW5nKCkpIDwgdGhpcy5fYmVhcmluZ1NuYXApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc2V0Tm9ydGgob3B0aW9ucywgZXZlbnREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBjdXJyZW50IHBpdGNoICh0aWx0KS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHJldHVybnMgVGhlIG1hcCdzIGN1cnJlbnQgcGl0Y2gsIG1lYXN1cmVkIGluIGRlZ3JlZXMgYXdheSBmcm9tIHRoZSBwbGFuZSBvZiB0aGUgc2NyZWVuLlxuICAgICAqL1xuICAgIGdldFBpdGNoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLnRyYW5zZm9ybS5waXRjaDsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwJ3MgcGl0Y2ggKHRpbHQpLiBFcXVpdmFsZW50IHRvIGBqdW1wVG8oe3BpdGNoOiBwaXRjaH0pYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIHBpdGNoIFRoZSBwaXRjaCB0byBzZXQsIG1lYXN1cmVkIGluIGRlZ3JlZXMgYXdheSBmcm9tIHRoZSBwbGFuZSBvZiB0aGUgc2NyZWVuICgwLTYwKS5cbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIHBpdGNoc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRQaXRjaChwaXRjaDogbnVtYmVyLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5qdW1wVG8oe3BpdGNofSwgZXZlbnREYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0ge0xuZ0xhdEJvdW5kc0xpa2V9IGJvdW5kcyBDYWxjdWxhdGUgdGhlIGNlbnRlciBmb3IgdGhlc2UgYm91bmRzIGluIHRoZSB2aWV3cG9ydCBhbmQgdXNlXG4gICAgICogICAgICB0aGUgaGlnaGVzdCB6b29tIGxldmVsIHVwIHRvIGFuZCBpbmNsdWRpbmcgYE1hcCNnZXRNYXhab29tKClgIHRoYXQgZml0c1xuICAgICAqICAgICAgaW4gdGhlIHZpZXdwb3J0LiBMbmdMYXRCb3VuZHMgcmVwcmVzZW50IGEgYm94IHRoYXQgaXMgYWx3YXlzIGF4aXMtYWxpZ25lZCB3aXRoIGJlYXJpbmcgMC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgUGFkZGluZ09wdGlvbnN9IFtvcHRpb25zLnBhZGRpbmddIFRoZSBhbW91bnQgb2YgcGFkZGluZyBpbiBwaXhlbHMgdG8gYWRkIHRvIHRoZSBnaXZlbiBib3VuZHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmJlYXJpbmc9MF0gRGVzaXJlZCBtYXAgYmVhcmluZyBhdCBlbmQgb2YgYW5pbWF0aW9uLCBpbiBkZWdyZWVzLlxuICAgICAqIEBwYXJhbSB7UG9pbnRMaWtlfSBbb3B0aW9ucy5vZmZzZXQ9WzAsIDBdXSBUaGUgY2VudGVyIG9mIHRoZSBnaXZlbiBib3VuZHMgcmVsYXRpdmUgdG8gdGhlIG1hcCdzIGNlbnRlciwgbWVhc3VyZWQgaW4gcGl4ZWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhab29tXSBUaGUgbWF4aW11bSB6b29tIGxldmVsIHRvIGFsbG93IHdoZW4gdGhlIGNhbWVyYSB3b3VsZCB0cmFuc2l0aW9uIHRvIHRoZSBzcGVjaWZpZWQgYm91bmRzLlxuICAgICAqIEByZXR1cm5zIHtDYW1lcmFPcHRpb25zIHwgdm9pZH0gSWYgbWFwIGlzIGFibGUgdG8gZml0IHRvIHByb3ZpZGVkIGJvdW5kcywgcmV0dXJucyBgQ2FtZXJhT3B0aW9uc2Agd2l0aFxuICAgICAqICAgICAgYGNlbnRlcmAsIGB6b29tYCwgYW5kIGBiZWFyaW5nYC4gSWYgbWFwIGlzIHVuYWJsZSB0byBmaXQsIG1ldGhvZCB3aWxsIHdhcm4gYW5kIHJldHVybiB1bmRlZmluZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgYmJveCA9IFtbLTc5LCA0M10sIFstNzMsIDQ1XV07XG4gICAgICogdmFyIG5ld0NhbWVyYVRyYW5zZm9ybSA9IG1hcC5jYW1lcmFGb3JCb3VuZHMoYmJveCwge1xuICAgICAqICAgcGFkZGluZzoge3RvcDogMTAsIGJvdHRvbToyNSwgbGVmdDogMTUsIHJpZ2h0OiA1fVxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIGNhbWVyYUZvckJvdW5kcyhib3VuZHM6IExuZ0xhdEJvdW5kc0xpa2UsIG9wdGlvbnM/OiBDYW1lcmFPcHRpb25zKTogdm9pZCB8IENhbWVyYU9wdGlvbnMgJiBBbmltYXRpb25PcHRpb25zIHtcbiAgICAgICAgYm91bmRzID0gTG5nTGF0Qm91bmRzLmNvbnZlcnQoYm91bmRzKTtcbiAgICAgICAgY29uc3QgYmVhcmluZyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5iZWFyaW5nIHx8IDA7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW1lcmFGb3JCb3hBbmRCZWFyaW5nKGJvdW5kcy5nZXROb3J0aFdlc3QoKSwgYm91bmRzLmdldFNvdXRoRWFzdCgpLCBiZWFyaW5nLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGNlbnRlciBvZiB0aGVzZSB0d28gcG9pbnRzIGluIHRoZSB2aWV3cG9ydCBhbmQgdXNlXG4gICAgICogdGhlIGhpZ2hlc3Qgem9vbSBsZXZlbCB1cCB0byBhbmQgaW5jbHVkaW5nIGBNYXAjZ2V0TWF4Wm9vbSgpYCB0aGF0IGZpdHNcbiAgICAgKiB0aGUgcG9pbnRzIGluIHRoZSB2aWV3cG9ydCBhdCB0aGUgc3BlY2lmaWVkIGJlYXJpbmcuXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0ge0xuZ0xhdExpa2V9IHAwIEZpcnN0IHBvaW50XG4gICAgICogQHBhcmFtIHtMbmdMYXRMaWtlfSBwMSBTZWNvbmQgcG9pbnRcbiAgICAgKiBAcGFyYW0gYmVhcmluZyBEZXNpcmVkIG1hcCBiZWFyaW5nIGF0IGVuZCBvZiBhbmltYXRpb24sIGluIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgUGFkZGluZ09wdGlvbnN9IFtvcHRpb25zLnBhZGRpbmddIFRoZSBhbW91bnQgb2YgcGFkZGluZyBpbiBwaXhlbHMgdG8gYWRkIHRvIHRoZSBnaXZlbiBib3VuZHMuXG4gICAgICogQHBhcmFtIHtQb2ludExpa2V9IFtvcHRpb25zLm9mZnNldD1bMCwgMF1dIFRoZSBjZW50ZXIgb2YgdGhlIGdpdmVuIGJvdW5kcyByZWxhdGl2ZSB0byB0aGUgbWFwJ3MgY2VudGVyLCBtZWFzdXJlZCBpbiBwaXhlbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFpvb21dIFRoZSBtYXhpbXVtIHpvb20gbGV2ZWwgdG8gYWxsb3cgd2hlbiB0aGUgY2FtZXJhIHdvdWxkIHRyYW5zaXRpb24gdG8gdGhlIHNwZWNpZmllZCBib3VuZHMuXG4gICAgICogQHJldHVybnMge0NhbWVyYU9wdGlvbnMgfCB2b2lkfSBJZiBtYXAgaXMgYWJsZSB0byBmaXQgdG8gcHJvdmlkZWQgYm91bmRzLCByZXR1cm5zIGBDYW1lcmFPcHRpb25zYCB3aXRoXG4gICAgICogICAgICBgY2VudGVyYCwgYHpvb21gLCBhbmQgYGJlYXJpbmdgLiBJZiBtYXAgaXMgdW5hYmxlIHRvIGZpdCwgbWV0aG9kIHdpbGwgd2FybiBhbmQgcmV0dXJuIHVuZGVmaW5lZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHAwID0gWy03OSwgNDNdO1xuICAgICAqIHZhciBwMSA9IFstNzMsIDQ1XTtcbiAgICAgKiB2YXIgYmVhcmluZyA9IDkwO1xuICAgICAqIHZhciBuZXdDYW1lcmFUcmFuc2Zvcm0gPSBtYXAuX2NhbWVyYUZvckJveEFuZEJlYXJpbmcocDAsIHAxLCBiZWFyaW5nLCB7XG4gICAgICogICBwYWRkaW5nOiB7dG9wOiAxMCwgYm90dG9tOjI1LCBsZWZ0OiAxNSwgcmlnaHQ6IDV9XG4gICAgICogfSk7XG4gICAgICovXG4gICAgX2NhbWVyYUZvckJveEFuZEJlYXJpbmcocDA6IExuZ0xhdExpa2UsIHAxOiBMbmdMYXRMaWtlLCBiZWFyaW5nOiBudW1iZXIsIG9wdGlvbnM/OiBDYW1lcmFPcHRpb25zKTogdm9pZCB8IENhbWVyYU9wdGlvbnMgJiBBbmltYXRpb25PcHRpb25zIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFBhZGRpbmcgPSB7XG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7XG4gICAgICAgICAgICBwYWRkaW5nOiBkZWZhdWx0UGFkZGluZyxcbiAgICAgICAgICAgIG9mZnNldDogWzAsIDBdLFxuICAgICAgICAgICAgbWF4Wm9vbTogdGhpcy50cmFuc2Zvcm0ubWF4Wm9vbVxuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucGFkZGluZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBvcHRpb25zLnBhZGRpbmc7XG4gICAgICAgICAgICBvcHRpb25zLnBhZGRpbmcgPSB7XG4gICAgICAgICAgICAgICAgdG9wOiBwLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogcCxcbiAgICAgICAgICAgICAgICByaWdodDogcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5wYWRkaW5nID0gZXh0ZW5kKGRlZmF1bHRQYWRkaW5nLCBvcHRpb25zLnBhZGRpbmcpO1xuICAgICAgICBjb25zdCB0ciA9IHRoaXMudHJhbnNmb3JtO1xuICAgICAgICBjb25zdCBlZGdlUGFkZGluZyA9IHRyLnBhZGRpbmc7XG5cbiAgICAgICAgLy8gV2Ugd2FudCB0byBjYWxjdWxhdGUgdGhlIHVwcGVyIHJpZ2h0IGFuZCBsb3dlciBsZWZ0IG9mIHRoZSBib3ggZGVmaW5lZCBieSBwMCBhbmQgcDFcbiAgICAgICAgLy8gaW4gYSBjb29yZGluYXRlIHN5c3RlbSByb3RhdGUgdG8gbWF0Y2ggdGhlIGRlc3RpbmF0aW9uIGJlYXJpbmcuXG4gICAgICAgIGNvbnN0IHAwd29ybGQgPSB0ci5wcm9qZWN0KExuZ0xhdC5jb252ZXJ0KHAwKSk7XG4gICAgICAgIGNvbnN0IHAxd29ybGQgPSB0ci5wcm9qZWN0KExuZ0xhdC5jb252ZXJ0KHAxKSk7XG4gICAgICAgIGNvbnN0IHAwcm90YXRlZCA9IHAwd29ybGQucm90YXRlKC1iZWFyaW5nICogTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgIGNvbnN0IHAxcm90YXRlZCA9IHAxd29ybGQucm90YXRlKC1iZWFyaW5nICogTWF0aC5QSSAvIDE4MCk7XG5cbiAgICAgICAgY29uc3QgdXBwZXJSaWdodCA9IG5ldyBQb2ludChNYXRoLm1heChwMHJvdGF0ZWQueCwgcDFyb3RhdGVkLngpLCBNYXRoLm1heChwMHJvdGF0ZWQueSwgcDFyb3RhdGVkLnkpKTtcbiAgICAgICAgY29uc3QgbG93ZXJMZWZ0ID0gbmV3IFBvaW50KE1hdGgubWluKHAwcm90YXRlZC54LCBwMXJvdGF0ZWQueCksIE1hdGgubWluKHAwcm90YXRlZC55LCBwMXJvdGF0ZWQueSkpO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSB6b29tOiBjb25zaWRlciB0aGUgb3JpZ2luYWwgYmJveCBhbmQgcGFkZGluZy5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IHVwcGVyUmlnaHQuc3ViKGxvd2VyTGVmdCk7XG4gICAgICAgIGNvbnN0IHNjYWxlWCA9ICh0ci53aWR0aCAtIChlZGdlUGFkZGluZy5sZWZ0ICsgZWRnZVBhZGRpbmcucmlnaHQgKyBvcHRpb25zLnBhZGRpbmcubGVmdCArIG9wdGlvbnMucGFkZGluZy5yaWdodCkpIC8gc2l6ZS54O1xuICAgICAgICBjb25zdCBzY2FsZVkgPSAodHIuaGVpZ2h0IC0gKGVkZ2VQYWRkaW5nLnRvcCArIGVkZ2VQYWRkaW5nLmJvdHRvbSArIG9wdGlvbnMucGFkZGluZy50b3AgKyBvcHRpb25zLnBhZGRpbmcuYm90dG9tKSkgLyBzaXplLnk7XG5cbiAgICAgICAgaWYgKHNjYWxlWSA8IDAgfHwgc2NhbGVYIDwgMCkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICAgJ01hcCBjYW5ub3QgZml0IHdpdGhpbiBjYW52YXMgd2l0aCB0aGUgZ2l2ZW4gYm91bmRzLCBwYWRkaW5nLCBhbmQvb3Igb2Zmc2V0LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB6b29tID0gTWF0aC5taW4odHIuc2NhbGVab29tKHRyLnNjYWxlICogTWF0aC5taW4oc2NhbGVYLCBzY2FsZVkpKSwgb3B0aW9ucy5tYXhab29tKTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgY2VudGVyOiBhcHBseSB0aGUgem9vbSwgdGhlIGNvbmZpZ3VyZWQgb2Zmc2V0LCBhcyB3ZWxsIGFzIG9mZnNldCB0aGF0IGV4aXN0cyBhcyBhIHJlc3VsdCBvZiBwYWRkaW5nLlxuICAgICAgICBjb25zdCBvZmZzZXQgPSAodHlwZW9mIG9wdGlvbnMub2Zmc2V0LnggPT09ICdudW1iZXInKSA/IG5ldyBQb2ludChvcHRpb25zLm9mZnNldC54LCBvcHRpb25zLm9mZnNldC55KSA6IFBvaW50LmNvbnZlcnQob3B0aW9ucy5vZmZzZXQpO1xuICAgICAgICBjb25zdCBwYWRkaW5nT2Zmc2V0WCA9IChvcHRpb25zLnBhZGRpbmcubGVmdCAtIG9wdGlvbnMucGFkZGluZy5yaWdodCkgLyAyO1xuICAgICAgICBjb25zdCBwYWRkaW5nT2Zmc2V0WSA9IChvcHRpb25zLnBhZGRpbmcudG9wIC0gb3B0aW9ucy5wYWRkaW5nLmJvdHRvbSkgLyAyO1xuICAgICAgICBjb25zdCBwYWRkaW5nT2Zmc2V0ID0gbmV3IFBvaW50KHBhZGRpbmdPZmZzZXRYLCBwYWRkaW5nT2Zmc2V0WSk7XG4gICAgICAgIGNvbnN0IHJvdGF0ZWRQYWRkaW5nT2Zmc2V0ID0gcGFkZGluZ09mZnNldC5yb3RhdGUoYmVhcmluZyAqIE1hdGguUEkgLyAxODApO1xuICAgICAgICBjb25zdCBvZmZzZXRBdEluaXRpYWxab29tID0gb2Zmc2V0LmFkZChyb3RhdGVkUGFkZGluZ09mZnNldCk7XG4gICAgICAgIGNvbnN0IG9mZnNldEF0RmluYWxab29tID0gb2Zmc2V0QXRJbml0aWFsWm9vbS5tdWx0KHRyLnNjYWxlIC8gdHIuem9vbVNjYWxlKHpvb20pKTtcblxuICAgICAgICBjb25zdCBjZW50ZXIgPSAgdHIudW5wcm9qZWN0KHAwd29ybGQuYWRkKHAxd29ybGQpLmRpdigyKS5zdWIob2Zmc2V0QXRGaW5hbFpvb20pKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2VudGVyLFxuICAgICAgICAgICAgem9vbSxcbiAgICAgICAgICAgIGJlYXJpbmdcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYW5zIGFuZCB6b29tcyB0aGUgbWFwIHRvIGNvbnRhaW4gaXRzIHZpc2libGUgYXJlYSB3aXRoaW4gdGhlIHNwZWNpZmllZCBnZW9ncmFwaGljYWwgYm91bmRzLlxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBhbHNvIHJlc2V0IHRoZSBtYXAncyBiZWFyaW5nIHRvIDAgaWYgYmVhcmluZyBpcyBub256ZXJvLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gYm91bmRzIENlbnRlciB0aGVzZSBib3VuZHMgaW4gdGhlIHZpZXdwb3J0IGFuZCB1c2UgdGhlIGhpZ2hlc3RcbiAgICAgKiAgICAgIHpvb20gbGV2ZWwgdXAgdG8gYW5kIGluY2x1ZGluZyBgTWFwI2dldE1heFpvb20oKWAgdGhhdCBmaXRzIHRoZW0gaW4gdGhlIHZpZXdwb3J0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBzdXBwb3J0cyBhbGwgcHJvcGVydGllcyBmcm9tIHtAbGluayBBbmltYXRpb25PcHRpb25zfSBhbmQge0BsaW5rIENhbWVyYU9wdGlvbnN9IGluIGFkZGl0aW9uIHRvIHRoZSBmaWVsZHMgYmVsb3cuXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBQYWRkaW5nT3B0aW9uc30gW29wdGlvbnMucGFkZGluZ10gVGhlIGFtb3VudCBvZiBwYWRkaW5nIGluIHBpeGVscyB0byBhZGQgdG8gdGhlIGdpdmVuIGJvdW5kcy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxpbmVhcj1mYWxzZV0gSWYgYHRydWVgLCB0aGUgbWFwIHRyYW5zaXRpb25zIHVzaW5nXG4gICAgICogICAgIHtAbGluayBNYXAjZWFzZVRvfS4gSWYgYGZhbHNlYCwgdGhlIG1hcCB0cmFuc2l0aW9ucyB1c2luZyB7QGxpbmsgTWFwI2ZseVRvfS4gU2VlXG4gICAgICogICAgIHRob3NlIGZ1bmN0aW9ucyBhbmQge0BsaW5rIEFuaW1hdGlvbk9wdGlvbnN9IGZvciBpbmZvcm1hdGlvbiBhYm91dCBvcHRpb25zIGF2YWlsYWJsZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5lYXNpbmddIEFuIGVhc2luZyBmdW5jdGlvbiBmb3IgdGhlIGFuaW1hdGVkIHRyYW5zaXRpb24uIFNlZSB7QGxpbmsgQW5pbWF0aW9uT3B0aW9uc30uXG4gICAgICogQHBhcmFtIHtQb2ludExpa2V9IFtvcHRpb25zLm9mZnNldD1bMCwgMF1dIFRoZSBjZW50ZXIgb2YgdGhlIGdpdmVuIGJvdW5kcyByZWxhdGl2ZSB0byB0aGUgbWFwJ3MgY2VudGVyLCBtZWFzdXJlZCBpbiBwaXhlbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFpvb21dIFRoZSBtYXhpbXVtIHpvb20gbGV2ZWwgdG8gYWxsb3cgd2hlbiB0aGUgbWFwIHZpZXcgdHJhbnNpdGlvbnMgdG8gdGhlIHNwZWNpZmllZCBib3VuZHMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtldmVudERhdGFdIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG5cdCAqIEBleGFtcGxlXG4gICAgICogdmFyIGJib3ggPSBbWy03OSwgNDNdLCBbLTczLCA0NV1dO1xuICAgICAqIG1hcC5maXRCb3VuZHMoYmJveCwge1xuICAgICAqICAgcGFkZGluZzoge3RvcDogMTAsIGJvdHRvbToyNSwgbGVmdDogMTUsIHJpZ2h0OiA1fVxuICAgICAqIH0pO1xuICAgICAqIEBzZWUgW0ZpdCBhIG1hcCB0byBhIGJvdW5kaW5nIGJveF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9maXRib3VuZHMvKVxuICAgICAqL1xuICAgIGZpdEJvdW5kcyhib3VuZHM6IExuZ0xhdEJvdW5kc0xpa2UsIG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zICYgQ2FtZXJhT3B0aW9ucywgZXZlbnREYXRhPzogT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXRJbnRlcm5hbChcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhRm9yQm91bmRzKGJvdW5kcywgb3B0aW9ucyksXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgZXZlbnREYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYW5zLCByb3RhdGVzIGFuZCB6b29tcyB0aGUgbWFwIHRvIHRvIGZpdCB0aGUgYm94IG1hZGUgYnkgcG9pbnRzIHAwIGFuZCBwMVxuICAgICAqIG9uY2UgdGhlIG1hcCBpcyByb3RhdGVkIHRvIHRoZSBzcGVjaWZpZWQgYmVhcmluZy4gVG8gem9vbSB3aXRob3V0IHJvdGF0aW5nLFxuICAgICAqIHBhc3MgaW4gdGhlIGN1cnJlbnQgbWFwIGJlYXJpbmcuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBwMCBGaXJzdCBwb2ludCBvbiBzY3JlZW4sIGluIHBpeGVsIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHAxIFNlY29uZCBwb2ludCBvbiBzY3JlZW4sIGluIHBpeGVsIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIGJlYXJpbmcgRGVzaXJlZCBtYXAgYmVhcmluZyBhdCBlbmQgb2YgYW5pbWF0aW9uLCBpbiBkZWdyZWVzXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IFBhZGRpbmdPcHRpb25zfSBbb3B0aW9ucy5wYWRkaW5nXSBUaGUgYW1vdW50IG9mIHBhZGRpbmcgaW4gcGl4ZWxzIHRvIGFkZCB0byB0aGUgZ2l2ZW4gYm91bmRzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGluZWFyPWZhbHNlXSBJZiBgdHJ1ZWAsIHRoZSBtYXAgdHJhbnNpdGlvbnMgdXNpbmdcbiAgICAgKiAgICAge0BsaW5rIE1hcCNlYXNlVG99LiBJZiBgZmFsc2VgLCB0aGUgbWFwIHRyYW5zaXRpb25zIHVzaW5nIHtAbGluayBNYXAjZmx5VG99LiBTZWVcbiAgICAgKiAgICAgdGhvc2UgZnVuY3Rpb25zIGFuZCB7QGxpbmsgQW5pbWF0aW9uT3B0aW9uc30gZm9yIGluZm9ybWF0aW9uIGFib3V0IG9wdGlvbnMgYXZhaWxhYmxlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmVhc2luZ10gQW4gZWFzaW5nIGZ1bmN0aW9uIGZvciB0aGUgYW5pbWF0ZWQgdHJhbnNpdGlvbi4gU2VlIHtAbGluayBBbmltYXRpb25PcHRpb25zfS5cbiAgICAgKiBAcGFyYW0ge1BvaW50TGlrZX0gW29wdGlvbnMub2Zmc2V0PVswLCAwXV0gVGhlIGNlbnRlciBvZiB0aGUgZ2l2ZW4gYm91bmRzIHJlbGF0aXZlIHRvIHRoZSBtYXAncyBjZW50ZXIsIG1lYXN1cmVkIGluIHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4Wm9vbV0gVGhlIG1heGltdW0gem9vbSBsZXZlbCB0byBhbGxvdyB3aGVuIHRoZSBtYXAgdmlldyB0cmFuc2l0aW9ucyB0byB0aGUgc3BlY2lmaWVkIGJvdW5kcy5cbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG5cdCAqIEBleGFtcGxlXG4gICAgICogdmFyIHAwID0gWzIyMCwgNDAwXTtcbiAgICAgKiB2YXIgcDEgPSBbNTAwLCA5MDBdO1xuICAgICAqIG1hcC5maXRTY3JlZW5Db29yZGluYXRlcyhwMCwgcDEsIG1hcC5nZXRCZWFyaW5nKCksIHtcbiAgICAgKiAgIHBhZGRpbmc6IHt0b3A6IDEwLCBib3R0b206MjUsIGxlZnQ6IDE1LCByaWdodDogNX1cbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFVzZWQgYnkge0BsaW5rIEJveFpvb21IYW5kbGVyfVxuICAgICAqL1xuICAgIGZpdFNjcmVlbkNvb3JkaW5hdGVzKHAwOiBQb2ludExpa2UsIHAxOiBQb2ludExpa2UsIGJlYXJpbmc6IG51bWJlciwgb3B0aW9ucz86IEFuaW1hdGlvbk9wdGlvbnMgJiBDYW1lcmFPcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpdEludGVybmFsKFxuICAgICAgICAgICAgdGhpcy5fY2FtZXJhRm9yQm94QW5kQmVhcmluZyhcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb2ludExvY2F0aW9uKFBvaW50LmNvbnZlcnQocDApKSxcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb2ludExvY2F0aW9uKFBvaW50LmNvbnZlcnQocDEpKSxcbiAgICAgICAgICAgICAgICBiZWFyaW5nLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMpLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGV2ZW50RGF0YSk7XG4gICAgfVxuXG4gICAgX2ZpdEludGVybmFsKGNhbGN1bGF0ZWRPcHRpb25zPzogQ2FtZXJhT3B0aW9ucyAmIEFuaW1hdGlvbk9wdGlvbnMsIG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zICYgQ2FtZXJhT3B0aW9ucywgZXZlbnREYXRhPzogT2JqZWN0KSB7XG4gICAgICAgIC8vIGNhbWVyYUZvckJvdW5kcyB3YXJucyArIHJldHVybnMgdW5kZWZpbmVkIGlmIHVuYWJsZSB0byBmaXQ6XG4gICAgICAgIGlmICghY2FsY3VsYXRlZE9wdGlvbnMpIHJldHVybiB0aGlzO1xuXG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQoY2FsY3VsYXRlZE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAvLyBFeHBsaWN0bHkgcmVtb3ZlIHRoZSBwYWRkaW5nIGZpZWxkIGJlY2F1c2UsIGNhbGN1bGF0ZWRPcHRpb25zIGFscmVhZHkgYWNjb3VudHMgZm9yIHBhZGRpbmcgYnkgc2V0dGluZyB6b29tIGFuZCBjZW50ZXIgYWNjb3JkaW5nbHkuXG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLnBhZGRpbmc7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnMubGluZWFyID9cbiAgICAgICAgICAgIHRoaXMuZWFzZVRvKG9wdGlvbnMsIGV2ZW50RGF0YSkgOlxuICAgICAgICAgICAgdGhpcy5mbHlUbyhvcHRpb25zLCBldmVudERhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgYW55IGNvbWJpbmF0aW9uIG9mIGNlbnRlciwgem9vbSwgYmVhcmluZywgYW5kIHBpdGNoLCB3aXRob3V0XG4gICAgICogYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi4gVGhlIG1hcCB3aWxsIHJldGFpbiBpdHMgY3VycmVudCB2YWx1ZXMgZm9yIGFueVxuICAgICAqIGRldGFpbHMgbm90IHNwZWNpZmllZCBpbiBgb3B0aW9uc2AuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgem9vbXN0YXJ0XG4gICAgICogQGZpcmVzIHBpdGNoc3RhcnRcbiAgICAgKiBAZmlyZXMgcm90YXRlXG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyBwaXRjaFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQGZpcmVzIHpvb21lbmRcbiAgICAgKiBAZmlyZXMgcGl0Y2hlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGp1bXAgdG8gY29vcmRpbmF0ZXMgYXQgY3VycmVudCB6b29tXG4gICAgICogbWFwLmp1bXBUbyh7Y2VudGVyOiBbMCwgMF19KTtcbiAgICAgKiAvLyBqdW1wIHdpdGggem9vbSwgcGl0Y2gsIGFuZCBiZWFyaW5nIG9wdGlvbnNcbiAgICAgKiBtYXAuanVtcFRvKHtcbiAgICAgKiAgIGNlbnRlcjogWzAsIDBdLFxuICAgICAqICAgem9vbTogOCxcbiAgICAgKiAgIHBpdGNoOiA0NSxcbiAgICAgKiAgIGJlYXJpbmc6IDkwXG4gICAgICogfSk7XG4gICAgICogQHNlZSBbSnVtcCB0byBhIHNlcmllcyBvZiBsb2NhdGlvbnNdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2p1bXAtdG8vKVxuICAgICAqIEBzZWUgW1VwZGF0ZSBhIGZlYXR1cmUgaW4gcmVhbHRpbWVdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2xpdmUtdXBkYXRlLWZlYXR1cmUvKVxuICAgICAqL1xuICAgIGp1bXBUbyhvcHRpb25zOiBDYW1lcmFPcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG5cbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLnRyYW5zZm9ybTtcbiAgICAgICAgbGV0IHpvb21DaGFuZ2VkID0gZmFsc2UsXG4gICAgICAgICAgICBiZWFyaW5nQ2hhbmdlZCA9IGZhbHNlLFxuICAgICAgICAgICAgcGl0Y2hDaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCd6b29tJyBpbiBvcHRpb25zICYmIHRyLnpvb20gIT09ICtvcHRpb25zLnpvb20pIHtcbiAgICAgICAgICAgIHpvb21DaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyLnpvb20gPSArb3B0aW9ucy56b29tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2VudGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRyLmNlbnRlciA9IExuZ0xhdC5jb252ZXJ0KG9wdGlvbnMuY2VudGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgnYmVhcmluZycgaW4gb3B0aW9ucyAmJiB0ci5iZWFyaW5nICE9PSArb3B0aW9ucy5iZWFyaW5nKSB7XG4gICAgICAgICAgICBiZWFyaW5nQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB0ci5iZWFyaW5nID0gK29wdGlvbnMuYmVhcmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgncGl0Y2gnIGluIG9wdGlvbnMgJiYgdHIucGl0Y2ggIT09ICtvcHRpb25zLnBpdGNoKSB7XG4gICAgICAgICAgICBwaXRjaENoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgdHIucGl0Y2ggPSArb3B0aW9ucy5waXRjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnBhZGRpbmcgIT0gbnVsbCAmJiAhdHIuaXNQYWRkaW5nRXF1YWwob3B0aW9ucy5wYWRkaW5nKSkge1xuICAgICAgICAgICAgdHIucGFkZGluZyA9IG9wdGlvbnMucGFkZGluZztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ21vdmVzdGFydCcsIGV2ZW50RGF0YSkpXG4gICAgICAgICAgICAuZmlyZShuZXcgRXZlbnQoJ21vdmUnLCBldmVudERhdGEpKTtcblxuICAgICAgICBpZiAoem9vbUNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3pvb21zdGFydCcsIGV2ZW50RGF0YSkpXG4gICAgICAgICAgICAgICAgLmZpcmUobmV3IEV2ZW50KCd6b29tJywgZXZlbnREYXRhKSlcbiAgICAgICAgICAgICAgICAuZmlyZShuZXcgRXZlbnQoJ3pvb21lbmQnLCBldmVudERhdGEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiZWFyaW5nQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgncm90YXRlc3RhcnQnLCBldmVudERhdGEpKVxuICAgICAgICAgICAgICAgIC5maXJlKG5ldyBFdmVudCgncm90YXRlJywgZXZlbnREYXRhKSlcbiAgICAgICAgICAgICAgICAuZmlyZShuZXcgRXZlbnQoJ3JvdGF0ZWVuZCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpdGNoQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgncGl0Y2hzdGFydCcsIGV2ZW50RGF0YSkpXG4gICAgICAgICAgICAgICAgLmZpcmUobmV3IEV2ZW50KCdwaXRjaCcsIGV2ZW50RGF0YSkpXG4gICAgICAgICAgICAgICAgLmZpcmUobmV3IEV2ZW50KCdwaXRjaGVuZCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyZShuZXcgRXZlbnQoJ21vdmVlbmQnLCBldmVudERhdGEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIGFueSBjb21iaW5hdGlvbiBvZiBgY2VudGVyYCwgYHpvb21gLCBgYmVhcmluZ2AsIGBwaXRjaGAsIGFuZCBgcGFkZGluZ2Agd2l0aCBhbiBhbmltYXRlZCB0cmFuc2l0aW9uXG4gICAgICogYmV0d2VlbiBvbGQgYW5kIG5ldyB2YWx1ZXMuIFRoZSBtYXAgd2lsbCByZXRhaW4gaXRzIGN1cnJlbnQgdmFsdWVzIGZvciBhbnlcbiAgICAgKiBkZXRhaWxzIG5vdCBzcGVjaWZpZWQgaW4gYG9wdGlvbnNgLlxuICAgICAqXG4gICAgICogTm90ZTogVGhlIHRyYW5zaXRpb24gd2lsbCBoYXBwZW4gaW5zdGFudGx5IGlmIHRoZSB1c2VyIGhhcyBlbmFibGVkXG4gICAgICogdGhlIGByZWR1Y2VkIG1vdGlvbmAgYWNjZXNpYmlsaXR5IGZlYXR1cmUgZW5hYmxlZCBpbiB0aGVpciBvcGVyYXRpbmcgc3lzdGVtLFxuICAgICAqIHVubGVzcyBgb3B0aW9uc2AgaW5jbHVkZXMgYGVzc2VudGlhbDogdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZGVzY3JpYmluZyB0aGUgZGVzdGluYXRpb24gYW5kIGFuaW1hdGlvbiBvZiB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiAgICAgICAgICAgIEFjY2VwdHMge0BsaW5rIENhbWVyYU9wdGlvbnN9IGFuZCB7QGxpbmsgQW5pbWF0aW9uT3B0aW9uc30uXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgem9vbXN0YXJ0XG4gICAgICogQGZpcmVzIHBpdGNoc3RhcnRcbiAgICAgKiBAZmlyZXMgcm90YXRlXG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyBwaXRjaFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQGZpcmVzIHpvb21lbmRcbiAgICAgKiBAZmlyZXMgcGl0Y2hlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAc2VlIFtOYXZpZ2F0ZSB0aGUgbWFwIHdpdGggZ2FtZS1saWtlIGNvbnRyb2xzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2dhbWUtY29udHJvbHMvKVxuICAgICAqL1xuICAgIGVhc2VUbyhvcHRpb25zOiBDYW1lcmFPcHRpb25zICYgQW5pbWF0aW9uT3B0aW9ucyAmIHtlYXNlSWQ/OiBzdHJpbmd9LCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5fc3RvcChmYWxzZSwgb3B0aW9ucy5lYXNlSWQpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQoe1xuICAgICAgICAgICAgb2Zmc2V0OiBbMCwgMF0sXG4gICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxuICAgICAgICAgICAgZWFzaW5nOiBkZWZhdWx0RWFzaW5nXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGUgPT09IGZhbHNlIHx8ICghb3B0aW9ucy5lc3NlbnRpYWwgJiYgYnJvd3Nlci5wcmVmZXJzUmVkdWNlZE1vdGlvbikpIG9wdGlvbnMuZHVyYXRpb24gPSAwO1xuXG4gICAgICAgIGNvbnN0IHRyID0gdGhpcy50cmFuc2Zvcm0sXG4gICAgICAgICAgICBzdGFydFpvb20gPSB0aGlzLmdldFpvb20oKSxcbiAgICAgICAgICAgIHN0YXJ0QmVhcmluZyA9IHRoaXMuZ2V0QmVhcmluZygpLFxuICAgICAgICAgICAgc3RhcnRQaXRjaCA9IHRoaXMuZ2V0UGl0Y2goKSxcbiAgICAgICAgICAgIHN0YXJ0UGFkZGluZyA9IHRoaXMuZ2V0UGFkZGluZygpLFxuXG4gICAgICAgICAgICB6b29tID0gJ3pvb20nIGluIG9wdGlvbnMgPyArb3B0aW9ucy56b29tIDogc3RhcnRab29tLFxuICAgICAgICAgICAgYmVhcmluZyA9ICdiZWFyaW5nJyBpbiBvcHRpb25zID8gdGhpcy5fbm9ybWFsaXplQmVhcmluZyhvcHRpb25zLmJlYXJpbmcsIHN0YXJ0QmVhcmluZykgOiBzdGFydEJlYXJpbmcsXG4gICAgICAgICAgICBwaXRjaCA9ICdwaXRjaCcgaW4gb3B0aW9ucyA/ICtvcHRpb25zLnBpdGNoIDogc3RhcnRQaXRjaCxcbiAgICAgICAgICAgIHBhZGRpbmcgPSAncGFkZGluZycgaW4gb3B0aW9ucyA/IG9wdGlvbnMucGFkZGluZyA6IHRyLnBhZGRpbmc7XG5cbiAgICAgICAgY29uc3Qgb2Zmc2V0QXNQb2ludCA9IFBvaW50LmNvbnZlcnQob3B0aW9ucy5vZmZzZXQpO1xuICAgICAgICBsZXQgcG9pbnRBdE9mZnNldCA9IHRyLmNlbnRlclBvaW50LmFkZChvZmZzZXRBc1BvaW50KTtcbiAgICAgICAgY29uc3QgbG9jYXRpb25BdE9mZnNldCA9IHRyLnBvaW50TG9jYXRpb24ocG9pbnRBdE9mZnNldCk7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IExuZ0xhdC5jb252ZXJ0KG9wdGlvbnMuY2VudGVyIHx8IGxvY2F0aW9uQXRPZmZzZXQpO1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVDZW50ZXIoY2VudGVyKTtcblxuICAgICAgICBjb25zdCBmcm9tID0gdHIucHJvamVjdChsb2NhdGlvbkF0T2Zmc2V0KTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSB0ci5wcm9qZWN0KGNlbnRlcikuc3ViKGZyb20pO1xuICAgICAgICBjb25zdCBmaW5hbFNjYWxlID0gdHIuem9vbVNjYWxlKHpvb20gLSBzdGFydFpvb20pO1xuXG4gICAgICAgIGxldCBhcm91bmQsIGFyb3VuZFBvaW50O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmFyb3VuZCkge1xuICAgICAgICAgICAgYXJvdW5kID0gTG5nTGF0LmNvbnZlcnQob3B0aW9ucy5hcm91bmQpO1xuICAgICAgICAgICAgYXJvdW5kUG9pbnQgPSB0ci5sb2NhdGlvblBvaW50KGFyb3VuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdXJyZW50bHkgPSB7XG4gICAgICAgICAgICBtb3Zpbmc6IHRoaXMuX21vdmluZyxcbiAgICAgICAgICAgIHpvb21pbmc6IHRoaXMuX3pvb21pbmcsXG4gICAgICAgICAgICByb3RhdGluZzogdGhpcy5fcm90YXRpbmcsXG4gICAgICAgICAgICBwaXRjaGluZzogdGhpcy5fcGl0Y2hpbmdcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl96b29taW5nID0gdGhpcy5fem9vbWluZyB8fCAoem9vbSAhPT0gc3RhcnRab29tKTtcbiAgICAgICAgdGhpcy5fcm90YXRpbmcgPSB0aGlzLl9yb3RhdGluZyB8fCAoc3RhcnRCZWFyaW5nICE9PSBiZWFyaW5nKTtcbiAgICAgICAgdGhpcy5fcGl0Y2hpbmcgPSB0aGlzLl9waXRjaGluZyB8fCAocGl0Y2ggIT09IHN0YXJ0UGl0Y2gpO1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gIXRyLmlzUGFkZGluZ0VxdWFsKHBhZGRpbmcpO1xuXG4gICAgICAgIHRoaXMuX2Vhc2VJZCA9IG9wdGlvbnMuZWFzZUlkO1xuICAgICAgICB0aGlzLl9wcmVwYXJlRWFzZShldmVudERhdGEsIG9wdGlvbnMubm9Nb3ZlU3RhcnQsIGN1cnJlbnRseSk7XG5cbiAgICAgICAgdGhpcy5fZWFzZSgoaykgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3pvb21pbmcpIHtcbiAgICAgICAgICAgICAgICB0ci56b29tID0gaW50ZXJwb2xhdGUoc3RhcnRab29tLCB6b29tLCBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9yb3RhdGluZykge1xuICAgICAgICAgICAgICAgIHRyLmJlYXJpbmcgPSBpbnRlcnBvbGF0ZShzdGFydEJlYXJpbmcsIGJlYXJpbmcsIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3BpdGNoaW5nKSB7XG4gICAgICAgICAgICAgICAgdHIucGl0Y2ggPSBpbnRlcnBvbGF0ZShzdGFydFBpdGNoLCBwaXRjaCwgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fcGFkZGluZykge1xuICAgICAgICAgICAgICAgIHRyLmludGVycG9sYXRlUGFkZGluZyhzdGFydFBhZGRpbmcsIHBhZGRpbmcsIGspO1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gcGFkZGluZyBpcyBiZWluZyBhcHBsaWVkLCBUcmFuc2Zvcm0jY2VudGVyUG9pbnQgaXMgY2hhbmdpbmcgY29udGlub3VzbHksXG4gICAgICAgICAgICAgICAgLy8gdGh1cyB3ZSBuZWVkIHRvIHJlY2FsY3VsYXRlIG9mZnNldFBvaW50IGV2ZXJ5IGZyYSxlXG4gICAgICAgICAgICAgICAgcG9pbnRBdE9mZnNldCA9IHRyLmNlbnRlclBvaW50LmFkZChvZmZzZXRBc1BvaW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFyb3VuZCkge1xuICAgICAgICAgICAgICAgIHRyLnNldExvY2F0aW9uQXRQb2ludChhcm91bmQsIGFyb3VuZFBvaW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSB0ci56b29tU2NhbGUodHIuem9vbSAtIHN0YXJ0Wm9vbSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IHpvb20gPiBzdGFydFpvb20gP1xuICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbigyLCBmaW5hbFNjYWxlKSA6XG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDAuNSwgZmluYWxTY2FsZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BlZWR1cCA9IE1hdGgucG93KGJhc2UsIDEgLSBrKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDZW50ZXIgPSB0ci51bnByb2plY3QoZnJvbS5hZGQoZGVsdGEubXVsdChrICogc3BlZWR1cCkpLm11bHQoc2NhbGUpKTtcbiAgICAgICAgICAgICAgICB0ci5zZXRMb2NhdGlvbkF0UG9pbnQodHIucmVuZGVyV29ybGRDb3BpZXMgPyBuZXdDZW50ZXIud3JhcCgpIDogbmV3Q2VudGVyLCBwb2ludEF0T2Zmc2V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZmlyZU1vdmVFdmVudHMoZXZlbnREYXRhKTtcblxuICAgICAgICB9LCAoaW50ZXJydXB0aW5nRWFzZUlkPzogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hZnRlckVhc2UoZXZlbnREYXRhLCBpbnRlcnJ1cHRpbmdFYXNlSWQpO1xuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBfcHJlcGFyZUVhc2UoZXZlbnREYXRhPzogT2JqZWN0LCBub01vdmVTdGFydDogYm9vbGVhbiwgY3VycmVudGx5OiBPYmplY3QgPSB7fSkge1xuICAgICAgICB0aGlzLl9tb3ZpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmICghbm9Nb3ZlU3RhcnQgJiYgIWN1cnJlbnRseS5tb3ZpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ21vdmVzdGFydCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl96b29taW5nICYmICFjdXJyZW50bHkuem9vbWluZykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnem9vbXN0YXJ0JywgZXZlbnREYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JvdGF0aW5nICYmICFjdXJyZW50bHkucm90YXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3JvdGF0ZXN0YXJ0JywgZXZlbnREYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BpdGNoaW5nICYmICFjdXJyZW50bHkucGl0Y2hpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3BpdGNoc3RhcnQnLCBldmVudERhdGEpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9maXJlTW92ZUV2ZW50cyhldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnbW92ZScsIGV2ZW50RGF0YSkpO1xuICAgICAgICBpZiAodGhpcy5fem9vbWluZykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnem9vbScsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yb3RhdGluZykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgncm90YXRlJywgZXZlbnREYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BpdGNoaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdwaXRjaCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2FmdGVyRWFzZShldmVudERhdGE/OiBPYmplY3QsIGVhc2VJZD86IHN0cmluZykge1xuICAgICAgICAvLyBpZiB0aGlzIGVhc2luZyBpcyBiZWluZyBzdG9wcGVkIHRvIHN0YXJ0IGFub3RoZXIgZWFzaW5nIHdpdGhcbiAgICAgICAgLy8gdGhlIHNhbWUgaWQgdGhlbiBkb24ndCBmaXJlIGFueSBldmVudHMgdG8gYXZvaWQgZXh0cmEgc3RhcnQvc3RvcCBldmVudHNcbiAgICAgICAgaWYgKHRoaXMuX2Vhc2VJZCAmJiBlYXNlSWQgJiYgdGhpcy5fZWFzZUlkID09PSBlYXNlSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5fZWFzZUlkO1xuXG4gICAgICAgIGNvbnN0IHdhc1pvb21pbmcgPSB0aGlzLl96b29taW5nO1xuICAgICAgICBjb25zdCB3YXNSb3RhdGluZyA9IHRoaXMuX3JvdGF0aW5nO1xuICAgICAgICBjb25zdCB3YXNQaXRjaGluZyA9IHRoaXMuX3BpdGNoaW5nO1xuICAgICAgICB0aGlzLl9tb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fem9vbWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yb3RhdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9waXRjaGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHdhc1pvb21pbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3pvb21lbmQnLCBldmVudERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2FzUm90YXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3JvdGF0ZWVuZCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3YXNQaXRjaGluZykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgncGl0Y2hlbmQnLCBldmVudERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdtb3ZlZW5kJywgZXZlbnREYXRhKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyBhbnkgY29tYmluYXRpb24gb2YgY2VudGVyLCB6b29tLCBiZWFyaW5nLCBhbmQgcGl0Y2gsIGFuaW1hdGluZyB0aGUgdHJhbnNpdGlvbiBhbG9uZyBhIGN1cnZlIHRoYXRcbiAgICAgKiBldm9rZXMgZmxpZ2h0LiBUaGUgYW5pbWF0aW9uIHNlYW1sZXNzbHkgaW5jb3Jwb3JhdGVzIHpvb21pbmcgYW5kIHBhbm5pbmcgdG8gaGVscFxuICAgICAqIHRoZSB1c2VyIG1haW50YWluIGhlciBiZWFyaW5ncyBldmVuIGFmdGVyIHRyYXZlcnNpbmcgYSBncmVhdCBkaXN0YW5jZS5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoZSBhbmltYXRpb24gd2lsbCBiZSBza2lwcGVkLCBhbmQgdGhpcyB3aWxsIGJlaGF2ZSBlcXVpdmFsZW50bHkgdG8gYGp1bXBUb2BcbiAgICAgKiBpZiB0aGUgdXNlciBoYXMgdGhlIGByZWR1Y2VkIG1vdGlvbmAgYWNjZXNpYmlsaXR5IGZlYXR1cmUgZW5hYmxlZCBpbiB0aGVpciBvcGVyYXRpbmcgc3lzdGVtLFxuICAgICAqIHVubGVzcyAnb3B0aW9ucycgaW5jbHVkZXMgYGVzc2VudGlhbDogdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgZGVzY3JpYmluZyB0aGUgZGVzdGluYXRpb24gYW5kIGFuaW1hdGlvbiBvZiB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiAgICAgQWNjZXB0cyB7QGxpbmsgQ2FtZXJhT3B0aW9uc30sIHtAbGluayBBbmltYXRpb25PcHRpb25zfSxcbiAgICAgKiAgICAgYW5kIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5jdXJ2ZT0xLjQyXSBUaGUgem9vbWluZyBcImN1cnZlXCIgdGhhdCB3aWxsIG9jY3VyIGFsb25nIHRoZVxuICAgICAqICAgICBmbGlnaHQgcGF0aC4gQSBoaWdoIHZhbHVlIG1heGltaXplcyB6b29taW5nIGZvciBhbiBleGFnZ2VyYXRlZCBhbmltYXRpb24sIHdoaWxlIGEgbG93XG4gICAgICogICAgIHZhbHVlIG1pbmltaXplcyB6b29taW5nIGZvciBhbiBlZmZlY3QgY2xvc2VyIHRvIHtAbGluayBNYXAjZWFzZVRvfS4gMS40MiBpcyB0aGUgYXZlcmFnZVxuICAgICAqICAgICB2YWx1ZSBzZWxlY3RlZCBieSBwYXJ0aWNpcGFudHMgaW4gdGhlIHVzZXIgc3R1ZHkgZGlzY3Vzc2VkIGluXG4gICAgICogICAgIFt2YW4gV2lqayAoMjAwMyldKGh0dHBzOi8vd3d3Lndpbi50dWUubmwvfnZhbndpamsvem9vbXBhbi5wZGYpLiBBIHZhbHVlIG9mXG4gICAgICogICAgIGBNYXRoLnBvdyg2LCAwLjI1KWAgd291bGQgYmUgZXF1aXZhbGVudCB0byB0aGUgcm9vdCBtZWFuIHNxdWFyZWQgYXZlcmFnZSB2ZWxvY2l0eS4gQVxuICAgICAqICAgICB2YWx1ZSBvZiAxIHdvdWxkIHByb2R1Y2UgYSBjaXJjdWxhciBtb3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pblpvb21dIFRoZSB6ZXJvLWJhc2VkIHpvb20gbGV2ZWwgYXQgdGhlIHBlYWsgb2YgdGhlIGZsaWdodCBwYXRoLiBJZlxuICAgICAqICAgICBgb3B0aW9ucy5jdXJ2ZWAgaXMgc3BlY2lmaWVkLCB0aGlzIG9wdGlvbiBpcyBpZ25vcmVkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zcGVlZD0xLjJdIFRoZSBhdmVyYWdlIHNwZWVkIG9mIHRoZSBhbmltYXRpb24gZGVmaW5lZCBpbiByZWxhdGlvbiB0b1xuICAgICAqICAgICBgb3B0aW9ucy5jdXJ2ZWAuIEEgc3BlZWQgb2YgMS4yIG1lYW5zIHRoYXQgdGhlIG1hcCBhcHBlYXJzIHRvIG1vdmUgYWxvbmcgdGhlIGZsaWdodCBwYXRoXG4gICAgICogICAgIGJ5IDEuMiB0aW1lcyBgb3B0aW9ucy5jdXJ2ZWAgc2NyZWVuZnVscyBldmVyeSBzZWNvbmQuIEEgX3NjcmVlbmZ1bF8gaXMgdGhlIG1hcCdzIHZpc2libGUgc3Bhbi5cbiAgICAgKiAgICAgSXQgZG9lcyBub3QgY29ycmVzcG9uZCB0byBhIGZpeGVkIHBoeXNpY2FsIGRpc3RhbmNlLCBidXQgdmFyaWVzIGJ5IHpvb20gbGV2ZWwuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNjcmVlblNwZWVkXSBUaGUgYXZlcmFnZSBzcGVlZCBvZiB0aGUgYW5pbWF0aW9uIG1lYXN1cmVkIGluIHNjcmVlbmZ1bHNcbiAgICAgKiAgICAgcGVyIHNlY29uZCwgYXNzdW1pbmcgYSBsaW5lYXIgdGltaW5nIGN1cnZlLiBJZiBgb3B0aW9ucy5zcGVlZGAgaXMgc3BlY2lmaWVkLCB0aGlzIG9wdGlvbiBpcyBpZ25vcmVkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhEdXJhdGlvbl0gVGhlIGFuaW1hdGlvbidzIG1heGltdW0gZHVyYXRpb24sIG1lYXN1cmVkIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKiAgICAgSWYgZHVyYXRpb24gZXhjZWVkcyBtYXhpbXVtIGR1cmF0aW9uLCBpdCByZXNldHMgdG8gMC5cbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyB6b29tc3RhcnRcbiAgICAgKiBAZmlyZXMgcGl0Y2hzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlXG4gICAgICogQGZpcmVzIHpvb21cbiAgICAgKiBAZmlyZXMgcm90YXRlXG4gICAgICogQGZpcmVzIHBpdGNoXG4gICAgICogQGZpcmVzIG1vdmVlbmRcbiAgICAgKiBAZmlyZXMgem9vbWVuZFxuICAgICAqIEBmaXJlcyBwaXRjaGVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZmx5IHdpdGggZGVmYXVsdCBvcHRpb25zIHRvIG51bGwgaXNsYW5kXG4gICAgICogbWFwLmZseVRvKHtjZW50ZXI6IFswLCAwXSwgem9vbTogOX0pO1xuICAgICAqIC8vIHVzaW5nIGZseVRvIG9wdGlvbnNcbiAgICAgKiBtYXAuZmx5VG8oe1xuICAgICAqICAgY2VudGVyOiBbMCwgMF0sXG4gICAgICogICB6b29tOiA5LFxuICAgICAqICAgc3BlZWQ6IDAuMixcbiAgICAgKiAgIGN1cnZlOiAxLFxuICAgICAqICAgZWFzaW5nKHQpIHtcbiAgICAgKiAgICAgcmV0dXJuIHQ7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogQHNlZSBbRmx5IHRvIGEgbG9jYXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZmx5dG8vKVxuICAgICAqIEBzZWUgW1Nsb3dseSBmbHkgdG8gYSBsb2NhdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9mbHl0by1vcHRpb25zLylcbiAgICAgKiBAc2VlIFtGbHkgdG8gYSBsb2NhdGlvbiBiYXNlZCBvbiBzY3JvbGwgcG9zaXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvc2Nyb2xsLWZseS10by8pXG4gICAgICovXG4gICAgZmx5VG8ob3B0aW9uczogT2JqZWN0LCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgLy8gRmFsbCB0aHJvdWdoIHRvIGp1bXBUbyBpZiB1c2VyIGhhcyBzZXQgcHJlZmVycy1yZWR1Y2VkLW1vdGlvblxuICAgICAgICBpZiAoIW9wdGlvbnMuZXNzZW50aWFsICYmIGJyb3dzZXIucHJlZmVyc1JlZHVjZWRNb3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZXJjZWRPcHRpb25zID0gKHBpY2sob3B0aW9ucywgWydjZW50ZXInLCAnem9vbScsICdiZWFyaW5nJywgJ3BpdGNoJywgJ2Fyb3VuZCddKTogQ2FtZXJhT3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5qdW1wVG8oY29lcmNlZE9wdGlvbnMsIGV2ZW50RGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzIGFuIOKAnG9wdGltYWwgcGF0aOKAnSBhbmltYXRpb24sIGFzIGRldGFpbGVkIGluOlxuICAgICAgICAvL1xuICAgICAgICAvLyBWYW4gV2lqaywgSmFya2UgSi47IE51aWosIFdpbSBBLiBBLiDigJxTbW9vdGggYW5kIGVmZmljaWVudCB6b29taW5nIGFuZCBwYW5uaW5nLuKAnSBJTkZPVklTXG4gICAgICAgIC8vICAg4oCZMDMuIHBwLiAxNeKAkzIyLiA8aHR0cHM6Ly93d3cud2luLnR1ZS5ubC9+dmFud2lqay96b29tcGFuLnBkZiNwYWdlPTU+LlxuICAgICAgICAvL1xuICAgICAgICAvLyBXaGVyZSBhcHBsaWNhYmxlLCBsb2NhbCB2YXJpYWJsZSBkb2N1bWVudGF0aW9uIGJlZ2lucyB3aXRoIHRoZSBhc3NvY2lhdGVkIHZhcmlhYmxlIG9yXG4gICAgICAgIC8vIGZ1bmN0aW9uIGluIHZhbiBXaWprICgyMDAzKS5cblxuICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgICAgICAgIG9mZnNldDogWzAsIDBdLFxuICAgICAgICAgICAgc3BlZWQ6IDEuMixcbiAgICAgICAgICAgIGN1cnZlOiAxLjQyLFxuICAgICAgICAgICAgZWFzaW5nOiBkZWZhdWx0RWFzaW5nXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnN0IHRyID0gdGhpcy50cmFuc2Zvcm0sXG4gICAgICAgICAgICBzdGFydFpvb20gPSB0aGlzLmdldFpvb20oKSxcbiAgICAgICAgICAgIHN0YXJ0QmVhcmluZyA9IHRoaXMuZ2V0QmVhcmluZygpLFxuICAgICAgICAgICAgc3RhcnRQaXRjaCA9IHRoaXMuZ2V0UGl0Y2goKSxcbiAgICAgICAgICAgIHN0YXJ0UGFkZGluZyA9IHRoaXMuZ2V0UGFkZGluZygpO1xuXG4gICAgICAgIGNvbnN0IHpvb20gPSAnem9vbScgaW4gb3B0aW9ucyA/IGNsYW1wKCtvcHRpb25zLnpvb20sIHRyLm1pblpvb20sIHRyLm1heFpvb20pIDogc3RhcnRab29tO1xuICAgICAgICBjb25zdCBiZWFyaW5nID0gJ2JlYXJpbmcnIGluIG9wdGlvbnMgPyB0aGlzLl9ub3JtYWxpemVCZWFyaW5nKG9wdGlvbnMuYmVhcmluZywgc3RhcnRCZWFyaW5nKSA6IHN0YXJ0QmVhcmluZztcbiAgICAgICAgY29uc3QgcGl0Y2ggPSAncGl0Y2gnIGluIG9wdGlvbnMgPyArb3B0aW9ucy5waXRjaCA6IHN0YXJ0UGl0Y2g7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSAncGFkZGluZycgaW4gb3B0aW9ucyA/IG9wdGlvbnMucGFkZGluZyA6IHRyLnBhZGRpbmc7XG5cbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0ci56b29tU2NhbGUoem9vbSAtIHN0YXJ0Wm9vbSk7XG4gICAgICAgIGNvbnN0IG9mZnNldEFzUG9pbnQgPSBQb2ludC5jb252ZXJ0KG9wdGlvbnMub2Zmc2V0KTtcbiAgICAgICAgbGV0IHBvaW50QXRPZmZzZXQgPSB0ci5jZW50ZXJQb2ludC5hZGQob2Zmc2V0QXNQb2ludCk7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uQXRPZmZzZXQgPSB0ci5wb2ludExvY2F0aW9uKHBvaW50QXRPZmZzZXQpO1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBMbmdMYXQuY29udmVydChvcHRpb25zLmNlbnRlciB8fCBsb2NhdGlvbkF0T2Zmc2V0KTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplQ2VudGVyKGNlbnRlcik7XG5cbiAgICAgICAgY29uc3QgZnJvbSA9IHRyLnByb2plY3QobG9jYXRpb25BdE9mZnNldCk7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gdHIucHJvamVjdChjZW50ZXIpLnN1Yihmcm9tKTtcblxuICAgICAgICBsZXQgcmhvID0gb3B0aW9ucy5jdXJ2ZTtcblxuICAgICAgICAvLyB34oKAOiBJbml0aWFsIHZpc2libGUgc3BhbiwgbWVhc3VyZWQgaW4gcGl4ZWxzIGF0IHRoZSBpbml0aWFsIHNjYWxlLlxuICAgICAgICBjb25zdCB3MCA9IE1hdGgubWF4KHRyLndpZHRoLCB0ci5oZWlnaHQpLFxuICAgICAgICAgICAgLy8gd+KCgTogRmluYWwgdmlzaWJsZSBzcGFuLCBtZWFzdXJlZCBpbiBwaXhlbHMgd2l0aCByZXNwZWN0IHRvIHRoZSBpbml0aWFsIHNjYWxlLlxuICAgICAgICAgICAgdzEgPSB3MCAvIHNjYWxlLFxuICAgICAgICAgICAgLy8gTGVuZ3RoIG9mIHRoZSBmbGlnaHQgcGF0aCBhcyBwcm9qZWN0ZWQgb250byB0aGUgZ3JvdW5kIHBsYW5lLCBtZWFzdXJlZCBpbiBwaXhlbHMgZnJvbVxuICAgICAgICAgICAgLy8gdGhlIHdvcmxkIGltYWdlIG9yaWdpbiBhdCB0aGUgaW5pdGlhbCBzY2FsZS5cbiAgICAgICAgICAgIHUxID0gZGVsdGEubWFnKCk7XG5cbiAgICAgICAgaWYgKCdtaW5ab29tJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5ab29tID0gY2xhbXAoTWF0aC5taW4ob3B0aW9ucy5taW5ab29tLCBzdGFydFpvb20sIHpvb20pLCB0ci5taW5ab29tLCB0ci5tYXhab29tKTtcbiAgICAgICAgICAgIC8vIHc8c3ViPm08L3N1Yj46IE1heGltdW0gdmlzaWJsZSBzcGFuLCBtZWFzdXJlZCBpbiBwaXhlbHMgd2l0aCByZXNwZWN0IHRvIHRoZSBpbml0aWFsXG4gICAgICAgICAgICAvLyBzY2FsZS5cbiAgICAgICAgICAgIGNvbnN0IHdNYXggPSB3MCAvIHRyLnpvb21TY2FsZShtaW5ab29tIC0gc3RhcnRab29tKTtcbiAgICAgICAgICAgIHJobyA9IE1hdGguc3FydCh3TWF4IC8gdTEgKiAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIM+BwrJcbiAgICAgICAgY29uc3QgcmhvMiA9IHJobyAqIHJobztcblxuICAgICAgICAvKipcbiAgICAgICAgICogcuG1ojogUmV0dXJucyB0aGUgem9vbS1vdXQgZmFjdG9yIGF0IG9uZSBlbmQgb2YgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGkgMCBmb3IgdGhlIGFzY2VudCBvciAxIGZvciB0aGUgZGVzY2VudC5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHIoaSkge1xuICAgICAgICAgICAgY29uc3QgYiA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIChpID8gLTEgOiAxKSAqIHJobzIgKiByaG8yICogdTEgKiB1MSkgLyAoMiAqIChpID8gdzEgOiB3MCkgKiByaG8yICogdTEpO1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubG9nKE1hdGguc3FydChiICogYiArIDEpIC0gYik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzaW5oKG4pIHsgcmV0dXJuIChNYXRoLmV4cChuKSAtIE1hdGguZXhwKC1uKSkgLyAyOyB9XG4gICAgICAgIGZ1bmN0aW9uIGNvc2gobikgeyByZXR1cm4gKE1hdGguZXhwKG4pICsgTWF0aC5leHAoLW4pKSAvIDI7IH1cbiAgICAgICAgZnVuY3Rpb24gdGFuaChuKSB7IHJldHVybiBzaW5oKG4pIC8gY29zaChuKTsgfVxuXG4gICAgICAgIC8vIHLigoA6IFpvb20tb3V0IGZhY3RvciBkdXJpbmcgYXNjZW50LlxuICAgICAgICBjb25zdCByMCA9IHIoMCk7XG5cbiAgICAgICAgLy8gdyhzKTogUmV0dXJucyB0aGUgdmlzaWJsZSBzcGFuIG9uIHRoZSBncm91bmQsIG1lYXN1cmVkIGluIHBpeGVscyB3aXRoIHJlc3BlY3QgdG8gdGhlXG4gICAgICAgIC8vIGluaXRpYWwgc2NhbGUuIEFzc3VtZXMgYW4gYW5ndWxhciBmaWVsZCBvZiB2aWV3IG9mIDIgYXJjdGFuIMK9IOKJiCA1M8KwLlxuICAgICAgICBsZXQgdzogKF86IG51bWJlcikgPT4gbnVtYmVyID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiAoY29zaChyMCkgLyBjb3NoKHIwICsgcmhvICogcykpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHUocyk6IFJldHVybnMgdGhlIGRpc3RhbmNlIGFsb25nIHRoZSBmbGlnaHQgcGF0aCBhcyBwcm9qZWN0ZWQgb250byB0aGUgZ3JvdW5kIHBsYW5lLFxuICAgICAgICAvLyBtZWFzdXJlZCBpbiBwaXhlbHMgZnJvbSB0aGUgd29ybGQgaW1hZ2Ugb3JpZ2luIGF0IHRoZSBpbml0aWFsIHNjYWxlLlxuICAgICAgICBsZXQgdTogKF86IG51bWJlcikgPT4gbnVtYmVyID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB3MCAqICgoY29zaChyMCkgKiB0YW5oKHIwICsgcmhvICogcykgLSBzaW5oKHIwKSkgLyByaG8yKSAvIHUxO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFM6IFRvdGFsIGxlbmd0aCBvZiB0aGUgZmxpZ2h0IHBhdGgsIG1lYXN1cmVkIGluIM+BLXNjcmVlbmZ1bHMuXG4gICAgICAgIGxldCBTID0gKHIoMSkgLSByMCkgLyByaG87XG5cbiAgICAgICAgLy8gV2hlbiB14oKAID0gdeKCgSwgdGhlIG9wdGltYWwgcGF0aCBkb2VzbuKAmXQgcmVxdWlyZSBib3RoIGFzY2VudCBhbmQgZGVzY2VudC5cbiAgICAgICAgaWYgKE1hdGguYWJzKHUxKSA8IDAuMDAwMDAxIHx8ICFpc0Zpbml0ZShTKSkge1xuICAgICAgICAgICAgLy8gUGVyZm9ybSBhIG1vcmUgb3IgbGVzcyBpbnN0YW50YW5lb3VzIHRyYW5zaXRpb24gaWYgdGhlIHBhdGggaXMgdG9vIHNob3J0LlxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHcwIC0gdzEpIDwgMC4wMDAwMDEpIHJldHVybiB0aGlzLmVhc2VUbyhvcHRpb25zLCBldmVudERhdGEpO1xuXG4gICAgICAgICAgICBjb25zdCBrID0gdzEgPCB3MCA/IC0xIDogMTtcbiAgICAgICAgICAgIFMgPSBNYXRoLmFicyhNYXRoLmxvZyh3MSAvIHcwKSkgLyByaG87XG5cbiAgICAgICAgICAgIHUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4gICAgICAgICAgICB3ID0gZnVuY3Rpb24ocykgeyByZXR1cm4gTWF0aC5leHAoayAqIHJobyAqIHMpOyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdkdXJhdGlvbicgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucy5kdXJhdGlvbiA9ICtvcHRpb25zLmR1cmF0aW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgViA9ICdzY3JlZW5TcGVlZCcgaW4gb3B0aW9ucyA/ICtvcHRpb25zLnNjcmVlblNwZWVkIC8gcmhvIDogK29wdGlvbnMuc3BlZWQ7XG4gICAgICAgICAgICBvcHRpb25zLmR1cmF0aW9uID0gMTAwMCAqIFMgLyBWO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4RHVyYXRpb24gJiYgb3B0aW9ucy5kdXJhdGlvbiA+IG9wdGlvbnMubWF4RHVyYXRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZHVyYXRpb24gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fem9vbWluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JvdGF0aW5nID0gKHN0YXJ0QmVhcmluZyAhPT0gYmVhcmluZyk7XG4gICAgICAgIHRoaXMuX3BpdGNoaW5nID0gKHBpdGNoICE9PSBzdGFydFBpdGNoKTtcbiAgICAgICAgdGhpcy5fcGFkZGluZyA9ICF0ci5pc1BhZGRpbmdFcXVhbChwYWRkaW5nKTtcblxuICAgICAgICB0aGlzLl9wcmVwYXJlRWFzZShldmVudERhdGEsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLl9lYXNlKChrKSA9PiB7XG4gICAgICAgICAgICAvLyBzOiBUaGUgZGlzdGFuY2UgdHJhdmVsZWQgYWxvbmcgdGhlIGZsaWdodCBwYXRoLCBtZWFzdXJlZCBpbiDPgS1zY3JlZW5mdWxzLlxuICAgICAgICAgICAgY29uc3QgcyA9IGsgKiBTO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSAxIC8gdyhzKTtcbiAgICAgICAgICAgIHRyLnpvb20gPSBrID09PSAxID8gem9vbSA6IHN0YXJ0Wm9vbSArIHRyLnNjYWxlWm9vbShzY2FsZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9yb3RhdGluZykge1xuICAgICAgICAgICAgICAgIHRyLmJlYXJpbmcgPSBpbnRlcnBvbGF0ZShzdGFydEJlYXJpbmcsIGJlYXJpbmcsIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3BpdGNoaW5nKSB7XG4gICAgICAgICAgICAgICAgdHIucGl0Y2ggPSBpbnRlcnBvbGF0ZShzdGFydFBpdGNoLCBwaXRjaCwgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fcGFkZGluZykge1xuICAgICAgICAgICAgICAgIHRyLmludGVycG9sYXRlUGFkZGluZyhzdGFydFBhZGRpbmcsIHBhZGRpbmcsIGspO1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gcGFkZGluZyBpcyBiZWluZyBhcHBsaWVkLCBUcmFuc2Zvcm0jY2VudGVyUG9pbnQgaXMgY2hhbmdpbmcgY29udGlub3VzbHksXG4gICAgICAgICAgICAgICAgLy8gdGh1cyB3ZSBuZWVkIHRvIHJlY2FsY3VsYXRlIG9mZnNldFBvaW50IGV2ZXJ5IGZyYW1lXG4gICAgICAgICAgICAgICAgcG9pbnRBdE9mZnNldCA9IHRyLmNlbnRlclBvaW50LmFkZChvZmZzZXRBc1BvaW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmV3Q2VudGVyID0gayA9PT0gMSA/IGNlbnRlciA6IHRyLnVucHJvamVjdChmcm9tLmFkZChkZWx0YS5tdWx0KHUocykpKS5tdWx0KHNjYWxlKSk7XG4gICAgICAgICAgICB0ci5zZXRMb2NhdGlvbkF0UG9pbnQodHIucmVuZGVyV29ybGRDb3BpZXMgPyBuZXdDZW50ZXIud3JhcCgpIDogbmV3Q2VudGVyLCBwb2ludEF0T2Zmc2V0KTtcblxuICAgICAgICAgICAgdGhpcy5fZmlyZU1vdmVFdmVudHMoZXZlbnREYXRhKTtcblxuICAgICAgICB9LCAoKSA9PiB0aGlzLl9hZnRlckVhc2UoZXZlbnREYXRhKSwgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaXNFYXNpbmcoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2Vhc2VGcmFtZUlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFueSBhbmltYXRlZCB0cmFuc2l0aW9uIHVuZGVyd2F5LlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzdG9wKCk6IHRoaXMge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcCgpO1xuICAgIH1cblxuICAgIF9zdG9wKGFsbG93R2VzdHVyZXM/OiBib29sZWFuLCBlYXNlSWQ/OiBzdHJpbmcpOiB0aGlzIHtcbiAgICAgICAgaWYgKHRoaXMuX2Vhc2VGcmFtZUlkKSB7XG4gICAgICAgICAgICB0aGlzLl9jYW5jZWxSZW5kZXJGcmFtZSh0aGlzLl9lYXNlRnJhbWVJZCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZWFzZUZyYW1lSWQ7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb25FYXNlRnJhbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fb25FYXNlRW5kKSB7XG4gICAgICAgICAgICAvLyBUaGUgX29uRWFzZUVuZCBmdW5jdGlvbiBtaWdodCBlbWl0IGV2ZW50cyB3aGljaCB0cmlnZ2VyIG5ld1xuICAgICAgICAgICAgLy8gYW5pbWF0aW9uLCB3aGljaCBzZXRzIGEgbmV3IF9vbkVhc2VFbmQuIEVuc3VyZSB3ZSBkb24ndCBkZWxldGVcbiAgICAgICAgICAgIC8vIGl0IHVuaW50ZW50aW9uYWxseS5cbiAgICAgICAgICAgIGNvbnN0IG9uRWFzZUVuZCA9IHRoaXMuX29uRWFzZUVuZDtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vbkVhc2VFbmQ7XG4gICAgICAgICAgICBvbkVhc2VFbmQuY2FsbCh0aGlzLCBlYXNlSWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYWxsb3dHZXN0dXJlcykge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlcnMgPSAodGhpczogYW55KS5oYW5kbGVycztcbiAgICAgICAgICAgIGlmIChoYW5kbGVycykgaGFuZGxlcnMuc3RvcChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX2Vhc2UoZnJhbWU6IChfOiBudW1iZXIpID0+IHZvaWQsXG4gICAgICAgICAgZmluaXNoOiAoKSA9PiB2b2lkLFxuICAgICAgICAgIG9wdGlvbnM6IHthbmltYXRlOiBib29sZWFuLCBkdXJhdGlvbjogbnVtYmVyLCBlYXNpbmc6IChfOiBudW1iZXIpID0+IG51bWJlcn0pIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0ZSA9PT0gZmFsc2UgfHwgb3B0aW9ucy5kdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgZnJhbWUoMSk7XG4gICAgICAgICAgICBmaW5pc2goKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vhc2VTdGFydCA9IGJyb3dzZXIubm93KCk7XG4gICAgICAgICAgICB0aGlzLl9lYXNlT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLl9vbkVhc2VGcmFtZSA9IGZyYW1lO1xuICAgICAgICAgICAgdGhpcy5fb25FYXNlRW5kID0gZmluaXNoO1xuICAgICAgICAgICAgdGhpcy5fZWFzZUZyYW1lSWQgPSB0aGlzLl9yZXF1ZXN0UmVuZGVyRnJhbWUodGhpcy5fcmVuZGVyRnJhbWVDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYWxsYmFjayBmb3IgbWFwLl9yZXF1ZXN0UmVuZGVyRnJhbWVcbiAgICBfcmVuZGVyRnJhbWVDYWxsYmFjaygpIHtcbiAgICAgICAgY29uc3QgdCA9IE1hdGgubWluKChicm93c2VyLm5vdygpIC0gdGhpcy5fZWFzZVN0YXJ0KSAvIHRoaXMuX2Vhc2VPcHRpb25zLmR1cmF0aW9uLCAxKTtcbiAgICAgICAgdGhpcy5fb25FYXNlRnJhbWUodGhpcy5fZWFzZU9wdGlvbnMuZWFzaW5nKHQpKTtcbiAgICAgICAgaWYgKHQgPCAxKSB7XG4gICAgICAgICAgICB0aGlzLl9lYXNlRnJhbWVJZCA9IHRoaXMuX3JlcXVlc3RSZW5kZXJGcmFtZSh0aGlzLl9yZW5kZXJGcmFtZUNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBiZWFyaW5nIHNvIHRoYXQgaXQncyBudW1lcmljYWxseSBjbG9zZSB0byB0aGUgY3VycmVudCBvbmUgc28gdGhhdCBpdCBpbnRlcnBvbGF0ZXMgcHJvcGVybHlcbiAgICBfbm9ybWFsaXplQmVhcmluZyhiZWFyaW5nOiBudW1iZXIsIGN1cnJlbnRCZWFyaW5nOiBudW1iZXIpIHtcbiAgICAgICAgYmVhcmluZyA9IHdyYXAoYmVhcmluZywgLTE4MCwgMTgwKTtcbiAgICAgICAgY29uc3QgZGlmZiA9IE1hdGguYWJzKGJlYXJpbmcgLSBjdXJyZW50QmVhcmluZyk7XG4gICAgICAgIGlmIChNYXRoLmFicyhiZWFyaW5nIC0gMzYwIC0gY3VycmVudEJlYXJpbmcpIDwgZGlmZikgYmVhcmluZyAtPSAzNjA7XG4gICAgICAgIGlmIChNYXRoLmFicyhiZWFyaW5nICsgMzYwIC0gY3VycmVudEJlYXJpbmcpIDwgZGlmZikgYmVhcmluZyArPSAzNjA7XG4gICAgICAgIHJldHVybiBiZWFyaW5nO1xuICAgIH1cblxuICAgIC8vIElmIGEgcGF0aCBjcm9zc2luZyB0aGUgYW50aW1lcmlkaWFuIHdvdWxkIGJlIHNob3J0ZXIsIGV4dGVuZCB0aGUgZmluYWwgY29vcmRpbmF0ZSBzbyB0aGF0XG4gICAgLy8gaW50ZXJwb2xhdGluZyBiZXR3ZWVuIHRoZSB0d28gZW5kcG9pbnRzIHdpbGwgY3Jvc3MgaXQuXG4gICAgX25vcm1hbGl6ZUNlbnRlcihjZW50ZXI6IExuZ0xhdCkge1xuICAgICAgICBjb25zdCB0ciA9IHRoaXMudHJhbnNmb3JtO1xuICAgICAgICBpZiAoIXRyLnJlbmRlcldvcmxkQ29waWVzIHx8IHRyLmxuZ1JhbmdlKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZGVsdGEgPSBjZW50ZXIubG5nIC0gdHIuY2VudGVyLmxuZztcbiAgICAgICAgY2VudGVyLmxuZyArPVxuICAgICAgICAgICAgZGVsdGEgPiAxODAgPyAtMzYwIDpcbiAgICAgICAgICAgIGRlbHRhIDwgLTE4MCA/IDM2MCA6IDA7XG4gICAgfVxufVxuXG4vLyBJbiBkZWJ1ZyBidWlsZHMsIGNoZWNrIHRoYXQgY2FtZXJhIGNoYW5nZSBldmVudHMgYXJlIGZpcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLlxuLy8gLSBfX19zdGFydCBldmVudHMgbmVlZHMgdG8gYmUgZmlyZWQgYmVmb3JlIF9fXyBhbmQgX19fZW5kIGV2ZW50c1xuLy8gLSBhbm90aGVyIF9fX3N0YXJ0IGV2ZW50IGNhbid0IGJlIGZpcmVkIGJlZm9yZSBhIF9fX2VuZCBldmVudCBoYXMgYmVlbiBmaXJlZCBmb3IgdGhlIHByZXZpb3VzIG9uZVxuZnVuY3Rpb24gYWRkQXNzZXJ0aW9ucyhjYW1lcmE6IENhbWVyYSkgeyAvL2VzbGludC1kaXNhYmxlLWxpbmVcbiAgICBEZWJ1Zy5ydW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBpblByb2dyZXNzID0ge307XG5cbiAgICAgICAgWydkcmFnJywgJ3pvb20nLCAncm90YXRlJywgJ3BpdGNoJywgJ21vdmUnXS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICAgICAgaW5Qcm9ncmVzc1tuYW1lXSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBjYW1lcmEub24oYCR7bmFtZX1zdGFydGAsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQoIWluUHJvZ3Jlc3NbbmFtZV0sIGBcIiR7bmFtZX1zdGFydFwiIGZpcmVkIHR3aWNlIHdpdGhvdXQgYSBcIiR7bmFtZX1lbmRcImApO1xuICAgICAgICAgICAgICAgIGluUHJvZ3Jlc3NbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFzc2VydChpblByb2dyZXNzLm1vdmUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNhbWVyYS5vbihuYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGluUHJvZ3Jlc3NbbmFtZV0pO1xuICAgICAgICAgICAgICAgIGFzc2VydChpblByb2dyZXNzLm1vdmUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNhbWVyYS5vbihgJHtuYW1lfWVuZGAsICgpID0+IHtcbiAgICAgICAgICAgICAgICBhc3NlcnQoaW5Qcm9ncmVzcy5tb3ZlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoaW5Qcm9ncmVzc1tuYW1lXSk7XG4gICAgICAgICAgICAgICAgaW5Qcm9ncmVzc1tuYW1lXSA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENhbmFyeSB1c2VkIHRvIHRlc3Qgd2hldGhlciB0aGlzIGZ1bmN0aW9uIGlzIHN0cmlwcGVkIGluIHByb2QgYnVpbGRcbiAgICAgICAgY2FuYXJ5ID0gJ2NhbmFyeSBkZWJ1ZyBydW4nO1xuICAgIH0pO1xufVxuXG5sZXQgY2FuYXJ5OyAvL2VzbGludC1kaXNhYmxlLWxpbmVcblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERPTSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5pbXBvcnQge2JpbmRBbGx9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4uLy4uL3V0aWwvY29uZmlnJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL21hcCc7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgICBjb21wYWN0PzogYm9vbGVhbixcbiAgICBjdXN0b21BdHRyaWJ1dGlvbj86IHN0cmluZyB8IEFycmF5PHN0cmluZz5cbn07XG5cbi8qKlxuICogQW4gYEF0dHJpYnV0aW9uQ29udHJvbGAgY29udHJvbCBwcmVzZW50cyB0aGUgbWFwJ3MgW2F0dHJpYnV0aW9uIGluZm9ybWF0aW9uXShodHRwczovL2RvY3MubWFwYm94LmNvbS9oZWxwL2hvdy1tYXBib3gtd29ya3MvYXR0cmlidXRpb24vKS5cbiAqXG4gKiBAaW1wbGVtZW50cyB7SUNvbnRyb2x9XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNvbXBhY3RdIElmIGB0cnVlYCwgZm9yY2UgYSBjb21wYWN0IGF0dHJpYnV0aW9uIHRoYXQgc2hvd3MgdGhlIGZ1bGwgYXR0cmlidXRpb24gb24gbW91c2UgaG92ZXIuIElmIGBmYWxzZWAsIGZvcmNlIHRoZSBmdWxsIGF0dHJpYnV0aW9uIGNvbnRyb2wuIFRoZSBkZWZhdWx0IGlzIGEgcmVzcG9uc2l2ZSBhdHRyaWJ1dGlvbiB0aGF0IGNvbGxhcHNlcyB3aGVuIHRoZSBtYXAgaXMgbGVzcyB0aGFuIDY0MCBwaXhlbHMgd2lkZS4gKipBdHRyaWJ1dGlvbiBzaG91bGQgbm90IGJlIGNvbGxhcHNlZCBpZiBpdCBjYW4gY29tZm9ydGFibHkgZml0IG9uIHRoZSBtYXAuIGBjb21wYWN0YCBzaG91bGQgb25seSBiZSB1c2VkIHRvIG1vZGlmeSBkZWZhdWx0IGF0dHJpYnV0aW9uIHdoZW4gbWFwIHNpemUgbWFrZXMgaXQgaW1wb3NzaWJsZSB0byBmaXQgW2RlZmF1bHQgYXR0cmlidXRpb25dKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL2hlbHAvaG93LW1hcGJveC13b3Jrcy9hdHRyaWJ1dGlvbi8pIGFuZCB3aGVuIHRoZSBhdXRvbWF0aWMgY29tcGFjdCByZXNpemluZyBmb3IgZGVmYXVsdCBzZXR0aW5ncyBhcmUgbm90IHN1ZmZpY2llbnQuKipcbiAqIEBwYXJhbSB7c3RyaW5nIHwgQXJyYXk8c3RyaW5nPn0gW29wdGlvbnMuY3VzdG9tQXR0cmlidXRpb25dIFN0cmluZyBvciBzdHJpbmdzIHRvIHNob3cgaW4gYWRkaXRpb24gdG8gYW55IG90aGVyIGF0dHJpYnV0aW9ucy5cbiAqIEBleGFtcGxlXG4gKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7YXR0cmlidXRpb25Db250cm9sOiBmYWxzZX0pXG4gKiAgICAgLmFkZENvbnRyb2wobmV3IG1hcGJveGdsLkF0dHJpYnV0aW9uQ29udHJvbCh7XG4gKiAgICAgICAgIGNvbXBhY3Q6IHRydWVcbiAqICAgICB9KSk7XG4gKi9cbmNsYXNzIEF0dHJpYnV0aW9uQ29udHJvbCB7XG4gICAgb3B0aW9uczogT3B0aW9ucztcbiAgICBfbWFwOiBNYXA7XG4gICAgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgX2lubmVyQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBfY29tcGFjdEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgX2VkaXRMaW5rOiA/SFRNTEFuY2hvckVsZW1lbnQ7XG4gICAgX2F0dHJpYkhUTUw6IHN0cmluZztcbiAgICBzdHlsZUlkOiBzdHJpbmc7XG4gICAgc3R5bGVPd25lcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgICAgYmluZEFsbChbXG4gICAgICAgICAgICAnX3RvZ2dsZUF0dHJpYnV0aW9uJyxcbiAgICAgICAgICAgICdfdXBkYXRlRWRpdExpbmsnLFxuICAgICAgICAgICAgJ191cGRhdGVEYXRhJyxcbiAgICAgICAgICAgICdfdXBkYXRlQ29tcGFjdCdcbiAgICAgICAgXSwgdGhpcyk7XG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdFBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gJ2JvdHRvbS1yaWdodCc7XG4gICAgfVxuXG4gICAgb25BZGQobWFwOiBNYXApIHtcbiAgICAgICAgY29uc3QgY29tcGFjdCA9IHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuY29tcGFjdDtcblxuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC1jdHJsIG1hcGJveGdsLWN0cmwtYXR0cmliJyk7XG4gICAgICAgIHRoaXMuX2NvbXBhY3RCdXR0b24gPSBET00uY3JlYXRlKCdidXR0b24nLCAnbWFwYm94Z2wtY3RybC1hdHRyaWItYnV0dG9uJywgdGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fY29tcGFjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX3RvZ2dsZUF0dHJpYnV0aW9uKTtcbiAgICAgICAgdGhpcy5fc2V0RWxlbWVudFRpdGxlKHRoaXMuX2NvbXBhY3RCdXR0b24sICdUb2dnbGVBdHRyaWJ1dGlvbicpO1xuICAgICAgICB0aGlzLl9pbm5lckNvbnRhaW5lciA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC1jdHJsLWF0dHJpYi1pbm5lcicsIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX2lubmVyQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgncm9sZScsICdsaXN0Jyk7XG5cbiAgICAgICAgaWYgKGNvbXBhY3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jb21wYWN0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91cGRhdGVBdHRyaWJ1dGlvbnMoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlRWRpdExpbmsoKTtcblxuICAgICAgICB0aGlzLl9tYXAub24oJ3N0eWxlZGF0YScsIHRoaXMuX3VwZGF0ZURhdGEpO1xuICAgICAgICB0aGlzLl9tYXAub24oJ3NvdXJjZWRhdGEnLCB0aGlzLl91cGRhdGVEYXRhKTtcbiAgICAgICAgdGhpcy5fbWFwLm9uKCdtb3ZlZW5kJywgdGhpcy5fdXBkYXRlRWRpdExpbmspO1xuXG4gICAgICAgIGlmIChjb21wYWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vbigncmVzaXplJywgdGhpcy5fdXBkYXRlQ29tcGFjdCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDb21wYWN0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICAgIH1cblxuICAgIG9uUmVtb3ZlKCkge1xuICAgICAgICBET00ucmVtb3ZlKHRoaXMuX2NvbnRhaW5lcik7XG5cbiAgICAgICAgdGhpcy5fbWFwLm9mZignc3R5bGVkYXRhJywgdGhpcy5fdXBkYXRlRGF0YSk7XG4gICAgICAgIHRoaXMuX21hcC5vZmYoJ3NvdXJjZWRhdGEnLCB0aGlzLl91cGRhdGVEYXRhKTtcbiAgICAgICAgdGhpcy5fbWFwLm9mZignbW92ZWVuZCcsIHRoaXMuX3VwZGF0ZUVkaXRMaW5rKTtcbiAgICAgICAgdGhpcy5fbWFwLm9mZigncmVzaXplJywgdGhpcy5fdXBkYXRlQ29tcGFjdCk7XG5cbiAgICAgICAgdGhpcy5fbWFwID0gKHVuZGVmaW5lZDogYW55KTtcbiAgICAgICAgdGhpcy5fYXR0cmliSFRNTCA9ICh1bmRlZmluZWQ6IGFueSk7XG4gICAgfVxuXG4gICAgX3NldEVsZW1lbnRUaXRsZShlbGVtZW50OiBIVE1MRWxlbWVudCwgdGl0bGU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLl9tYXAuX2dldFVJU3RyaW5nKGBBdHRyaWJ1dGlvbkNvbnRyb2wuJHt0aXRsZX1gKTtcbiAgICAgICAgZWxlbWVudC50aXRsZSA9IHN0cjtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBzdHIpO1xuICAgIH1cblxuICAgIF90b2dnbGVBdHRyaWJ1dGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ21hcGJveGdsLWNvbXBhY3Qtc2hvdycpKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY29tcGFjdC1zaG93Jyk7XG4gICAgICAgICAgICB0aGlzLl9jb21wYWN0QnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ2ZhbHNlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY29tcGFjdC1zaG93Jyk7XG4gICAgICAgICAgICB0aGlzLl9jb21wYWN0QnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVFZGl0TGluaygpIHtcbiAgICAgICAgbGV0IGVkaXRMaW5rID0gdGhpcy5fZWRpdExpbms7XG4gICAgICAgIGlmICghZWRpdExpbmspIHtcbiAgICAgICAgICAgIGVkaXRMaW5rID0gdGhpcy5fZWRpdExpbmsgPSAodGhpcy5fY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5tYXBib3gtaW1wcm92ZS1tYXAnKTogYW55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IFtcbiAgICAgICAgICAgIHtrZXk6ICdvd25lcicsIHZhbHVlOiB0aGlzLnN0eWxlT3duZXJ9LFxuICAgICAgICAgICAge2tleTogJ2lkJywgdmFsdWU6IHRoaXMuc3R5bGVJZH0sXG4gICAgICAgICAgICB7a2V5OiAnYWNjZXNzX3Rva2VuJywgdmFsdWU6IHRoaXMuX21hcC5fcmVxdWVzdE1hbmFnZXIuX2N1c3RvbUFjY2Vzc1Rva2VuIHx8IGNvbmZpZy5BQ0NFU1NfVE9LRU59XG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKGVkaXRMaW5rKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbVN0cmluZyA9IHBhcmFtcy5yZWR1Y2UoKGFjYywgbmV4dCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjYyArPSBgJHtuZXh0LmtleX09JHtuZXh0LnZhbHVlfSR7aSA8IHBhcmFtcy5sZW5ndGggLSAxID8gJyYnIDogJyd9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sIGA/YCk7XG4gICAgICAgICAgICBlZGl0TGluay5ocmVmID0gYCR7Y29uZmlnLkZFRURCQUNLX1VSTH0vJHtwYXJhbVN0cmluZ30ke3RoaXMuX21hcC5faGFzaCA/IHRoaXMuX21hcC5faGFzaC5nZXRIYXNoU3RyaW5nKHRydWUpIDogJyd9YDtcbiAgICAgICAgICAgIGVkaXRMaW5rLnJlbCA9ICdub29wZW5lciBub2ZvbGxvdyc7XG4gICAgICAgICAgICB0aGlzLl9zZXRFbGVtZW50VGl0bGUoZWRpdExpbmssICdNYXBGZWVkYmFjaycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZURhdGEoZTogYW55KSB7XG4gICAgICAgIGlmIChlICYmIChlLnNvdXJjZURhdGFUeXBlID09PSAnbWV0YWRhdGEnIHx8IGUuc291cmNlRGF0YVR5cGUgPT09ICd2aXNpYmlsaXR5JyB8fCBlLmRhdGFUeXBlID09PSAnc3R5bGUnKSkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQXR0cmlidXRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVFZGl0TGluaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZUF0dHJpYnV0aW9ucygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tYXAuc3R5bGUpIHJldHVybjtcbiAgICAgICAgbGV0IGF0dHJpYnV0aW9uczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmN1c3RvbUF0dHJpYnV0aW9uKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMuY3VzdG9tQXR0cmlidXRpb24pKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRpb25zID0gYXR0cmlidXRpb25zLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmN1c3RvbUF0dHJpYnV0aW9uLm1hcChhdHRyaWJ1dGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGF0dHJpYnV0aW9uICE9PSAnc3RyaW5nJykgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJpYnV0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuY3VzdG9tQXR0cmlidXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRpb25zLnB1c2godGhpcy5vcHRpb25zLmN1c3RvbUF0dHJpYnV0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9tYXAuc3R5bGUuc3R5bGVzaGVldCkge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVzaGVldDogYW55ID0gdGhpcy5fbWFwLnN0eWxlLnN0eWxlc2hlZXQ7XG4gICAgICAgICAgICB0aGlzLnN0eWxlT3duZXIgPSBzdHlsZXNoZWV0Lm93bmVyO1xuICAgICAgICAgICAgdGhpcy5zdHlsZUlkID0gc3R5bGVzaGVldC5pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlcyA9IHRoaXMuX21hcC5zdHlsZS5zb3VyY2VDYWNoZXM7XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gc291cmNlQ2FjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHNvdXJjZUNhY2hlc1tpZF07XG4gICAgICAgICAgICBpZiAoc291cmNlQ2FjaGUudXNlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZUNhY2hlLmdldFNvdXJjZSgpO1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuYXR0cmlidXRpb24gJiYgYXR0cmlidXRpb25zLmluZGV4T2Yoc291cmNlLmF0dHJpYnV0aW9uKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb25zLnB1c2goc291cmNlLmF0dHJpYnV0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgYW55IGVudHJpZXMgdGhhdCBhcmUgc3Vic3RyaW5ncyBvZiBhbm90aGVyIGVudHJ5LlxuICAgICAgICAvLyBmaXJzdCBzb3J0IGJ5IGxlbmd0aCBzbyB0aGF0IHN1YnN0cmluZ3MgY29tZSBmaXJzdFxuICAgICAgICBhdHRyaWJ1dGlvbnMuc29ydCgoYSwgYikgPT4gYS5sZW5ndGggLSBiLmxlbmd0aCk7XG4gICAgICAgIGF0dHJpYnV0aW9ucyA9IGF0dHJpYnV0aW9ucy5maWx0ZXIoKGF0dHJpYiwgaSkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgYXR0cmlidXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0aW9uc1tqXS5pbmRleE9mKGF0dHJpYikgPj0gMCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjaGVjayBpZiBhdHRyaWJ1dGlvbiBzdHJpbmcgaXMgZGlmZmVyZW50IHRvIG1pbmltaXplIERPTSBjaGFuZ2VzXG4gICAgICAgIGNvbnN0IGF0dHJpYkhUTUwgPSBhdHRyaWJ1dGlvbnMuam9pbignIHwgJyk7XG4gICAgICAgIGlmIChhdHRyaWJIVE1MID09PSB0aGlzLl9hdHRyaWJIVE1MKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fYXR0cmliSFRNTCA9IGF0dHJpYkhUTUw7XG5cbiAgICAgICAgaWYgKGF0dHJpYnV0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2lubmVyQ29udGFpbmVyLmlubmVySFRNTCA9IGF0dHJpYkhUTUw7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtYXR0cmliLWVtcHR5Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtYXR0cmliLWVtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIG9sZCBET00gbm9kZSBmcm9tIF9lZGl0TGlua1xuICAgICAgICB0aGlzLl9lZGl0TGluayA9IG51bGw7XG4gICAgfVxuXG4gICAgX3VwZGF0ZUNvbXBhY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXAuZ2V0Q2FudmFzQ29udGFpbmVyKCkub2Zmc2V0V2lkdGggPD0gNjQwKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY29tcGFjdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWNvbXBhY3QnLCAnbWFwYm94Z2wtY29tcGFjdC1zaG93Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXR0cmlidXRpb25Db250cm9sO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERPTSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5cbmltcG9ydCB7YmluZEFsbH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL21hcCc7XG5cbi8qKlxuICogQSBgTG9nb0NvbnRyb2xgIGlzIGEgY29udHJvbCB0aGF0IGFkZHMgdGhlIE1hcGJveCB3YXRlcm1hcmtcbiAqIHRvIHRoZSBtYXAgYXMgcmVxdWlyZWQgYnkgdGhlIFt0ZXJtcyBvZiBzZXJ2aWNlXShodHRwczovL3d3dy5tYXBib3guY29tL3Rvcy8pIGZvciBNYXBib3hcbiAqIHZlY3RvciB0aWxlcyBhbmQgY29yZSBzdHlsZXMuXG4gKlxuICogQGltcGxlbWVudHMge0lDb250cm9sfVxuICogQHByaXZhdGVcbioqL1xuXG5jbGFzcyBMb2dvQ29udHJvbCB7XG4gICAgX21hcDogTWFwO1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGJpbmRBbGwoWydfdXBkYXRlTG9nbyddLCB0aGlzKTtcbiAgICAgICAgYmluZEFsbChbJ191cGRhdGVDb21wYWN0J10sIHRoaXMpO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWN0cmwnKTtcbiAgICAgICAgY29uc3QgYW5jaG9yID0gRE9NLmNyZWF0ZSgnYScsICdtYXBib3hnbC1jdHJsLWxvZ28nKTtcbiAgICAgICAgYW5jaG9yLnRhcmdldCA9IFwiX2JsYW5rXCI7XG4gICAgICAgIGFuY2hvci5yZWwgPSBcIm5vb3BlbmVyIG5vZm9sbG93XCI7XG4gICAgICAgIGFuY2hvci5ocmVmID0gXCJodHRwczovL3d3dy5tYXBib3guY29tL1wiO1xuICAgICAgICBhbmNob3Iuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB0aGlzLl9tYXAuX2dldFVJU3RyaW5nKCdMb2dvQ29udHJvbC5UaXRsZScpKTtcbiAgICAgICAgYW5jaG9yLnNldEF0dHJpYnV0ZShcInJlbFwiLCBcIm5vb3BlbmVyIG5vZm9sbG93XCIpO1xuICAgICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQoYW5jaG9yKTtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgdGhpcy5fbWFwLm9uKCdzb3VyY2VkYXRhJywgdGhpcy5fdXBkYXRlTG9nbyk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUxvZ28oKTtcblxuICAgICAgICB0aGlzLl9tYXAub24oJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZUNvbXBhY3QpO1xuICAgICAgICB0aGlzLl91cGRhdGVDb21wYWN0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgRE9NLnJlbW92ZSh0aGlzLl9jb250YWluZXIpO1xuICAgICAgICB0aGlzLl9tYXAub2ZmKCdzb3VyY2VkYXRhJywgdGhpcy5fdXBkYXRlTG9nbyk7XG4gICAgICAgIHRoaXMuX21hcC5vZmYoJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZUNvbXBhY3QpO1xuICAgIH1cblxuICAgIGdldERlZmF1bHRQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICdib3R0b20tbGVmdCc7XG4gICAgfVxuXG4gICAgX3VwZGF0ZUxvZ28oZTogYW55KSB7XG4gICAgICAgIGlmICghZSB8fCBlLnNvdXJjZURhdGFUeXBlID09PSAnbWV0YWRhdGEnKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUuZGlzcGxheSA9IHRoaXMuX2xvZ29SZXF1aXJlZCgpID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9sb2dvUmVxdWlyZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbWFwLnN0eWxlKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGVzID0gdGhpcy5fbWFwLnN0eWxlLnNvdXJjZUNhY2hlcztcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZUNhY2hlc1tpZF0uZ2V0U291cmNlKCk7XG4gICAgICAgICAgICBpZiAoc291cmNlLm1hcGJveF9sb2dvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgX3VwZGF0ZUNvbXBhY3QoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckNoaWxkcmVuID0gdGhpcy5fY29udGFpbmVyLmNoaWxkcmVuO1xuICAgICAgICBpZiAoY29udGFpbmVyQ2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBjb250YWluZXJDaGlsZHJlblswXTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXAuZ2V0Q2FudmFzQ29udGFpbmVyKCkub2Zmc2V0V2lkdGggPCAyNTApIHtcbiAgICAgICAgICAgICAgICBhbmNob3IuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY29tcGFjdCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmNob3IuY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY29tcGFjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IExvZ29Db250cm9sO1xuIiwiLy8gQGZsb3cgc3RyaWN0XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmV4cG9ydCB0eXBlIFRhc2tJRCA9IG51bWJlcjsgLy8gY2FuJ3QgbWFyayBvcGFxdWUgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9mbG93dHlwZS9mbG93LXJlbW92ZS10eXBlcy9wdWxsLzYxXG50eXBlIFRhc2sgPSB7XG4gICAgY2FsbGJhY2s6ICh0aW1lU3RhbXA6IG51bWJlcikgPT4gdm9pZDtcbiAgICBpZDogVGFza0lEO1xuICAgIGNhbmNlbGxlZDogYm9vbGVhbjtcbn07XG5cbmNsYXNzIFRhc2tRdWV1ZSB7XG4gICAgX3F1ZXVlOiBBcnJheTxUYXNrPjtcbiAgICBfaWQ6IFRhc2tJRDtcbiAgICBfY2xlYXJlZDogYm9vbGVhbjtcbiAgICBfY3VycmVudGx5UnVubmluZzogQXJyYXk8VGFzaz4gfCBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKCkgIHtcbiAgICAgICAgdGhpcy5fcXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5faWQgPSAwO1xuICAgICAgICB0aGlzLl9jbGVhcmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRseVJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBhZGQoY2FsbGJhY2s6ICh0aW1lU3RhbXA6IG51bWJlcikgPT4gdm9pZCk6IFRhc2tJRCB7XG4gICAgICAgIGNvbnN0IGlkID0gKyt0aGlzLl9pZDtcbiAgICAgICAgY29uc3QgcXVldWUgPSB0aGlzLl9xdWV1ZTtcbiAgICAgICAgcXVldWUucHVzaCh7Y2FsbGJhY2ssIGlkLCBjYW5jZWxsZWQ6IGZhbHNlfSk7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG5cbiAgICByZW1vdmUoaWQ6IFRhc2tJRCkge1xuICAgICAgICBjb25zdCBydW5uaW5nID0gdGhpcy5fY3VycmVudGx5UnVubmluZztcbiAgICAgICAgY29uc3QgcXVldWUgPSBydW5uaW5nID8gdGhpcy5fcXVldWUuY29uY2F0KHJ1bm5pbmcpIDogdGhpcy5fcXVldWU7XG4gICAgICAgIGZvciAoY29uc3QgdGFzayBvZiBxdWV1ZSkge1xuICAgICAgICAgICAgaWYgKHRhc2suaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgdGFzay5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJ1bih0aW1lU3RhbXA6IG51bWJlciA9IDApIHtcbiAgICAgICAgYXNzZXJ0KCF0aGlzLl9jdXJyZW50bHlSdW5uaW5nKTtcbiAgICAgICAgY29uc3QgcXVldWUgPSB0aGlzLl9jdXJyZW50bHlSdW5uaW5nID0gdGhpcy5fcXVldWU7XG5cbiAgICAgICAgLy8gVGFza3MgcXVldWVkIGJ5IGNhbGxiYWNrcyBpbiB0aGUgY3VycmVudCBxdWV1ZSBzaG91bGQgYmUgZXhlY3V0ZWRcbiAgICAgICAgLy8gb24gdGhlIG5leHQgcnVuLCBub3QgdGhlIGN1cnJlbnQgcnVuLlxuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuXG4gICAgICAgIGZvciAoY29uc3QgdGFzayBvZiBxdWV1ZSkge1xuICAgICAgICAgICAgaWYgKHRhc2suY2FuY2VsbGVkKSBjb250aW51ZTtcbiAgICAgICAgICAgIHRhc2suY2FsbGJhY2sodGltZVN0YW1wKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jbGVhcmVkKSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NsZWFyZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY3VycmVudGx5UnVubmluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudGx5UnVubmluZykge1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcXVldWUgPSBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhc2tRdWV1ZTtcbiIsIi8vIEBmbG93XG5cbmNvbnN0IGRlZmF1bHRMb2NhbGUgPSB7XG4gICAgJ0F0dHJpYnV0aW9uQ29udHJvbC5Ub2dnbGVBdHRyaWJ1dGlvbic6ICdUb2dnbGUgYXR0cmlidXRpb24nLFxuICAgICdBdHRyaWJ1dGlvbkNvbnRyb2wuTWFwRmVlZGJhY2snOiAnTWFwIGZlZWRiYWNrJyxcbiAgICAnRnVsbHNjcmVlbkNvbnRyb2wuRW50ZXInOiAnRW50ZXIgZnVsbHNjcmVlbicsXG4gICAgJ0Z1bGxzY3JlZW5Db250cm9sLkV4aXQnOiAnRXhpdCBmdWxsc2NyZWVuJyxcbiAgICAnR2VvbG9jYXRlQ29udHJvbC5GaW5kTXlMb2NhdGlvbic6ICdGaW5kIG15IGxvY2F0aW9uJyxcbiAgICAnR2VvbG9jYXRlQ29udHJvbC5Mb2NhdGlvbk5vdEF2YWlsYWJsZSc6ICdMb2NhdGlvbiBub3QgYXZhaWxhYmxlJyxcbiAgICAnTG9nb0NvbnRyb2wuVGl0bGUnOiAnTWFwYm94IGxvZ28nLFxuICAgICdOYXZpZ2F0aW9uQ29udHJvbC5SZXNldEJlYXJpbmcnOiAnUmVzZXQgYmVhcmluZyB0byBub3J0aCcsXG4gICAgJ05hdmlnYXRpb25Db250cm9sLlpvb21Jbic6ICdab29tIGluJyxcbiAgICAnTmF2aWdhdGlvbkNvbnRyb2wuWm9vbU91dCc6ICdab29tIG91dCcsXG4gICAgJ1NjYWxlQ29udHJvbC5GZWV0JzogJ2Z0JyxcbiAgICAnU2NhbGVDb250cm9sLk1ldGVycyc6ICdtJyxcbiAgICAnU2NhbGVDb250cm9sLktpbG9tZXRlcnMnOiAna20nLFxuICAgICdTY2FsZUNvbnRyb2wuTWlsZXMnOiAnbWknLFxuICAgICdTY2FsZUNvbnRyb2wuTmF1dGljYWxNaWxlcyc6ICdubSdcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdExvY2FsZTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7dmVyc2lvbn0gZnJvbSAnLi4vLi4vcGFja2FnZS5qc29uJztcbmltcG9ydCB7ZXh0ZW5kLCBiaW5kQWxsLCB3YXJuT25jZSwgdW5pcXVlSWR9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IHdpbmRvdyBmcm9tICcuLi91dGlsL3dpbmRvdyc7XG5jb25zdCB7SFRNTEltYWdlRWxlbWVudCwgSFRNTEVsZW1lbnQsIEltYWdlQml0bWFwfSA9IHdpbmRvdztcbmltcG9ydCBET00gZnJvbSAnLi4vdXRpbC9kb20nO1xuaW1wb3J0IHtnZXRJbWFnZSwgZ2V0SlNPTiwgUmVzb3VyY2VUeXBlfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuaW1wb3J0IHtSZXF1ZXN0TWFuYWdlcn0gZnJvbSAnLi4vdXRpbC9tYXBib3gnO1xuaW1wb3J0IFN0eWxlIGZyb20gJy4uL3N0eWxlL3N0eWxlJztcbmltcG9ydCBFdmFsdWF0aW9uUGFyYW1ldGVycyBmcm9tICcuLi9zdHlsZS9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuaW1wb3J0IFBhaW50ZXIgZnJvbSAnLi4vcmVuZGVyL3BhaW50ZXInO1xuaW1wb3J0IFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCBIYXNoIGZyb20gJy4vaGFzaCc7XG5pbXBvcnQgSGFuZGxlck1hbmFnZXIgZnJvbSAnLi9oYW5kbGVyX21hbmFnZXInO1xuaW1wb3J0IENhbWVyYSBmcm9tICcuL2NhbWVyYSc7XG5pbXBvcnQgTG5nTGF0IGZyb20gJy4uL2dlby9sbmdfbGF0JztcbmltcG9ydCBMbmdMYXRCb3VuZHMgZnJvbSAnLi4vZ2VvL2xuZ19sYXRfYm91bmRzJztcbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCBBdHRyaWJ1dGlvbkNvbnRyb2wgZnJvbSAnLi9jb250cm9sL2F0dHJpYnV0aW9uX2NvbnRyb2wnO1xuaW1wb3J0IExvZ29Db250cm9sIGZyb20gJy4vY29udHJvbC9sb2dvX2NvbnRyb2wnO1xuaW1wb3J0IGlzU3VwcG9ydGVkIGZyb20gJ0BtYXBib3gvbWFwYm94LWdsLXN1cHBvcnRlZCc7XG5pbXBvcnQge1JHQkFJbWFnZX0gZnJvbSAnLi4vdXRpbC9pbWFnZSc7XG5pbXBvcnQge0V2ZW50LCBFcnJvckV2ZW50fSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IHtNYXBNb3VzZUV2ZW50fSBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgVGFza1F1ZXVlIGZyb20gJy4uL3V0aWwvdGFza19xdWV1ZSc7XG5pbXBvcnQgd2VicFN1cHBvcnRlZCBmcm9tICcuLi91dGlsL3dlYnBfc3VwcG9ydGVkJztcbmltcG9ydCB7UGVyZm9ybWFuY2VNYXJrZXJzLCBQZXJmb3JtYW5jZVV0aWxzfSBmcm9tICcuLi91dGlsL3BlcmZvcm1hbmNlJztcblxuaW1wb3J0IHtzZXRDYWNoZUxpbWl0c30gZnJvbSAnLi4vdXRpbC90aWxlX3JlcXVlc3RfY2FjaGUnO1xuXG5pbXBvcnQgdHlwZSB7UG9pbnRMaWtlfSBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB0eXBlIHtSZXF1ZXN0VHJhbnNmb3JtRnVuY3Rpb259IGZyb20gJy4uL3V0aWwvbWFwYm94JztcbmltcG9ydCB0eXBlIHtMbmdMYXRMaWtlfSBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgdHlwZSB7TG5nTGF0Qm91bmRzTGlrZX0gZnJvbSAnLi4vZ2VvL2xuZ19sYXRfYm91bmRzJztcbmltcG9ydCB0eXBlIHtTdHlsZU9wdGlvbnMsIFN0eWxlU2V0dGVyT3B0aW9uc30gZnJvbSAnLi4vc3R5bGUvc3R5bGUnO1xuaW1wb3J0IHR5cGUge01hcEV2ZW50LCBNYXBEYXRhRXZlbnR9IGZyb20gJy4vZXZlbnRzJztcbmltcG9ydCB0eXBlIHtDdXN0b21MYXllckludGVyZmFjZX0gZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvY3VzdG9tX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIHtTdHlsZUltYWdlSW50ZXJmYWNlLCBTdHlsZUltYWdlTWV0YWRhdGF9IGZyb20gJy4uL3N0eWxlL3N0eWxlX2ltYWdlJztcblxuaW1wb3J0IHR5cGUgU2Nyb2xsWm9vbUhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL3Njcm9sbF96b29tJztcbmltcG9ydCB0eXBlIEJveFpvb21IYW5kbGVyIGZyb20gJy4vaGFuZGxlci9ib3hfem9vbSc7XG5pbXBvcnQgdHlwZSB7VG91Y2hQaXRjaEhhbmRsZXJ9IGZyb20gJy4vaGFuZGxlci90b3VjaF96b29tX3JvdGF0ZSc7XG5pbXBvcnQgdHlwZSBEcmFnUm90YXRlSGFuZGxlciBmcm9tICcuL2hhbmRsZXIvc2hpbS9kcmFnX3JvdGF0ZSc7XG5pbXBvcnQgdHlwZSBEcmFnUGFuSGFuZGxlciwge0RyYWdQYW5PcHRpb25zfSBmcm9tICcuL2hhbmRsZXIvc2hpbS9kcmFnX3Bhbic7XG5pbXBvcnQgdHlwZSBLZXlib2FyZEhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL2tleWJvYXJkJztcbmltcG9ydCB0eXBlIERvdWJsZUNsaWNrWm9vbUhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL3NoaW0vZGJsY2xpY2tfem9vbSc7XG5pbXBvcnQgdHlwZSBUb3VjaFpvb21Sb3RhdGVIYW5kbGVyIGZyb20gJy4vaGFuZGxlci9zaGltL3RvdWNoX3pvb21fcm90YXRlJztcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gJy4vZGVmYXVsdF9sb2NhbGUnO1xuaW1wb3J0IHR5cGUge1Rhc2tJRH0gZnJvbSAnLi4vdXRpbC90YXNrX3F1ZXVlJztcbmltcG9ydCB0eXBlIHtDYW5jZWxhYmxlfSBmcm9tICcuLi90eXBlcy9jYW5jZWxhYmxlJztcbmltcG9ydCB0eXBlIHtcbiAgICBMYXllclNwZWNpZmljYXRpb24sXG4gICAgRmlsdGVyU3BlY2lmaWNhdGlvbixcbiAgICBTdHlsZVNwZWNpZmljYXRpb24sXG4gICAgTGlnaHRTcGVjaWZpY2F0aW9uLFxuICAgIFNvdXJjZVNwZWNpZmljYXRpb25cbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5cbnR5cGUgQ29udHJvbFBvc2l0aW9uID0gJ3RvcC1sZWZ0JyB8ICd0b3AtcmlnaHQnIHwgJ2JvdHRvbS1sZWZ0JyB8ICdib3R0b20tcmlnaHQnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cbnR5cGUgSUNvbnRyb2wgPSB7XG4gICAgb25BZGQobWFwOiBNYXApOiBIVE1MRWxlbWVudDtcbiAgICBvblJlbW92ZShtYXA6IE1hcCk6IHZvaWQ7XG5cbiAgICArZ2V0RGVmYXVsdFBvc2l0aW9uPzogKCkgPT4gQ29udHJvbFBvc2l0aW9uO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG50eXBlIE1hcE9wdGlvbnMgPSB7XG4gICAgaGFzaD86IGJvb2xlYW4gfCBzdHJpbmcsXG4gICAgaW50ZXJhY3RpdmU/OiBib29sZWFuLFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBzdHJpbmcsXG4gICAgYmVhcmluZ1NuYXA/OiBudW1iZXIsXG4gICAgYXR0cmlidXRpb25Db250cm9sPzogYm9vbGVhbixcbiAgICBjdXN0b21BdHRyaWJ1dGlvbj86IHN0cmluZyB8IEFycmF5PHN0cmluZz4sXG4gICAgbG9nb1Bvc2l0aW9uPzogQ29udHJvbFBvc2l0aW9uLFxuICAgIGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ/OiBib29sZWFuLFxuICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcj86IGJvb2xlYW4sXG4gICAgYW50aWFsaWFzPzogYm9vbGVhbixcbiAgICByZWZyZXNoRXhwaXJlZFRpbGVzPzogYm9vbGVhbixcbiAgICBtYXhCb3VuZHM/OiBMbmdMYXRCb3VuZHNMaWtlLFxuICAgIHNjcm9sbFpvb20/OiBib29sZWFuLFxuICAgIG1pblpvb20/OiA/bnVtYmVyLFxuICAgIG1heFpvb20/OiA/bnVtYmVyLFxuICAgIG1pblBpdGNoPzogP251bWJlcixcbiAgICBtYXhQaXRjaD86ID9udW1iZXIsXG4gICAgYm94Wm9vbT86IGJvb2xlYW4sXG4gICAgZHJhZ1JvdGF0ZT86IGJvb2xlYW4sXG4gICAgZHJhZ1Bhbj86IERyYWdQYW5PcHRpb25zLFxuICAgIGtleWJvYXJkPzogYm9vbGVhbixcbiAgICBkb3VibGVDbGlja1pvb20/OiBib29sZWFuLFxuICAgIHRvdWNoWm9vbVJvdGF0ZT86IGJvb2xlYW4sXG4gICAgdG91Y2hQaXRjaD86IGJvb2xlYW4sXG4gICAgdHJhY2tSZXNpemU/OiBib29sZWFuLFxuICAgIGNlbnRlcj86IExuZ0xhdExpa2UsXG4gICAgem9vbT86IG51bWJlcixcbiAgICBiZWFyaW5nPzogbnVtYmVyLFxuICAgIHBpdGNoPzogbnVtYmVyLFxuICAgIHJlbmRlcldvcmxkQ29waWVzPzogYm9vbGVhbixcbiAgICBtYXhUaWxlQ2FjaGVTaXplPzogbnVtYmVyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q/OiBSZXF1ZXN0VHJhbnNmb3JtRnVuY3Rpb24sXG4gICAgYWNjZXNzVG9rZW46IHN0cmluZyxcbiAgICBsb2NhbGU/OiBPYmplY3Rcbn07XG5cbmNvbnN0IGRlZmF1bHRNaW5ab29tID0gLTI7XG5jb25zdCBkZWZhdWx0TWF4Wm9vbSA9IDIyO1xuXG4vLyB0aGUgZGVmYXVsdCB2YWx1ZXMsIGJ1dCBhbHNvIHRoZSB2YWxpZCByYW5nZVxuY29uc3QgZGVmYXVsdE1pblBpdGNoID0gMDtcbmNvbnN0IGRlZmF1bHRNYXhQaXRjaCA9IDYwO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBjZW50ZXI6IFswLCAwXSxcbiAgICB6b29tOiAwLFxuICAgIGJlYXJpbmc6IDAsXG4gICAgcGl0Y2g6IDAsXG5cbiAgICBtaW5ab29tOiBkZWZhdWx0TWluWm9vbSxcbiAgICBtYXhab29tOiBkZWZhdWx0TWF4Wm9vbSxcblxuICAgIG1pblBpdGNoOiBkZWZhdWx0TWluUGl0Y2gsXG4gICAgbWF4UGl0Y2g6IGRlZmF1bHRNYXhQaXRjaCxcblxuICAgIGludGVyYWN0aXZlOiB0cnVlLFxuICAgIHNjcm9sbFpvb206IHRydWUsXG4gICAgYm94Wm9vbTogdHJ1ZSxcbiAgICBkcmFnUm90YXRlOiB0cnVlLFxuICAgIGRyYWdQYW46IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgZG91YmxlQ2xpY2tab29tOiB0cnVlLFxuICAgIHRvdWNoWm9vbVJvdGF0ZTogdHJ1ZSxcbiAgICB0b3VjaFBpdGNoOiB0cnVlLFxuXG4gICAgYmVhcmluZ1NuYXA6IDcsXG4gICAgY2xpY2tUb2xlcmFuY2U6IDMsXG4gICAgcGl0Y2hXaXRoUm90YXRlOiB0cnVlLFxuXG4gICAgaGFzaDogZmFsc2UsXG4gICAgYXR0cmlidXRpb25Db250cm9sOiB0cnVlLFxuXG4gICAgZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdDogZmFsc2UsXG4gICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZSxcbiAgICB0cmFja1Jlc2l6ZTogdHJ1ZSxcbiAgICByZW5kZXJXb3JsZENvcGllczogdHJ1ZSxcbiAgICByZWZyZXNoRXhwaXJlZFRpbGVzOiB0cnVlLFxuICAgIG1heFRpbGVDYWNoZVNpemU6IG51bGwsXG4gICAgbG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5OiAnc2Fucy1zZXJpZicsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogbnVsbCxcbiAgICBhY2Nlc3NUb2tlbjogbnVsbCxcbiAgICBmYWRlRHVyYXRpb246IDMwMCxcbiAgICBjcm9zc1NvdXJjZUNvbGxpc2lvbnM6IHRydWVcbn07XG5cbi8qKlxuICogVGhlIGBNYXBgIG9iamVjdCByZXByZXNlbnRzIHRoZSBtYXAgb24geW91ciBwYWdlLiBJdCBleHBvc2VzIG1ldGhvZHNcbiAqIGFuZCBwcm9wZXJ0aWVzIHRoYXQgZW5hYmxlIHlvdSB0byBwcm9ncmFtbWF0aWNhbGx5IGNoYW5nZSB0aGUgbWFwLFxuICogYW5kIGZpcmVzIGV2ZW50cyBhcyB1c2VycyBpbnRlcmFjdCB3aXRoIGl0LlxuICpcbiAqIFlvdSBjcmVhdGUgYSBgTWFwYCBieSBzcGVjaWZ5aW5nIGEgYGNvbnRhaW5lcmAgYW5kIG90aGVyIG9wdGlvbnMuXG4gKiBUaGVuIE1hcGJveCBHTCBKUyBpbml0aWFsaXplcyB0aGUgbWFwIG9uIHRoZSBwYWdlIGFuZCByZXR1cm5zIHlvdXIgYE1hcGBcbiAqIG9iamVjdC5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudGVkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudHxzdHJpbmd9IG9wdGlvbnMuY29udGFpbmVyIFRoZSBIVE1MIGVsZW1lbnQgaW4gd2hpY2ggTWFwYm94IEdMIEpTIHdpbGwgcmVuZGVyIHRoZSBtYXAsIG9yIHRoZSBlbGVtZW50J3Mgc3RyaW5nIGBpZGAuIFRoZSBzcGVjaWZpZWQgZWxlbWVudCBtdXN0IGhhdmUgbm8gY2hpbGRyZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluWm9vbT0wXSBUaGUgbWluaW11bSB6b29tIGxldmVsIG9mIHRoZSBtYXAgKDAtMjQpLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFpvb209MjJdIFRoZSBtYXhpbXVtIHpvb20gbGV2ZWwgb2YgdGhlIG1hcCAoMC0yNCkuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluUGl0Y2g9MF0gVGhlIG1pbmltdW0gcGl0Y2ggb2YgdGhlIG1hcCAoMC02MCkuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4UGl0Y2g9NjBdIFRoZSBtYXhpbXVtIHBpdGNoIG9mIHRoZSBtYXAgKDAtNjApLlxuICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBbb3B0aW9ucy5zdHlsZV0gVGhlIG1hcCdzIE1hcGJveCBzdHlsZS4gVGhpcyBtdXN0IGJlIGFuIGEgSlNPTiBvYmplY3QgY29uZm9ybWluZyB0b1xuICogdGhlIHNjaGVtYSBkZXNjcmliZWQgaW4gdGhlIFtNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9tYXBib3guY29tL21hcGJveC1nbC1zdHlsZS1zcGVjLyksIG9yIGEgVVJMIHRvXG4gKiBzdWNoIEpTT04uXG4gKlxuICogVG8gbG9hZCBhIHN0eWxlIGZyb20gdGhlIE1hcGJveCBBUEksIHlvdSBjYW4gdXNlIGEgVVJMIG9mIHRoZSBmb3JtIGBtYXBib3g6Ly9zdHlsZXMvOm93bmVyLzpzdHlsZWAsXG4gKiB3aGVyZSBgOm93bmVyYCBpcyB5b3VyIE1hcGJveCBhY2NvdW50IG5hbWUgYW5kIGA6c3R5bGVgIGlzIHRoZSBzdHlsZSBJRC4gT3IgeW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAqIFt0aGUgcHJlZGVmaW5lZCBNYXBib3ggc3R5bGVzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcHMvKTpcbiAqXG4gKiAgKiBgbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMWBcbiAqICAqIGBtYXBib3g6Ly9zdHlsZXMvbWFwYm94L291dGRvb3JzLXYxMWBcbiAqICAqIGBtYXBib3g6Ly9zdHlsZXMvbWFwYm94L2xpZ2h0LXYxMGBcbiAqICAqIGBtYXBib3g6Ly9zdHlsZXMvbWFwYm94L2RhcmstdjEwYFxuICogICogYG1hcGJveDovL3N0eWxlcy9tYXBib3gvc2F0ZWxsaXRlLXY5YFxuICogICogYG1hcGJveDovL3N0eWxlcy9tYXBib3gvc2F0ZWxsaXRlLXN0cmVldHMtdjExYFxuICogICogYG1hcGJveDovL3N0eWxlcy9tYXBib3gvbmF2aWdhdGlvbi1wcmV2aWV3LWRheS12NGBcbiAqICAqIGBtYXBib3g6Ly9zdHlsZXMvbWFwYm94L25hdmlnYXRpb24tcHJldmlldy1uaWdodC12NGBcbiAqICAqIGBtYXBib3g6Ly9zdHlsZXMvbWFwYm94L25hdmlnYXRpb24tZ3VpZGFuY2UtZGF5LXY0YFxuICogICogYG1hcGJveDovL3N0eWxlcy9tYXBib3gvbmF2aWdhdGlvbi1ndWlkYW5jZS1uaWdodC12NGBcbiAqXG4gKiBUaWxlc2V0cyBob3N0ZWQgd2l0aCBNYXBib3ggY2FuIGJlIHN0eWxlLW9wdGltaXplZCBpZiB5b3UgYXBwZW5kIGA/b3B0aW1pemU9dHJ1ZWAgdG8gdGhlIGVuZCBvZiB5b3VyIHN0eWxlIFVSTCwgbGlrZSBgbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMT9vcHRpbWl6ZT10cnVlYC5cbiAqIExlYXJuIG1vcmUgYWJvdXQgc3R5bGUtb3B0aW1pemVkIHZlY3RvciB0aWxlcyBpbiBvdXIgW0FQSSBkb2N1bWVudGF0aW9uXShodHRwczovL3d3dy5tYXBib3guY29tL2FwaS1kb2N1bWVudGF0aW9uL21hcHMvI3JldHJpZXZlLXRpbGVzKS5cbiAqXG4gKiBAcGFyYW0geyhib29sZWFufHN0cmluZyl9IFtvcHRpb25zLmhhc2g9ZmFsc2VdIElmIGB0cnVlYCwgdGhlIG1hcCdzIHBvc2l0aW9uICh6b29tLCBjZW50ZXIgbGF0aXR1ZGUsIGNlbnRlciBsb25naXR1ZGUsIGJlYXJpbmcsIGFuZCBwaXRjaCkgd2lsbCBiZSBzeW5jZWQgd2l0aCB0aGUgaGFzaCBmcmFnbWVudCBvZiB0aGUgcGFnZSdzIFVSTC5cbiAqICAgRm9yIGV4YW1wbGUsIGBodHRwOi8vcGF0aC90by9teS9wYWdlLmh0bWwjMi41OS8zOS4yNi81My4wNy8tMjQuMS82MGAuXG4gKiAgIEFuIGFkZGl0aW9uYWwgc3RyaW5nIG1heSBvcHRpb25hbGx5IGJlIHByb3ZpZGVkIHRvIGluZGljYXRlIGEgcGFyYW1ldGVyLXN0eWxlZCBoYXNoLFxuICogICBlLmcuIGh0dHA6Ly9wYXRoL3RvL215L3BhZ2UuaHRtbCNtYXA9Mi41OS8zOS4yNi81My4wNy8tMjQuMS82MCZmb289YmFyLCB3aGVyZSBmb29cbiAqICAgaXMgYSBjdXN0b20gcGFyYW1ldGVyIGFuZCBiYXIgaXMgYW4gYXJiaXRyYXJ5IGhhc2ggZGlzdGluY3QgZnJvbSB0aGUgbWFwIGhhc2guXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmludGVyYWN0aXZlPXRydWVdIElmIGBmYWxzZWAsIG5vIG1vdXNlLCB0b3VjaCwgb3Iga2V5Ym9hcmQgbGlzdGVuZXJzIHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIG1hcCwgc28gaXQgd2lsbCBub3QgcmVzcG9uZCB0byBpbnRlcmFjdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5iZWFyaW5nU25hcD03XSBUaGUgdGhyZXNob2xkLCBtZWFzdXJlZCBpbiBkZWdyZWVzLCB0aGF0IGRldGVybWluZXMgd2hlbiB0aGUgbWFwJ3NcbiAqICAgYmVhcmluZyB3aWxsIHNuYXAgdG8gbm9ydGguIEZvciBleGFtcGxlLCB3aXRoIGEgYGJlYXJpbmdTbmFwYCBvZiA3LCBpZiB0aGUgdXNlciByb3RhdGVzXG4gKiAgIHRoZSBtYXAgd2l0aGluIDcgZGVncmVlcyBvZiBub3J0aCwgdGhlIG1hcCB3aWxsIGF1dG9tYXRpY2FsbHkgc25hcCB0byBleGFjdCBub3J0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucGl0Y2hXaXRoUm90YXRlPXRydWVdIElmIGBmYWxzZWAsIHRoZSBtYXAncyBwaXRjaCAodGlsdCkgY29udHJvbCB3aXRoIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiB3aWxsIGJlIGRpc2FibGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNsaWNrVG9sZXJhbmNlPTNdIFRoZSBtYXggbnVtYmVyIG9mIHBpeGVscyBhIHVzZXIgY2FuIHNoaWZ0IHRoZSBtb3VzZSBwb2ludGVyIGR1cmluZyBhIGNsaWNrIGZvciBpdCB0byBiZSBjb25zaWRlcmVkIGEgdmFsaWQgY2xpY2sgKGFzIG9wcG9zZWQgdG8gYSBtb3VzZSBkcmFnKS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXR0cmlidXRpb25Db250cm9sPXRydWVdIElmIGB0cnVlYCwgYW4ge0BsaW5rIEF0dHJpYnV0aW9uQ29udHJvbH0gd2lsbCBiZSBhZGRlZCB0byB0aGUgbWFwLlxuICogQHBhcmFtIHtzdHJpbmcgfCBBcnJheTxzdHJpbmc+fSBbb3B0aW9ucy5jdXN0b21BdHRyaWJ1dGlvbl0gU3RyaW5nIG9yIHN0cmluZ3MgdG8gc2hvdyBpbiBhbiB7QGxpbmsgQXR0cmlidXRpb25Db250cm9sfS4gT25seSBhcHBsaWNhYmxlIGlmIGBvcHRpb25zLmF0dHJpYnV0aW9uQ29udHJvbGAgaXMgYHRydWVgLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvZ29Qb3NpdGlvbj0nYm90dG9tLWxlZnQnXSBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBNYXBib3ggd29yZG1hcmsgb24gdGhlIG1hcC4gVmFsaWQgb3B0aW9ucyBhcmUgYHRvcC1sZWZ0YCxgdG9wLXJpZ2h0YCwgYGJvdHRvbS1sZWZ0YCwgYGJvdHRvbS1yaWdodGAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ9ZmFsc2VdIElmIGB0cnVlYCwgbWFwIGNyZWF0aW9uIHdpbGwgZmFpbCBpZiB0aGUgcGVyZm9ybWFuY2Ugb2YgTWFwYm94XG4gKiAgIEdMIEpTIHdvdWxkIGJlIGRyYW1hdGljYWxseSB3b3JzZSB0aGFuIGV4cGVjdGVkIChpLmUuIGEgc29mdHdhcmUgcmVuZGVyZXIgd291bGQgYmUgdXNlZCkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnByZXNlcnZlRHJhd2luZ0J1ZmZlcj1mYWxzZV0gSWYgYHRydWVgLCB0aGUgbWFwJ3MgY2FudmFzIGNhbiBiZSBleHBvcnRlZCB0byBhIFBORyB1c2luZyBgbWFwLmdldENhbnZhcygpLnRvRGF0YVVSTCgpYC4gVGhpcyBpcyBgZmFsc2VgIGJ5IGRlZmF1bHQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFudGlhbGlhc10gSWYgYHRydWVgLCB0aGUgZ2wgY29udGV4dCB3aWxsIGJlIGNyZWF0ZWQgd2l0aCBNU0FBIGFudGlhbGlhc2luZywgd2hpY2ggY2FuIGJlIHVzZWZ1bCBmb3IgYW50aWFsaWFzaW5nIGN1c3RvbSBsYXllcnMuIHRoaXMgaXMgYGZhbHNlYCBieSBkZWZhdWx0IGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZWZyZXNoRXhwaXJlZFRpbGVzPXRydWVdIElmIGBmYWxzZWAsIHRoZSBtYXAgd29uJ3QgYXR0ZW1wdCB0byByZS1yZXF1ZXN0IHRpbGVzIG9uY2UgdGhleSBleHBpcmUgcGVyIHRoZWlyIEhUVFAgYGNhY2hlQ29udHJvbGAvYGV4cGlyZXNgIGhlYWRlcnMuXG4gKiBAcGFyYW0ge0xuZ0xhdEJvdW5kc0xpa2V9IFtvcHRpb25zLm1heEJvdW5kc10gSWYgc2V0LCB0aGUgbWFwIHdpbGwgYmUgY29uc3RyYWluZWQgdG8gdGhlIGdpdmVuIGJvdW5kcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3R9IFtvcHRpb25zLnNjcm9sbFpvb209dHJ1ZV0gSWYgYHRydWVgLCB0aGUgXCJzY3JvbGwgdG8gem9vbVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuIEFuIGBPYmplY3RgIHZhbHVlIGlzIHBhc3NlZCBhcyBvcHRpb25zIHRvIHtAbGluayBTY3JvbGxab29tSGFuZGxlciNlbmFibGV9LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5ib3hab29tPXRydWVdIElmIGB0cnVlYCwgdGhlIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkIChzZWUge0BsaW5rIEJveFpvb21IYW5kbGVyfSkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRyYWdSb3RhdGU9dHJ1ZV0gSWYgYHRydWVgLCB0aGUgXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQgKHNlZSB7QGxpbmsgRHJhZ1JvdGF0ZUhhbmRsZXJ9KS5cbiAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3R9IFtvcHRpb25zLmRyYWdQYW49dHJ1ZV0gSWYgYHRydWVgLCB0aGUgXCJkcmFnIHRvIHBhblwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuIEFuIGBPYmplY3RgIHZhbHVlIGlzIHBhc3NlZCBhcyBvcHRpb25zIHRvIHtAbGluayBEcmFnUGFuSGFuZGxlciNlbmFibGV9LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5rZXlib2FyZD10cnVlXSBJZiBgdHJ1ZWAsIGtleWJvYXJkIHNob3J0Y3V0cyBhcmUgZW5hYmxlZCAoc2VlIHtAbGluayBLZXlib2FyZEhhbmRsZXJ9KS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZG91YmxlQ2xpY2tab29tPXRydWVdIElmIGB0cnVlYCwgdGhlIFwiZG91YmxlIGNsaWNrIHRvIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkIChzZWUge0BsaW5rIERvdWJsZUNsaWNrWm9vbUhhbmRsZXJ9KS5cbiAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3R9IFtvcHRpb25zLnRvdWNoWm9vbVJvdGF0ZT10cnVlXSBJZiBgdHJ1ZWAsIHRoZSBcInBpbmNoIHRvIHJvdGF0ZSBhbmQgem9vbVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuIEFuIGBPYmplY3RgIHZhbHVlIGlzIHBhc3NlZCBhcyBvcHRpb25zIHRvIHtAbGluayBUb3VjaFpvb21Sb3RhdGVIYW5kbGVyI2VuYWJsZX0uXG4gKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0fSBbb3B0aW9ucy50b3VjaFBpdGNoPXRydWVdIElmIGB0cnVlYCwgdGhlIFwiZHJhZyB0byBwaXRjaFwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuIEFuIGBPYmplY3RgIHZhbHVlIGlzIHBhc3NlZCBhcyBvcHRpb25zIHRvIHtAbGluayBUb3VjaFBpdGNoSGFuZGxlciNlbmFibGV9LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFja1Jlc2l6ZT10cnVlXSAgSWYgYHRydWVgLCB0aGUgbWFwIHdpbGwgYXV0b21hdGljYWxseSByZXNpemUgd2hlbiB0aGUgYnJvd3NlciB3aW5kb3cgcmVzaXplcy5cbiAqIEBwYXJhbSB7TG5nTGF0TGlrZX0gW29wdGlvbnMuY2VudGVyPVswLCAwXV0gVGhlIGluaXRhbCBnZW9ncmFwaGljYWwgY2VudGVycG9pbnQgb2YgdGhlIG1hcC4gSWYgYGNlbnRlcmAgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3Igb3B0aW9ucywgTWFwYm94IEdMIEpTIHdpbGwgbG9vayBmb3IgaXQgaW4gdGhlIG1hcCdzIHN0eWxlIG9iamVjdC4gSWYgaXQgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgc3R5bGUsIGVpdGhlciwgaXQgd2lsbCBkZWZhdWx0IHRvIGBbMCwgMF1gIE5vdGU6IE1hcGJveCBHTCB1c2VzIGxvbmdpdHVkZSwgbGF0aXR1ZGUgY29vcmRpbmF0ZSBvcmRlciAoYXMgb3Bwb3NlZCB0byBsYXRpdHVkZSwgbG9uZ2l0dWRlKSB0byBtYXRjaCBHZW9KU09OLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnpvb209MF0gVGhlIGluaXRpYWwgem9vbSBsZXZlbCBvZiB0aGUgbWFwLiBJZiBgem9vbWAgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3Igb3B0aW9ucywgTWFwYm94IEdMIEpTIHdpbGwgbG9vayBmb3IgaXQgaW4gdGhlIG1hcCdzIHN0eWxlIG9iamVjdC4gSWYgaXQgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgc3R5bGUsIGVpdGhlciwgaXQgd2lsbCBkZWZhdWx0IHRvIGAwYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5iZWFyaW5nPTBdIFRoZSBpbml0aWFsIGJlYXJpbmcgKHJvdGF0aW9uKSBvZiB0aGUgbWFwLCBtZWFzdXJlZCBpbiBkZWdyZWVzIGNvdW50ZXItY2xvY2t3aXNlIGZyb20gbm9ydGguIElmIGBiZWFyaW5nYCBpcyBub3Qgc3BlY2lmaWVkIGluIHRoZSBjb25zdHJ1Y3RvciBvcHRpb25zLCBNYXBib3ggR0wgSlMgd2lsbCBsb29rIGZvciBpdCBpbiB0aGUgbWFwJ3Mgc3R5bGUgb2JqZWN0LiBJZiBpdCBpcyBub3Qgc3BlY2lmaWVkIGluIHRoZSBzdHlsZSwgZWl0aGVyLCBpdCB3aWxsIGRlZmF1bHQgdG8gYDBgLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBpdGNoPTBdIFRoZSBpbml0aWFsIHBpdGNoICh0aWx0KSBvZiB0aGUgbWFwLCBtZWFzdXJlZCBpbiBkZWdyZWVzIGF3YXkgZnJvbSB0aGUgcGxhbmUgb2YgdGhlIHNjcmVlbiAoMC02MCkuIElmIGBwaXRjaGAgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3Igb3B0aW9ucywgTWFwYm94IEdMIEpTIHdpbGwgbG9vayBmb3IgaXQgaW4gdGhlIG1hcCdzIHN0eWxlIG9iamVjdC4gSWYgaXQgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgc3R5bGUsIGVpdGhlciwgaXQgd2lsbCBkZWZhdWx0IHRvIGAwYC5cbiAqIEBwYXJhbSB7TG5nTGF0Qm91bmRzTGlrZX0gW29wdGlvbnMuYm91bmRzXSBUaGUgaW5pdGlhbCBib3VuZHMgb2YgdGhlIG1hcC4gSWYgYGJvdW5kc2AgaXMgc3BlY2lmaWVkLCBpdCBvdmVycmlkZXMgYGNlbnRlcmAgYW5kIGB6b29tYCBjb25zdHJ1Y3RvciBvcHRpb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmZpdEJvdW5kc09wdGlvbnNdIEEge0BsaW5rIE1hcCNmaXRCb3VuZHN9IG9wdGlvbnMgb2JqZWN0IHRvIHVzZSBfb25seV8gd2hlbiBmaXR0aW5nIHRoZSBpbml0aWFsIGBib3VuZHNgIHByb3ZpZGVkIGFib3ZlLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZW5kZXJXb3JsZENvcGllcz10cnVlXSAgSWYgYHRydWVgLCBtdWx0aXBsZSBjb3BpZXMgb2YgdGhlIHdvcmxkIHdpbGwgYmUgcmVuZGVyZWQgc2lkZSBieSBzaWRlIGJleW9uZCAtMTgwIGFuZCAxODAgZGVncmVlcyBsb25naXR1ZGUuIElmIHNldCB0byBgZmFsc2VgOlxuICogLSBXaGVuIHRoZSBtYXAgaXMgem9vbWVkIG91dCBmYXIgZW5vdWdoIHRoYXQgYSBzaW5nbGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIHdvcmxkIGRvZXMgbm90IGZpbGwgdGhlIG1hcCdzIGVudGlyZVxuICogY29udGFpbmVyLCB0aGVyZSB3aWxsIGJlIGJsYW5rIHNwYWNlIGJleW9uZCAxODAgYW5kIC0xODAgZGVncmVlcyBsb25naXR1ZGUuXG4gKiAtIEZlYXR1cmVzIHRoYXQgY3Jvc3MgMTgwIGFuZCAtMTgwIGRlZ3JlZXMgbG9uZ2l0dWRlIHdpbGwgYmUgY3V0IGluIHR3byAod2l0aCBvbmUgcG9ydGlvbiBvbiB0aGUgcmlnaHQgZWRnZSBvZiB0aGVcbiAqIG1hcCBhbmQgdGhlIG90aGVyIG9uIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIG1hcCkgYXQgZXZlcnkgem9vbSBsZXZlbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhUaWxlQ2FjaGVTaXplPW51bGxdICBUaGUgbWF4aW11bSBudW1iZXIgb2YgdGlsZXMgc3RvcmVkIGluIHRoZSB0aWxlIGNhY2hlIGZvciBhIGdpdmVuIHNvdXJjZS4gSWYgb21pdHRlZCwgdGhlIGNhY2hlIHdpbGwgYmUgZHluYW1pY2FsbHkgc2l6ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnQgdmlld3BvcnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5PSdzYW5zLXNlcmlmJ10gRGVmaW5lcyBhIENTU1xuICogICBmb250LWZhbWlseSBmb3IgbG9jYWxseSBvdmVycmlkaW5nIGdlbmVyYXRpb24gb2YgZ2x5cGhzIGluIHRoZSAnQ0pLIFVuaWZpZWQgSWRlb2dyYXBocycsICdIaXJhZ2FuYScsICdLYXRha2FuYScgYW5kICdIYW5ndWwgU3lsbGFibGVzJyByYW5nZXMuXG4gKiAgIEluIHRoZXNlIHJhbmdlcywgZm9udCBzZXR0aW5ncyBmcm9tIHRoZSBtYXAncyBzdHlsZSB3aWxsIGJlIGlnbm9yZWQsIGV4Y2VwdCBmb3IgZm9udC13ZWlnaHQga2V5d29yZHMgKGxpZ2h0L3JlZ3VsYXIvbWVkaXVtL2JvbGQpLlxuICogICBTZXQgdG8gYGZhbHNlYCwgdG8gZW5hYmxlIGZvbnQgc2V0dGluZ3MgZnJvbSB0aGUgbWFwJ3Mgc3R5bGUgZm9yIHRoZXNlIGdseXBoIHJhbmdlcy4gIE5vdGUgdGhhdCBbTWFwYm94IFN0dWRpb10oaHR0cHM6Ly9zdHVkaW8ubWFwYm94LmNvbS8pIHNldHMgdGhpcyB2YWx1ZSB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXG4gKiAgIFRoZSBwdXJwb3NlIG9mIHRoaXMgb3B0aW9uIGlzIHRvIGF2b2lkIGJhbmR3aWR0aC1pbnRlbnNpdmUgZ2x5cGggc2VydmVyIHJlcXVlc3RzLiAoU2VlIFtVc2UgbG9jYWxseSBnZW5lcmF0ZWQgaWRlb2dyYXBoc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9sb2NhbC1pZGVvZ3JhcGhzKS4pXG4gKiBAcGFyYW0ge1JlcXVlc3RUcmFuc2Zvcm1GdW5jdGlvbn0gW29wdGlvbnMudHJhbnNmb3JtUmVxdWVzdD1udWxsXSBBIGNhbGxiYWNrIHJ1biBiZWZvcmUgdGhlIE1hcCBtYWtlcyBhIHJlcXVlc3QgZm9yIGFuIGV4dGVybmFsIFVSTC4gVGhlIGNhbGxiYWNrIGNhbiBiZSB1c2VkIHRvIG1vZGlmeSB0aGUgdXJsLCBzZXQgaGVhZGVycywgb3Igc2V0IHRoZSBjcmVkZW50aWFscyBwcm9wZXJ0eSBmb3IgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzLlxuICogICBFeHBlY3RlZCB0byByZXR1cm4gYW4gb2JqZWN0IHdpdGggYSBgdXJsYCBwcm9wZXJ0eSBhbmQgb3B0aW9uYWxseSBgaGVhZGVyc2AgYW5kIGBjcmVkZW50aWFsc2AgcHJvcGVydGllcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY29sbGVjdFJlc291cmNlVGltaW5nPWZhbHNlXSBJZiBgdHJ1ZWAsIFJlc291cmNlIFRpbWluZyBBUEkgaW5mb3JtYXRpb24gd2lsbCBiZSBjb2xsZWN0ZWQgZm9yIHJlcXVlc3RzIG1hZGUgYnkgR2VvSlNPTiBhbmQgVmVjdG9yIFRpbGUgd2ViIHdvcmtlcnMgKHRoaXMgaW5mb3JtYXRpb24gaXMgbm9ybWFsbHkgaW5hY2Nlc3NpYmxlIGZyb20gdGhlIG1haW4gSmF2YXNjcmlwdCB0aHJlYWQpLiBJbmZvcm1hdGlvbiB3aWxsIGJlIHJldHVybmVkIGluIGEgYHJlc291cmNlVGltaW5nYCBwcm9wZXJ0eSBvZiByZWxldmFudCBgZGF0YWAgZXZlbnRzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmZhZGVEdXJhdGlvbj0zMDBdIENvbnRyb2xzIHRoZSBkdXJhdGlvbiBvZiB0aGUgZmFkZS1pbi9mYWRlLW91dCBhbmltYXRpb24gZm9yIGxhYmVsIGNvbGxpc2lvbnMsIGluIG1pbGxpc2Vjb25kcy4gVGhpcyBzZXR0aW5nIGFmZmVjdHMgYWxsIHN5bWJvbCBsYXllcnMuIFRoaXMgc2V0dGluZyBkb2VzIG5vdCBhZmZlY3QgdGhlIGR1cmF0aW9uIG9mIHJ1bnRpbWUgc3R5bGluZyB0cmFuc2l0aW9ucyBvciByYXN0ZXIgdGlsZSBjcm9zcy1mYWRpbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNyb3NzU291cmNlQ29sbGlzaW9ucz10cnVlXSBJZiBgdHJ1ZWAsIHN5bWJvbHMgZnJvbSBtdWx0aXBsZSBzb3VyY2VzIGNhbiBjb2xsaWRlIHdpdGggZWFjaCBvdGhlciBkdXJpbmcgY29sbGlzaW9uIGRldGVjdGlvbi4gSWYgYGZhbHNlYCwgY29sbGlzaW9uIGRldGVjdGlvbiBpcyBydW4gc2VwYXJhdGVseSBmb3IgdGhlIHN5bWJvbHMgaW4gZWFjaCBzb3VyY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYWNjZXNzVG9rZW49bnVsbF0gSWYgc3BlY2lmaWVkLCBtYXAgd2lsbCB1c2UgdGhpcyB0b2tlbiBpbnN0ZWFkIG9mIHRoZSBvbmUgZGVmaW5lZCBpbiBtYXBib3hnbC5hY2Nlc3NUb2tlbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5sb2NhbGU9bnVsbF0gQSBwYXRjaCB0byBhcHBseSB0byB0aGUgZGVmYXVsdCBsb2NhbGl6YXRpb24gdGFibGUgZm9yIFVJIHN0cmluZ3MsIGUuZy4gY29udHJvbCB0b29sdGlwcy4gVGhlIGBsb2NhbGVgIG9iamVjdCBtYXBzIG5hbWVzcGFjZWQgVUkgc3RyaW5nIElEcyB0byB0cmFuc2xhdGVkIHN0cmluZ3MgaW4gdGhlIHRhcmdldCBsYW5ndWFnZTsgc2VlIGBzcmMvdWkvZGVmYXVsdF9sb2NhbGUuanNgIGZvciBhbiBleGFtcGxlIHdpdGggYWxsIHN1cHBvcnRlZCBzdHJpbmcgSURzLiBUaGUgb2JqZWN0IG1heSBzcGVjaWZ5IGFsbCBVSSBzdHJpbmdzICh0aGVyZWJ5IGFkZGluZyBzdXBwb3J0IGZvciBhIG5ldyB0cmFuc2xhdGlvbikgb3Igb25seSBhIHN1YnNldCBvZiBzdHJpbmdzICh0aGVyZWJ5IHBhdGNoaW5nIHRoZSBkZWZhdWx0IHRyYW5zbGF0aW9uIHRhYmxlKS5cbiAqIEBleGFtcGxlXG4gKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7XG4gKiAgIGNvbnRhaW5lcjogJ21hcCcsXG4gKiAgIGNlbnRlcjogWy0xMjIuNDIwNjc5LCAzNy43NzI1MzddLFxuICogICB6b29tOiAxMyxcbiAqICAgc3R5bGU6IHN0eWxlX29iamVjdCxcbiAqICAgaGFzaDogdHJ1ZSxcbiAqICAgdHJhbnNmb3JtUmVxdWVzdDogKHVybCwgcmVzb3VyY2VUeXBlKT0+IHtcbiAqICAgICBpZihyZXNvdXJjZVR5cGUgPT09ICdTb3VyY2UnICYmIHVybC5zdGFydHNXaXRoKCdodHRwOi8vbXlIb3N0JykpIHtcbiAqICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgdXJsOiB1cmwucmVwbGFjZSgnaHR0cCcsICdodHRwcycpLFxuICogICAgICAgIGhlYWRlcnM6IHsgJ215LWN1c3RvbS1oZWFkZXInOiB0cnVlfSxcbiAqICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnICAvLyBJbmNsdWRlIGNvb2tpZXMgZm9yIGNyb3NzLW9yaWdpbiByZXF1ZXN0c1xuICogICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKiB9KTtcbiAqIEBzZWUgW0Rpc3BsYXkgYSBtYXBdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGVzLylcbiAqL1xuY2xhc3MgTWFwIGV4dGVuZHMgQ2FtZXJhIHtcbiAgICBzdHlsZTogU3R5bGU7XG4gICAgcGFpbnRlcjogUGFpbnRlcjtcbiAgICBoYW5kbGVyczogSGFuZGxlck1hbmFnZXI7XG5cbiAgICBfY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBfbWlzc2luZ0NTU0NhbmFyeTogSFRNTEVsZW1lbnQ7XG4gICAgX2NhbnZhc0NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgX2NvbnRyb2xDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIF9jb250cm9sUG9zaXRpb25zOiB7W186IHN0cmluZ106IEhUTUxFbGVtZW50fTtcbiAgICBfaW50ZXJhY3RpdmU6ID9ib29sZWFuO1xuICAgIF9zaG93VGlsZUJvdW5kYXJpZXM6ID9ib29sZWFuO1xuICAgIF9zaG93Q29sbGlzaW9uQm94ZXM6ID9ib29sZWFuO1xuICAgIF9zaG93UGFkZGluZzogP2Jvb2xlYW47XG4gICAgX3Nob3dPdmVyZHJhd0luc3BlY3RvcjogYm9vbGVhbjtcbiAgICBfcmVwYWludDogP2Jvb2xlYW47XG4gICAgX3ZlcnRpY2VzOiA/Ym9vbGVhbjtcbiAgICBfY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICBfbWF4VGlsZUNhY2hlU2l6ZTogbnVtYmVyO1xuICAgIF9mcmFtZTogP0NhbmNlbGFibGU7XG4gICAgX3N0eWxlRGlydHk6ID9ib29sZWFuO1xuICAgIF9zb3VyY2VzRGlydHk6ID9ib29sZWFuO1xuICAgIF9wbGFjZW1lbnREaXJ0eTogP2Jvb2xlYW47XG4gICAgX2xvYWRlZDogYm9vbGVhbjtcbiAgICAvLyBhY2NvdW50cyBmb3IgcGxhY2VtZW50IGZpbmlzaGluZyBhcyB3ZWxsXG4gICAgX2Z1bGx5TG9hZGVkOiBib29sZWFuO1xuICAgIF90cmFja1Jlc2l6ZTogYm9vbGVhbjtcbiAgICBfcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBib29sZWFuO1xuICAgIF9mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0OiBib29sZWFuO1xuICAgIF9hbnRpYWxpYXM6IGJvb2xlYW47XG4gICAgX3JlZnJlc2hFeHBpcmVkVGlsZXM6IGJvb2xlYW47XG4gICAgX2hhc2g6IEhhc2g7XG4gICAgX2RlbGVnYXRlZExpc3RlbmVyczogYW55O1xuICAgIF9mYWRlRHVyYXRpb246IG51bWJlcjtcbiAgICBfY3Jvc3NTb3VyY2VDb2xsaXNpb25zOiBib29sZWFuO1xuICAgIF9jcm9zc0ZhZGluZ0ZhY3RvcjogbnVtYmVyO1xuICAgIF9jb2xsZWN0UmVzb3VyY2VUaW1pbmc6IGJvb2xlYW47XG4gICAgX3JlbmRlclRhc2tRdWV1ZTogVGFza1F1ZXVlO1xuICAgIF9jb250cm9sczogQXJyYXk8SUNvbnRyb2w+O1xuICAgIF9tYXBJZDogbnVtYmVyO1xuICAgIF9sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk6IHN0cmluZztcbiAgICBfcmVxdWVzdE1hbmFnZXI6IFJlcXVlc3RNYW5hZ2VyO1xuICAgIF9sb2NhbGU6IE9iamVjdDtcbiAgICBfcmVtb3ZlZDogYm9vbGVhbjtcbiAgICBfY2xpY2tUb2xlcmFuY2U6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXAncyB7QGxpbmsgU2Nyb2xsWm9vbUhhbmRsZXJ9LCB3aGljaCBpbXBsZW1lbnRzIHpvb21pbmcgaW4gYW5kIG91dCB3aXRoIGEgc2Nyb2xsIHdoZWVsIG9yIHRyYWNrcGFkLlxuICAgICAqIEZpbmQgbW9yZSBkZXRhaWxzIGFuZCBleGFtcGxlcyB1c2luZyBgc2Nyb2xsWm9vbWAgaW4gdGhlIHtAbGluayBTY3JvbGxab29tSGFuZGxlcn0gc2VjdGlvbi5cbiAgICAgKi9cbiAgICBzY3JvbGxab29tOiBTY3JvbGxab29tSGFuZGxlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXAncyB7QGxpbmsgQm94Wm9vbUhhbmRsZXJ9LCB3aGljaCBpbXBsZW1lbnRzIHpvb21pbmcgdXNpbmcgYSBkcmFnIGdlc3R1cmUgd2l0aCB0aGUgU2hpZnQga2V5IHByZXNzZWQuXG4gICAgICogRmluZCBtb3JlIGRldGFpbHMgYW5kIGV4YW1wbGVzIHVzaW5nIGBib3hab29tYCBpbiB0aGUge0BsaW5rIEJveFpvb21IYW5kbGVyfSBzZWN0aW9uLlxuICAgICAqL1xuICAgIGJveFpvb206IEJveFpvb21IYW5kbGVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1hcCdzIHtAbGluayBEcmFnUm90YXRlSGFuZGxlcn0sIHdoaWNoIGltcGxlbWVudHMgcm90YXRpbmcgdGhlIG1hcCB3aGlsZSBkcmFnZ2luZyB3aXRoIHRoZSByaWdodFxuICAgICAqIG1vdXNlIGJ1dHRvbiBvciB3aXRoIHRoZSBDb250cm9sIGtleSBwcmVzc2VkLiBGaW5kIG1vcmUgZGV0YWlscyBhbmQgZXhhbXBsZXMgdXNpbmcgYGRyYWdSb3RhdGVgXG4gICAgICogaW4gdGhlIHtAbGluayBEcmFnUm90YXRlSGFuZGxlcn0gc2VjdGlvbi5cbiAgICAgKi9cbiAgICBkcmFnUm90YXRlOiBEcmFnUm90YXRlSGFuZGxlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXAncyB7QGxpbmsgRHJhZ1BhbkhhbmRsZXJ9LCB3aGljaCBpbXBsZW1lbnRzIGRyYWdnaW5nIHRoZSBtYXAgd2l0aCBhIG1vdXNlIG9yIHRvdWNoIGdlc3R1cmUuXG4gICAgICogRmluZCBtb3JlIGRldGFpbHMgYW5kIGV4YW1wbGVzIHVzaW5nIGBkcmFnUGFuYCBpbiB0aGUge0BsaW5rIERyYWdQYW5IYW5kbGVyfSBzZWN0aW9uLlxuICAgICAqL1xuICAgIGRyYWdQYW46IERyYWdQYW5IYW5kbGVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1hcCdzIHtAbGluayBLZXlib2FyZEhhbmRsZXJ9LCB3aGljaCBhbGxvd3MgdGhlIHVzZXIgdG8gem9vbSwgcm90YXRlLCBhbmQgcGFuIHRoZSBtYXAgdXNpbmcga2V5Ym9hcmRcbiAgICAgKiBzaG9ydGN1dHMuIEZpbmQgbW9yZSBkZXRhaWxzIGFuZCBleGFtcGxlcyB1c2luZyBga2V5Ym9hcmRgIGluIHRoZSB7QGxpbmsgS2V5Ym9hcmRIYW5kbGVyfSBzZWN0aW9uLlxuICAgICAqL1xuICAgIGtleWJvYXJkOiBLZXlib2FyZEhhbmRsZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWFwJ3Mge0BsaW5rIERvdWJsZUNsaWNrWm9vbUhhbmRsZXJ9LCB3aGljaCBhbGxvd3MgdGhlIHVzZXIgdG8gem9vbSBieSBkb3VibGUgY2xpY2tpbmcuXG4gICAgICogRmluZCBtb3JlIGRldGFpbHMgYW5kIGV4YW1wbGVzIHVzaW5nIGBkb3VibGVDbGlja1pvb21gIGluIHRoZSB7QGxpbmsgRG91YmxlQ2xpY2tab29tSGFuZGxlcn0gc2VjdGlvbi5cbiAgICAgKi9cbiAgICBkb3VibGVDbGlja1pvb206IERvdWJsZUNsaWNrWm9vbUhhbmRsZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWFwJ3Mge0BsaW5rIFRvdWNoWm9vbVJvdGF0ZUhhbmRsZXJ9LCB3aGljaCBhbGxvd3MgdGhlIHVzZXIgdG8gem9vbSBvciByb3RhdGUgdGhlIG1hcCB3aXRoIHRvdWNoIGdlc3R1cmVzLlxuICAgICAqIEZpbmQgbW9yZSBkZXRhaWxzIGFuZCBleGFtcGxlcyB1c2luZyBgdG91Y2hab29tUm90YXRlYCBpbiB0aGUge0BsaW5rIFRvdWNoWm9vbVJvdGF0ZUhhbmRsZXJ9IHNlY3Rpb24uXG4gICAgICovXG4gICAgdG91Y2hab29tUm90YXRlOiBUb3VjaFpvb21Sb3RhdGVIYW5kbGVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1hcCdzIHtAbGluayBUb3VjaFBpdGNoSGFuZGxlcn0sIHdoaWNoIGFsbG93cyB0aGUgdXNlciB0byBwaXRjaCB0aGUgbWFwIHdpdGggdG91Y2ggZ2VzdHVyZXMuXG4gICAgICogRmluZCBtb3JlIGRldGFpbHMgYW5kIGV4YW1wbGVzIHVzaW5nIGB0b3VjaFBpdGNoYCBpbiB0aGUge0BsaW5rIFRvdWNoUGl0Y2hIYW5kbGVyfSBzZWN0aW9uLlxuICAgICAqL1xuICAgIHRvdWNoUGl0Y2g6IFRvdWNoUGl0Y2hIYW5kbGVyO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogTWFwT3B0aW9ucykge1xuICAgICAgICBQZXJmb3JtYW5jZVV0aWxzLm1hcmsoUGVyZm9ybWFuY2VNYXJrZXJzLmNyZWF0ZSk7XG5cbiAgICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLm1pblpvb20gIT0gbnVsbCAmJiBvcHRpb25zLm1heFpvb20gIT0gbnVsbCAmJiBvcHRpb25zLm1pblpvb20gPiBvcHRpb25zLm1heFpvb20pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbWF4Wm9vbSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBtaW5ab29tYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5taW5QaXRjaCAhPSBudWxsICYmIG9wdGlvbnMubWF4UGl0Y2ggIT0gbnVsbCAmJiBvcHRpb25zLm1pblBpdGNoID4gb3B0aW9ucy5tYXhQaXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtYXhQaXRjaCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBtaW5QaXRjaGApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWluUGl0Y2ggIT0gbnVsbCAmJiBvcHRpb25zLm1pblBpdGNoIDwgZGVmYXVsdE1pblBpdGNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1pblBpdGNoIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7ZGVmYXVsdE1pblBpdGNofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4UGl0Y2ggIT0gbnVsbCAmJiBvcHRpb25zLm1heFBpdGNoID4gZGVmYXVsdE1heFBpdGNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1heFBpdGNoIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICR7ZGVmYXVsdE1heFBpdGNofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybShvcHRpb25zLm1pblpvb20sIG9wdGlvbnMubWF4Wm9vbSwgb3B0aW9ucy5taW5QaXRjaCwgb3B0aW9ucy5tYXhQaXRjaCwgb3B0aW9ucy5yZW5kZXJXb3JsZENvcGllcyk7XG4gICAgICAgIHN1cGVyKHRyYW5zZm9ybSwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5faW50ZXJhY3RpdmUgPSBvcHRpb25zLmludGVyYWN0aXZlO1xuICAgICAgICB0aGlzLl9tYXhUaWxlQ2FjaGVTaXplID0gb3B0aW9ucy5tYXhUaWxlQ2FjaGVTaXplO1xuICAgICAgICB0aGlzLl9mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0ID0gb3B0aW9ucy5mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0O1xuICAgICAgICB0aGlzLl9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBvcHRpb25zLnByZXNlcnZlRHJhd2luZ0J1ZmZlcjtcbiAgICAgICAgdGhpcy5fYW50aWFsaWFzID0gb3B0aW9ucy5hbnRpYWxpYXM7XG4gICAgICAgIHRoaXMuX3RyYWNrUmVzaXplID0gb3B0aW9ucy50cmFja1Jlc2l6ZTtcbiAgICAgICAgdGhpcy5fYmVhcmluZ1NuYXAgPSBvcHRpb25zLmJlYXJpbmdTbmFwO1xuICAgICAgICB0aGlzLl9yZWZyZXNoRXhwaXJlZFRpbGVzID0gb3B0aW9ucy5yZWZyZXNoRXhwaXJlZFRpbGVzO1xuICAgICAgICB0aGlzLl9mYWRlRHVyYXRpb24gPSBvcHRpb25zLmZhZGVEdXJhdGlvbjtcbiAgICAgICAgdGhpcy5fY3Jvc3NTb3VyY2VDb2xsaXNpb25zID0gb3B0aW9ucy5jcm9zc1NvdXJjZUNvbGxpc2lvbnM7XG4gICAgICAgIHRoaXMuX2Nyb3NzRmFkaW5nRmFjdG9yID0gMTtcbiAgICAgICAgdGhpcy5fY29sbGVjdFJlc291cmNlVGltaW5nID0gb3B0aW9ucy5jb2xsZWN0UmVzb3VyY2VUaW1pbmc7XG4gICAgICAgIHRoaXMuX3JlbmRlclRhc2tRdWV1ZSA9IG5ldyBUYXNrUXVldWUoKTtcbiAgICAgICAgdGhpcy5fY29udHJvbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fbWFwSWQgPSB1bmlxdWVJZCgpO1xuICAgICAgICB0aGlzLl9sb2NhbGUgPSBleHRlbmQoe30sIGRlZmF1bHRMb2NhbGUsIG9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgdGhpcy5fY2xpY2tUb2xlcmFuY2UgPSBvcHRpb25zLmNsaWNrVG9sZXJhbmNlO1xuXG4gICAgICAgIHRoaXMuX3JlcXVlc3RNYW5hZ2VyID0gbmV3IFJlcXVlc3RNYW5hZ2VyKG9wdGlvbnMudHJhbnNmb3JtUmVxdWVzdCwgb3B0aW9ucy5hY2Nlc3NUb2tlbik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbnRhaW5lciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChvcHRpb25zLmNvbnRhaW5lcik7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29udGFpbmVyICcke29wdGlvbnMuY29udGFpbmVyfScgbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHR5cGU6ICdjb250YWluZXInIG11c3QgYmUgYSBTdHJpbmcgb3IgSFRNTEVsZW1lbnQuYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5tYXhCb3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TWF4Qm91bmRzKG9wdGlvbnMubWF4Qm91bmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ19vbldpbmRvd09ubGluZScsXG4gICAgICAgICAgICAnX29uV2luZG93UmVzaXplJyxcbiAgICAgICAgICAgICdfb25NYXBTY3JvbGwnLFxuICAgICAgICAgICAgJ19jb250ZXh0TG9zdCcsXG4gICAgICAgICAgICAnX2NvbnRleHRSZXN0b3JlZCdcbiAgICAgICAgXSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5fc2V0dXBDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5fc2V0dXBQYWludGVyKCk7XG4gICAgICAgIGlmICh0aGlzLnBhaW50ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBXZWJHTC5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub24oJ21vdmUnLCAoKSA9PiB0aGlzLl91cGRhdGUoZmFsc2UpKTtcbiAgICAgICAgdGhpcy5vbignbW92ZWVuZCcsICgpID0+IHRoaXMuX3VwZGF0ZShmYWxzZSkpO1xuICAgICAgICB0aGlzLm9uKCd6b29tJywgKCkgPT4gdGhpcy5fdXBkYXRlKHRydWUpKTtcblxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCB0aGlzLl9vbldpbmRvd09ubGluZSwgZmFsc2UpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX29uV2luZG93UmVzaXplLCBmYWxzZSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLl9vbldpbmRvd1Jlc2l6ZSwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IG5ldyBIYW5kbGVyTWFuYWdlcih0aGlzLCBvcHRpb25zKTtcblxuICAgICAgICBjb25zdCBoYXNoTmFtZSA9ICh0eXBlb2Ygb3B0aW9ucy5oYXNoID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmhhc2gpIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5faGFzaCA9IG9wdGlvbnMuaGFzaCAmJiAobmV3IEhhc2goaGFzaE5hbWUpKS5hZGRUbyh0aGlzKTtcbiAgICAgICAgLy8gZG9uJ3Qgc2V0IHBvc2l0aW9uIGZyb20gb3B0aW9ucyBpZiBzZXQgdGhyb3VnaCBoYXNoXG4gICAgICAgIGlmICghdGhpcy5faGFzaCB8fCAhdGhpcy5faGFzaC5fb25IYXNoQ2hhbmdlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuanVtcFRvKHtcbiAgICAgICAgICAgICAgICBjZW50ZXI6IG9wdGlvbnMuY2VudGVyLFxuICAgICAgICAgICAgICAgIHpvb206IG9wdGlvbnMuem9vbSxcbiAgICAgICAgICAgICAgICBiZWFyaW5nOiBvcHRpb25zLmJlYXJpbmcsXG4gICAgICAgICAgICAgICAgcGl0Y2g6IG9wdGlvbnMucGl0Y2hcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ib3VuZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZml0Qm91bmRzKG9wdGlvbnMuYm91bmRzLCBleHRlbmQoe30sIG9wdGlvbnMuZml0Qm91bmRzT3B0aW9ucywge2R1cmF0aW9uOiAwfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXNpemUoKTtcblxuICAgICAgICB0aGlzLl9sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHkgPSBvcHRpb25zLmxvY2FsSWRlb2dyYXBoRm9udEZhbWlseTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3R5bGUpIHRoaXMuc2V0U3R5bGUob3B0aW9ucy5zdHlsZSwge2xvY2FsSWRlb2dyYXBoRm9udEZhbWlseTogb3B0aW9ucy5sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHl9KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5hdHRyaWJ1dGlvbkNvbnRyb2wpXG4gICAgICAgICAgICB0aGlzLmFkZENvbnRyb2wobmV3IEF0dHJpYnV0aW9uQ29udHJvbCh7Y3VzdG9tQXR0cmlidXRpb246IG9wdGlvbnMuY3VzdG9tQXR0cmlidXRpb259KSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb250cm9sKG5ldyBMb2dvQ29udHJvbCgpLCBvcHRpb25zLmxvZ29Qb3NpdGlvbik7XG5cbiAgICAgICAgdGhpcy5vbignc3R5bGUubG9hZCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybS51bm1vZGlmaWVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5qdW1wVG8oKHRoaXMuc3R5bGUuc3R5bGVzaGVldDogYW55KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdkYXRhJywgKGV2ZW50OiBNYXBEYXRhRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZShldmVudC5kYXRhVHlwZSA9PT0gJ3N0eWxlJyk7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KGAke2V2ZW50LmRhdGFUeXBlfWRhdGFgLCBldmVudCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbignZGF0YWxvYWRpbmcnLCAoZXZlbnQ6IE1hcERhdGFFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudChgJHtldmVudC5kYXRhVHlwZX1kYXRhbG9hZGluZ2AsIGV2ZW50KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgKiBSZXR1cm5zIGEgdW5pcXVlIG51bWJlciBmb3IgdGhpcyBtYXAgaW5zdGFuY2Ugd2hpY2ggaXMgdXNlZCBmb3IgdGhlIE1hcExvYWRFdmVudFxuICAgICogdG8gbWFrZSBzdXJlIHdlIG9ubHkgZmlyZSBvbmUgZXZlbnQgcGVyIGluc3RhbnRpYXRlZCBtYXAgb2JqZWN0LlxuICAgICogQHByaXZhdGVcbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgKi9cbiAgICBfZ2V0TWFwSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXBJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIHtAbGluayBJQ29udHJvbH0gdG8gdGhlIG1hcCwgY2FsbGluZyBgY29udHJvbC5vbkFkZCh0aGlzKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0lDb250cm9sfSBjb250cm9sIFRoZSB7QGxpbmsgSUNvbnRyb2x9IHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Bvc2l0aW9uXSBwb3NpdGlvbiBvbiB0aGUgbWFwIHRvIHdoaWNoIHRoZSBjb250cm9sIHdpbGwgYmUgYWRkZWQuXG4gICAgICogVmFsaWQgdmFsdWVzIGFyZSBgJ3RvcC1sZWZ0J2AsIGAndG9wLXJpZ2h0J2AsIGAnYm90dG9tLWxlZnQnYCwgYW5kIGAnYm90dG9tLXJpZ2h0J2AuIERlZmF1bHRzIHRvIGAndG9wLXJpZ2h0J2AuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBBZGQgem9vbSBhbmQgcm90YXRpb24gY29udHJvbHMgdG8gdGhlIG1hcC5cbiAgICAgKiBtYXAuYWRkQ29udHJvbChuZXcgbWFwYm94Z2wuTmF2aWdhdGlvbkNvbnRyb2woKSk7XG4gICAgICogQHNlZSBbRGlzcGxheSBtYXAgbmF2aWdhdGlvbiBjb250cm9sc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9uYXZpZ2F0aW9uLylcbiAgICAgKi9cbiAgICBhZGRDb250cm9sKGNvbnRyb2w6IElDb250cm9sLCBwb3NpdGlvbj86IENvbnRyb2xQb3NpdGlvbikge1xuICAgICAgICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGNvbnRyb2wuZ2V0RGVmYXVsdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBjb250cm9sLmdldERlZmF1bHRQb3NpdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICd0b3AtcmlnaHQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghY29udHJvbCB8fCAhY29udHJvbC5vbkFkZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgdG8gbWFwLmFkZENvbnRyb2woKS4gQXJndW1lbnQgbXVzdCBiZSBhIGNvbnRyb2wgd2l0aCBvbkFkZCBhbmQgb25SZW1vdmUgbWV0aG9kcy4nKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRyb2xFbGVtZW50ID0gY29udHJvbC5vbkFkZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fY29udHJvbHMucHVzaChjb250cm9sKTtcblxuICAgICAgICBjb25zdCBwb3NpdGlvbkNvbnRhaW5lciA9IHRoaXMuX2NvbnRyb2xQb3NpdGlvbnNbcG9zaXRpb25dO1xuICAgICAgICBpZiAocG9zaXRpb24uaW5kZXhPZignYm90dG9tJykgIT09IC0xKSB7XG4gICAgICAgICAgICBwb3NpdGlvbkNvbnRhaW5lci5pbnNlcnRCZWZvcmUoY29udHJvbEVsZW1lbnQsIHBvc2l0aW9uQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zaXRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoY29udHJvbEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGNvbnRyb2wgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtJQ29udHJvbH0gY29udHJvbCBUaGUge0BsaW5rIElDb250cm9sfSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBEZWZpbmUgYSBuZXcgbmF2aWdhdGlvbiBjb250cm9sLlxuICAgICAqIHZhciBuYXZpZ2F0aW9uID0gbmV3IG1hcGJveGdsLk5hdmlnYXRpb25Db250cm9sKCk7XG4gICAgICogLy8gQWRkIHpvb20gYW5kIHJvdGF0aW9uIGNvbnRyb2xzIHRvIHRoZSBtYXAuXG4gICAgICogbWFwLmFkZENvbnRyb2wobmF2aWdhdGlvbik7XG4gICAgICogLy8gUmVtb3ZlIHpvb20gYW5kIHJvdGF0aW9uIGNvbnRyb2xzIGZyb20gdGhlIG1hcC5cbiAgICAgKiBtYXAucmVtb3ZlQ29udHJvbChuYXZpZ2F0aW9uKTtcbiAgICAgKi9cbiAgICByZW1vdmVDb250cm9sKGNvbnRyb2w6IElDb250cm9sKSB7XG4gICAgICAgIGlmICghY29udHJvbCB8fCAhY29udHJvbC5vblJlbW92ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgdG8gbWFwLnJlbW92ZUNvbnRyb2woKS4gQXJndW1lbnQgbXVzdCBiZSBhIGNvbnRyb2wgd2l0aCBvbkFkZCBhbmQgb25SZW1vdmUgbWV0aG9kcy4nKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNpID0gdGhpcy5fY29udHJvbHMuaW5kZXhPZihjb250cm9sKTtcbiAgICAgICAgaWYgKGNpID4gLTEpIHRoaXMuX2NvbnRyb2xzLnNwbGljZShjaSwgMSk7XG4gICAgICAgIGNvbnRyb2wub25SZW1vdmUodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGNvbnRyb2wgZXhpc3RzIG9uIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0lDb250cm9sfSBjb250cm9sIFRoZSB7QGxpbmsgSUNvbnRyb2x9IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIG1hcCBjb250YWlucyBjb250cm9sLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gRGVmaW5lIGEgbmV3IG5hdmlnYXRpb24gY29udHJvbC5cbiAgICAgKiB2YXIgbmF2aWdhdGlvbiA9IG5ldyBtYXBib3hnbC5OYXZpZ2F0aW9uQ29udHJvbCgpO1xuICAgICAqIC8vIEFkZCB6b29tIGFuZCByb3RhdGlvbiBjb250cm9scyB0byB0aGUgbWFwLlxuICAgICAqIG1hcC5hZGRDb250cm9sKG5hdmlnYXRpb24pO1xuICAgICAqIC8vIENoZWNrIHRoYXQgdGhlIG5hdmlnYXRpb24gY29udHJvbCBleGlzdHMgb24gdGhlIG1hcC5cbiAgICAgKiBtYXAuaGFzQ29udHJvbChuYXZpZ2F0aW9uKTtcbiAgICAgKi9cbiAgICBoYXNDb250cm9sKGNvbnRyb2w6IElDb250cm9sKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250cm9scy5pbmRleE9mKGNvbnRyb2wpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzaXplcyB0aGUgbWFwIGFjY29yZGluZyB0byB0aGUgZGltZW5zaW9ucyBvZiBpdHNcbiAgICAgKiBgY29udGFpbmVyYCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBtYXAgY29udGFpbmVyIHNpemUgY2hhbmdlZCBhbmQgdXBkYXRlcyB0aGUgbWFwIGlmIGl0IGhhcyBjaGFuZ2VkLlxuICAgICAqIFRoaXMgbWV0aG9kIG11c3QgYmUgY2FsbGVkIGFmdGVyIHRoZSBtYXAncyBgY29udGFpbmVyYCBpcyByZXNpemVkIHByb2dyYW1tYXRpY2FsbHlcbiAgICAgKiBvciB3aGVuIHRoZSBtYXAgaXMgc2hvd24gYWZ0ZXIgYmVpbmcgaW5pdGlhbGx5IGhpZGRlbiB3aXRoIENTUy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIHBhc3NlZCB0byBgbW92ZXN0YXJ0YCwgYG1vdmVgLCBgcmVzaXplYCwgYW5kIGBtb3ZlZW5kYFxuICAgICAqICAgZXZlbnRzIHRoYXQgZ2V0IHRyaWdnZXJlZCBhcyBhIHJlc3VsdCBvZiByZXNpemUuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgZGlmZmVyZW50aWF0aW5nIHRoZVxuICAgICAqICAgc291cmNlIG9mIGFuIGV2ZW50IChmb3IgZXhhbXBsZSwgdXNlci1pbml0aWF0ZWQgb3IgcHJvZ3JhbW1hdGljYWxseS10cmlnZ2VyZWQgZXZlbnRzKS5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFJlc2l6ZSB0aGUgbWFwIHdoZW4gdGhlIG1hcCBjb250YWluZXIgaXMgc2hvd25cbiAgICAgKiAvLyBhZnRlciBiZWluZyBpbml0aWFsbHkgaGlkZGVuIHdpdGggQ1NTLlxuICAgICAqIHZhciBtYXBEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyk7XG4gICAgICogaWYgKG1hcERpdi5zdHlsZS52aXNpYmlsaXR5ID09PSB0cnVlKSBtYXAucmVzaXplKCk7XG4gICAgICovXG4gICAgcmVzaXplKGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5fY29udGFpbmVyRGltZW5zaW9ucygpO1xuICAgICAgICBjb25zdCB3aWR0aCA9IGRpbWVuc2lvbnNbMF07XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGRpbWVuc2lvbnNbMV07XG5cbiAgICAgICAgdGhpcy5fcmVzaXplQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMucGFpbnRlci5yZXNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgY29uc3QgZmlyZU1vdmluZyA9ICF0aGlzLl9tb3Zpbmc7XG4gICAgICAgIGlmIChmaXJlTW92aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ21vdmVzdGFydCcsIGV2ZW50RGF0YSkpXG4gICAgICAgICAgICAgICAgLmZpcmUobmV3IEV2ZW50KCdtb3ZlJywgZXZlbnREYXRhKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdyZXNpemUnLCBldmVudERhdGEpKTtcblxuICAgICAgICBpZiAoZmlyZU1vdmluZykgdGhpcy5maXJlKG5ldyBFdmVudCgnbW92ZWVuZCcsIGV2ZW50RGF0YSkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hcCdzIGdlb2dyYXBoaWNhbCBib3VuZHMuIFdoZW4gdGhlIGJlYXJpbmcgb3IgcGl0Y2ggaXMgbm9uLXplcm8sIHRoZSB2aXNpYmxlIHJlZ2lvbiBpcyBub3RcbiAgICAgKiBhbiBheGlzLWFsaWduZWQgcmVjdGFuZ2xlLCBhbmQgdGhlIHJlc3VsdCBpcyB0aGUgc21hbGxlc3QgYm91bmRzIHRoYXQgZW5jb21wYXNzZXMgdGhlIHZpc2libGUgcmVnaW9uLlxuICAgICAqIEByZXR1cm5zIHtMbmdMYXRCb3VuZHN9IFRoZSBnZW9ncmFwaGljYWwgYm91bmRzIG9mIHRoZSBtYXAgYXMge0BsaW5rIExuZ0xhdEJvdW5kc30uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgYm91bmRzID0gbWFwLmdldEJvdW5kcygpO1xuICAgICAqL1xuICAgIGdldEJvdW5kcygpOiBMbmdMYXRCb3VuZHMge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0uZ2V0Qm91bmRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWF4aW11bSBnZW9ncmFwaGljYWwgYm91bmRzIHRoZSBtYXAgaXMgY29uc3RyYWluZWQgdG8sIG9yIGBudWxsYCBpZiBub25lIHNldC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbWFwIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBtYXhCb3VuZHMgPSBtYXAuZ2V0TWF4Qm91bmRzKCk7XG4gICAgICovXG4gICAgZ2V0TWF4Qm91bmRzKCk6IExuZ0xhdEJvdW5kcyB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0uZ2V0TWF4Qm91bmRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBvciBjbGVhcnMgdGhlIG1hcCdzIGdlb2dyYXBoaWNhbCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBQYW4gYW5kIHpvb20gb3BlcmF0aW9ucyBhcmUgY29uc3RyYWluZWQgd2l0aGluIHRoZXNlIGJvdW5kcy5cbiAgICAgKiBJZiBhIHBhbiBvciB6b29tIGlzIHBlcmZvcm1lZCB0aGF0IHdvdWxkXG4gICAgICogZGlzcGxheSByZWdpb25zIG91dHNpZGUgdGhlc2UgYm91bmRzLCB0aGUgbWFwIHdpbGxcbiAgICAgKiBpbnN0ZWFkIGRpc3BsYXkgYSBwb3NpdGlvbiBhbmQgem9vbSBsZXZlbFxuICAgICAqIGFzIGNsb3NlIGFzIHBvc3NpYmxlIHRvIHRoZSBvcGVyYXRpb24ncyByZXF1ZXN0IHdoaWxlIHN0aWxsXG4gICAgICogcmVtYWluaW5nIHdpdGhpbiB0aGUgYm91bmRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtMbmdMYXRCb3VuZHNMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gYm91bmRzIFRoZSBtYXhpbXVtIGJvdW5kcyB0byBzZXQuIElmIGBudWxsYCBvciBgdW5kZWZpbmVkYCBpcyBwcm92aWRlZCwgdGhlIGZ1bmN0aW9uIHJlbW92ZXMgdGhlIG1hcCdzIG1heGltdW0gYm91bmRzLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gRGVmaW5lIGJvdW5kcyB0aGF0IGNvbmZvcm0gdG8gdGhlIGBMbmdMYXRCb3VuZHNMaWtlYCBvYmplY3QuXG4gICAgICogdmFyIGJvdW5kcyA9IFtcbiAgICAgKiAgIFstNzQuMDQ3MjgsIDQwLjY4MzkyXSwgLy8gW3dlc3QsIHNvdXRoXVxuICAgICAqICAgWy03My45MTA1OCwgNDAuODc3NjRdICAvLyBbZWFzdCwgbm9ydGhdXG4gICAgICogXTtcbiAgICAgKiAvLyBTZXQgdGhlIG1hcCdzIG1heCBib3VuZHMuXG4gICAgICogbWFwLnNldE1heEJvdW5kcyhib3VuZHMpO1xuICAgICAqL1xuICAgIHNldE1heEJvdW5kcyhib3VuZHM6IExuZ0xhdEJvdW5kc0xpa2UpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0TWF4Qm91bmRzKExuZ0xhdEJvdW5kcy5jb252ZXJ0KGJvdW5kcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBvciBjbGVhcnMgdGhlIG1hcCdzIG1pbmltdW0gem9vbSBsZXZlbC5cbiAgICAgKiBJZiB0aGUgbWFwJ3MgY3VycmVudCB6b29tIGxldmVsIGlzIGxvd2VyIHRoYW4gdGhlIG5ldyBtaW5pbXVtLFxuICAgICAqIHRoZSBtYXAgd2lsbCB6b29tIHRvIHRoZSBuZXcgbWluaW11bS5cbiAgICAgKlxuICAgICAqIEl0IGlzIG5vdCBhbHdheXMgcG9zc2libGUgdG8gem9vbSBvdXQgYW5kIHJlYWNoIHRoZSBzZXQgYG1pblpvb21gLlxuICAgICAqIE90aGVyIGZhY3RvcnMgc3VjaCBhcyBtYXAgaGVpZ2h0IG1heSByZXN0cmljdCB6b29taW5nLiBGb3IgZXhhbXBsZSxcbiAgICAgKiBpZiB0aGUgbWFwIGlzIDUxMnB4IHRhbGwgaXQgd2lsbCBub3QgYmUgcG9zc2libGUgdG8gem9vbSBiZWxvdyB6b29tIDBcbiAgICAgKiBubyBtYXR0ZXIgd2hhdCB0aGUgYG1pblpvb21gIGlzIHNldCB0by5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gbWluWm9vbSBUaGUgbWluaW11bSB6b29tIGxldmVsIHRvIHNldCAoLTIgLSAyNCkuXG4gICAgICogICBJZiBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgaXMgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiByZW1vdmVzIHRoZSBjdXJyZW50IG1pbmltdW0gem9vbSAoaS5lLiBzZXRzIGl0IHRvIC0yKS5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC5zZXRNaW5ab29tKDEyLjI1KTtcbiAgICAgKi9cbiAgICBzZXRNaW5ab29tKG1pblpvb20/OiA/bnVtYmVyKSB7XG5cbiAgICAgICAgbWluWm9vbSA9IG1pblpvb20gPT09IG51bGwgfHwgbWluWm9vbSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1pblpvb20gOiBtaW5ab29tO1xuXG4gICAgICAgIGlmIChtaW5ab29tID49IGRlZmF1bHRNaW5ab29tICYmIG1pblpvb20gPD0gdGhpcy50cmFuc2Zvcm0ubWF4Wm9vbSkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ubWluWm9vbSA9IG1pblpvb207XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0Wm9vbSgpIDwgbWluWm9vbSkgdGhpcy5zZXRab29tKG1pblpvb20pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKGBtaW5ab29tIG11c3QgYmUgYmV0d2VlbiAke2RlZmF1bHRNaW5ab29tfSBhbmQgdGhlIGN1cnJlbnQgbWF4Wm9vbSwgaW5jbHVzaXZlYCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFwJ3MgbWluaW11bSBhbGxvd2FibGUgem9vbSBsZXZlbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IG1pblpvb21cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBtaW5ab29tID0gbWFwLmdldE1pblpvb20oKTtcbiAgICAgKi9cbiAgICBnZXRNaW5ab29tKCkgeyByZXR1cm4gdGhpcy50cmFuc2Zvcm0ubWluWm9vbTsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBvciBjbGVhcnMgdGhlIG1hcCdzIG1heGltdW0gem9vbSBsZXZlbC5cbiAgICAgKiBJZiB0aGUgbWFwJ3MgY3VycmVudCB6b29tIGxldmVsIGlzIGhpZ2hlciB0aGFuIHRoZSBuZXcgbWF4aW11bSxcbiAgICAgKiB0aGUgbWFwIHdpbGwgem9vbSB0byB0aGUgbmV3IG1heGltdW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IG1heFpvb20gVGhlIG1heGltdW0gem9vbSBsZXZlbCB0byBzZXQuXG4gICAgICogICBJZiBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgaXMgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiByZW1vdmVzIHRoZSBjdXJyZW50IG1heGltdW0gem9vbSAoc2V0cyBpdCB0byAyMikuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuc2V0TWF4Wm9vbSgxOC43NSk7XG4gICAgICovXG4gICAgc2V0TWF4Wm9vbShtYXhab29tPzogP251bWJlcikge1xuXG4gICAgICAgIG1heFpvb20gPSBtYXhab29tID09PSBudWxsIHx8IG1heFpvb20gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXhab29tIDogbWF4Wm9vbTtcblxuICAgICAgICBpZiAobWF4Wm9vbSA+PSB0aGlzLnRyYW5zZm9ybS5taW5ab29tKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5tYXhab29tID0gbWF4Wm9vbTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5nZXRab29tKCkgPiBtYXhab29tKSB0aGlzLnNldFpvb20obWF4Wm9vbSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoYG1heFpvb20gbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGN1cnJlbnQgbWluWm9vbWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hcCdzIG1heGltdW0gYWxsb3dhYmxlIHpvb20gbGV2ZWwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBtYXhab29tXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgbWF4Wm9vbSA9IG1hcC5nZXRNYXhab29tKCk7XG4gICAgICovXG4gICAgZ2V0TWF4Wm9vbSgpIHsgcmV0dXJuIHRoaXMudHJhbnNmb3JtLm1heFpvb207IH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgb3IgY2xlYXJzIHRoZSBtYXAncyBtaW5pbXVtIHBpdGNoLlxuICAgICAqIElmIHRoZSBtYXAncyBjdXJyZW50IHBpdGNoIGlzIGxvd2VyIHRoYW4gdGhlIG5ldyBtaW5pbXVtLFxuICAgICAqIHRoZSBtYXAgd2lsbCBwaXRjaCB0byB0aGUgbmV3IG1pbmltdW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IG1pblBpdGNoIFRoZSBtaW5pbXVtIHBpdGNoIHRvIHNldCAoMC02MCkuXG4gICAgICogICBJZiBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgaXMgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiByZW1vdmVzIHRoZSBjdXJyZW50IG1pbmltdW0gcGl0Y2ggKGkuZS4gc2V0cyBpdCB0byAwKS5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRNaW5QaXRjaChtaW5QaXRjaD86ID9udW1iZXIpIHtcblxuICAgICAgICBtaW5QaXRjaCA9IG1pblBpdGNoID09PSBudWxsIHx8IG1pblBpdGNoID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWluUGl0Y2ggOiBtaW5QaXRjaDtcblxuICAgICAgICBpZiAobWluUGl0Y2ggPCBkZWZhdWx0TWluUGl0Y2gpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbWluUGl0Y2ggbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJHtkZWZhdWx0TWluUGl0Y2h9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWluUGl0Y2ggPj0gZGVmYXVsdE1pblBpdGNoICYmIG1pblBpdGNoIDw9IHRoaXMudHJhbnNmb3JtLm1heFBpdGNoKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5taW5QaXRjaCA9IG1pblBpdGNoO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdldFBpdGNoKCkgPCBtaW5QaXRjaCkgdGhpcy5zZXRQaXRjaChtaW5QaXRjaCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoYG1pblBpdGNoIG11c3QgYmUgYmV0d2VlbiAke2RlZmF1bHRNaW5QaXRjaH0gYW5kIHRoZSBjdXJyZW50IG1heFBpdGNoLCBpbmNsdXNpdmVgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBtaW5pbXVtIGFsbG93YWJsZSBwaXRjaC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IG1pblBpdGNoXG4gICAgICovXG4gICAgZ2V0TWluUGl0Y2goKSB7IHJldHVybiB0aGlzLnRyYW5zZm9ybS5taW5QaXRjaDsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBvciBjbGVhcnMgdGhlIG1hcCdzIG1heGltdW0gcGl0Y2guXG4gICAgICogSWYgdGhlIG1hcCdzIGN1cnJlbnQgcGl0Y2ggaXMgaGlnaGVyIHRoYW4gdGhlIG5ldyBtYXhpbXVtLFxuICAgICAqIHRoZSBtYXAgd2lsbCBwaXRjaCB0byB0aGUgbmV3IG1heGltdW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IG1heFBpdGNoIFRoZSBtYXhpbXVtIHBpdGNoIHRvIHNldC5cbiAgICAgKiAgIElmIGBudWxsYCBvciBgdW5kZWZpbmVkYCBpcyBwcm92aWRlZCwgdGhlIGZ1bmN0aW9uIHJlbW92ZXMgdGhlIGN1cnJlbnQgbWF4aW11bSBwaXRjaCAoc2V0cyBpdCB0byA2MCkuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgc2V0TWF4UGl0Y2gobWF4UGl0Y2g/OiA/bnVtYmVyKSB7XG5cbiAgICAgICAgbWF4UGl0Y2ggPSBtYXhQaXRjaCA9PT0gbnVsbCB8fCBtYXhQaXRjaCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1heFBpdGNoIDogbWF4UGl0Y2g7XG5cbiAgICAgICAgaWYgKG1heFBpdGNoID4gZGVmYXVsdE1heFBpdGNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1heFBpdGNoIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICR7ZGVmYXVsdE1heFBpdGNofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1heFBpdGNoID49IHRoaXMudHJhbnNmb3JtLm1pblBpdGNoKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5tYXhQaXRjaCA9IG1heFBpdGNoO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdldFBpdGNoKCkgPiBtYXhQaXRjaCkgdGhpcy5zZXRQaXRjaChtYXhQaXRjaCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoYG1heFBpdGNoIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBjdXJyZW50IG1pblBpdGNoYCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFwJ3MgbWF4aW11bSBhbGxvd2FibGUgcGl0Y2guXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBtYXhQaXRjaFxuICAgICAqL1xuICAgIGdldE1heFBpdGNoKCkgeyByZXR1cm4gdGhpcy50cmFuc2Zvcm0ubWF4UGl0Y2g7IH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0YXRlIG9mIGByZW5kZXJXb3JsZENvcGllc2AuIElmIGB0cnVlYCwgbXVsdGlwbGUgY29waWVzIG9mIHRoZSB3b3JsZCB3aWxsIGJlIHJlbmRlcmVkIHNpZGUgYnkgc2lkZSBiZXlvbmQgLTE4MCBhbmQgMTgwIGRlZ3JlZXMgbG9uZ2l0dWRlLiBJZiBzZXQgdG8gYGZhbHNlYDpcbiAgICAgKiAtIFdoZW4gdGhlIG1hcCBpcyB6b29tZWQgb3V0IGZhciBlbm91Z2ggdGhhdCBhIHNpbmdsZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgd29ybGQgZG9lcyBub3QgZmlsbCB0aGUgbWFwJ3MgZW50aXJlXG4gICAgICogY29udGFpbmVyLCB0aGVyZSB3aWxsIGJlIGJsYW5rIHNwYWNlIGJleW9uZCAxODAgYW5kIC0xODAgZGVncmVlcyBsb25naXR1ZGUuXG4gICAgICogLSBGZWF0dXJlcyB0aGF0IGNyb3NzIDE4MCBhbmQgLTE4MCBkZWdyZWVzIGxvbmdpdHVkZSB3aWxsIGJlIGN1dCBpbiB0d28gKHdpdGggb25lIHBvcnRpb24gb24gdGhlIHJpZ2h0IGVkZ2Ugb2YgdGhlXG4gICAgICogbWFwIGFuZCB0aGUgb3RoZXIgb24gdGhlIGxlZnQgZWRnZSBvZiB0aGUgbWFwKSBhdCBldmVyeSB6b29tIGxldmVsLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSByZW5kZXJXb3JsZENvcGllc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHdvcmxkQ29waWVzUmVuZGVyZWQgPSBtYXAuZ2V0UmVuZGVyV29ybGRDb3BpZXMoKTtcbiAgICAgKiBAc2VlIFtSZW5kZXIgd29ybGQgY29waWVzXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9yZW5kZXItd29ybGQtY29waWVzLylcbiAgICAgKi9cbiAgICBnZXRSZW5kZXJXb3JsZENvcGllcygpIHsgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnJlbmRlcldvcmxkQ29waWVzOyB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGF0ZSBvZiBgcmVuZGVyV29ybGRDb3BpZXNgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZW5kZXJXb3JsZENvcGllcyBJZiBgdHJ1ZWAsIG11bHRpcGxlIGNvcGllcyBvZiB0aGUgd29ybGQgd2lsbCBiZSByZW5kZXJlZCBzaWRlIGJ5IHNpZGUgYmV5b25kIC0xODAgYW5kIDE4MCBkZWdyZWVzIGxvbmdpdHVkZS4gSWYgc2V0IHRvIGBmYWxzZWA6XG4gICAgICogLSBXaGVuIHRoZSBtYXAgaXMgem9vbWVkIG91dCBmYXIgZW5vdWdoIHRoYXQgYSBzaW5nbGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIHdvcmxkIGRvZXMgbm90IGZpbGwgdGhlIG1hcCdzIGVudGlyZVxuICAgICAqIGNvbnRhaW5lciwgdGhlcmUgd2lsbCBiZSBibGFuayBzcGFjZSBiZXlvbmQgMTgwIGFuZCAtMTgwIGRlZ3JlZXMgbG9uZ2l0dWRlLlxuICAgICAqIC0gRmVhdHVyZXMgdGhhdCBjcm9zcyAxODAgYW5kIC0xODAgZGVncmVlcyBsb25naXR1ZGUgd2lsbCBiZSBjdXQgaW4gdHdvICh3aXRoIG9uZSBwb3J0aW9uIG9uIHRoZSByaWdodCBlZGdlIG9mIHRoZVxuICAgICAqIG1hcCBhbmQgdGhlIG90aGVyIG9uIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIG1hcCkgYXQgZXZlcnkgem9vbSBsZXZlbC5cbiAgICAgKlxuICAgICAqIGB1bmRlZmluZWRgIGlzIHRyZWF0ZWQgYXMgYHRydWVgLCBgbnVsbGAgaXMgdHJlYXRlZCBhcyBgZmFsc2VgLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnNldFJlbmRlcldvcmxkQ29waWVzKHRydWUpO1xuICAgICAqIEBzZWUgW1JlbmRlciB3b3JsZCBjb3BpZXNdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3JlbmRlci13b3JsZC1jb3BpZXMvKVxuICAgICAqL1xuICAgIHNldFJlbmRlcldvcmxkQ29waWVzKHJlbmRlcldvcmxkQ29waWVzPzogP2Jvb2xlYW4pIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucmVuZGVyV29ybGRDb3BpZXMgPSByZW5kZXJXb3JsZENvcGllcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB7QGxpbmsgUG9pbnR9IHJlcHJlc2VudGluZyBwaXhlbCBjb29yZGluYXRlcywgcmVsYXRpdmUgdG8gdGhlIG1hcCdzIGBjb250YWluZXJgLFxuICAgICAqIHRoYXQgY29ycmVzcG9uZCB0byB0aGUgc3BlY2lmaWVkIGdlb2dyYXBoaWNhbCBsb2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TG5nTGF0TGlrZX0gbG5nbGF0IFRoZSBnZW9ncmFwaGljYWwgbG9jYXRpb24gdG8gcHJvamVjdC5cbiAgICAgKiBAcmV0dXJucyB7UG9pbnR9IFRoZSB7QGxpbmsgUG9pbnR9IGNvcnJlc3BvbmRpbmcgdG8gYGxuZ2xhdGAsIHJlbGF0aXZlIHRvIHRoZSBtYXAncyBgY29udGFpbmVyYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBjb29yZGluYXRlID0gWy0xMjIuNDIwNjc5LCAzNy43NzI1MzddO1xuICAgICAqIHZhciBwb2ludCA9IG1hcC5wcm9qZWN0KGNvb3JkaW5hdGUpO1xuICAgICAqL1xuICAgIHByb2plY3QobG5nbGF0OiBMbmdMYXRMaWtlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5sb2NhdGlvblBvaW50KExuZ0xhdC5jb252ZXJ0KGxuZ2xhdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB7QGxpbmsgTG5nTGF0fSByZXByZXNlbnRpbmcgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGVzIHRoYXQgY29ycmVzcG9uZFxuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgcGl4ZWwgY29vcmRpbmF0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BvaW50TGlrZX0gcG9pbnQgVGhlIHBpeGVsIGNvb3JkaW5hdGVzIHRvIHVucHJvamVjdC5cbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0fSBUaGUge0BsaW5rIExuZ0xhdH0gY29ycmVzcG9uZGluZyB0byBgcG9pbnRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgKiAgIC8vIFdoZW4gdGhlIG1hcCBpcyBjbGlja2VkLCBnZXQgdGhlIGdlb2dyYXBoaWMgY29vcmRpbmF0ZS5cbiAgICAgKiAgIHZhciBjb29yZGluYXRlID0gbWFwLnVucHJvamVjdChlLnBvaW50KTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB1bnByb2plY3QocG9pbnQ6IFBvaW50TGlrZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucG9pbnRMb2NhdGlvbihQb2ludC5jb252ZXJ0KHBvaW50KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBtYXAgaXMgcGFubmluZywgem9vbWluZywgcm90YXRpbmcsIG9yIHBpdGNoaW5nIGR1ZSB0byBhIGNhbWVyYSBhbmltYXRpb24gb3IgdXNlciBnZXN0dXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBtYXAgaXMgbW92aW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGlzTW92aW5nID0gbWFwLmlzTW92aW5nKCk7XG4gICAgICovXG4gICAgaXNNb3ZpbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb3ZpbmcgfHwgdGhpcy5oYW5kbGVycy5pc01vdmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbWFwIGlzIHpvb21pbmcgZHVlIHRvIGEgY2FtZXJhIGFuaW1hdGlvbiBvciB1c2VyIGdlc3R1cmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIG1hcCBpcyB6b29taW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGlzWm9vbWluZyA9IG1hcC5pc1pvb21pbmcoKTtcbiAgICAgKi9cbiAgICBpc1pvb21pbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl96b29taW5nIHx8IHRoaXMuaGFuZGxlcnMuaXNab29taW5nKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBtYXAgaXMgcm90YXRpbmcgZHVlIHRvIGEgY2FtZXJhIGFuaW1hdGlvbiBvciB1c2VyIGdlc3R1cmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIG1hcCBpcyByb3RhdGluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC5pc1JvdGF0aW5nKCk7XG4gICAgICovXG4gICAgaXNSb3RhdGluZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JvdGF0aW5nIHx8IHRoaXMuaGFuZGxlcnMuaXNSb3RhdGluZygpO1xuICAgIH1cblxuICAgIF9jcmVhdGVEZWxlZ2F0ZWRMaXN0ZW5lcih0eXBlOiBNYXBFdmVudCwgbGF5ZXJJZDogYW55LCBsaXN0ZW5lcjogYW55KSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnbW91c2VlbnRlcicgfHwgdHlwZSA9PT0gJ21vdXNlb3ZlcicpIHtcbiAgICAgICAgICAgIGxldCBtb3VzZWluID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBtb3VzZW1vdmUgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzID0gdGhpcy5nZXRMYXllcihsYXllcklkKSA/IHRoaXMucXVlcnlSZW5kZXJlZEZlYXR1cmVzKGUucG9pbnQsIHtsYXllcnM6IFtsYXllcklkXX0pIDogW107XG4gICAgICAgICAgICAgICAgaWYgKCFmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2VpbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW1vdXNlaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2VpbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgbmV3IE1hcE1vdXNlRXZlbnQodHlwZSwgdGhpcywgZS5vcmlnaW5hbEV2ZW50LCB7ZmVhdHVyZXN9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IG1vdXNlb3V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIG1vdXNlaW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4ge2xheWVyOiBsYXllcklkLCBsaXN0ZW5lciwgZGVsZWdhdGVzOiB7bW91c2Vtb3ZlLCBtb3VzZW91dH19O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdtb3VzZWxlYXZlJyB8fCB0eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICBsZXQgbW91c2VpbiA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgbW91c2Vtb3ZlID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHRoaXMuZ2V0TGF5ZXIobGF5ZXJJZCkgPyB0aGlzLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhlLnBvaW50LCB7bGF5ZXJzOiBbbGF5ZXJJZF19KSA6IFtdO1xuICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2VpbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb3VzZWluKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNlaW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBuZXcgTWFwTW91c2VFdmVudCh0eXBlLCB0aGlzLCBlLm9yaWdpbmFsRXZlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbW91c2VvdXQgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtb3VzZWluKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNlaW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBuZXcgTWFwTW91c2VFdmVudCh0eXBlLCB0aGlzLCBlLm9yaWdpbmFsRXZlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHtsYXllcjogbGF5ZXJJZCwgbGlzdGVuZXIsIGRlbGVnYXRlczoge21vdXNlbW92ZSwgbW91c2VvdXR9fTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGVnYXRlID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHRoaXMuZ2V0TGF5ZXIobGF5ZXJJZCkgPyB0aGlzLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhlLnBvaW50LCB7bGF5ZXJzOiBbbGF5ZXJJZF19KSA6IFtdO1xuICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGVyZSB3ZSBuZWVkIHRvIG11dGF0ZSB0aGUgb3JpZ2luYWwgZXZlbnQsIHNvIHRoYXQgcHJldmVudERlZmF1bHQgd29ya3MgYXMgZXhwZWN0ZWQuXG4gICAgICAgICAgICAgICAgICAgIGUuZmVhdHVyZXMgPSBmZWF0dXJlcztcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGUuZmVhdHVyZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7bGF5ZXI6IGxheWVySWQsIGxpc3RlbmVyLCBkZWxlZ2F0ZXM6IHtbdHlwZV06IGRlbGVnYXRlfX07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgZm9yIGV2ZW50cyBvZiBhIHNwZWNpZmllZCB0eXBlLCBvcHRpb25hbGx5IGxpbWl0ZWQgdG8gZmVhdHVyZXMgaW4gYSBzcGVjaWZpZWQgc3R5bGUgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZSB0byBsaXN0ZW4gZm9yLiBFdmVudHMgY29tcGF0aWJsZSB3aXRoIHRoZSBvcHRpb25hbCBgbGF5ZXJJZGAgcGFyYW1ldGVyIGFyZSB0cmlnZ2VyZWRcbiAgICAgKiB3aGVuIHRoZSBjdXJzb3IgZW50ZXJzIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBzcGVjaWZpZWQgbGF5ZXIgZnJvbSBvdXRzaWRlIHRoYXQgbGF5ZXIgb3Igb3V0c2lkZSB0aGUgbWFwIGNhbnZhcy5cbiAgICAgKlxuICAgICAqIHwgRXZlbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQ29tcGF0aWJsZSB3aXRoIGBsYXllcklkYCB8XG4gICAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICAgKiB8IFtgbW91c2Vkb3duYF0oI21hcC5ldmVudDptb3VzZWRvd24pICAgICAgICAgICAgICAgICAgICAgICB8IHllcyAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2Btb3VzZXVwYF0oI21hcC5ldmVudDptb3VzZXVwKSAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeWVzICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYG1vdXNlb3ZlcmBdKCNtYXAuZXZlbnQ6bW91c2VvdmVyKSAgICAgICAgICAgICAgICAgICAgICAgfCB5ZXMgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgbW91c2VvdXRgXSgjbWFwLmV2ZW50Om1vdXNlb3V0KSAgICAgICAgICAgICAgICAgICAgICAgICB8IHllcyAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2Btb3VzZW1vdmVgXSgjbWFwLmV2ZW50Om1vdXNlbW92ZSkgICAgICAgICAgICAgICAgICAgICAgIHwgeWVzICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYG1vdXNlZW50ZXJgXSgjbWFwLmV2ZW50Om1vdXNlZW50ZXIpICAgICAgICAgICAgICAgICAgICAgfCB5ZXMgKHJlcXVpcmVkKSAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgbW91c2VsZWF2ZWBdKCNtYXAuZXZlbnQ6bW91c2VsZWF2ZSkgICAgICAgICAgICAgICAgICAgICB8IHllcyAocmVxdWlyZWQpICAgICAgICAgICAgfFxuICAgICAqIHwgW2BjbGlja2BdKCNtYXAuZXZlbnQ6Y2xpY2spICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeWVzICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYGRibGNsaWNrYF0oI21hcC5ldmVudDpkYmxjbGljaykgICAgICAgICAgICAgICAgICAgICAgICAgfCB5ZXMgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgY29udGV4dG1lbnVgXSgjbWFwLmV2ZW50OmNvbnRleHRtZW51KSAgICAgICAgICAgICAgICAgICB8IHllcyAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2B0b3VjaHN0YXJ0YF0oI21hcC5ldmVudDp0b3VjaHN0YXJ0KSAgICAgICAgICAgICAgICAgICAgIHwgeWVzICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYHRvdWNoZW5kYF0oI21hcC5ldmVudDp0b3VjaGVuZCkgICAgICAgICAgICAgICAgICAgICAgICAgfCB5ZXMgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgdG91Y2hjYW5jZWxgXSgjbWFwLmV2ZW50OnRvdWNoY2FuY2VsKSAgICAgICAgICAgICAgICAgICB8IHllcyAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2B3aGVlbGBdKCNtYXAuZXZlbnQ6d2hlZWwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYHJlc2l6ZWBdKCNtYXAuZXZlbnQ6cmVzaXplKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgcmVtb3ZlYF0oI21hcC5ldmVudDpyZW1vdmUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2B0b3VjaG1vdmVgXSgjbWFwLmV2ZW50OnRvdWNobW92ZSkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYG1vdmVzdGFydGBdKCNtYXAuZXZlbnQ6bW92ZXN0YXJ0KSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgbW92ZWBdKCNtYXAuZXZlbnQ6bW92ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2Btb3ZlZW5kYF0oI21hcC5ldmVudDptb3ZlZW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYGRyYWdzdGFydGBdKCNtYXAuZXZlbnQ6ZHJhZ3N0YXJ0KSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgZHJhZ2BdKCNtYXAuZXZlbnQ6ZHJhZykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2BkcmFnZW5kYF0oI21hcC5ldmVudDpkcmFnZW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYHpvb21zdGFydGBdKCNtYXAuZXZlbnQ6em9vbXN0YXJ0KSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgem9vbWBdKCNtYXAuZXZlbnQ6em9vbSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2B6b29tZW5kYF0oI21hcC5ldmVudDp6b29tZW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYHJvdGF0ZXN0YXJ0YF0oI21hcC5ldmVudDpyb3RhdGVzdGFydCkgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgcm90YXRlYF0oI21hcC5ldmVudDpyb3RhdGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2Byb3RhdGVlbmRgXSgjbWFwLmV2ZW50OnJvdGF0ZWVuZCkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYHBpdGNoc3RhcnRgXSgjbWFwLmV2ZW50OnBpdGNoc3RhcnQpICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgcGl0Y2hgXSgjbWFwLmV2ZW50OnBpdGNoKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2BwaXRjaGVuZGBdKCNtYXAuZXZlbnQ6cGl0Y2hlbmQpICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYGJveHpvb21zdGFydGBdKCNtYXAuZXZlbnQ6Ym94em9vbXN0YXJ0KSAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgYm94em9vbWVuZGBdKCNtYXAuZXZlbnQ6Ym94em9vbWVuZCkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2Bib3h6b29tY2FuY2VsYF0oI21hcC5ldmVudDpib3h6b29tY2FuY2VsKSAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYHdlYmdsY29udGV4dGxvc3RgXSgjbWFwLmV2ZW50OndlYmdsY29udGV4dGxvc3QpICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgd2ViZ2xjb250ZXh0cmVzdG9yZWRgXSgjbWFwLmV2ZW50OndlYmdsY29udGV4dHJlc3RvcmVkKSB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2Bsb2FkYF0oI21hcC5ldmVudDpsb2FkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYHJlbmRlcmBdKCNtYXAuZXZlbnQ6cmVuZGVyKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgaWRsZWBdKCNtYXAuZXZlbnQ6aWRsZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2BlcnJvcmBdKCNtYXAuZXZlbnQ6ZXJyb3IpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYGRhdGFgXSgjbWFwLmV2ZW50OmRhdGEpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgc3R5bGVkYXRhYF0oI21hcC5ldmVudDpzdHlsZWRhdGEpICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2Bzb3VyY2VkYXRhYF0oI21hcC5ldmVudDpzb3VyY2VkYXRhKSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYGRhdGFsb2FkaW5nYF0oI21hcC5ldmVudDpkYXRhbG9hZGluZykgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKiB8IFtgc3R5bGVkYXRhbG9hZGluZ2BdKCNtYXAuZXZlbnQ6c3R5bGVkYXRhbG9hZGluZykgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqIHwgW2Bzb3VyY2VkYXRhbG9hZGluZ2BdKCNtYXAuZXZlbnQ6c291cmNlZGF0YWxvYWRpbmcpICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogfCBbYHN0eWxlaW1hZ2VtaXNzaW5nYF0oI21hcC5ldmVudDpzdHlsZWltYWdlbWlzc2luZykgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllcklkIChvcHRpb25hbCkgVGhlIElEIG9mIGEgc3R5bGUgbGF5ZXIuIEV2ZW50IHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgaWYgaXRzIGxvY2F0aW9uXG4gICAgICogaXMgd2l0aGluIGEgdmlzaWJsZSBmZWF0dXJlIGluIHRoaXMgbGF5ZXIuIFRoZSBldmVudCB3aWxsIGhhdmUgYSBgZmVhdHVyZXNgIHByb3BlcnR5IGNvbnRhaW5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgbWF0Y2hpbmcgZmVhdHVyZXMuIElmIGBsYXllcklkYCBpcyBub3Qgc3VwcGxpZWQsIHRoZSBldmVudCB3aWxsIG5vdCBoYXZlIGEgYGZlYXR1cmVzYCBwcm9wZXJ0eS5cbiAgICAgKiBQbGVhc2Ugbm90ZSB0aGF0IG1hbnkgZXZlbnQgdHlwZXMgYXJlIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIG9wdGlvbmFsIGBsYXllcklkYCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBldmVudCBpcyBmaXJlZC5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IHdpbGwgZmlyZVxuICAgICAqIC8vIHdoZW4gdGhlIG1hcCBoYXMgZmluaXNoZWQgbG9hZGluZ1xuICAgICAqIG1hcC5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgLy8gT25jZSB0aGUgbWFwIGhhcyBmaW5pc2hlZCBsb2FkaW5nLFxuICAgICAqICAgLy8gYWRkIGEgbmV3IGxheWVyXG4gICAgICogICBtYXAuYWRkTGF5ZXIoe1xuICAgICAqICAgICBpZDogJ3BvaW50cy1vZi1pbnRlcmVzdCcsXG4gICAgICogICAgIHNvdXJjZToge1xuICAgICAqICAgICAgIHR5cGU6ICd2ZWN0b3InLFxuICAgICAqICAgICAgIHVybDogJ21hcGJveDovL21hcGJveC5tYXBib3gtc3RyZWV0cy12OCdcbiAgICAgKiAgICAgfSxcbiAgICAgKiAgICAgJ3NvdXJjZS1sYXllcic6ICdwb2lfbGFiZWwnLFxuICAgICAqICAgICB0eXBlOiAnY2lyY2xlJyxcbiAgICAgKiAgICAgcGFpbnQ6IHtcbiAgICAgKiAgICAgICAvLyBNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbiBwYWludCBwcm9wZXJ0aWVzXG4gICAgICogICAgIH0sXG4gICAgICogICAgIGxheW91dDoge1xuICAgICAqICAgICAgIC8vIE1hcGJveCBTdHlsZSBTcGVjaWZpY2F0aW9uIGxheW91dCBwcm9wZXJ0aWVzXG4gICAgICogICAgIH1cbiAgICAgKiAgIH0pO1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgd2lsbCBmaXJlXG4gICAgICogLy8gd2hlbiBhIGZlYXR1cmUgb24gdGhlIGNvdW50cmllcyBsYXllciBvZiB0aGUgbWFwIGlzIGNsaWNrZWRcbiAgICAgKiBtYXAub24oJ2NsaWNrJywgJ2NvdW50cmllcycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgKiAgIG5ldyBtYXBib3hnbC5Qb3B1cCgpXG4gICAgICogICAgIC5zZXRMbmdMYXQoZS5sbmdMYXQpXG4gICAgICogICAgIC5zZXRIVE1MKGBDb3VudHJ5IG5hbWU6ICR7ZS5mZWF0dXJlc1swXS5wcm9wZXJ0aWVzLm5hbWV9YClcbiAgICAgKiAgICAgLmFkZFRvKG1hcCk7XG4gICAgICogfSk7XG4gICAgICogQHNlZSBbRGlzcGxheSBwb3B1cCBvbiBjbGlja10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAtb24tY2xpY2svKVxuICAgICAqIEBzZWUgW0NlbnRlciB0aGUgbWFwIG9uIGEgY2xpY2tlZCBzeW1ib2xdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2NlbnRlci1vbi1zeW1ib2wvKVxuICAgICAqIEBzZWUgW0NyZWF0ZSBhIGhvdmVyIGVmZmVjdF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvaG92ZXItc3R5bGVzLylcbiAgICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgbWFya2VyXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9kcmFnLWEtcG9pbnQvKVxuICAgICAqL1xuICAgIG9uKHR5cGU6IE1hcEV2ZW50LCBsYXllcklkOiBhbnksIGxpc3RlbmVyOiBhbnkpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5vbih0eXBlLCBsYXllcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlbGVnYXRlZExpc3RlbmVyID0gdGhpcy5fY3JlYXRlRGVsZWdhdGVkTGlzdGVuZXIodHlwZSwgbGF5ZXJJZCwgbGlzdGVuZXIpO1xuXG4gICAgICAgIHRoaXMuX2RlbGVnYXRlZExpc3RlbmVycyA9IHRoaXMuX2RlbGVnYXRlZExpc3RlbmVycyB8fCB7fTtcbiAgICAgICAgdGhpcy5fZGVsZWdhdGVkTGlzdGVuZXJzW3R5cGVdID0gdGhpcy5fZGVsZWdhdGVkTGlzdGVuZXJzW3R5cGVdIHx8IFtdO1xuICAgICAgICB0aGlzLl9kZWxlZ2F0ZWRMaXN0ZW5lcnNbdHlwZV0ucHVzaChkZWxlZ2F0ZWRMaXN0ZW5lcik7XG5cbiAgICAgICAgZm9yIChjb25zdCBldmVudCBpbiBkZWxlZ2F0ZWRMaXN0ZW5lci5kZWxlZ2F0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMub24oKGV2ZW50OiBhbnkpLCBkZWxlZ2F0ZWRMaXN0ZW5lci5kZWxlZ2F0ZXNbZXZlbnRdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgY2FsbGVkIG9ubHkgb25jZSB0byBhIHNwZWNpZmllZCBldmVudCB0eXBlLlxuICAgICAqXG4gICAgICogQG1ldGhvZFxuICAgICAqIEBuYW1lIG9uY2VcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUgdG8gYWRkIGEgbGlzdGVuZXIgZm9yLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZmlyZWQuXG4gICAgICogICBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIGRhdGEgb2JqZWN0IHBhc3NlZCB0byBgZmlyZWAsXG4gICAgICogICBleHRlbmRlZCB3aXRoIGB0YXJnZXRgIGFuZCBgdHlwZWAgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgY2FsbGVkIG9ubHkgb25jZSB0byBhIHNwZWNpZmllZCBldmVudCB0eXBlIG9jY3VycmluZyBvbiBmZWF0dXJlcyBpbiBhIHNwZWNpZmllZCBzdHlsZSBsYXllci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlIHRvIGxpc3RlbiBmb3I7IG9uZSBvZiBgJ21vdXNlZG93bidgLCBgJ21vdXNldXAnYCwgYCdjbGljaydgLCBgJ2RibGNsaWNrJ2AsXG4gICAgICogYCdtb3VzZW1vdmUnYCwgYCdtb3VzZWVudGVyJ2AsIGAnbW91c2VsZWF2ZSdgLCBgJ21vdXNlb3ZlcidgLCBgJ21vdXNlb3V0J2AsIGAnY29udGV4dG1lbnUnYCwgYCd0b3VjaHN0YXJ0J2AsXG4gICAgICogYCd0b3VjaGVuZCdgLCBvciBgJ3RvdWNoY2FuY2VsJ2AuIGBtb3VzZWVudGVyYCBhbmQgYG1vdXNlb3ZlcmAgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgY3Vyc29yIGVudGVyc1xuICAgICAqIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBzcGVjaWZpZWQgbGF5ZXIgZnJvbSBvdXRzaWRlIHRoYXQgbGF5ZXIgb3Igb3V0c2lkZSB0aGUgbWFwIGNhbnZhcy4gYG1vdXNlbGVhdmVgXG4gICAgICogYW5kIGBtb3VzZW91dGAgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgY3Vyc29yIGxlYXZlcyBhIHZpc2libGUgcG9ydGlvbiBvZiB0aGUgc3BlY2lmaWVkIGxheWVyLCBvciBsZWF2ZXNcbiAgICAgKiB0aGUgbWFwIGNhbnZhcy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJJZCBUaGUgSUQgb2YgYSBzdHlsZSBsYXllci4gT25seSBldmVudHMgd2hvc2UgbG9jYXRpb24gaXMgd2l0aGluIGEgdmlzaWJsZVxuICAgICAqIGZlYXR1cmUgaW4gdGhpcyBsYXllciB3aWxsIHRyaWdnZXIgdGhlIGxpc3RlbmVyLiBUaGUgZXZlbnQgd2lsbCBoYXZlIGEgYGZlYXR1cmVzYCBwcm9wZXJ0eSBjb250YWluaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIG1hdGNoaW5nIGZlYXR1cmVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZmlyZWQuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG5cbiAgICBvbmNlKHR5cGU6IE1hcEV2ZW50LCBsYXllcklkOiBhbnksIGxpc3RlbmVyOiBhbnkpIHtcblxuICAgICAgICBpZiAobGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLm9uY2UodHlwZSwgbGF5ZXJJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWxlZ2F0ZWRMaXN0ZW5lciA9IHRoaXMuX2NyZWF0ZURlbGVnYXRlZExpc3RlbmVyKHR5cGUsIGxheWVySWQsIGxpc3RlbmVyKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IGluIGRlbGVnYXRlZExpc3RlbmVyLmRlbGVnYXRlcykge1xuICAgICAgICAgICAgdGhpcy5vbmNlKChldmVudDogYW55KSwgZGVsZWdhdGVkTGlzdGVuZXIuZGVsZWdhdGVzW2V2ZW50XSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyIHByZXZpb3VzbHkgYWRkZWQgd2l0aCBgTWFwI29uYC5cbiAgICAgKlxuICAgICAqIEBtZXRob2RcbiAgICAgKiBAbmFtZSBvZmZcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUgcHJldmlvdXNseSB1c2VkIHRvIGluc3RhbGwgdGhlIGxpc3RlbmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBmdW5jdGlvbiBwcmV2aW91c2x5IGluc3RhbGxlZCBhcyBhIGxpc3RlbmVyLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBmb3IgbGF5ZXItc3BlY2lmaWMgZXZlbnRzIHByZXZpb3VzbHkgYWRkZWQgd2l0aCBgTWFwI29uYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlIHByZXZpb3VzbHkgdXNlZCB0byBpbnN0YWxsIHRoZSBsaXN0ZW5lci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJJZCBUaGUgbGF5ZXIgSUQgcHJldmlvdXNseSB1c2VkIHRvIGluc3RhbGwgdGhlIGxpc3RlbmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBmdW5jdGlvbiBwcmV2aW91c2x5IGluc3RhbGxlZCBhcyBhIGxpc3RlbmVyLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqL1xuICAgIG9mZih0eXBlOiBNYXBFdmVudCwgbGF5ZXJJZDogYW55LCBsaXN0ZW5lcjogYW55KSB7XG4gICAgICAgIGlmIChsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIub2ZmKHR5cGUsIGxheWVySWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVtb3ZlRGVsZWdhdGVkTGlzdGVuZXIgPSAoZGVsZWdhdGVkTGlzdGVuZXJzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBkZWxlZ2F0ZWRMaXN0ZW5lcnNbdHlwZV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlbGVnYXRlZExpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChkZWxlZ2F0ZWRMaXN0ZW5lci5sYXllciA9PT0gbGF5ZXJJZCAmJiBkZWxlZ2F0ZWRMaXN0ZW5lci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBldmVudCBpbiBkZWxlZ2F0ZWRMaXN0ZW5lci5kZWxlZ2F0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2ZmKChldmVudDogYW55KSwgZGVsZWdhdGVkTGlzdGVuZXIuZGVsZWdhdGVzW2V2ZW50XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLl9kZWxlZ2F0ZWRMaXN0ZW5lcnMgJiYgdGhpcy5fZGVsZWdhdGVkTGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICByZW1vdmVEZWxlZ2F0ZWRMaXN0ZW5lcih0aGlzLl9kZWxlZ2F0ZWRMaXN0ZW5lcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBbR2VvSlNPTl0oaHR0cDovL2dlb2pzb24ub3JnLylcbiAgICAgKiBbRmVhdHVyZSBvYmplY3RzXShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzk0NiNzZWN0aW9uLTMuMilcbiAgICAgKiByZXByZXNlbnRpbmcgdmlzaWJsZSBmZWF0dXJlcyB0aGF0IHNhdGlzZnkgdGhlIHF1ZXJ5IHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BvaW50TGlrZXxBcnJheTxQb2ludExpa2U+fSBbZ2VvbWV0cnldIC0gVGhlIGdlb21ldHJ5IG9mIHRoZSBxdWVyeSByZWdpb246XG4gICAgICogZWl0aGVyIGEgc2luZ2xlIHBvaW50IG9yIHNvdXRod2VzdCBhbmQgbm9ydGhlYXN0IHBvaW50cyBkZXNjcmliaW5nIGEgYm91bmRpbmcgYm94LlxuICAgICAqIE9taXR0aW5nIHRoaXMgcGFyYW1ldGVyIChpLmUuIGNhbGxpbmcge0BsaW5rIE1hcCNxdWVyeVJlbmRlcmVkRmVhdHVyZXN9IHdpdGggemVybyBhcmd1bWVudHMsXG4gICAgICogb3Igd2l0aCBvbmx5IGEgYG9wdGlvbnNgIGFyZ3VtZW50KSBpcyBlcXVpdmFsZW50IHRvIHBhc3NpbmcgYSBib3VuZGluZyBib3ggZW5jb21wYXNzaW5nIHRoZSBlbnRpcmVcbiAgICAgKiBtYXAgdmlld3BvcnQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IFtvcHRpb25zLmxheWVyc10gQW4gYXJyYXkgb2YgW3N0eWxlIGxheWVyIElEc10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvI2xheWVyLWlkKSBmb3IgdGhlIHF1ZXJ5IHRvIGluc3BlY3QuXG4gICAgICogICBPbmx5IGZlYXR1cmVzIHdpdGhpbiB0aGVzZSBsYXllcnMgd2lsbCBiZSByZXR1cm5lZC4gSWYgdGhpcyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLCBhbGwgbGF5ZXJzIHdpbGwgYmUgY2hlY2tlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5maWx0ZXJdIEEgW2ZpbHRlcl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvbGF5ZXJzLyNmaWx0ZXIpXG4gICAgICogICB0byBsaW1pdCBxdWVyeSByZXN1bHRzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudmFsaWRhdGU9dHJ1ZV0gV2hldGhlciB0byBjaGVjayBpZiB0aGUgW29wdGlvbnMuZmlsdGVyXSBjb25mb3JtcyB0byB0aGUgTWFwYm94IEdMIFN0eWxlIFNwZWNpZmljYXRpb24uIERpc2FibGluZyB2YWxpZGF0aW9uIGlzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHRoYXQgc2hvdWxkIG9ubHkgYmUgdXNlZCBpZiB5b3UgaGF2ZSBwcmV2aW91c2x5IHZhbGlkYXRlZCB0aGUgdmFsdWVzIHlvdSB3aWxsIGJlIHBhc3NpbmcgdG8gdGhpcyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtBcnJheTxPYmplY3Q+fSBBbiBhcnJheSBvZiBbR2VvSlNPTl0oaHR0cDovL2dlb2pzb24ub3JnLylcbiAgICAgKiBbZmVhdHVyZSBvYmplY3RzXShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzk0NiNzZWN0aW9uLTMuMikuXG4gICAgICpcbiAgICAgKiBUaGUgYHByb3BlcnRpZXNgIHZhbHVlIG9mIGVhY2ggcmV0dXJuZWQgZmVhdHVyZSBvYmplY3QgY29udGFpbnMgdGhlIHByb3BlcnRpZXMgb2YgaXRzIHNvdXJjZSBmZWF0dXJlLiBGb3IgR2VvSlNPTiBzb3VyY2VzLCBvbmx5XG4gICAgICogc3RyaW5nIGFuZCBudW1lcmljIHByb3BlcnR5IHZhbHVlcyBhcmUgc3VwcG9ydGVkIChpLmUuIGBudWxsYCwgYEFycmF5YCwgYW5kIGBPYmplY3RgIHZhbHVlcyBhcmUgbm90IHN1cHBvcnRlZCkuXG4gICAgICpcbiAgICAgKiBFYWNoIGZlYXR1cmUgaW5jbHVkZXMgdG9wLWxldmVsIGBsYXllcmAsIGBzb3VyY2VgLCBhbmQgYHNvdXJjZUxheWVyYCBwcm9wZXJ0aWVzLiBUaGUgYGxheWVyYCBwcm9wZXJ0eSBpcyBhbiBvYmplY3RcbiAgICAgKiByZXByZXNlbnRpbmcgdGhlIHN0eWxlIGxheWVyIHRvICB3aGljaCB0aGUgZmVhdHVyZSBiZWxvbmdzLiBMYXlvdXQgYW5kIHBhaW50IHByb3BlcnRpZXMgaW4gdGhpcyBvYmplY3QgY29udGFpbiB2YWx1ZXNcbiAgICAgKiB3aGljaCBhcmUgZnVsbHkgZXZhbHVhdGVkIGZvciB0aGUgZ2l2ZW4gem9vbSBsZXZlbCBhbmQgZmVhdHVyZS5cbiAgICAgKlxuICAgICAqIE9ubHkgZmVhdHVyZXMgdGhhdCBhcmUgY3VycmVudGx5IHJlbmRlcmVkIGFyZSBpbmNsdWRlZC4gU29tZSBmZWF0dXJlcyB3aWxsICoqbm90KiogYmUgaW5jbHVkZWQsIGxpa2U6XG4gICAgICpcbiAgICAgKiAtIEZlYXR1cmVzIGZyb20gbGF5ZXJzIHdob3NlIGB2aXNpYmlsaXR5YCBwcm9wZXJ0eSBpcyBgXCJub25lXCJgLlxuICAgICAqIC0gRmVhdHVyZXMgZnJvbSBsYXllcnMgd2hvc2Ugem9vbSByYW5nZSBleGNsdWRlcyB0aGUgY3VycmVudCB6b29tIGxldmVsLlxuICAgICAqIC0gU3ltYm9sIGZlYXR1cmVzIHRoYXQgaGF2ZSBiZWVuIGhpZGRlbiBkdWUgdG8gdGV4dCBvciBpY29uIGNvbGxpc2lvbi5cbiAgICAgKlxuICAgICAqIEZlYXR1cmVzIGZyb20gYWxsIG90aGVyIGxheWVycyBhcmUgaW5jbHVkZWQsIGluY2x1ZGluZyBmZWF0dXJlcyB0aGF0IG1heSBoYXZlIG5vIHZpc2libGVcbiAgICAgKiBjb250cmlidXRpb24gdG8gdGhlIHJlbmRlcmVkIHJlc3VsdDsgZm9yIGV4YW1wbGUsIGJlY2F1c2UgdGhlIGxheWVyJ3Mgb3BhY2l0eSBvciBjb2xvciBhbHBoYSBjb21wb25lbnQgaXMgc2V0IHRvXG4gICAgICogMC5cbiAgICAgKlxuICAgICAqIFRoZSB0b3Btb3N0IHJlbmRlcmVkIGZlYXR1cmUgYXBwZWFycyBmaXJzdCBpbiB0aGUgcmV0dXJuZWQgYXJyYXksIGFuZCBzdWJzZXF1ZW50IGZlYXR1cmVzIGFyZSBzb3J0ZWQgYnlcbiAgICAgKiBkZXNjZW5kaW5nIHotb3JkZXIuIEZlYXR1cmVzIHRoYXQgYXJlIHJlbmRlcmVkIG11bHRpcGxlIHRpbWVzIChkdWUgdG8gd3JhcHBpbmcgYWNyb3NzIHRoZSBhbnRpbWVyaWRpYW4gYXQgbG93XG4gICAgICogem9vbSBsZXZlbHMpIGFyZSByZXR1cm5lZCBvbmx5IG9uY2UgKHRob3VnaCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY2F2ZWF0KS5cbiAgICAgKlxuICAgICAqIEJlY2F1c2UgZmVhdHVyZXMgY29tZSBmcm9tIHRpbGVkIHZlY3RvciBkYXRhIG9yIEdlb0pTT04gZGF0YSB0aGF0IGlzIGNvbnZlcnRlZCB0byB0aWxlcyBpbnRlcm5hbGx5LCBmZWF0dXJlXG4gICAgICogZ2VvbWV0cmllcyBtYXkgYmUgc3BsaXQgb3IgZHVwbGljYXRlZCBhY3Jvc3MgdGlsZSBib3VuZGFyaWVzIGFuZCwgYXMgYSByZXN1bHQsIGZlYXR1cmVzIG1heSBhcHBlYXIgbXVsdGlwbGVcbiAgICAgKiB0aW1lcyBpbiBxdWVyeSByZXN1bHRzLiBGb3IgZXhhbXBsZSwgc3VwcG9zZSB0aGVyZSBpcyBhIGhpZ2h3YXkgcnVubmluZyB0aHJvdWdoIHRoZSBib3VuZGluZyByZWN0YW5nbGUgb2YgYSBxdWVyeS5cbiAgICAgKiBUaGUgcmVzdWx0cyBvZiB0aGUgcXVlcnkgd2lsbCBiZSB0aG9zZSBwYXJ0cyBvZiB0aGUgaGlnaHdheSB0aGF0IGxpZSB3aXRoaW4gdGhlIG1hcCB0aWxlcyBjb3ZlcmluZyB0aGUgYm91bmRpbmdcbiAgICAgKiByZWN0YW5nbGUsIGV2ZW4gaWYgdGhlIGhpZ2h3YXkgZXh0ZW5kcyBpbnRvIG90aGVyIHRpbGVzLCBhbmQgdGhlIHBvcnRpb24gb2YgdGhlIGhpZ2h3YXkgd2l0aGluIGVhY2ggbWFwIHRpbGVcbiAgICAgKiB3aWxsIGJlIHJldHVybmVkIGFzIGEgc2VwYXJhdGUgZmVhdHVyZS4gU2ltaWxhcmx5LCBhIHBvaW50IGZlYXR1cmUgbmVhciBhIHRpbGUgYm91bmRhcnkgbWF5IGFwcGVhciBpbiBtdWx0aXBsZVxuICAgICAqIHRpbGVzIGR1ZSB0byB0aWxlIGJ1ZmZlcmluZy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gRmluZCBhbGwgZmVhdHVyZXMgYXQgYSBwb2ludFxuICAgICAqIHZhciBmZWF0dXJlcyA9IG1hcC5xdWVyeVJlbmRlcmVkRmVhdHVyZXMoXG4gICAgICogICBbMjAsIDM1XSxcbiAgICAgKiAgIHsgbGF5ZXJzOiBbJ215LWxheWVyLW5hbWUnXSB9XG4gICAgICogKTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gRmluZCBhbGwgZmVhdHVyZXMgd2l0aGluIGEgc3RhdGljIGJvdW5kaW5nIGJveFxuICAgICAqIHZhciBmZWF0dXJlcyA9IG1hcC5xdWVyeVJlbmRlcmVkRmVhdHVyZXMoXG4gICAgICogICBbWzEwLCAyMF0sIFszMCwgNTBdXSxcbiAgICAgKiAgIHsgbGF5ZXJzOiBbJ215LWxheWVyLW5hbWUnXSB9XG4gICAgICogKTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gRmluZCBhbGwgZmVhdHVyZXMgd2l0aGluIGEgYm91bmRpbmcgYm94IGFyb3VuZCBhIHBvaW50XG4gICAgICogdmFyIHdpZHRoID0gMTA7XG4gICAgICogdmFyIGhlaWdodCA9IDIwO1xuICAgICAqIHZhciBmZWF0dXJlcyA9IG1hcC5xdWVyeVJlbmRlcmVkRmVhdHVyZXMoW1xuICAgICAqICAgW3BvaW50LnggLSB3aWR0aCAvIDIsIHBvaW50LnkgLSBoZWlnaHQgLyAyXSxcbiAgICAgKiAgIFtwb2ludC54ICsgd2lkdGggLyAyLCBwb2ludC55ICsgaGVpZ2h0IC8gMl1cbiAgICAgKiBdLCB7IGxheWVyczogWydteS1sYXllci1uYW1lJ10gfSk7XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFF1ZXJ5IGFsbCByZW5kZXJlZCBmZWF0dXJlcyBmcm9tIGEgc2luZ2xlIGxheWVyXG4gICAgICogdmFyIGZlYXR1cmVzID0gbWFwLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyh7IGxheWVyczogWydteS1sYXllci1uYW1lJ10gfSk7XG4gICAgICogQHNlZSBbR2V0IGZlYXR1cmVzIHVuZGVyIHRoZSBtb3VzZSBwb2ludGVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3F1ZXJ5cmVuZGVyZWRmZWF0dXJlcy8pXG4gICAgICogQHNlZSBbSGlnaGxpZ2h0IGZlYXR1cmVzIHdpdGhpbiBhIGJvdW5kaW5nIGJveF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS91c2luZy1ib3gtcXVlcnlyZW5kZXJlZGZlYXR1cmVzLylcbiAgICAgKiBAc2VlIFtGaWx0ZXIgZmVhdHVyZXMgd2l0aGluIG1hcCB2aWV3XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2ZpbHRlci1mZWF0dXJlcy13aXRoaW4tbWFwLXZpZXcvKVxuICAgICAqL1xuICAgIHF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhnZW9tZXRyeT86IFBvaW50TGlrZSB8IFtQb2ludExpa2UsIFBvaW50TGlrZV0sIG9wdGlvbnM/OiBPYmplY3QpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHBhcmFtZXRlciBjYW4gYmUgb21pdHRlZCBlbnRpcmVseSwgbWFraW5nIHRoaXMgZWZmZWN0aXZlbHkgYW4gb3ZlcmxvYWRlZCBtZXRob2RcbiAgICAgICAgLy8gd2l0aCB0d28gc2lnbmF0dXJlczpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIHF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhnZW9tZXRyeTogUG9pbnRMaWtlIHwgW1BvaW50TGlrZSwgUG9pbnRMaWtlXSwgb3B0aW9ucz86IE9iamVjdClcbiAgICAgICAgLy8gICAgIHF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhvcHRpb25zPzogT2JqZWN0KVxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGVyZSBubyB3YXkgdG8gZXhwcmVzcyB0aGF0IGluIGEgd2F5IHRoYXQncyBjb21wYXRpYmxlIHdpdGggYm90aCBmbG93IGFuZCBkb2N1bWVudGF0aW9uLmpzLlxuICAgICAgICAvLyBSZWxhdGVkOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTU1NlxuXG4gICAgICAgIGlmICghdGhpcy5zdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkICYmICEoZ2VvbWV0cnkgaW5zdGFuY2VvZiBQb2ludCkgJiYgIUFycmF5LmlzQXJyYXkoZ2VvbWV0cnkpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gKGdlb21ldHJ5OiBPYmplY3QpO1xuICAgICAgICAgICAgZ2VvbWV0cnkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgZ2VvbWV0cnkgPSBnZW9tZXRyeSB8fCBbWzAsIDBdLCBbdGhpcy50cmFuc2Zvcm0ud2lkdGgsIHRoaXMudHJhbnNmb3JtLmhlaWdodF1dO1xuXG4gICAgICAgIGxldCBxdWVyeUdlb21ldHJ5O1xuICAgICAgICBpZiAoZ2VvbWV0cnkgaW5zdGFuY2VvZiBQb2ludCB8fCB0eXBlb2YgZ2VvbWV0cnlbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBxdWVyeUdlb21ldHJ5ID0gW1BvaW50LmNvbnZlcnQoZ2VvbWV0cnkpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRsID0gUG9pbnQuY29udmVydChnZW9tZXRyeVswXSk7XG4gICAgICAgICAgICBjb25zdCBiciA9IFBvaW50LmNvbnZlcnQoZ2VvbWV0cnlbMV0pO1xuICAgICAgICAgICAgcXVlcnlHZW9tZXRyeSA9IFt0bCwgbmV3IFBvaW50KGJyLngsIHRsLnkpLCBiciwgbmV3IFBvaW50KHRsLngsIGJyLnkpLCB0bF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5xdWVyeVJlbmRlcmVkRmVhdHVyZXMocXVlcnlHZW9tZXRyeSwgb3B0aW9ucywgdGhpcy50cmFuc2Zvcm0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgW0dlb0pTT05dKGh0dHA6Ly9nZW9qc29uLm9yZy8pXG4gICAgICogW0ZlYXR1cmUgb2JqZWN0c10oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc5NDYjc2VjdGlvbi0zLjIpXG4gICAgICogcmVwcmVzZW50aW5nIGZlYXR1cmVzIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHZlY3RvciB0aWxlIG9yIEdlb0pTT04gc291cmNlIHRoYXQgc2F0aXNmeSB0aGUgcXVlcnkgcGFyYW1ldGVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VJZCBUaGUgSUQgb2YgdGhlIHZlY3RvciB0aWxlIG9yIEdlb0pTT04gc291cmNlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gT3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbWV0ZXJzLnNvdXJjZUxheWVyXSBUaGUgbmFtZSBvZiB0aGUgW3NvdXJjZSBsYXllcl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vaGVscC9nbG9zc2FyeS9zb3VyY2UtbGF5ZXIvKVxuICAgICAqICAgdG8gcXVlcnkuICpGb3IgdmVjdG9yIHRpbGUgc291cmNlcywgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuKiBGb3IgR2VvSlNPTiBzb3VyY2VzLCBpdCBpcyBpZ25vcmVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJhbWV0ZXJzLmZpbHRlcl0gQSBbZmlsdGVyXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy9sYXllcnMvI2ZpbHRlcilcbiAgICAgKiAgIHRvIGxpbWl0IHF1ZXJ5IHJlc3VsdHMuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcGFyYW1ldGVycy52YWxpZGF0ZT10cnVlXSBXaGV0aGVyIHRvIGNoZWNrIGlmIHRoZSBbcGFyYW1ldGVycy5maWx0ZXJdIGNvbmZvcm1zIHRvIHRoZSBNYXBib3ggR0wgU3R5bGUgU3BlY2lmaWNhdGlvbi4gRGlzYWJsaW5nIHZhbGlkYXRpb24gaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gdGhhdCBzaG91bGQgb25seSBiZSB1c2VkIGlmIHlvdSBoYXZlIHByZXZpb3VzbHkgdmFsaWRhdGVkIHRoZSB2YWx1ZXMgeW91IHdpbGwgYmUgcGFzc2luZyB0byB0aGlzIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0FycmF5PE9iamVjdD59IEFuIGFycmF5IG9mIFtHZW9KU09OXShodHRwOi8vZ2VvanNvbi5vcmcvKVxuICAgICAqIFtGZWF0dXJlIG9iamVjdHNdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3OTQ2I3NlY3Rpb24tMy4yKS5cbiAgICAgKlxuICAgICAqIEluIGNvbnRyYXN0IHRvIHtAbGluayBNYXAjcXVlcnlSZW5kZXJlZEZlYXR1cmVzfSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFsbCBmZWF0dXJlcyBtYXRjaGluZyB0aGUgcXVlcnkgcGFyYW1ldGVycyxcbiAgICAgKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSByZW5kZXJlZCBieSB0aGUgY3VycmVudCBzdHlsZSAoaS5lLiB2aXNpYmxlKS4gVGhlIGRvbWFpbiBvZiB0aGUgcXVlcnkgaW5jbHVkZXMgYWxsIGN1cnJlbnRseS1sb2FkZWRcbiAgICAgKiB2ZWN0b3IgdGlsZXMgYW5kIEdlb0pTT04gc291cmNlIHRpbGVzOiB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNoZWNrIHRpbGVzIG91dHNpZGUgdGhlIGN1cnJlbnRseVxuICAgICAqIHZpc2libGUgdmlld3BvcnQuXG4gICAgICpcbiAgICAgKiBCZWNhdXNlIGZlYXR1cmVzIGNvbWUgZnJvbSB0aWxlZCB2ZWN0b3IgZGF0YSBvciBHZW9KU09OIGRhdGEgdGhhdCBpcyBjb252ZXJ0ZWQgdG8gdGlsZXMgaW50ZXJuYWxseSwgZmVhdHVyZVxuICAgICAqIGdlb21ldHJpZXMgbWF5IGJlIHNwbGl0IG9yIGR1cGxpY2F0ZWQgYWNyb3NzIHRpbGUgYm91bmRhcmllcyBhbmQsIGFzIGEgcmVzdWx0LCBmZWF0dXJlcyBtYXkgYXBwZWFyIG11bHRpcGxlXG4gICAgICogdGltZXMgaW4gcXVlcnkgcmVzdWx0cy4gRm9yIGV4YW1wbGUsIHN1cHBvc2UgdGhlcmUgaXMgYSBoaWdod2F5IHJ1bm5pbmcgdGhyb3VnaCB0aGUgYm91bmRpbmcgcmVjdGFuZ2xlIG9mIGEgcXVlcnkuXG4gICAgICogVGhlIHJlc3VsdHMgb2YgdGhlIHF1ZXJ5IHdpbGwgYmUgdGhvc2UgcGFydHMgb2YgdGhlIGhpZ2h3YXkgdGhhdCBsaWUgd2l0aGluIHRoZSBtYXAgdGlsZXMgY292ZXJpbmcgdGhlIGJvdW5kaW5nXG4gICAgICogcmVjdGFuZ2xlLCBldmVuIGlmIHRoZSBoaWdod2F5IGV4dGVuZHMgaW50byBvdGhlciB0aWxlcywgYW5kIHRoZSBwb3J0aW9uIG9mIHRoZSBoaWdod2F5IHdpdGhpbiBlYWNoIG1hcCB0aWxlXG4gICAgICogd2lsbCBiZSByZXR1cm5lZCBhcyBhIHNlcGFyYXRlIGZlYXR1cmUuIFNpbWlsYXJseSwgYSBwb2ludCBmZWF0dXJlIG5lYXIgYSB0aWxlIGJvdW5kYXJ5IG1heSBhcHBlYXIgaW4gbXVsdGlwbGVcbiAgICAgKiB0aWxlcyBkdWUgdG8gdGlsZSBidWZmZXJpbmcuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEZpbmQgYWxsIGZlYXR1cmVzIGluIG9uZSBzb3VyY2UgbGF5ZXIgaW4gYSB2ZWN0b3Igc291cmNlXG4gICAgICogdmFyIGZlYXR1cmVzID0gbWFwLnF1ZXJ5U291cmNlRmVhdHVyZXMoJ3lvdXItc291cmNlLWlkJywge1xuICAgICAqICAgc291cmNlTGF5ZXI6ICd5b3VyLXNvdXJjZS1sYXllcidcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIEBzZWUgW0hpZ2hsaWdodCBmZWF0dXJlcyBjb250YWluaW5nIHNpbWlsYXIgZGF0YV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9xdWVyeS1zaW1pbGFyLWZlYXR1cmVzLylcbiAgICAgKi9cbiAgICBxdWVyeVNvdXJjZUZlYXR1cmVzKHNvdXJjZUlkOiBzdHJpbmcsIHBhcmFtZXRlcnM6ID97c291cmNlTGF5ZXI6ID9zdHJpbmcsIGZpbHRlcjogP0FycmF5PGFueT4sIHZhbGlkYXRlPzogYm9vbGVhbn0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUucXVlcnlTb3VyY2VGZWF0dXJlcyhzb3VyY2VJZCwgcGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgbWFwJ3MgTWFwYm94IHN0eWxlIG9iamVjdCB3aXRoIGEgbmV3IHZhbHVlLlxuICAgICAqXG4gICAgICogSWYgYSBzdHlsZSBpcyBhbHJlYWR5IHNldCB3aGVuIHRoaXMgaXMgdXNlZCBhbmQgb3B0aW9ucy5kaWZmIGlzIHNldCB0byB0cnVlLCB0aGUgbWFwIHJlbmRlcmVyIHdpbGwgYXR0ZW1wdCB0byBjb21wYXJlIHRoZSBnaXZlbiBzdHlsZVxuICAgICAqIGFnYWluc3QgdGhlIG1hcCdzIGN1cnJlbnQgc3RhdGUgYW5kIHBlcmZvcm0gb25seSB0aGUgY2hhbmdlcyBuZWNlc3NhcnkgdG8gbWFrZSB0aGUgbWFwIHN0eWxlIG1hdGNoIHRoZSBkZXNpcmVkIHN0YXRlLiBDaGFuZ2VzIGluIHNwcml0ZXNcbiAgICAgKiAoaW1hZ2VzIHVzZWQgZm9yIGljb25zIGFuZCBwYXR0ZXJucykgYW5kIGdseXBocyAoZm9udHMgZm9yIGxhYmVsIHRleHQpICoqY2Fubm90KiogYmUgZGlmZmVkLiBJZiB0aGUgc3ByaXRlcyBvciBmb250cyB1c2VkIGluIHRoZSBjdXJyZW50XG4gICAgICogc3R5bGUgYW5kIHRoZSBnaXZlbiBzdHlsZSBhcmUgZGlmZmVyZW50IGluIGFueSB3YXksIHRoZSBtYXAgcmVuZGVyZXIgd2lsbCBmb3JjZSBhIGZ1bGwgdXBkYXRlLCByZW1vdmluZyB0aGUgY3VycmVudCBzdHlsZSBhbmQgYnVpbGRpbmdcbiAgICAgKiB0aGUgZ2l2ZW4gb25lIGZyb20gc2NyYXRjaC5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0eWxlIEEgSlNPTiBvYmplY3QgY29uZm9ybWluZyB0byB0aGUgc2NoZW1hIGRlc2NyaWJlZCBpbiB0aGVcbiAgICAgKiAgIFtNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9tYXBib3guY29tL21hcGJveC1nbC1zdHlsZS1zcGVjLyksIG9yIGEgVVJMIHRvIHN1Y2ggSlNPTi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGlmZj10cnVlXSBJZiBmYWxzZSwgZm9yY2UgYSAnZnVsbCcgdXBkYXRlLCByZW1vdmluZyB0aGUgY3VycmVudCBzdHlsZVxuICAgICAqICAgYW5kIGJ1aWxkaW5nIHRoZSBnaXZlbiBvbmUgaW5zdGVhZCBvZiBhdHRlbXB0aW5nIGEgZGlmZi1iYXNlZCB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsSWRlb2dyYXBoRm9udEZhbWlseT0nc2Fucy1zZXJpZiddIERlZmluZXMgYSBDU1NcbiAgICAgKiAgIGZvbnQtZmFtaWx5IGZvciBsb2NhbGx5IG92ZXJyaWRpbmcgZ2VuZXJhdGlvbiBvZiBnbHlwaHMgaW4gdGhlICdDSksgVW5pZmllZCBJZGVvZ3JhcGhzJywgJ0hpcmFnYW5hJywgJ0thdGFrYW5hJyBhbmQgJ0hhbmd1bCBTeWxsYWJsZXMnIHJhbmdlcy5cbiAgICAgKiAgIEluIHRoZXNlIHJhbmdlcywgZm9udCBzZXR0aW5ncyBmcm9tIHRoZSBtYXAncyBzdHlsZSB3aWxsIGJlIGlnbm9yZWQsIGV4Y2VwdCBmb3IgZm9udC13ZWlnaHQga2V5d29yZHMgKGxpZ2h0L3JlZ3VsYXIvbWVkaXVtL2JvbGQpLlxuICAgICAqICAgU2V0IHRvIGBmYWxzZWAsIHRvIGVuYWJsZSBmb250IHNldHRpbmdzIGZyb20gdGhlIG1hcCdzIHN0eWxlIGZvciB0aGVzZSBnbHlwaCByYW5nZXMuXG4gICAgICogICBGb3JjZXMgYSBmdWxsIHVwZGF0ZS5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnNldFN0eWxlKFwibWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMVwiKTtcbiAgICAgKlxuICAgICAqIEBzZWUgW0NoYW5nZSBhIG1hcCdzIHN0eWxlXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3NldHN0eWxlLylcbiAgICAgKi9cbiAgICBzZXRTdHlsZShzdHlsZTogU3R5bGVTcGVjaWZpY2F0aW9uIHwgc3RyaW5nIHwgbnVsbCwgb3B0aW9ucz86IHtkaWZmPzogYm9vbGVhbn0gJiBTdHlsZU9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7fSwge2xvY2FsSWRlb2dyYXBoRm9udEZhbWlseTogdGhpcy5fbG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5fSwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKChvcHRpb25zLmRpZmYgIT09IGZhbHNlICYmIG9wdGlvbnMubG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5ID09PSB0aGlzLl9sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHkpICYmIHRoaXMuc3R5bGUgJiYgc3R5bGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2RpZmZTdHlsZShzdHlsZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsSWRlb2dyYXBoRm9udEZhbWlseSA9IG9wdGlvbnMubG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVN0eWxlKHN0eWxlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRVSVN0cmluZyhrZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLl9sb2NhbGVba2V5XTtcbiAgICAgICAgaWYgKHN0ciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgVUkgc3RyaW5nICcke2tleX0nYCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIF91cGRhdGVTdHlsZShzdHlsZTogU3R5bGVTcGVjaWZpY2F0aW9uIHwgc3RyaW5nIHwgbnVsbCwgIG9wdGlvbnM/OiB7ZGlmZj86IGJvb2xlYW59ICYgU3R5bGVPcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLnNldEV2ZW50ZWRQYXJlbnQobnVsbCk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLl9yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlID0gbmV3IFN0eWxlKHRoaXMsIG9wdGlvbnMgfHwge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdHlsZS5zZXRFdmVudGVkUGFyZW50KHRoaXMsIHtzdHlsZTogdGhpcy5zdHlsZX0pO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLmxvYWRVUkwoc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5sb2FkSlNPTihzdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBfbGF6eUluaXRFbXB0eVN0eWxlKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3R5bGUpIHtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUgPSBuZXcgU3R5bGUodGhpcywge30pO1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5zZXRFdmVudGVkUGFyZW50KHRoaXMsIHtzdHlsZTogdGhpcy5zdHlsZX0pO1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5sb2FkRW1wdHkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kaWZmU3R5bGUoc3R5bGU6IFN0eWxlU3BlY2lmaWNhdGlvbiB8IHN0cmluZywgIG9wdGlvbnM/OiB7ZGlmZj86IGJvb2xlYW59ICYgU3R5bGVPcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSB0aGlzLl9yZXF1ZXN0TWFuYWdlci5ub3JtYWxpemVTdHlsZVVSTChzdHlsZSk7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fcmVxdWVzdE1hbmFnZXIudHJhbnNmb3JtUmVxdWVzdCh1cmwsIFJlc291cmNlVHlwZS5TdHlsZSk7XG4gICAgICAgICAgICBnZXRKU09OKHJlcXVlc3QsIChlcnJvcjogP0Vycm9yLCBqc29uOiA/T2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChlcnJvcikpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEaWZmKGpzb24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURpZmYoc3R5bGUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZURpZmYoc3R5bGU6IFN0eWxlU3BlY2lmaWNhdGlvbiwgIG9wdGlvbnM/OiB7ZGlmZj86IGJvb2xlYW59ICYgU3R5bGVPcHRpb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdHlsZS5zZXRTdGF0ZShzdHlsZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gcGVyZm9ybSBzdHlsZSBkaWZmOiAke2UubWVzc2FnZSB8fCBlLmVycm9yIHx8IGV9LiAgUmVidWlsZGluZyB0aGUgc3R5bGUgZnJvbSBzY3JhdGNoLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTdHlsZShzdHlsZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBNYXBib3ggW3N0eWxlXShodHRwczovL2RvY3MubWFwYm94LmNvbS9oZWxwL2dsb3NzYXJ5L3N0eWxlLykgb2JqZWN0LCBhIEpTT04gb2JqZWN0IHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlY3JlYXRlIHRoZSBtYXAncyBzdHlsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBtYXAncyBzdHlsZSBKU09OIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHN0eWxlSnNvbiA9IG1hcC5nZXRTdHlsZSgpO1xuICAgICAqXG4gICAgICovXG4gICAgZ2V0U3R5bGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5zZXJpYWxpemUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgbWFwJ3Mgc3R5bGUgaXMgZnVsbHkgbG9hZGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHN0eWxlIGlzIGZ1bGx5IGxvYWRlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHN0eWxlTG9hZFN0YXR1cyA9IG1hcC5pc1N0eWxlTG9hZGVkKCk7XG4gICAgICovXG4gICAgaXNTdHlsZUxvYWRlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0eWxlKSByZXR1cm4gd2Fybk9uY2UoJ1RoZXJlIGlzIG5vIHN0eWxlIGFkZGVkIHRvIHRoZSBtYXAuJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmxvYWRlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBzb3VyY2UgdG8gdGhlIG1hcCdzIHN0eWxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiB0aGUgc291cmNlIHRvIGFkZC4gTXVzdCBub3QgY29uZmxpY3Qgd2l0aCBleGlzdGluZyBzb3VyY2VzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QsIGNvbmZvcm1pbmcgdG8gdGhlXG4gICAgICogTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb24ncyBbc291cmNlIGRlZmluaXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvI3NvdXJjZXMpIG9yXG4gICAgICoge0BsaW5rIENhbnZhc1NvdXJjZU9wdGlvbnN9LlxuICAgICAqIEBmaXJlcyBzb3VyY2UuYWRkXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuYWRkU291cmNlKCdteS1kYXRhJywge1xuICAgICAqICAgdHlwZTogJ3ZlY3RvcicsXG4gICAgICogICB1cmw6ICdtYXBib3g6Ly9teXVzZXJuYW1lLnRpbGVzZXRpZCdcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC5hZGRTb3VyY2UoJ215LWRhdGEnLCB7XG4gICAgICogICBcInR5cGVcIjogXCJnZW9qc29uXCIsXG4gICAgICogICBcImRhdGFcIjoge1xuICAgICAqICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gICAgICogICAgIFwiZ2VvbWV0cnlcIjoge1xuICAgICAqICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gICAgICogICAgICAgXCJjb29yZGluYXRlc1wiOiBbLTc3LjAzMjMsIDM4LjkxMzFdXG4gICAgICogICAgIH0sXG4gICAgICogICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICogICAgICAgXCJ0aXRsZVwiOiBcIk1hcGJveCBEQ1wiLFxuICAgICAqICAgICAgIFwibWFya2VyLXN5bWJvbFwiOiBcIm1vbnVtZW50XCJcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqIEBzZWUgVmVjdG9yIHNvdXJjZTogW1Nob3cgYW5kIGhpZGUgbGF5ZXJzXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS90b2dnbGUtbGF5ZXJzLylcbiAgICAgKiBAc2VlIEdlb0pTT04gc291cmNlOiBbQWRkIGxpdmUgcmVhbHRpbWUgZGF0YV0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvbGl2ZS1nZW9qc29uLylcbiAgICAgKiBAc2VlIFJhc3RlciBERU0gc291cmNlOiBbQWRkIGhpbGxzaGFkaW5nXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9oaWxsc2hhZGUvKVxuICAgICAqL1xuICAgIGFkZFNvdXJjZShpZDogc3RyaW5nLCBzb3VyY2U6IFNvdXJjZVNwZWNpZmljYXRpb24pIHtcbiAgICAgICAgdGhpcy5fbGF6eUluaXRFbXB0eVN0eWxlKCk7XG4gICAgICAgIHRoaXMuc3R5bGUuYWRkU291cmNlKGlkLCBzb3VyY2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgc291cmNlIGlzIGxvYWRlZC4gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHNvdXJjZSB3aXRoXG4gICAgICogdGhlIGdpdmVuIElEIGluIHRoZSBtYXAncyBzdHlsZSBoYXMgbm8gb3V0c3RhbmRpbmcgbmV0d29yayByZXF1ZXN0cywgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzb3VyY2UgdG8gYmUgY2hlY2tlZC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgc291cmNlIGlzIGxvYWRlZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBzb3VyY2VMb2FkZWQgPSBtYXAuaXNTb3VyY2VMb2FkZWQoJ2JhdGh5bWV0cnktZGF0YScpO1xuICAgICAqL1xuICAgIGlzU291cmNlTG9hZGVkKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5zdHlsZSAmJiB0aGlzLnN0eWxlLnNvdXJjZUNhY2hlc1tpZF07XG4gICAgICAgIGlmIChzb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gc291cmNlIHdpdGggSUQgJyR7aWR9J2ApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZS5sb2FkZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgYWxsIHRpbGVzIGluIHRoZSB2aWV3cG9ydCBmcm9tIGFsbCBzb3VyY2VzIG9uXG4gICAgICogdGhlIHN0eWxlIGFyZSBsb2FkZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciBhbGwgdGlsZXMgYXJlIGxvYWRlZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciB0aWxlc0xvYWRlZCA9IG1hcC5hcmVUaWxlc0xvYWRlZCgpO1xuICAgICAqL1xuXG4gICAgYXJlVGlsZXNMb2FkZWQoKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZXMgPSB0aGlzLnN0eWxlICYmIHRoaXMuc3R5bGUuc291cmNlQ2FjaGVzO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHNvdXJjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbaWRdO1xuICAgICAgICAgICAgY29uc3QgdGlsZXMgPSBzb3VyY2UuX3RpbGVzO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0IGluIHRpbGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRpbGVzW3RdO1xuICAgICAgICAgICAgICAgIGlmICghKHRpbGUuc3RhdGUgPT09ICdsb2FkZWQnIHx8IHRpbGUuc3RhdGUgPT09ICdlcnJvcmVkJykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgW2N1c3RvbSBzb3VyY2UgdHlwZV0oI0N1c3RvbSBTb3VyY2VzKSwgbWFraW5nIGl0IGF2YWlsYWJsZSBmb3IgdXNlIHdpdGhcbiAgICAgKiB7QGxpbmsgTWFwI2FkZFNvdXJjZX0uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc291cmNlIHR5cGU7IHNvdXJjZSBkZWZpbml0aW9uIG9iamVjdHMgdXNlIHRoaXMgbmFtZSBpbiB0aGUgYHt0eXBlOiAuLi59YCBmaWVsZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBTb3VyY2VUeXBlIEEge0BsaW5rIFNvdXJjZX0gY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIHdoZW4gdGhlIHNvdXJjZSB0eXBlIGlzIHJlYWR5IG9yIHdpdGggYW4gZXJyb3IgYXJndW1lbnQgaWYgdGhlcmUgaXMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgYWRkU291cmNlVHlwZShuYW1lOiBzdHJpbmcsIFNvdXJjZVR5cGU6IGFueSwgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuX2xhenlJbml0RW1wdHlTdHlsZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5hZGRTb3VyY2VUeXBlKG5hbWUsIFNvdXJjZVR5cGUsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgc291cmNlIGZyb20gdGhlIG1hcCdzIHN0eWxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiB0aGUgc291cmNlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC5yZW1vdmVTb3VyY2UoJ2JhdGh5bWV0cnktZGF0YScpO1xuICAgICAqL1xuICAgIHJlbW92ZVNvdXJjZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3R5bGUucmVtb3ZlU291cmNlKGlkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzb3VyY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIElEIGluIHRoZSBtYXAncyBzdHlsZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIG9mdGVuIHVzZWQgdG8gdXBkYXRlIGEgc291cmNlIHVzaW5nIHRoZSBpbnN0YW5jZSBtZW1iZXJzIGZvciB0aGUgcmVsZXZhbnRcbiAgICAgKiBzb3VyY2UgdHlwZSBhcyBkZWZpbmVkIGluIFtTb3VyY2VzXSgjc291cmNlcykuXG4gICAgICogRm9yIGV4YW1wbGUsIHNldHRpbmcgdGhlIGBkYXRhYCBmb3IgYSBHZW9KU09OIHNvdXJjZSBvciB1cGRhdGluZyB0aGUgYHVybGAgYW5kIGBjb29yZGluYXRlc2BcbiAgICAgKiBvZiBhbiBpbWFnZSBzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzb3VyY2UgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHs/T2JqZWN0fSBUaGUgc3R5bGUgc291cmNlIHdpdGggdGhlIHNwZWNpZmllZCBJRCBvciBgdW5kZWZpbmVkYCBpZiB0aGUgSURcbiAgICAgKiBjb3JyZXNwb25kcyB0byBubyBleGlzdGluZyBzb3VyY2VzLlxuICAgICAqIFRoZSBzaGFwZSBvZiB0aGUgb2JqZWN0IHZhcmllcyBieSBzb3VyY2UgdHlwZS5cbiAgICAgKiBBIGxpc3Qgb2Ygb3B0aW9ucyBmb3IgZWFjaCBzb3VyY2UgdHlwZSBpcyBhdmFpbGFibGUgb24gdGhlIE1hcGJveCBTdHlsZSBTcGVjaWZpY2F0aW9uJ3NcbiAgICAgKiBbU291cmNlc10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvc291cmNlcy8pIHBhZ2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgc291cmNlT2JqZWN0ID0gbWFwLmdldFNvdXJjZSgncG9pbnRzJyk7XG4gICAgICogQHNlZSBbQ3JlYXRlIGEgZHJhZ2dhYmxlIHBvaW50XShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9kcmFnLWEtcG9pbnQvKVxuICAgICAqIEBzZWUgW0FuaW1hdGUgYSBwb2ludF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYW5pbWF0ZS1wb2ludC1hbG9uZy1saW5lLylcbiAgICAgKiBAc2VlIFtBZGQgbGl2ZSByZWFsdGltZSBkYXRhXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9saXZlLWdlb2pzb24vKVxuICAgICAqL1xuICAgIGdldFNvdXJjZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmdldFNvdXJjZShpZCk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtcmV0dXJuc1xuICAgIC8qKlxuICAgICAqIEFkZCBhbiBpbWFnZSB0byB0aGUgc3R5bGUuIFRoaXMgaW1hZ2UgY2FuIGJlIGRpc3BsYXllZCBvbiB0aGUgbWFwIGxpa2UgYW55IG90aGVyIGljb24gaW4gdGhlIHN0eWxlJ3NcbiAgICAgKiBbc3ByaXRlXShodHRwczovL2RvY3MubWFwYm94LmNvbS9oZWxwL2dsb3NzYXJ5L3Nwcml0ZS8pIHVzaW5nIHRoZSBpbWFnZSdzIElEIHdpdGhcbiAgICAgKiBbYGljb24taW1hZ2VgXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy8jbGF5b3V0LXN5bWJvbC1pY29uLWltYWdlKSxcbiAgICAgKiBbYGJhY2tncm91bmQtcGF0dGVybmBdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjLyNwYWludC1iYWNrZ3JvdW5kLWJhY2tncm91bmQtcGF0dGVybiksXG4gICAgICogW2BmaWxsLXBhdHRlcm5gXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy8jcGFpbnQtZmlsbC1maWxsLXBhdHRlcm4pLFxuICAgICAqIG9yIFtgbGluZS1wYXR0ZXJuYF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvI3BhaW50LWxpbmUtbGluZS1wYXR0ZXJuKS5cbiAgICAgKiBBIHtAbGluayBNYXAuZXZlbnQ6ZXJyb3J9IGV2ZW50IHdpbGwgYmUgZmlyZWQgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBzcGFjZSBpbiB0aGUgc3ByaXRlIHRvIGFkZCB0aGlzIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIFRoZSBJRCBvZiB0aGUgaW1hZ2UuXG4gICAgICogQHBhcmFtIGltYWdlIFRoZSBpbWFnZSBhcyBhbiBgSFRNTEltYWdlRWxlbWVudGAsIGBJbWFnZURhdGFgLCBgSW1hZ2VCaXRtYXBgIG9yIG9iamVjdCB3aXRoIGB3aWR0aGAsIGBoZWlnaHRgLCBhbmQgYGRhdGFgXG4gICAgICogcHJvcGVydGllcyB3aXRoIHRoZSBzYW1lIGZvcm1hdCBhcyBgSW1hZ2VEYXRhYC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5waXhlbFJhdGlvIFRoZSByYXRpbyBvZiBwaXhlbHMgaW4gdGhlIGltYWdlIHRvIHBoeXNpY2FsIHBpeGVscyBvbiB0aGUgc2NyZWVuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc2RmIFdoZXRoZXIgdGhlIGltYWdlIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBhbiBTREYgaW1hZ2VcbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5jb250ZW50ICBgW3gxLCB5MSwgeDIsIHkyXWAgIElmIGBpY29uLXRleHQtZml0YCBpcyB1c2VkIGluIGEgbGF5ZXIgd2l0aCB0aGlzIGltYWdlLCB0aGlzIG9wdGlvbiBkZWZpbmVzIHRoZSBwYXJ0IG9mIHRoZSBpbWFnZSB0aGF0IGNhbiBiZSBjb3ZlcmVkIGJ5IHRoZSBjb250ZW50IGluIGB0ZXh0LWZpZWxkYC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5zdHJldGNoWCAgYFtbeDEsIHgyXSwgLi4uXWAgSWYgYGljb24tdGV4dC1maXRgIGlzIHVzZWQgaW4gYSBsYXllciB3aXRoIHRoaXMgaW1hZ2UsIHRoaXMgb3B0aW9uIGRlZmluZXMgdGhlIHBhcnQocykgb2YgdGhlIGltYWdlIHRoYXQgY2FuIGJlIHN0cmV0Y2hlZCBob3Jpem9udGFsbHkuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc3RyZXRjaFkgIGBbW3kxLCB5Ml0sIC4uLl1gIElmIGBpY29uLXRleHQtZml0YCBpcyB1c2VkIGluIGEgbGF5ZXIgd2l0aCB0aGlzIGltYWdlLCB0aGlzIG9wdGlvbiBkZWZpbmVzIHRoZSBwYXJ0KHMpIG9mIHRoZSBpbWFnZSB0aGF0IGNhbiBiZSBzdHJldGNoZWQgdmVydGljYWxseS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gSWYgdGhlIHN0eWxlJ3Mgc3ByaXRlIGRvZXMgbm90IGFscmVhZHkgY29udGFpbiBhbiBpbWFnZSB3aXRoIElEICdjYXQnLFxuICAgICAqIC8vIGFkZCB0aGUgaW1hZ2UgJ2NhdC1pY29uLnBuZycgdG8gdGhlIHN0eWxlJ3Mgc3ByaXRlIHdpdGggdGhlIElEICdjYXQnLlxuICAgICAqIG1hcC5sb2FkSW1hZ2UoJ2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvdGh1bWIvNi82MC9DYXRfc2lsaG91ZXR0ZS5zdmcvNDAwcHgtQ2F0X3NpbGhvdWV0dGUuc3ZnLnBuZycsIGZ1bmN0aW9uKGVycm9yLCBpbWFnZSkge1xuICAgICAqICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICogICAgaWYgKCFtYXAuaGFzSW1hZ2UoJ2NhdCcpKSBtYXAuYWRkSW1hZ2UoJ2NhdCcsIGltYWdlKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqXG4gICAgICogLy8gQWRkIGEgc3RyZXRjaGFibGUgaW1hZ2UgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGBpY29uLXRleHQtZml0YFxuICAgICAqIC8vIEluIHRoaXMgZXhhbXBsZSwgdGhlIGltYWdlIGlzIDYwMHB4IHdpZGUgYnkgNDAwcHggaGlnaC5cbiAgICAgKiBtYXAubG9hZEltYWdlKCdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLzgvODkvQmxhY2tfYW5kX1doaXRlX0JveGVkXyUyOGJvcmRlcmVkJTI5LnBuZycsIGZ1bmN0aW9uKGVycm9yLCBpbWFnZSkge1xuICAgICAqICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICogICAgaWYgKCFtYXAuaGFzSW1hZ2UoJ2JvcmRlci1pbWFnZScpKSB7XG4gICAgICogICAgICBtYXAuYWRkSW1hZ2UoJ2JvcmRlci1pbWFnZScsIGltYWdlLCB7XG4gICAgICogICAgICAgICAgY29udGVudDogWzE2LCAxNiwgMzAwLCAzODRdLCAvLyBwbGFjZSB0ZXh0IG92ZXIgbGVmdCBoYWxmIG9mIGltYWdlLCBhdm9pZGluZyB0aGUgMTZweCBib3JkZXJcbiAgICAgKiAgICAgICAgICBzdHJldGNoWDogW1sxNiwgNTg0XV0sIC8vIHN0cmV0Y2ggZXZlcnl0aGluZyBob3Jpem9udGFsbHkgZXhjZXB0IHRoZSAxNnB4IGJvcmRlclxuICAgICAqICAgICAgICAgIHN0cmV0Y2hZOiBbWzE2LCAzODRdXSwgLy8gc3RyZXRjaCBldmVyeXRoaW5nIHZlcnRpY2FsbHkgZXhjZXB0IHRoZSAxNnB4IGJvcmRlclxuICAgICAqICAgICAgfSk7XG4gICAgICogICAgfVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICpcbiAgICAgKiBAc2VlIFVzZSBgSFRNTEltYWdlRWxlbWVudGA6IFtBZGQgYW4gaWNvbiB0byB0aGUgbWFwXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2FkZC1pbWFnZS8pXG4gICAgICogQHNlZSBVc2UgYEltYWdlRGF0YWA6IFtBZGQgYSBnZW5lcmF0ZWQgaWNvbiB0byB0aGUgbWFwXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2FkZC1pbWFnZS1nZW5lcmF0ZWQvKVxuICAgICAqL1xuICAgIGFkZEltYWdlKGlkOiBzdHJpbmcsXG4gICAgICAgICAgICAgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQgfCBJbWFnZUJpdG1hcCB8IEltYWdlRGF0YSB8IHt3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZGF0YTogVWludDhBcnJheSB8IFVpbnQ4Q2xhbXBlZEFycmF5fSB8IFN0eWxlSW1hZ2VJbnRlcmZhY2UsXG4gICAgICAgICAgICAge3BpeGVsUmF0aW8gPSAxLCBzZGYgPSBmYWxzZSwgc3RyZXRjaFgsIHN0cmV0Y2hZLCBjb250ZW50fTogJFNoYXBlPFN0eWxlSW1hZ2VNZXRhZGF0YT4gPSB7fSkge1xuICAgICAgICB0aGlzLl9sYXp5SW5pdEVtcHR5U3R5bGUoKTtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IDA7XG5cbiAgICAgICAgaWYgKGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCB8fCAoSW1hZ2VCaXRtYXAgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0LCBkYXRhfSA9IGJyb3dzZXIuZ2V0SW1hZ2VEYXRhKGltYWdlKTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUuYWRkSW1hZ2UoaWQsIHtkYXRhOiBuZXcgUkdCQUltYWdlKHt3aWR0aCwgaGVpZ2h0fSwgZGF0YSksIHBpeGVsUmF0aW8sIHN0cmV0Y2hYLCBzdHJldGNoWSwgY29udGVudCwgc2RmLCB2ZXJzaW9ufSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW1hZ2Uud2lkdGggPT09IHVuZGVmaW5lZCB8fCBpbWFnZS5oZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnRzIHRvIG1hcC5hZGRJbWFnZSgpLiBUaGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYW4gYEhUTUxJbWFnZUVsZW1lbnRgLCBgSW1hZ2VEYXRhYCwgYEltYWdlQml0bWFwYCwgJyArXG4gICAgICAgICAgICAgICAgJ29yIG9iamVjdCB3aXRoIGB3aWR0aGAsIGBoZWlnaHRgLCBhbmQgYGRhdGFgIHByb3BlcnRpZXMgd2l0aCB0aGUgc2FtZSBmb3JtYXQgYXMgYEltYWdlRGF0YWAnKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHQsIGRhdGF9ID0gaW1hZ2U7XG4gICAgICAgICAgICBjb25zdCB1c2VySW1hZ2UgPSAoKGltYWdlOiBhbnkpOiBTdHlsZUltYWdlSW50ZXJmYWNlKTtcblxuICAgICAgICAgICAgdGhpcy5zdHlsZS5hZGRJbWFnZShpZCwge1xuICAgICAgICAgICAgICAgIGRhdGE6IG5ldyBSR0JBSW1hZ2Uoe3dpZHRoLCBoZWlnaHR9LCBuZXcgVWludDhBcnJheShkYXRhKSksXG4gICAgICAgICAgICAgICAgcGl4ZWxSYXRpbyxcbiAgICAgICAgICAgICAgICBzdHJldGNoWCxcbiAgICAgICAgICAgICAgICBzdHJldGNoWSxcbiAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICAgIHNkZixcbiAgICAgICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHVzZXJJbWFnZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh1c2VySW1hZ2Uub25BZGQpIHtcbiAgICAgICAgICAgICAgICB1c2VySW1hZ2Uub25BZGQodGhpcywgaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtcmV0dXJuc1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbiBleGlzdGluZyBpbWFnZSBpbiBhIHN0eWxlLiBUaGlzIGltYWdlIGNhbiBiZSBkaXNwbGF5ZWQgb24gdGhlIG1hcCBsaWtlIGFueSBvdGhlciBpY29uIGluIHRoZSBzdHlsZSdzXG4gICAgICogW3Nwcml0ZV0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vaGVscC9nbG9zc2FyeS9zcHJpdGUvKSB1c2luZyB0aGUgaW1hZ2UncyBJRCB3aXRoXG4gICAgICogW2BpY29uLWltYWdlYF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvI2xheW91dC1zeW1ib2wtaWNvbi1pbWFnZSksXG4gICAgICogW2BiYWNrZ3JvdW5kLXBhdHRlcm5gXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy8jcGFpbnQtYmFja2dyb3VuZC1iYWNrZ3JvdW5kLXBhdHRlcm4pLFxuICAgICAqIFtgZmlsbC1wYXR0ZXJuYF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvI3BhaW50LWZpbGwtZmlsbC1wYXR0ZXJuKSxcbiAgICAgKiBvciBbYGxpbmUtcGF0dGVybmBdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjLyNwYWludC1saW5lLWxpbmUtcGF0dGVybikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIElEIG9mIHRoZSBpbWFnZS5cbiAgICAgKiBAcGFyYW0gaW1hZ2UgVGhlIGltYWdlIGFzIGFuIGBIVE1MSW1hZ2VFbGVtZW50YCwgYEltYWdlRGF0YWAsIGBJbWFnZUJpdG1hcGAgb3Igb2JqZWN0IHdpdGggYHdpZHRoYCwgYGhlaWdodGAsIGFuZCBgZGF0YWBcbiAgICAgKiBwcm9wZXJ0aWVzIHdpdGggdGhlIHNhbWUgZm9ybWF0IGFzIGBJbWFnZURhdGFgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJZiBhbiBpbWFnZSB3aXRoIHRoZSBJRCAnY2F0JyBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc3R5bGUncyBzcHJpdGUsXG4gICAgICogLy8gcmVwbGFjZSB0aGF0IGltYWdlIHdpdGggYSBuZXcgaW1hZ2UsICdvdGhlci1jYXQtaWNvbi5wbmcnLlxuICAgICAqIGlmIChtYXAuaGFzSW1hZ2UoJ2NhdCcpKSBtYXAudXBkYXRlSW1hZ2UoJ2NhdCcsICcuL290aGVyLWNhdC1pY29uLnBuZycpO1xuICAgICAqL1xuICAgIHVwZGF0ZUltYWdlKGlkOiBzdHJpbmcsXG4gICAgICAgIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50IHwgSW1hZ2VCaXRtYXAgfCBJbWFnZURhdGEgfCB7d2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGRhdGE6IFVpbnQ4QXJyYXkgfCBVaW50OENsYW1wZWRBcnJheX0gfCBTdHlsZUltYWdlSW50ZXJmYWNlKSB7XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmdJbWFnZSA9IHRoaXMuc3R5bGUuZ2V0SW1hZ2UoaWQpO1xuICAgICAgICBpZiAoIWV4aXN0aW5nSW1hZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICdUaGUgbWFwIGhhcyBubyBpbWFnZSB3aXRoIHRoYXQgaWQuIElmIHlvdSBhcmUgYWRkaW5nIGEgbmV3IGltYWdlIHVzZSBgbWFwLmFkZEltYWdlKC4uLilgIGluc3RlYWQuJykpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbWFnZURhdGEgPSAoaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50IHx8IChJbWFnZUJpdG1hcCAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwKSkgPyBicm93c2VyLmdldEltYWdlRGF0YShpbWFnZSkgOiBpbWFnZTtcbiAgICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHQsIGRhdGF9ID0gaW1hZ2VEYXRhO1xuXG4gICAgICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnSW52YWxpZCBhcmd1bWVudHMgdG8gbWFwLnVwZGF0ZUltYWdlKCkuIFRoZSBzZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhbiBgSFRNTEltYWdlRWxlbWVudGAsIGBJbWFnZURhdGFgLCBgSW1hZ2VCaXRtYXBgLCAnICtcbiAgICAgICAgICAgICAgICAnb3Igb2JqZWN0IHdpdGggYHdpZHRoYCwgYGhlaWdodGAsIGFuZCBgZGF0YWAgcHJvcGVydGllcyB3aXRoIHRoZSBzYW1lIGZvcm1hdCBhcyBgSW1hZ2VEYXRhYCcpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2lkdGggIT09IGV4aXN0aW5nSW1hZ2UuZGF0YS53aWR0aCB8fCBoZWlnaHQgIT09IGV4aXN0aW5nSW1hZ2UuZGF0YS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICdUaGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgdXBkYXRlZCBpbWFnZSBtdXN0IGJlIHRoYXQgc2FtZSBhcyB0aGUgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGUgaW1hZ2UnKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29weSA9ICEoaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50IHx8IChJbWFnZUJpdG1hcCAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwKSk7XG4gICAgICAgIGV4aXN0aW5nSW1hZ2UuZGF0YS5yZXBsYWNlKGRhdGEsIGNvcHkpO1xuXG4gICAgICAgIHRoaXMuc3R5bGUudXBkYXRlSW1hZ2UoaWQsIGV4aXN0aW5nSW1hZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgb3Igbm90IGFuIGltYWdlIHdpdGggYSBzcGVjaWZpYyBJRCBleGlzdHMgaW4gdGhlIHN0eWxlLiBUaGlzIGNoZWNrcyBib3RoIGltYWdlc1xuICAgICAqIGluIHRoZSBzdHlsZSdzIG9yaWdpbmFsIFtzcHJpdGVdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL2hlbHAvZ2xvc3Nhcnkvc3ByaXRlLykgYW5kIGFueSBpbWFnZXNcbiAgICAgKiB0aGF0IGhhdmUgYmVlbiBhZGRlZCBhdCBydW50aW1lIHVzaW5nIHtAbGluayBNYXAjYWRkSW1hZ2V9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIFRoZSBJRCBvZiB0aGUgaW1hZ2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGltYWdlIGV4aXN0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIENoZWNrIGlmIGFuIGltYWdlIHdpdGggdGhlIElEICdjYXQnIGV4aXN0cyBpblxuICAgICAqIC8vIHRoZSBzdHlsZSdzIHNwcml0ZS5cbiAgICAgKiB2YXIgY2F0SWNvbkV4aXN0cyA9IG1hcC5oYXNJbWFnZSgnY2F0Jyk7XG4gICAgICovXG4gICAgaGFzSW1hZ2UoaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIGltYWdlIGlkJykpKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhIXRoaXMuc3R5bGUuZ2V0SW1hZ2UoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBpbWFnZSBmcm9tIGEgc3R5bGUuIFRoaXMgY2FuIGJlIGFuIGltYWdlIGZyb20gdGhlIHN0eWxlJ3Mgb3JpZ2luYWxcbiAgICAgKiBbc3ByaXRlXShodHRwczovL2RvY3MubWFwYm94LmNvbS9oZWxwL2dsb3NzYXJ5L3Nwcml0ZS8pIG9yIGFueSBpbWFnZXNcbiAgICAgKiB0aGF0IGhhdmUgYmVlbiBhZGRlZCBhdCBydW50aW1lIHVzaW5nIHtAbGluayBNYXAjYWRkSW1hZ2V9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIFRoZSBJRCBvZiB0aGUgaW1hZ2UuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIElmIGFuIGltYWdlIHdpdGggdGhlIElEICdjYXQnIGV4aXN0cyBpblxuICAgICAqIC8vIHRoZSBzdHlsZSdzIHNwcml0ZSwgcmVtb3ZlIGl0LlxuICAgICAqIGlmIChtYXAuaGFzSW1hZ2UoJ2NhdCcpKSBtYXAucmVtb3ZlSW1hZ2UoJ2NhdCcpO1xuICAgICAqL1xuICAgIHJlbW92ZUltYWdlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5yZW1vdmVJbWFnZShpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZCBhbiBpbWFnZSBmcm9tIGFuIGV4dGVybmFsIFVSTCB0byBiZSB1c2VkIHdpdGgge0BsaW5rIE1hcCNhZGRJbWFnZX0uIEV4dGVybmFsXG4gICAgICogZG9tYWlucyBtdXN0IHN1cHBvcnQgW0NPUlNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQWNjZXNzX2NvbnRyb2xfQ09SUykuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgb2YgdGhlIGltYWdlIGZpbGUuIEltYWdlIGZpbGUgbXVzdCBiZSBpbiBwbmcsIHdlYnAsIG9yIGpwZyBmb3JtYXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgRXhwZWN0aW5nIGBjYWxsYmFjayhlcnJvciwgZGF0YSlgLiBDYWxsZWQgd2hlbiB0aGUgaW1hZ2UgaGFzIGxvYWRlZCBvciB3aXRoIGFuIGVycm9yIGFyZ3VtZW50IGlmIHRoZXJlIGlzIGFuIGVycm9yLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBMb2FkIGFuIGltYWdlIGZyb20gYW4gZXh0ZXJuYWwgVVJMLlxuICAgICAqIG1hcC5sb2FkSW1hZ2UoJ2h0dHA6Ly9wbGFjZWtpdHRlbi5jb20vNTAvNTAnLCBmdW5jdGlvbihlcnJvciwgaW1hZ2UpIHtcbiAgICAgKiAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICogICAvLyBBZGQgdGhlIGxvYWRlZCBpbWFnZSB0byB0aGUgc3R5bGUncyBzcHJpdGUgd2l0aCB0aGUgSUQgJ2tpdHRlbicuXG4gICAgICogICBtYXAuYWRkSW1hZ2UoJ2tpdHRlbicsIGltYWdlKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIEBzZWUgW0FkZCBhbiBpY29uIHRvIHRoZSBtYXBdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYWRkLWltYWdlLylcbiAgICAgKi9cbiAgICBsb2FkSW1hZ2UodXJsOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICBnZXRJbWFnZSh0aGlzLl9yZXF1ZXN0TWFuYWdlci50cmFuc2Zvcm1SZXF1ZXN0KHVybCwgUmVzb3VyY2VUeXBlLkltYWdlKSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyBhbiBBcnJheSBvZiBzdHJpbmdzIGNvbnRhaW5pbmcgdGhlIElEcyBvZiBhbGwgaW1hZ2VzIGN1cnJlbnRseSBhdmFpbGFibGUgaW4gdGhlIG1hcC5cbiAgICAqIFRoaXMgaW5jbHVkZXMgYm90aCBpbWFnZXMgZnJvbSB0aGUgc3R5bGUncyBvcmlnaW5hbCBbc3ByaXRlXShodHRwczovL2RvY3MubWFwYm94LmNvbS9oZWxwL2dsb3NzYXJ5L3Nwcml0ZS8pXG4gICAgKiBhbmQgYW55IGltYWdlcyB0aGF0IGhhdmUgYmVlbiBhZGRlZCBhdCBydW50aW1lIHVzaW5nIHtAbGluayBNYXAjYWRkSW1hZ2V9LlxuICAgICpcbiAgICAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fSBBbiBBcnJheSBvZiBzdHJpbmdzIGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIGFsbCBzcHJpdGVzL2ltYWdlcyBjdXJyZW50bHkgYXZhaWxhYmxlIGluIHRoZSBtYXAuXG4gICAgKlxuICAgICogQGV4YW1wbGVcbiAgICAqIHZhciBhbGxJbWFnZXMgPSBtYXAubGlzdEltYWdlcygpO1xuICAgICpcbiAgICAqL1xuICAgIGxpc3RJbWFnZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmxpc3RJbWFnZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgW01hcGJveCBzdHlsZSBsYXllcl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvI2xheWVycylcbiAgICAgKiB0byB0aGUgbWFwJ3Mgc3R5bGUuXG4gICAgICpcbiAgICAgKiBBIGxheWVyIGRlZmluZXMgaG93IGRhdGEgZnJvbSBhIHNwZWNpZmllZCBzb3VyY2Ugd2lsbCBiZSBzdHlsZWQuIFJlYWQgbW9yZSBhYm91dCBsYXllciB0eXBlc1xuICAgICAqIGFuZCBhdmFpbGFibGUgcGFpbnQgYW5kIGxheW91dCBwcm9wZXJ0aWVzIGluIHRoZSBbTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjLyNsYXllcnMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3QgfCBDdXN0b21MYXllckludGVyZmFjZX0gbGF5ZXIgVGhlIGxheWVyIHRvIGFkZCwgY29uZm9ybWluZyB0byBlaXRoZXIgdGhlIE1hcGJveCBTdHlsZSBTcGVjaWZpY2F0aW9uJ3MgW2xheWVyIGRlZmluaXRpb25dKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjLyNsYXllcnMpIG9yLCBsZXNzIGNvbW1vbmx5LCB0aGUge0BsaW5rIEN1c3RvbUxheWVySW50ZXJmYWNlfSBzcGVjaWZpY2F0aW9uLlxuICAgICAqIFRoZSBNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbidzIGxheWVyIGRlZmluaXRpb24gaXMgYXBwcm9wcmlhdGUgZm9yIG1vc3QgbGF5ZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyLmlkIEEgdW5pcXVlIGlkZW5maWVyIHRoYXQgeW91IGRlZmluZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXIudHlwZSBUaGUgdHlwZSBvZiBsYXllciAoZm9yIGV4YW1wbGUgYGZpbGxgIG9yIGBzeW1ib2xgKS5cbiAgICAgKiBBIGxpc3Qgb2YgbGF5ZXIgdHlwZXMgaXMgYXZhaWxhYmxlIGluIHRoZSBbTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjL2xheWVycy8jdHlwZSkuXG4gICAgICpcbiAgICAgKiAoVGhpcyBjYW4gYWxzbyBiZSBgY3VzdG9tYC4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB7QGxpbmsgQ3VzdG9tTGF5ZXJJbnRlcmZhY2V9LilcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IE9iamVjdH0gW2xheWVyLnNvdXJjZV0gVGhlIGRhdGEgc291cmNlIGZvciB0aGUgbGF5ZXIuXG4gICAgICogUmVmZXJlbmNlIGEgc291cmNlIHRoYXQgaGFzIF9hbHJlYWR5IGJlZW4gZGVmaW5lZF8gdXNpbmcgdGhlIHNvdXJjZSdzIHVuaXF1ZSBpZC5cbiAgICAgKiBSZWZlcmVuY2UgYSBfbmV3IHNvdXJjZV8gdXNpbmcgYSBzb3VyY2Ugb2JqZWN0IChhcyBkZWZpbmVkIGluIHRoZSBbTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjL3NvdXJjZXMvKSkgZGlyZWN0bHkuXG4gICAgICogVGhpcyBpcyAqKnJlcXVpcmVkKiogZm9yIGFsbCBgbGF5ZXIudHlwZWAgb3B0aW9ucyBfZXhjZXB0XyBmb3IgYGN1c3RvbWAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsYXllci5zb3VyY2VMYXllcl0gKG9wdGlvbmFsKSBUaGUgbmFtZSBvZiB0aGUgW3NvdXJjZSBsYXllcl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vaGVscC9nbG9zc2FyeS9zb3VyY2UtbGF5ZXIvKSB3aXRoaW4gdGhlIHNwZWNpZmllZCBgbGF5ZXIuc291cmNlYCB0byB1c2UgZm9yIHRoaXMgc3R5bGUgbGF5ZXIuXG4gICAgICogVGhpcyBpcyBvbmx5IGFwcGxpY2FibGUgZm9yIHZlY3RvciB0aWxlIHNvdXJjZXMgYW5kIGlzICoqcmVxdWlyZWQqKiB3aGVuIGBsYXllci5zb3VyY2VgIGlzIG9mIHRoZSB0eXBlIGB2ZWN0b3JgLlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IFtsYXllci5maWx0ZXJdIChvcHRpb25hbCkgQW4gZXhwcmVzc2lvbiBzcGVjaWZ5aW5nIGNvbmRpdGlvbnMgb24gc291cmNlIGZlYXR1cmVzLlxuICAgICAqIE9ubHkgZmVhdHVyZXMgdGhhdCBtYXRjaCB0aGUgZmlsdGVyIGFyZSBkaXNwbGF5ZWQuXG4gICAgICogVGhlIE1hcGJveCBTdHlsZSBTcGVjaWZpY2F0aW9uIGluY2x1ZGVzIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlIGxpbWl0YXRpb25zIG9mIHRoZSBbYGZpbHRlcmBdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjL2xheWVycy8jZmlsdGVyKSBwYXJhbWV0ZXJcbiAgICAgKiBhbmQgYSBjb21wbGV0ZSBsaXN0IG9mIGF2YWlsYWJsZSBbZXhwcmVzc2lvbnNdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjL2V4cHJlc3Npb25zLykuXG4gICAgICogSWYgbm8gZmlsdGVyIGlzIHByb3ZpZGVkLCBhbGwgZmVhdHVyZXMgaW4gdGhlIHNvdXJjZSAob3Igc291cmNlIGxheWVyIGZvciB2ZWN0b3IgdGlsZXNldHMpIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbbGF5ZXIucGFpbnRdIChvcHRpb25hbCkgUGFpbnQgcHJvcGVydGllcyBmb3IgdGhlIGxheWVyLlxuICAgICAqIEF2YWlsYWJsZSBwYWludCBwcm9wZXJ0aWVzIHZhcnkgYnkgYGxheWVyLnR5cGVgLlxuICAgICAqIEEgZnVsbCBsaXN0IG9mIHBhaW50IHByb3BlcnRpZXMgZm9yIGVhY2ggbGF5ZXIgdHlwZSBpcyBhdmFpbGFibGUgaW4gdGhlIFtNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvbGF5ZXJzLykuXG4gICAgICogSWYgbm8gcGFpbnQgcHJvcGVydGllcyBhcmUgc3BlY2lmaWVkLCBkZWZhdWx0IHZhbHVlcyB3aWxsIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtsYXllci5sYXlvdXRdIChvcHRpb25hbCkgTGF5b3V0IHByb3BlcnRpZXMgZm9yIHRoZSBsYXllci5cbiAgICAgKiBBdmFpbGFibGUgbGF5b3V0IHByb3BlcnRpZXMgdmFyeSBieSBgbGF5ZXIudHlwZWAuXG4gICAgICogQSBmdWxsIGxpc3Qgb2YgbGF5b3V0IHByb3BlcnRpZXMgZm9yIGVhY2ggbGF5ZXIgdHlwZSBpcyBhdmFpbGFibGUgaW4gdGhlIFtNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvbGF5ZXJzLykuXG4gICAgICogSWYgbm8gbGF5b3V0IHByb3BlcnRpZXMgYXJlIHNwZWNpZmllZCwgZGVmYXVsdCB2YWx1ZXMgd2lsbCBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGF5ZXIubWF4em9vbV0gKG9wdGlvbmFsKSBUaGUgbWF4aW11bSB6b29tIGxldmVsIGZvciB0aGUgbGF5ZXIuXG4gICAgICogQXQgem9vbSBsZXZlbHMgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIHRoZSBtYXh6b29tLCB0aGUgbGF5ZXIgd2lsbCBiZSBoaWRkZW4uXG4gICAgICogVGhlIHZhbHVlIGNhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCBgMjRgIChpbmNsdXNpdmUpLlxuICAgICAqIElmIG5vIG1heHpvb20gaXMgcHJvdmlkZWQsIHRoZSBsYXllciB3aWxsIGJlIHZpc2libGUgYXQgYWxsIHpvb20gbGV2ZWxzIGZvciB3aGljaCB0aGVyZSBhcmUgdGlsZXMgYXZhaWxhYmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGF5ZXIubWluem9vbV0gKG9wdGlvbmFsKSBUaGUgbWluaW11bSB6b29tIGxldmVsIGZvciB0aGUgbGF5ZXIuXG4gICAgICogQXQgem9vbSBsZXZlbHMgbGVzcyB0aGFuIHRoZSBtaW56b29tLCB0aGUgbGF5ZXIgd2lsbCBiZSBoaWRkZW4uXG4gICAgICogVGhlIHZhbHVlIGNhbiBiZSBhbnkgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCBgMjRgIChpbmNsdXNpdmUpLlxuICAgICAqIElmIG5vIG1pbnpvb20gaXMgcHJvdmlkZWQsIHRoZSBsYXllciB3aWxsIGJlIHZpc2libGUgYXQgYWxsIHpvb20gbGV2ZWxzIGZvciB3aGljaCB0aGVyZSBhcmUgdGlsZXMgYXZhaWxhYmxlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbbGF5ZXIubWV0YWRhdGFdIChvcHRpb25hbCkgQXJiaXRyYXJ5IHByb3BlcnRpZXMgdXNlZnVsIHRvIHRyYWNrIHdpdGggdGhlIGxheWVyLCBidXQgZG8gbm90IGluZmx1ZW5jZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsYXllci5yZW5kZXJpbmdNb2RlXSBUaGlzIGlzIG9ubHkgYXBwbGljYWJsZSBmb3IgbGF5ZXJzIHdpdGggdGhlIHR5cGUgYGN1c3RvbWAuXG4gICAgICogU2VlIHtAbGluayBDdXN0b21MYXllckludGVyZmFjZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtiZWZvcmVJZF0gVGhlIElEIG9mIGFuIGV4aXN0aW5nIGxheWVyIHRvIGluc2VydCB0aGUgbmV3IGxheWVyIGJlZm9yZSxcbiAgICAgKiByZXN1bHRpbmcgaW4gdGhlIG5ldyBsYXllciBhcHBlYXJpbmcgdmlzdWFsbHkgYmVuZWF0aCB0aGUgZXhpc3RpbmcgbGF5ZXIuXG4gICAgICogSWYgdGhpcyBhcmd1bWVudCBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgbGF5ZXIgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgZW5kIG9mIHRoZSBsYXllcnMgYXJyYXlcbiAgICAgKiBhbmQgYXBwZWFyIHZpc3VhbGx5IGFib3ZlIGFsbCBvdGhlciBsYXllcnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gQWRkIGEgY2lyY2xlIGxheWVyIHdpdGggYSB2ZWN0b3Igc291cmNlXG4gICAgICogbWFwLmFkZExheWVyKHtcbiAgICAgKiAgIGlkOiAncG9pbnRzLW9mLWludGVyZXN0JyxcbiAgICAgKiAgIHNvdXJjZToge1xuICAgICAqICAgICB0eXBlOiAndmVjdG9yJyxcbiAgICAgKiAgICAgdXJsOiAnbWFwYm94Oi8vbWFwYm94Lm1hcGJveC1zdHJlZXRzLXY4J1xuICAgICAqICAgfSxcbiAgICAgKiAgICdzb3VyY2UtbGF5ZXInOiAncG9pX2xhYmVsJyxcbiAgICAgKiAgIHR5cGU6ICdjaXJjbGUnLFxuICAgICAqICAgcGFpbnQ6IHtcbiAgICAgKiAgICAgLy8gTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb24gcGFpbnQgcHJvcGVydGllc1xuICAgICAqICAgfSxcbiAgICAgKiAgIGxheW91dDoge1xuICAgICAqICAgICAvLyBNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbiBsYXlvdXQgcHJvcGVydGllc1xuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBEZWZpbmUgYSBzb3VyY2UgYmVmb3JlIHVzaW5nIGl0IHRvIGNyZWF0ZSBhIG5ldyBsYXllclxuICAgICAqIG1hcC5hZGRTb3VyY2UoJ3N0YXRlLWRhdGEnLCB7XG4gICAgICogICB0eXBlOiAnZ2VvanNvbicsXG4gICAgICogICBkYXRhOiAncGF0aC90by9kYXRhLmdlb2pzb24nXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBtYXAuYWRkTGF5ZXIoe1xuICAgICAqICAgaWQ6ICdzdGF0ZXMnLFxuICAgICAqICAgLy8gUmVmZXJlbmNlcyB0aGUgR2VvSlNPTiBzb3VyY2UgZGVmaW5lZCBhYm92ZVxuICAgICAqICAgLy8gYW5kIGRvZXMgbm90IHJlcXVpcmUgYSBgc291cmNlLWxheWVyYFxuICAgICAqICAgc291cmNlOiAnc3RhdGUtZGF0YScsXG4gICAgICogICB0eXBlOiAnc3ltYm9sJyxcbiAgICAgKiAgIGxheW91dDoge1xuICAgICAqICAgICAvLyBTZXQgdGhlIGxhYmVsIGNvbnRlbnQgdG8gdGhlXG4gICAgICogICAgIC8vIGZlYXR1cmUncyBgbmFtZWAgcHJvcGVydHlcbiAgICAgKiAgICAgdGV4dC1maWVsZDogWydnZXQnLCAnbmFtZSddXG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEFkZCBhIG5ldyBzeW1ib2wgbGF5ZXIgYmVmb3JlIGFuIGV4aXN0aW5nIGxheWVyXG4gICAgICogbWFwLmFkZExheWVyKHtcbiAgICAgKiAgIGlkOiAnc3RhdGVzJyxcbiAgICAgKiAgIC8vIFJlZmVyZW5jZXMgYSBzb3VyY2UgdGhhdCdzIGFscmVhZHkgYmVlbiBkZWZpbmVkXG4gICAgICogICBzb3VyY2U6ICdzdGF0ZS1kYXRhJyxcbiAgICAgKiAgIHR5cGU6ICdzeW1ib2wnLFxuICAgICAqICAgbGF5b3V0OiB7XG4gICAgICogICAgIC8vIFNldCB0aGUgbGFiZWwgY29udGVudCB0byB0aGVcbiAgICAgKiAgICAgLy8gZmVhdHVyZSdzIGBuYW1lYCBwcm9wZXJ0eVxuICAgICAqICAgICB0ZXh0LWZpZWxkOiBbJ2dldCcsICduYW1lJ11cbiAgICAgKiAgIH1cbiAgICAgKiAvLyBBZGQgdGhlIGxheWVyIGJlZm9yZSB0aGUgZXhpc3RpbmcgYGNpdGllc2AgbGF5ZXJcbiAgICAgKiB9LCAnY2l0aWVzJyk7XG4gICAgICpcbiAgICAgKiBAc2VlIFtDcmVhdGUgYW5kIHN0eWxlIGNsdXN0ZXJzXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jbHVzdGVyLylcbiAgICAgKiBAc2VlIFtBZGQgYSB2ZWN0b3IgdGlsZSBzb3VyY2VdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3ZlY3Rvci1zb3VyY2UvKVxuICAgICAqIEBzZWUgW0FkZCBhIFdNUyBzb3VyY2VdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3dtcy8pXG4gICAgICovXG4gICAgYWRkTGF5ZXIobGF5ZXI6IExheWVyU3BlY2lmaWNhdGlvbiB8IEN1c3RvbUxheWVySW50ZXJmYWNlLCBiZWZvcmVJZD86IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sYXp5SW5pdEVtcHR5U3R5bGUoKTtcbiAgICAgICAgdGhpcy5zdHlsZS5hZGRMYXllcihsYXllciwgYmVmb3JlSWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgbGF5ZXIgdG8gYSBkaWZmZXJlbnQgei1wb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgb2YgdGhlIGxheWVyIHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtiZWZvcmVJZF0gVGhlIElEIG9mIGFuIGV4aXN0aW5nIGxheWVyIHRvIGluc2VydCB0aGUgbmV3IGxheWVyIGJlZm9yZS4gV2hlbiB2aWV3aW5nIHRoZSBtYXAsIHRoZSBgaWRgIGxheWVyIHdpbGwgYXBwZWFyIGJlbmVhdGggdGhlIGBiZWZvcmVJZGAgbGF5ZXIuIElmIGBiZWZvcmVJZGAgaXMgb21pdHRlZCwgdGhlIGxheWVyIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGVuZCBvZiB0aGUgbGF5ZXJzIGFycmF5IGFuZCBhcHBlYXIgYWJvdmUgYWxsIG90aGVyIGxheWVycyBvbiB0aGUgbWFwLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBNb3ZlIGEgbGF5ZXIgd2l0aCBJRCAncG9seWdvbicgYmVmb3JlIHRoZSBsYXllciB3aXRoIElEICdjb3VudHJ5LWxhYmVsJy4gVGhlIGBwb2x5Z29uYCBsYXllciB3aWxsIGFwcGVhciBiZW5lYXRoIHRoZSBgY291bnRyeS1sYWJlbGAgbGF5ZXIgb24gdGhlIG1hcC5cbiAgICAgKiBtYXAubW92ZUxheWVyKCdwb2x5Z29uJywgJ2NvdW50cnktbGFiZWwnKTtcbiAgICAgKi9cbiAgICBtb3ZlTGF5ZXIoaWQ6IHN0cmluZywgYmVmb3JlSWQ/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5tb3ZlTGF5ZXIoaWQsIGJlZm9yZUlkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1yZXR1cm5zXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgbGF5ZXIgd2l0aCB0aGUgZ2l2ZW4gSUQgZnJvbSB0aGUgbWFwJ3Mgc3R5bGUuXG4gICAgICpcbiAgICAgKiBJZiBubyBzdWNoIGxheWVyIGV4aXN0cywgYW4gYGVycm9yYCBldmVudCBpcyBmaXJlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBpZCBvZiB0aGUgbGF5ZXIgdG8gcmVtb3ZlXG4gICAgICogQGZpcmVzIGVycm9yXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIElmIGEgbGF5ZXIgd2l0aCBJRCAnc3RhdGUtZGF0YScgZXhpc3RzLCByZW1vdmUgaXQuXG4gICAgICogaWYgKG1hcC5nZXRMYXllcignc3RhdGUtZGF0YScpKSBtYXAucmVtb3ZlTGF5ZXIoJ3N0YXRlLWRhdGEnKTtcbiAgICAgKi9cbiAgICByZW1vdmVMYXllcihpZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3R5bGUucmVtb3ZlTGF5ZXIoaWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxheWVyIHdpdGggdGhlIHNwZWNpZmllZCBJRCBpbiB0aGUgbWFwJ3Mgc3R5bGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBsYXllciB0byBnZXQuXG4gICAgICogQHJldHVybnMgez9PYmplY3R9IFRoZSBsYXllciB3aXRoIHRoZSBzcGVjaWZpZWQgSUQsIG9yIGB1bmRlZmluZWRgXG4gICAgICogICBpZiB0aGUgSUQgY29ycmVzcG9uZHMgdG8gbm8gZXhpc3RpbmcgbGF5ZXJzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgc3RhdGVEYXRhTGF5ZXIgPSBtYXAuZ2V0TGF5ZXIoJ3N0YXRlLWRhdGEnKTtcbiAgICAgKlxuICAgICAqIEBzZWUgW0ZpbHRlciBzeW1ib2xzIGJ5IHRvZ2dsaW5nIGEgbGlzdF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9maWx0ZXItbWFya2Vycy8pXG4gICAgICogQHNlZSBbRmlsdGVyIHN5bWJvbHMgYnkgdGV4dCBpbnB1dF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9maWx0ZXItbWFya2Vycy1ieS1pbnB1dC8pXG4gICAgICovXG4gICAgZ2V0TGF5ZXIoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5nZXRMYXllcihpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgem9vbSBleHRlbnQgZm9yIHRoZSBzcGVjaWZpZWQgc3R5bGUgbGF5ZXIuIFRoZSB6b29tIGV4dGVudCBpbmNsdWRlcyB0aGVcbiAgICAgKiBbbWluaW11bSB6b29tIGxldmVsXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy8jbGF5ZXItbWluem9vbSlcbiAgICAgKiBhbmQgW21heGltdW0gem9vbSBsZXZlbF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvI2xheWVyLW1heHpvb20pKVxuICAgICAqIGF0IHdoaWNoIHRoZSBsYXllciB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogTm90ZTogRm9yIHN0eWxlIGxheWVycyB1c2luZyB2ZWN0b3Igc291cmNlcywgc3R5bGUgbGF5ZXJzIGNhbm5vdCBiZSByZW5kZXJlZCBhdCB6b29tIGxldmVscyBsb3dlciB0aGFuIHRoZVxuICAgICAqIG1pbmltdW0gem9vbSBsZXZlbCBvZiB0aGUgX3NvdXJjZSBsYXllcl8gYmVjYXVzZSB0aGUgZGF0YSBkb2VzIG5vdCBleGlzdCBhdCB0aG9zZSB6b29tIGxldmVscy4gSWYgdGhlIG1pbmltdW1cbiAgICAgKiB6b29tIGxldmVsIG9mIHRoZSBzb3VyY2UgbGF5ZXIgaXMgaGlnaGVyIHRoYW4gdGhlIG1pbmltdW0gem9vbSBsZXZlbCBkZWZpbmVkIGluIHRoZSBzdHlsZSBsYXllciwgdGhlIHN0eWxlXG4gICAgICogbGF5ZXIgd2lsbCBub3QgYmUgcmVuZGVyZWQgYXQgYWxsIHpvb20gbGV2ZWxzIGluIHRoZSB6b29tIHJhbmdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVySWQgVGhlIElEIG9mIHRoZSBsYXllciB0byB3aGljaCB0aGUgem9vbSBleHRlbnQgd2lsbCBiZSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW56b29tIFRoZSBtaW5pbXVtIHpvb20gdG8gc2V0ICgwLTI0KS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4em9vbSBUaGUgbWF4aW11bSB6b29tIHRvIHNldCAoMC0yNCkuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC5zZXRMYXllclpvb21SYW5nZSgnbXktbGF5ZXInLCAyLCA1KTtcbiAgICAgKlxuICAgICAqL1xuICAgIHNldExheWVyWm9vbVJhbmdlKGxheWVySWQ6IHN0cmluZywgbWluem9vbTogbnVtYmVyLCBtYXh6b29tOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5zZXRMYXllclpvb21SYW5nZShsYXllcklkLCBtaW56b29tLCBtYXh6b29tKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBmaWx0ZXIgZm9yIHRoZSBzcGVjaWZpZWQgc3R5bGUgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBGaWx0ZXJzIGNvbnRyb2wgd2hpY2ggZmVhdHVyZXMgYSBzdHlsZSBsYXllciByZW5kZXJzIGZyb20gaXRzIHNvdXJjZS5cbiAgICAgKiBBbnkgZmVhdHVyZSBmb3Igd2hpY2ggdGhlIGZpbHRlciBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBgdHJ1ZWAgd2lsbCBiZVxuICAgICAqIHJlbmRlcmVkIG9uIHRoZSBtYXAuIFRob3NlIHRoYXQgYXJlIGZhbHNlIHdpbGwgYmUgaGlkZGVuLlxuICAgICAqXG4gICAgICogVXNlIGBzZXRGaWx0ZXJgIHRvIHNob3cgYSBzdWJzZXQgb2YgeW91ciBzb3VyY2UgZGF0YS5cbiAgICAgKlxuICAgICAqIFRvIGNsZWFyIHRoZSBmaWx0ZXIsIHBhc3MgYG51bGxgIG9yIGB1bmRlZmluZWRgIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVySWQgVGhlIElEIG9mIHRoZSBsYXllciB0byB3aGljaCB0aGUgZmlsdGVyIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5IHwgbnVsbCB8IHVuZGVmaW5lZH0gZmlsdGVyIFRoZSBmaWx0ZXIsIGNvbmZvcm1pbmcgdG8gdGhlIE1hcGJveCBTdHlsZSBTcGVjaWZpY2F0aW9uJ3NcbiAgICAgKiAgIFtmaWx0ZXIgZGVmaW5pdGlvbl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvbGF5ZXJzLyNmaWx0ZXIpLiAgSWYgYG51bGxgIG9yIGB1bmRlZmluZWRgIGlzIHByb3ZpZGVkLCB0aGUgZnVuY3Rpb24gcmVtb3ZlcyBhbnkgZXhpc3RpbmcgZmlsdGVyIGZyb20gdGhlIGxheWVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy52YWxpZGF0ZT10cnVlXSBXaGV0aGVyIHRvIGNoZWNrIGlmIHRoZSBmaWx0ZXIgY29uZm9ybXMgdG8gdGhlIE1hcGJveCBHTCBTdHlsZSBTcGVjaWZpY2F0aW9uLiBEaXNhYmxpbmcgdmFsaWRhdGlvbiBpcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB0aGF0IHNob3VsZCBvbmx5IGJlIHVzZWQgaWYgeW91IGhhdmUgcHJldmlvdXNseSB2YWxpZGF0ZWQgdGhlIHZhbHVlcyB5b3Ugd2lsbCBiZSBwYXNzaW5nIHRvIHRoaXMgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGRpc3BsYXkgb25seSBmZWF0dXJlcyB3aXRoIHRoZSAnbmFtZScgcHJvcGVydHkgJ1VTQSdcbiAgICAgKiBtYXAuc2V0RmlsdGVyKCdteS1sYXllcicsIFsnPT0nLCBbJ2dldCcsICduYW1lJ10sICdVU0EnXSk7XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBkaXNwbGF5IG9ubHkgZmVhdHVyZXMgd2l0aCBmaXZlIG9yIG1vcmUgJ2F2YWlsYWJsZS1zcG90cydcbiAgICAgKiBtYXAuc2V0RmlsdGVyKCdiaWtlLWRvY2tzJywgWyc+PScsIFsnZ2V0JywgJ2F2YWlsYWJsZS1zcG90cyddLCA1XSk7XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyByZW1vdmUgdGhlIGZpbHRlciBmb3IgdGhlICdiaWtlLWRvY2tzJyBzdHlsZSBsYXllclxuICAgICAqIG1hcC5zZXRGaWx0ZXIoJ2Jpa2UtZG9ja3MnLCBudWxsKTtcbiAgICAgKlxuICAgICAqIEBzZWUgW0ZpbHRlciBmZWF0dXJlcyB3aXRoaW4gbWFwIHZpZXddKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZmlsdGVyLWZlYXR1cmVzLXdpdGhpbi1tYXAtdmlldy8pXG4gICAgICogQHNlZSBbSGlnaGxpZ2h0IGZlYXR1cmVzIGNvbnRhaW5pbmcgc2ltaWxhciBkYXRhXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3F1ZXJ5LXNpbWlsYXItZmVhdHVyZXMvKVxuICAgICAqIEBzZWUgW0NyZWF0ZSBhIHRpbWVsaW5lIGFuaW1hdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS90aW1lbGluZS1hbmltYXRpb24vKVxuICAgICAqIEBzZWUgVHV0b3JpYWw6IFtTaG93IGNoYW5nZXMgb3ZlciB0aW1lXShodHRwczovL2RvY3MubWFwYm94LmNvbS9oZWxwL3R1dG9yaWFscy9zaG93LWNoYW5nZXMtb3Zlci10aW1lLylcbiAgICAgKi9cbiAgICBzZXRGaWx0ZXIobGF5ZXJJZDogc3RyaW5nLCBmaWx0ZXI6ID9GaWx0ZXJTcGVjaWZpY2F0aW9uLCAgb3B0aW9uczogU3R5bGVTZXR0ZXJPcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5zdHlsZS5zZXRGaWx0ZXIobGF5ZXJJZCwgZmlsdGVyLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaWx0ZXIgYXBwbGllZCB0byB0aGUgc3BlY2lmaWVkIHN0eWxlIGxheWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVySWQgVGhlIElEIG9mIHRoZSBzdHlsZSBsYXllciB3aG9zZSBmaWx0ZXIgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGxheWVyJ3MgZmlsdGVyLlxuICAgICAqL1xuICAgIGdldEZpbHRlcihsYXllcklkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUuZ2V0RmlsdGVyKGxheWVySWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIGEgcGFpbnQgcHJvcGVydHkgaW4gdGhlIHNwZWNpZmllZCBzdHlsZSBsYXllci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllcklkIFRoZSBJRCBvZiB0aGUgbGF5ZXIgdG8gc2V0IHRoZSBwYWludCBwcm9wZXJ0eSBpbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcGFpbnQgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBwYWludCBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogICBNdXN0IGJlIG9mIGEgdHlwZSBhcHByb3ByaWF0ZSBmb3IgdGhlIHByb3BlcnR5LCBhcyBkZWZpbmVkIGluIHRoZSBbTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvKS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudmFsaWRhdGU9dHJ1ZV0gV2hldGhlciB0byBjaGVjayBpZiBgdmFsdWVgIGNvbmZvcm1zIHRvIHRoZSBNYXBib3ggR0wgU3R5bGUgU3BlY2lmaWNhdGlvbi4gRGlzYWJsaW5nIHZhbGlkYXRpb24gaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gdGhhdCBzaG91bGQgb25seSBiZSB1c2VkIGlmIHlvdSBoYXZlIHByZXZpb3VzbHkgdmFsaWRhdGVkIHRoZSB2YWx1ZXMgeW91IHdpbGwgYmUgcGFzc2luZyB0byB0aGlzIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnNldFBhaW50UHJvcGVydHkoJ215LWxheWVyJywgJ2ZpbGwtY29sb3InLCAnI2ZhYWZlZScpO1xuICAgICAqIEBzZWUgW0NoYW5nZSBhIGxheWVyJ3MgY29sb3Igd2l0aCBidXR0b25zXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2NvbG9yLXN3aXRjaGVyLylcbiAgICAgKiBAc2VlIFtBZGp1c3QgYSBsYXllcidzIG9wYWNpdHldKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYWRqdXN0LWxheWVyLW9wYWNpdHkvKVxuICAgICAqIEBzZWUgW0NyZWF0ZSBhIGRyYWdnYWJsZSBwb2ludF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9kcmFnLWEtcG9pbnQvKVxuICAgICAqL1xuICAgIHNldFBhaW50UHJvcGVydHkobGF5ZXJJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIG9wdGlvbnM6IFN0eWxlU2V0dGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuc3R5bGUuc2V0UGFpbnRQcm9wZXJ0eShsYXllcklkLCBuYW1lLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgYSBwYWludCBwcm9wZXJ0eSBpbiB0aGUgc3BlY2lmaWVkIHN0eWxlIGxheWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVySWQgVGhlIElEIG9mIHRoZSBsYXllciB0byBnZXQgdGhlIHBhaW50IHByb3BlcnR5IGZyb20uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgYSBwYWludCBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIHBhaW50IHByb3BlcnR5LlxuICAgICAqL1xuICAgIGdldFBhaW50UHJvcGVydHkobGF5ZXJJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUuZ2V0UGFpbnRQcm9wZXJ0eShsYXllcklkLCBuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiBhIGxheW91dCBwcm9wZXJ0eSBpbiB0aGUgc3BlY2lmaWVkIHN0eWxlIGxheWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVySWQgVGhlIElEIG9mIHRoZSBsYXllciB0byBzZXQgdGhlIGxheW91dCBwcm9wZXJ0eSBpbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbGF5b3V0IHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgbGF5b3V0IHByb3BlcnR5LiBNdXN0IGJlIG9mIGEgdHlwZSBhcHByb3ByaWF0ZSBmb3IgdGhlIHByb3BlcnR5LCBhcyBkZWZpbmVkIGluIHRoZSBbTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvKS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudmFsaWRhdGU9dHJ1ZV0gV2hldGhlciB0byBjaGVjayBpZiBgdmFsdWVgIGNvbmZvcm1zIHRvIHRoZSBNYXBib3ggR0wgU3R5bGUgU3BlY2lmaWNhdGlvbi4gRGlzYWJsaW5nIHZhbGlkYXRpb24gaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gdGhhdCBzaG91bGQgb25seSBiZSB1c2VkIGlmIHlvdSBoYXZlIHByZXZpb3VzbHkgdmFsaWRhdGVkIHRoZSB2YWx1ZXMgeW91IHdpbGwgYmUgcGFzc2luZyB0byB0aGlzIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnNldExheW91dFByb3BlcnR5KCdteS1sYXllcicsICd2aXNpYmlsaXR5JywgJ25vbmUnKTtcbiAgICAgKiBAc2VlIFtTaG93IGFuZCBoaWRlIGxheWVyc10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvdG9nZ2xlLWxheWVycy8pXG4gICAgICovXG4gICAgc2V0TGF5b3V0UHJvcGVydHkobGF5ZXJJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIG9wdGlvbnM6IFN0eWxlU2V0dGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuc3R5bGUuc2V0TGF5b3V0UHJvcGVydHkobGF5ZXJJZCwgbmFtZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIGEgbGF5b3V0IHByb3BlcnR5IGluIHRoZSBzcGVjaWZpZWQgc3R5bGUgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJJZCBUaGUgSUQgb2YgdGhlIGxheWVyIHRvIGdldCB0aGUgbGF5b3V0IHByb3BlcnR5IGZyb20uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGxheW91dCBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIGxheW91dCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBnZXRMYXlvdXRQcm9wZXJ0eShsYXllcklkOiBzdHJpbmcsIG5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5nZXRMYXlvdXRQcm9wZXJ0eShsYXllcklkLCBuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhbnkgY29tYmluYXRpb24gb2YgbGlnaHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpZ2h0IExpZ2h0IHByb3BlcnRpZXMgdG8gc2V0LiBNdXN0IGNvbmZvcm0gdG8gdGhlIFtNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8jbGlnaHQpLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy52YWxpZGF0ZT10cnVlXSBXaGV0aGVyIHRvIGNoZWNrIGlmIHRoZSBmaWx0ZXIgY29uZm9ybXMgdG8gdGhlIE1hcGJveCBHTCBTdHlsZSBTcGVjaWZpY2F0aW9uLiBEaXNhYmxpbmcgdmFsaWRhdGlvbiBpcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB0aGF0IHNob3VsZCBvbmx5IGJlIHVzZWQgaWYgeW91IGhhdmUgcHJldmlvdXNseSB2YWxpZGF0ZWQgdGhlIHZhbHVlcyB5b3Ugd2lsbCBiZSBwYXNzaW5nIHRvIHRoaXMgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgbGF5ZXJWaXNpYmlsaXR5ID0gbWFwLmdldExheW91dFByb3BlcnR5KCdteS1sYXllcicsICd2aXNpYmlsaXR5Jyk7XG4gICAgICogQHNlZSBbU2hvdyBhbmQgaGlkZSBsYXllcnNdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3RvZ2dsZS1sYXllcnMvKVxuICAgICAqL1xuICAgIHNldExpZ2h0KGxpZ2h0OiBMaWdodFNwZWNpZmljYXRpb24sIG9wdGlvbnM6IFN0eWxlU2V0dGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX2xhenlJbml0RW1wdHlTdHlsZSgpO1xuICAgICAgICB0aGlzLnN0eWxlLnNldExpZ2h0KGxpZ2h0LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgbGlnaHQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHJldHVybnMge09iamVjdH0gbGlnaHQgTGlnaHQgcHJvcGVydGllcyBvZiB0aGUgc3R5bGUuXG4gICAgICovXG4gICAgZ2V0TGlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmdldExpZ2h0KCk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtcmV0dXJuc1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGBzdGF0ZWAgb2YgYSBmZWF0dXJlLlxuICAgICAqIEEgZmVhdHVyZSdzIGBzdGF0ZWAgaXMgYSBzZXQgb2YgdXNlci1kZWZpbmVkIGtleS12YWx1ZSBwYWlycyB0aGF0IGFyZSBhc3NpZ25lZCB0byBhIGZlYXR1cmUgYXQgcnVudGltZS5cbiAgICAgKiBXaGVuIHVzaW5nIHRoaXMgbWV0aG9kLCB0aGUgYHN0YXRlYCBvYmplY3QgaXMgbWVyZ2VkIHdpdGggYW55IGV4aXN0aW5nIGtleS12YWx1ZSBwYWlycyBpbiB0aGUgZmVhdHVyZSdzIHN0YXRlLlxuICAgICAqIEZlYXR1cmVzIGFyZSBpZGVudGlmaWVkIGJ5IHRoZWlyIGBmZWF0dXJlLmlkYCBhdHRyaWJ1dGUsIHdoaWNoIGNhbiBiZSBhbnkgbnVtYmVyIG9yIHN0cmluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBzb3VyY2VzIHRoYXQgaGF2ZSBhIGBmZWF0dXJlLmlkYCBhdHRyaWJ1dGUuIFRoZSBgZmVhdHVyZS5pZGAgYXR0cmlidXRlIGNhbiBiZSBkZWZpbmVkIGluIHRocmVlIHdheXM6XG4gICAgICogLSBGb3IgdmVjdG9yIG9yIEdlb0pTT04gc291cmNlcywgaW5jbHVkaW5nIGFuIGBpZGAgYXR0cmlidXRlIGluIHRoZSBvcmlnaW5hbCBkYXRhIGZpbGUuXG4gICAgICogLSBGb3IgdmVjdG9yIG9yIEdlb0pTT04gc291cmNlcywgdXNpbmcgdGhlIFtgcHJvbW90ZUlkYF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvc291cmNlcy8jdmVjdG9yLXByb21vdGVJZCkgb3B0aW9uIGF0IHRoZSB0aW1lIHRoZSBzb3VyY2UgaXMgZGVmaW5lZC5cbiAgICAgKiAtIEZvciBHZW9KU09OIHNvdXJjZXMsIHVzaW5nIHRoZSBbYGdlbmVyYXRlSWRgXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy9zb3VyY2VzLyNnZW9qc29uLWdlbmVyYXRlSWQpIG9wdGlvbiB0byBhdXRvLWFzc2lnbiBhbiBgaWRgIGJhc2VkIG9uIHRoZSBmZWF0dXJlJ3MgaW5kZXggaW4gdGhlIHNvdXJjZSBkYXRhLiBJZiB5b3UgY2hhbmdlIGZlYXR1cmUgZGF0YSB1c2luZyBgbWFwLmdldFNvdXJjZSgnc29tZSBpZCcpLnNldERhdGEoLi4pYCwgeW91IG1heSBuZWVkIHRvIHJlLWFwcGx5IHN0YXRlIHRha2luZyBpbnRvIGFjY291bnQgdXBkYXRlZCBgaWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIF9Ob3RlOiBZb3UgY2FuIHVzZSB0aGUgW2BmZWF0dXJlLXN0YXRlYCBleHByZXNzaW9uXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy9leHByZXNzaW9ucy8jZmVhdHVyZS1zdGF0ZSkgdG8gYWNjZXNzIHRoZSB2YWx1ZXMgaW4gYSBmZWF0dXJlJ3Mgc3RhdGUgb2JqZWN0IGZvciB0aGUgcHVycG9zZXMgb2Ygc3R5bGluZy5fXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZmVhdHVyZSBGZWF0dXJlIGlkZW50aWZpZXIuIEZlYXR1cmUgb2JqZWN0cyByZXR1cm5lZCBmcm9tXG4gICAgICoge0BsaW5rIE1hcCNxdWVyeVJlbmRlcmVkRmVhdHVyZXN9IG9yIGV2ZW50IGhhbmRsZXJzIGNhbiBiZSB1c2VkIGFzIGZlYXR1cmUgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IGZlYXR1cmUuaWQgVW5pcXVlIGlkIG9mIHRoZSBmZWF0dXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlLnNvdXJjZSBUaGUgaWQgb2YgdGhlIHZlY3RvciBvciBHZW9KU09OIHNvdXJjZSBmb3IgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtmZWF0dXJlLnNvdXJjZUxheWVyXSAob3B0aW9uYWwpICpGb3IgdmVjdG9yIHRpbGUgc291cmNlcywgYHNvdXJjZUxheWVyYCBpcyByZXF1aXJlZC4qXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIEEgc2V0IG9mIGtleS12YWx1ZSBwYWlycy4gVGhlIHZhbHVlcyBzaG91bGQgYmUgdmFsaWQgSlNPTiB0eXBlcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gV2hlbiB0aGUgbW91c2UgbW92ZXMgb3ZlciB0aGUgYG15LWxheWVyYCBsYXllciwgdXBkYXRlXG4gICAgICogLy8gdGhlIGZlYXR1cmUgc3RhdGUgZm9yIHRoZSBmZWF0dXJlIHVuZGVyIHRoZSBtb3VzZVxuICAgICAqIG1hcC5vbignbW91c2Vtb3ZlJywgJ215LWxheWVyJywgZnVuY3Rpb24oZSkge1xuICAgICAqICAgaWYgKGUuZmVhdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAqICAgICBtYXAuc2V0RmVhdHVyZVN0YXRlKHtcbiAgICAgKiAgICAgICBzb3VyY2U6ICdteS1zb3VyY2UnLFxuICAgICAqICAgICAgIHNvdXJjZUxheWVyOiAnbXktc291cmNlLWxheWVyJyxcbiAgICAgKiAgICAgICBpZDogZS5mZWF0dXJlc1swXS5pZCxcbiAgICAgKiAgICAgfSwge1xuICAgICAqICAgICAgIGhvdmVyOiB0cnVlXG4gICAgICogICAgIH0pO1xuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogQHNlZSBbQ3JlYXRlIGEgaG92ZXIgZWZmZWN0XShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9ob3Zlci1zdHlsZXMvKVxuICAgICAqIEBzZWUgVHV0b3JpYWw6IFtDcmVhdGUgaW50ZXJhY3RpdmUgaG92ZXIgZWZmZWN0cyB3aXRoIE1hcGJveCBHTCBKU10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vaGVscC90dXRvcmlhbHMvY3JlYXRlLWludGVyYWN0aXZlLWhvdmVyLWVmZmVjdHMtd2l0aC1tYXBib3gtZ2wtanMvKVxuICAgICAqL1xuICAgIHNldEZlYXR1cmVTdGF0ZShmZWF0dXJlOiB7IHNvdXJjZTogc3RyaW5nOyBzb3VyY2VMYXllcj86IHN0cmluZzsgaWQ6IHN0cmluZyB8IG51bWJlcjsgfSwgc3RhdGU6IE9iamVjdCkge1xuICAgICAgICB0aGlzLnN0eWxlLnNldEZlYXR1cmVTdGF0ZShmZWF0dXJlLCBzdGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1yZXR1cm5zXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgYHN0YXRlYCBvZiBhIGZlYXR1cmUsIHNldHRpbmcgaXQgYmFjayB0byB0aGUgZGVmYXVsdCBiZWhhdmlvci5cbiAgICAgKiBJZiBvbmx5IGEgYHRhcmdldC5zb3VyY2VgIGlzIHNwZWNpZmllZCwgaXQgd2lsbCByZW1vdmUgdGhlIHN0YXRlIGZvciBhbGwgZmVhdHVyZXMgZnJvbSB0aGF0IHNvdXJjZS5cbiAgICAgKiBJZiBgdGFyZ2V0LmlkYCBpcyBhbHNvIHNwZWNpZmllZCwgaXQgd2lsbCByZW1vdmUgYWxsIGtleXMgZm9yIHRoYXQgZmVhdHVyZSdzIHN0YXRlLlxuICAgICAqIElmIGBrZXlgIGlzIGFsc28gc3BlY2lmaWVkLCBpdCByZW1vdmVzIG9ubHkgdGhhdCBrZXkgZnJvbSB0aGF0IGZlYXR1cmUncyBzdGF0ZS5cbiAgICAgKiBGZWF0dXJlcyBhcmUgaWRlbnRpZmllZCBieSB0aGVpciBgZmVhdHVyZS5pZGAgYXR0cmlidXRlLCB3aGljaCBjYW4gYmUgYW55IG51bWJlciBvciBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IElkZW50aWZpZXIgb2Ygd2hlcmUgdG8gcmVtb3ZlIHN0YXRlLiBJdCBjYW4gYmUgYSBzb3VyY2UsIGEgZmVhdHVyZSwgb3IgYSBzcGVjaWZpYyBrZXkgb2YgZmVhdHVyZS5cbiAgICAgKiBGZWF0dXJlIG9iamVjdHMgcmV0dXJuZWQgZnJvbSB7QGxpbmsgTWFwI3F1ZXJ5UmVuZGVyZWRGZWF0dXJlc30gb3IgZXZlbnQgaGFuZGxlcnMgY2FuIGJlIHVzZWQgYXMgZmVhdHVyZSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gdGFyZ2V0LmlkIChvcHRpb25hbCkgVW5pcXVlIGlkIG9mIHRoZSBmZWF0dXJlLiBPcHRpb25hbCBpZiBrZXkgaXMgbm90IHNwZWNpZmllZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0LnNvdXJjZSBUaGUgaWQgb2YgdGhlIHZlY3RvciBvciBHZW9KU09OIHNvdXJjZSBmb3IgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXQuc291cmNlTGF5ZXJdIChvcHRpb25hbCkgKkZvciB2ZWN0b3IgdGlsZSBzb3VyY2VzLCBgc291cmNlTGF5ZXJgIGlzIHJlcXVpcmVkLipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IChvcHRpb25hbCkgVGhlIGtleSBpbiB0aGUgZmVhdHVyZSBzdGF0ZSB0byByZXNldC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gUmVzZXQgdGhlIGVudGlyZSBzdGF0ZSBvYmplY3QgZm9yIGFsbCBmZWF0dXJlc1xuICAgICAqIC8vIGluIHRoZSBgbXktc291cmNlYCBzb3VyY2VcbiAgICAgKiBtYXAucmVtb3ZlRmVhdHVyZVN0YXRlKHtcbiAgICAgKiAgIHNvdXJjZTogJ215LXNvdXJjZSdcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gV2hlbiB0aGUgbW91c2UgbGVhdmVzIHRoZSBgbXktbGF5ZXJgIGxheWVyLFxuICAgICAqIC8vIHJlc2V0IHRoZSBlbnRpcmUgc3RhdGUgb2JqZWN0IGZvciB0aGVcbiAgICAgKiAvLyBmZWF0dXJlIHVuZGVyIHRoZSBtb3VzZVxuICAgICAqIG1hcC5vbignbW91c2VsZWF2ZScsICdteS1sYXllcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgKiAgIG1hcC5yZW1vdmVGZWF0dXJlU3RhdGUoe1xuICAgICAqICAgICBzb3VyY2U6ICdteS1zb3VyY2UnLFxuICAgICAqICAgICBzb3VyY2VMYXllcjogJ215LXNvdXJjZS1sYXllcicsXG4gICAgICogICAgIGlkOiBlLmZlYXR1cmVzWzBdLmlkXG4gICAgICogICB9KTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gV2hlbiB0aGUgbW91c2UgbGVhdmVzIHRoZSBgbXktbGF5ZXJgIGxheWVyLFxuICAgICAqIC8vIHJlc2V0IG9ubHkgdGhlIGBob3ZlcmAga2V5LXZhbHVlIHBhaXIgaW4gdGhlXG4gICAgICogLy8gc3RhdGUgZm9yIHRoZSBmZWF0dXJlIHVuZGVyIHRoZSBtb3VzZVxuICAgICAqIG1hcC5vbignbW91c2VsZWF2ZScsICdteS1sYXllcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgKiAgIG1hcC5yZW1vdmVGZWF0dXJlU3RhdGUoe1xuICAgICAqICAgICBzb3VyY2U6ICdteS1zb3VyY2UnLFxuICAgICAqICAgICBzb3VyY2VMYXllcjogJ215LXNvdXJjZS1sYXllcicsXG4gICAgICogICAgIGlkOiBlLmZlYXR1cmVzWzBdLmlkXG4gICAgICogICB9LCAnaG92ZXInKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICovXG4gICAgcmVtb3ZlRmVhdHVyZVN0YXRlKHRhcmdldDogeyBzb3VyY2U6IHN0cmluZzsgc291cmNlTGF5ZXI/OiBzdHJpbmc7IGlkPzogc3RyaW5nIHwgbnVtYmVyOyB9LCBrZXk/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5yZW1vdmVGZWF0dXJlU3RhdGUodGFyZ2V0LCBrZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHN0YXRlYCBvZiBhIGZlYXR1cmUuXG4gICAgICogQSBmZWF0dXJlJ3MgYHN0YXRlYCBpcyBhIHNldCBvZiB1c2VyLWRlZmluZWQga2V5LXZhbHVlIHBhaXJzIHRoYXQgYXJlIGFzc2lnbmVkIHRvIGEgZmVhdHVyZSBhdCBydW50aW1lLlxuICAgICAqIEZlYXR1cmVzIGFyZSBpZGVudGlmaWVkIGJ5IHRoZWlyIGBmZWF0dXJlLmlkYCBhdHRyaWJ1dGUsIHdoaWNoIGNhbiBiZSBhbnkgbnVtYmVyIG9yIHN0cmluZy5cbiAgICAgKlxuICAgICAqIF9Ob3RlOiBUbyBhY2Nlc3MgdGhlIHZhbHVlcyBpbiBhIGZlYXR1cmUncyBzdGF0ZSBvYmplY3QgZm9yIHRoZSBwdXJwb3NlcyBvZiBzdHlsaW5nIHRoZSBmZWF0dXJlLCB1c2UgdGhlIFtgZmVhdHVyZS1zdGF0ZWAgZXhwcmVzc2lvbl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvZXhwcmVzc2lvbnMvI2ZlYXR1cmUtc3RhdGUpLl9cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIEZlYXR1cmUgaWRlbnRpZmllci4gRmVhdHVyZSBvYmplY3RzIHJldHVybmVkIGZyb21cbiAgICAgKiB7QGxpbmsgTWFwI3F1ZXJ5UmVuZGVyZWRGZWF0dXJlc30gb3IgZXZlbnQgaGFuZGxlcnMgY2FuIGJlIHVzZWQgYXMgZmVhdHVyZSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gZmVhdHVyZS5pZCBVbmlxdWUgaWQgb2YgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUuc291cmNlIFRoZSBpZCBvZiB0aGUgdmVjdG9yIG9yIEdlb0pTT04gc291cmNlIGZvciB0aGUgZmVhdHVyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZlYXR1cmUuc291cmNlTGF5ZXJdIChvcHRpb25hbCkgKkZvciB2ZWN0b3IgdGlsZSBzb3VyY2VzLCBgc291cmNlTGF5ZXJgIGlzIHJlcXVpcmVkLipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzdGF0ZSBvZiB0aGUgZmVhdHVyZTogYSBzZXQgb2Yga2V5LXZhbHVlIHBhaXJzIHRoYXQgd2FzIGFzc2lnbmVkIHRvIHRoZSBmZWF0dXJlIGF0IHJ1bnRpbWUuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFdoZW4gdGhlIG1vdXNlIG1vdmVzIG92ZXIgdGhlIGBteS1sYXllcmAgbGF5ZXIsXG4gICAgICogLy8gZ2V0IHRoZSBmZWF0dXJlIHN0YXRlIGZvciB0aGUgZmVhdHVyZSB1bmRlciB0aGUgbW91c2VcbiAgICAgKiBtYXAub24oJ21vdXNlbW92ZScsICdteS1sYXllcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgKiAgIGlmIChlLmZlYXR1cmVzLmxlbmd0aCA+IDApIHtcbiAgICAgKiAgICAgbWFwLmdldEZlYXR1cmVTdGF0ZSh7XG4gICAgICogICAgICAgc291cmNlOiAnbXktc291cmNlJyxcbiAgICAgKiAgICAgICBzb3VyY2VMYXllcjogJ215LXNvdXJjZS1sYXllcicsXG4gICAgICogICAgICAgaWQ6IGUuZmVhdHVyZXNbMF0uaWRcbiAgICAgKiAgICAgfSk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKi9cbiAgICBnZXRGZWF0dXJlU3RhdGUoZmVhdHVyZTogeyBzb3VyY2U6IHN0cmluZzsgc291cmNlTGF5ZXI/OiBzdHJpbmc7IGlkOiBzdHJpbmcgfCBudW1iZXI7IH0pOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5nZXRGZWF0dXJlU3RhdGUoZmVhdHVyZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFwJ3MgY29udGFpbmluZyBIVE1MIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSBtYXAncyBjb250YWluZXIuXG4gICAgICovXG4gICAgZ2V0Q29udGFpbmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIEhUTUwgZWxlbWVudCBjb250YWluaW5nIHRoZSBtYXAncyBgPGNhbnZhcz5gIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2FudCB0byBhZGQgbm9uLUdMIG92ZXJsYXlzIHRvIHRoZSBtYXAsIHlvdSBzaG91bGQgYXBwZW5kIHRoZW0gdG8gdGhpcyBlbGVtZW50LlxuICAgICAqXG4gICAgICogVGhpcyBpcyB0aGUgZWxlbWVudCB0byB3aGljaCBldmVudCBiaW5kaW5ncyBmb3IgbWFwIGludGVyYWN0aXZpdHkgKHN1Y2ggYXMgcGFubmluZyBhbmQgem9vbWluZykgYXJlXG4gICAgICogYXR0YWNoZWQuIEl0IHdpbGwgcmVjZWl2ZSBidWJibGVkIGV2ZW50cyBmcm9tIGNoaWxkIGVsZW1lbnRzIHN1Y2ggYXMgdGhlIGA8Y2FudmFzPmAsIGJ1dCBub3QgZnJvbVxuICAgICAqIG1hcCBjb250cm9scy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gVGhlIGNvbnRhaW5lciBvZiB0aGUgbWFwJ3MgYDxjYW52YXM+YC5cbiAgICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgcG9pbnRdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZHJhZy1hLXBvaW50LylcbiAgICAgKiBAc2VlIFtIaWdobGlnaHQgZmVhdHVyZXMgd2l0aGluIGEgYm91bmRpbmcgYm94XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3VzaW5nLWJveC1xdWVyeXJlbmRlcmVkZmVhdHVyZXMvKVxuICAgICAqL1xuICAgIGdldENhbnZhc0NvbnRhaW5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhc0NvbnRhaW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBgPGNhbnZhcz5gIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9IFRoZSBtYXAncyBgPGNhbnZhcz5gIGVsZW1lbnQuXG4gICAgICogQHNlZSBbTWVhc3VyZSBkaXN0YW5jZXNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvbWVhc3VyZS8pXG4gICAgICogQHNlZSBbRGlzcGxheSBhIHBvcHVwIG9uIGhvdmVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvcHVwLW9uLWhvdmVyLylcbiAgICAgKiBAc2VlIFtDZW50ZXIgdGhlIG1hcCBvbiBhIGNsaWNrZWQgc3ltYm9sXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2NlbnRlci1vbi1zeW1ib2wvKVxuICAgICAqL1xuICAgIGdldENhbnZhcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICB9XG5cbiAgICBfY29udGFpbmVyRGltZW5zaW9ucygpIHtcbiAgICAgICAgbGV0IHdpZHRoID0gMDtcbiAgICAgICAgbGV0IGhlaWdodCA9IDA7XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLl9jb250YWluZXIuY2xpZW50V2lkdGggfHwgNDAwO1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5fY29udGFpbmVyLmNsaWVudEhlaWdodCB8fCAzMDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW3dpZHRoLCBoZWlnaHRdO1xuICAgIH1cblxuICAgIF9kZXRlY3RNaXNzaW5nQ1NTKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBjb21wdXRlZENvbG9yID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5fbWlzc2luZ0NTU0NhbmFyeSkuZ2V0UHJvcGVydHlWYWx1ZSgnYmFja2dyb3VuZC1jb2xvcicpO1xuICAgICAgICBpZiAoY29tcHV0ZWRDb2xvciAhPT0gJ3JnYigyNTAsIDEyOCwgMTE0KScpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKCdUaGlzIHBhZ2UgYXBwZWFycyB0byBiZSBtaXNzaW5nIENTUyBkZWNsYXJhdGlvbnMgZm9yICcgK1xuICAgICAgICAgICAgICAgICdNYXBib3ggR0wgSlMsIHdoaWNoIG1heSBjYXVzZSB0aGUgbWFwIHRvIGRpc3BsYXkgaW5jb3JyZWN0bHkuICcgK1xuICAgICAgICAgICAgICAgICdQbGVhc2UgZW5zdXJlIHlvdXIgcGFnZSBpbmNsdWRlcyBtYXBib3gtZ2wuY3NzLCBhcyBkZXNjcmliZWQgJyArXG4gICAgICAgICAgICAgICAgJ2luIGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2FwaS8uJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0dXBDb250YWluZXIoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuX2NvbnRhaW5lcjtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLW1hcCcpO1xuXG4gICAgICAgIGNvbnN0IG1pc3NpbmdDU1NDYW5hcnkgPSB0aGlzLl9taXNzaW5nQ1NTQ2FuYXJ5ID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWNhbmFyeScsIGNvbnRhaW5lcik7XG4gICAgICAgIG1pc3NpbmdDU1NDYW5hcnkuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICB0aGlzLl9kZXRlY3RNaXNzaW5nQ1NTKCk7XG5cbiAgICAgICAgY29uc3QgY2FudmFzQ29udGFpbmVyID0gdGhpcy5fY2FudmFzQ29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWNhbnZhcy1jb250YWluZXInLCBjb250YWluZXIpO1xuICAgICAgICBpZiAodGhpcy5faW50ZXJhY3RpdmUpIHtcbiAgICAgICAgICAgIGNhbnZhc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1pbnRlcmFjdGl2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2FudmFzID0gRE9NLmNyZWF0ZSgnY2FudmFzJywgJ21hcGJveGdsLWNhbnZhcycsIGNhbnZhc0NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd3ZWJnbGNvbnRleHRsb3N0JywgdGhpcy5fY29udGV4dExvc3QsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5fY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgdGhpcy5fY29udGV4dFJlc3RvcmVkLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgdGhpcy5fY2FudmFzLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdNYXAnKTtcbiAgICAgICAgdGhpcy5fY2FudmFzLnNldEF0dHJpYnV0ZSgncm9sZScsICdyZWdpb24nKTtcblxuICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5fY29udGFpbmVyRGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLl9yZXNpemVDYW52YXMoZGltZW5zaW9uc1swXSwgZGltZW5zaW9uc1sxXSk7XG5cbiAgICAgICAgY29uc3QgY29udHJvbENvbnRhaW5lciA9IHRoaXMuX2NvbnRyb2xDb250YWluZXIgPSBET00uY3JlYXRlKCdkaXYnLCAnbWFwYm94Z2wtY29udHJvbC1jb250YWluZXInLCBjb250YWluZXIpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLl9jb250cm9sUG9zaXRpb25zID0ge307XG4gICAgICAgIFsndG9wLWxlZnQnLCAndG9wLXJpZ2h0JywgJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCddLmZvckVhY2goKHBvc2l0aW9uTmFtZSkgPT4ge1xuICAgICAgICAgICAgcG9zaXRpb25zW3Bvc2l0aW9uTmFtZV0gPSBET00uY3JlYXRlKCdkaXYnLCBgbWFwYm94Z2wtY3RybC0ke3Bvc2l0aW9uTmFtZX1gLCBjb250cm9sQ29udGFpbmVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX29uTWFwU2Nyb2xsLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgX3Jlc2l6ZUNhbnZhcyh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICBjb25zdCBwaXhlbFJhdGlvID0gYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cbiAgICAgICAgLy8gUmVxdWVzdCB0aGUgcmVxdWlyZWQgY2FudmFzIHNpemUgdGFraW5nIHRoZSBwaXhlbHJhdGlvIGludG8gYWNjb3VudC5cbiAgICAgICAgdGhpcy5fY2FudmFzLndpZHRoID0gcGl4ZWxSYXRpbyAqIHdpZHRoO1xuICAgICAgICB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gcGl4ZWxSYXRpbyAqIGhlaWdodDtcblxuICAgICAgICAvLyBNYWludGFpbiB0aGUgc2FtZSBjYW52YXMgc2l6ZSwgcG90ZW50aWFsbHkgZG93bnNjYWxpbmcgaXQgZm9yIEhpRFBJIGRpc3BsYXlzXG4gICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YDtcbiAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XG4gICAgfVxuXG4gICAgX3NldHVwUGFpbnRlcigpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGV4dGVuZCh7fSwgaXNTdXBwb3J0ZWQud2ViR0xDb250ZXh0QXR0cmlidXRlcywge1xuICAgICAgICAgICAgZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdDogdGhpcy5fZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCxcbiAgICAgICAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogdGhpcy5fcHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuICAgICAgICAgICAgYW50aWFsaWFzOiB0aGlzLl9hbnRpYWxpYXMgfHwgZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLl9jYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBhdHRyaWJ1dGVzKSB8fFxuICAgICAgICAgICAgdGhpcy5fY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGF0dHJpYnV0ZXMpO1xuXG4gICAgICAgIGlmICghZ2wpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIFdlYkdMJykpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFpbnRlciA9IG5ldyBQYWludGVyKGdsLCB0aGlzLnRyYW5zZm9ybSk7XG5cbiAgICAgICAgd2VicFN1cHBvcnRlZC50ZXN0U3VwcG9ydChnbCk7XG4gICAgfVxuXG4gICAgX2NvbnRleHRMb3N0KGV2ZW50OiAqKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0aGlzLl9mcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fZnJhbWUuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnd2ViZ2xjb250ZXh0bG9zdCcsIHtvcmlnaW5hbEV2ZW50OiBldmVudH0pKTtcbiAgICB9XG5cbiAgICBfY29udGV4dFJlc3RvcmVkKGV2ZW50OiAqKSB7XG4gICAgICAgIHRoaXMuX3NldHVwUGFpbnRlcigpO1xuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCB7b3JpZ2luYWxFdmVudDogZXZlbnR9KSk7XG4gICAgfVxuXG4gICAgX29uTWFwU2Nyb2xsKGV2ZW50OiAqKSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IHRoaXMuX2NvbnRhaW5lcikgcmV0dXJuO1xuXG4gICAgICAgIC8vIFJldmVydCBhbnkgc2Nyb2xsIHdoaWNoIHdvdWxkIG1vdmUgdGhlIGNhbnZhcyBvdXRzaWRlIG9mIHRoZSB2aWV3XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB0aGlzLl9jb250YWluZXIuc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIG1hcCBpcyBmdWxseSBsb2FkZWQuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGBmYWxzZWAgaWYgdGhlIHN0eWxlIGlzIG5vdCB5ZXQgZnVsbHkgbG9hZGVkLFxuICAgICAqIG9yIGlmIHRoZXJlIGhhcyBiZWVuIGEgY2hhbmdlIHRvIHRoZSBzb3VyY2VzIG9yIHN0eWxlIHRoYXRcbiAgICAgKiBoYXMgbm90IHlldCBmdWxseSBsb2FkZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gQSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgbWFwIGlzIGZ1bGx5IGxvYWRlZC5cbiAgICAgKi9cbiAgICBsb2FkZWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5fc3R5bGVEaXJ0eSAmJiAhdGhpcy5fc291cmNlc0RpcnR5ICYmICEhdGhpcy5zdHlsZSAmJiB0aGlzLnN0eWxlLmxvYWRlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGlzIG1hcCdzIHN0eWxlIGFuZCBzb3VyY2VzLCBhbmQgcmUtcmVuZGVyIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVwZGF0ZVN0eWxlIG1hcmsgdGhlIG1hcCdzIHN0eWxlIGZvciByZXByb2Nlc3NpbmcgYXNcbiAgICAgKiB3ZWxsIGFzIGl0cyBzb3VyY2VzXG4gICAgICogQHJldHVybnMge01hcH0gdGhpc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VwZGF0ZSh1cGRhdGVTdHlsZT86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0eWxlKSByZXR1cm4gdGhpcztcblxuICAgICAgICB0aGlzLl9zdHlsZURpcnR5ID0gdGhpcy5fc3R5bGVEaXJ0eSB8fCB1cGRhdGVTdHlsZTtcbiAgICAgICAgdGhpcy5fc291cmNlc0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50cmlnZ2VyUmVwYWludCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgdGhhdCB0aGUgZ2l2ZW4gY2FsbGJhY2sgYmUgZXhlY3V0ZWQgZHVyaW5nIHRoZSBuZXh0IHJlbmRlclxuICAgICAqIGZyYW1lLiAgU2NoZWR1bGUgYSByZW5kZXIgZnJhbWUgaWYgb25lIGlzIG5vdCBhbHJlYWR5IHNjaGVkdWxlZC5cbiAgICAgKiBAcmV0dXJucyBBbiBpZCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgY2FsbGJhY2tcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZXF1ZXN0UmVuZGVyRnJhbWUoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBUYXNrSUQge1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlclRhc2tRdWV1ZS5hZGQoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIF9jYW5jZWxSZW5kZXJGcmFtZShpZDogVGFza0lEKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlclRhc2tRdWV1ZS5yZW1vdmUoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgd2hlbiBhIChyZS0pcmVuZGVyIG9mIHRoZSBtYXAgaXMgcmVxdWlyZWQ6XG4gICAgICogLSBUaGUgc3R5bGUgaGFzIGNoYW5nZWQgKGBzZXRQYWludFByb3BlcnR5KClgLCBldGMuKVxuICAgICAqIC0gU291cmNlIGRhdGEgaGFzIGNoYW5nZWQgKGUuZy4gdGlsZXMgaGF2ZSBmaW5pc2hlZCBsb2FkaW5nKVxuICAgICAqIC0gVGhlIG1hcCBoYXMgaXMgbW92aW5nIChvciBqdXN0IGZpbmlzaGVkIG1vdmluZylcbiAgICAgKiAtIEEgdHJhbnNpdGlvbiBpcyBpbiBwcm9ncmVzc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhaW50U3RhcnRUaW1lU3RhbXAgIFRoZSB0aW1lIHdoZW4gdGhlIGFuaW1hdGlvbiBmcmFtZSBiZWdhbiBleGVjdXRpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TWFwfSB0aGlzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVyKHBhaW50U3RhcnRUaW1lU3RhbXA6IG51bWJlcikge1xuICAgICAgICBsZXQgZ3B1VGltZXIsIGZyYW1lU3RhcnRUaW1lID0gMDtcbiAgICAgICAgY29uc3QgZXh0VGltZXJRdWVyeSA9IHRoaXMucGFpbnRlci5jb250ZXh0LmV4dFRpbWVyUXVlcnk7XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbnMoJ2dwdS10aW1pbmctZnJhbWUnKSkge1xuICAgICAgICAgICAgZ3B1VGltZXIgPSBleHRUaW1lclF1ZXJ5LmNyZWF0ZVF1ZXJ5RVhUKCk7XG4gICAgICAgICAgICBleHRUaW1lclF1ZXJ5LmJlZ2luUXVlcnlFWFQoZXh0VGltZXJRdWVyeS5USU1FX0VMQVBTRURfRVhULCBncHVUaW1lcik7XG4gICAgICAgICAgICBmcmFtZVN0YXJ0VGltZSA9IGJyb3dzZXIubm93KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBIGN1c3RvbSBsYXllciBtYXkgaGF2ZSB1c2VkIHRoZSBjb250ZXh0IGFzeW5jaHJvbm91c2x5LiBNYXJrIHRoZSBzdGF0ZSBhcyBkaXJ0eS5cbiAgICAgICAgdGhpcy5wYWludGVyLmNvbnRleHQuc2V0RGlydHkoKTtcbiAgICAgICAgdGhpcy5wYWludGVyLnNldEJhc2VTdGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuX3JlbmRlclRhc2tRdWV1ZS5ydW4ocGFpbnRTdGFydFRpbWVTdGFtcCk7XG4gICAgICAgIC8vIEEgdGFzayBxdWV1ZSBjYWxsYmFjayBtYXkgaGF2ZSBmaXJlZCBhIHVzZXIgZXZlbnQgd2hpY2ggbWF5IGhhdmUgcmVtb3ZlZCB0aGUgbWFwXG4gICAgICAgIGlmICh0aGlzLl9yZW1vdmVkKSByZXR1cm47XG5cbiAgICAgICAgbGV0IGNyb3NzRmFkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgLy8gSWYgdGhlIHN0eWxlIGhhcyBjaGFuZ2VkLCB0aGUgbWFwIGlzIGJlaW5nIHpvb21lZCwgb3IgYSB0cmFuc2l0aW9uIG9yIGZhZGUgaXMgaW4gcHJvZ3Jlc3M6XG4gICAgICAgIC8vICAtIEFwcGx5IHN0eWxlIGNoYW5nZXMgKGluIGEgYmF0Y2gpXG4gICAgICAgIC8vICAtIFJlY2FsY3VsYXRlIHBhaW50IHByb3BlcnRpZXMuXG4gICAgICAgIGlmICh0aGlzLnN0eWxlICYmIHRoaXMuX3N0eWxlRGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlRGlydHkgPSBmYWxzZTtcblxuICAgICAgICAgICAgY29uc3Qgem9vbSA9IHRoaXMudHJhbnNmb3JtLnpvb207XG4gICAgICAgICAgICBjb25zdCBub3cgPSBicm93c2VyLm5vdygpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZS56b29tSGlzdG9yeS51cGRhdGUoem9vbSwgbm93KTtcblxuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IG5ldyBFdmFsdWF0aW9uUGFyYW1ldGVycyh6b29tLCB7XG4gICAgICAgICAgICAgICAgbm93LFxuICAgICAgICAgICAgICAgIGZhZGVEdXJhdGlvbjogdGhpcy5fZmFkZUR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIHpvb21IaXN0b3J5OiB0aGlzLnN0eWxlLnpvb21IaXN0b3J5LFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHRoaXMuc3R5bGUuZ2V0VHJhbnNpdGlvbigpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gcGFyYW1ldGVycy5jcm9zc0ZhZGluZ0ZhY3RvcigpO1xuICAgICAgICAgICAgaWYgKGZhY3RvciAhPT0gMSB8fCBmYWN0b3IgIT09IHRoaXMuX2Nyb3NzRmFkaW5nRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgY3Jvc3NGYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nyb3NzRmFkaW5nRmFjdG9yID0gZmFjdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN0eWxlLnVwZGF0ZShwYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGFyZSBpbiBfcmVuZGVyIGZvciBhbnkgcmVhc29uIG90aGVyIHRoYW4gYW4gaW4tcHJvZ3Jlc3MgcGFpbnRcbiAgICAgICAgLy8gdHJhbnNpdGlvbiwgdXBkYXRlIHNvdXJjZSBjYWNoZXMgdG8gY2hlY2sgZm9yIGFuZCBsb2FkIGFueSB0aWxlcyB3ZVxuICAgICAgICAvLyBuZWVkIGZvciB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgdGhpcy5fc291cmNlc0RpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLl9zb3VyY2VzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUuX3VwZGF0ZVNvdXJjZXModGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGxhY2VtZW50RGlydHkgPSB0aGlzLnN0eWxlICYmIHRoaXMuc3R5bGUuX3VwZGF0ZVBsYWNlbWVudCh0aGlzLnBhaW50ZXIudHJhbnNmb3JtLCB0aGlzLnNob3dDb2xsaXNpb25Cb3hlcywgdGhpcy5fZmFkZUR1cmF0aW9uLCB0aGlzLl9jcm9zc1NvdXJjZUNvbGxpc2lvbnMpO1xuXG4gICAgICAgIC8vIEFjdHVhbGx5IGRyYXdcbiAgICAgICAgdGhpcy5wYWludGVyLnJlbmRlcih0aGlzLnN0eWxlLCB7XG4gICAgICAgICAgICBzaG93VGlsZUJvdW5kYXJpZXM6IHRoaXMuc2hvd1RpbGVCb3VuZGFyaWVzLFxuICAgICAgICAgICAgc2hvd092ZXJkcmF3SW5zcGVjdG9yOiB0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IsXG4gICAgICAgICAgICByb3RhdGluZzogdGhpcy5pc1JvdGF0aW5nKCksXG4gICAgICAgICAgICB6b29taW5nOiB0aGlzLmlzWm9vbWluZygpLFxuICAgICAgICAgICAgbW92aW5nOiB0aGlzLmlzTW92aW5nKCksXG4gICAgICAgICAgICBmYWRlRHVyYXRpb246IHRoaXMuX2ZhZGVEdXJhdGlvbixcbiAgICAgICAgICAgIHNob3dQYWRkaW5nOiB0aGlzLnNob3dQYWRkaW5nLFxuICAgICAgICAgICAgZ3B1VGltaW5nOiAhIXRoaXMubGlzdGVucygnZ3B1LXRpbWluZy1sYXllcicpLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdyZW5kZXInKSk7XG5cbiAgICAgICAgaWYgKHRoaXMubG9hZGVkKCkgJiYgIXRoaXMuX2xvYWRlZCkge1xuICAgICAgICAgICAgdGhpcy5fbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIFBlcmZvcm1hbmNlVXRpbHMubWFyayhQZXJmb3JtYW5jZU1hcmtlcnMubG9hZCk7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdsb2FkJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgKHRoaXMuc3R5bGUuaGFzVHJhbnNpdGlvbnMoKSB8fCBjcm9zc0ZhZGluZykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgIXRoaXMuX3BsYWNlbWVudERpcnR5KSB7XG4gICAgICAgICAgICAvLyBTaW5jZSBubyBmYWRlIG9wZXJhdGlvbnMgYXJlIGluIHByb2dyZXNzLCB3ZSBjYW4gcmVsZWFzZVxuICAgICAgICAgICAgLy8gYWxsIHRpbGVzIGhlbGQgZm9yIGZhZGluZy4gSWYgd2UgZGlkbid0IGRvIHRoaXMsIHRoZSB0aWxlc1xuICAgICAgICAgICAgLy8gd291bGQganVzdCBzaXQgaW4gdGhlIFNvdXJjZUNhY2hlcyB1bnRpbCB0aGUgbmV4dCByZW5kZXJcbiAgICAgICAgICAgIHRoaXMuc3R5bGUuX3JlbGVhc2VTeW1ib2xGYWRlVGlsZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbnMoJ2dwdS10aW1pbmctZnJhbWUnKSkge1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyQ1BVVGltZSA9IGJyb3dzZXIubm93KCkgLSBmcmFtZVN0YXJ0VGltZTtcbiAgICAgICAgICAgIGV4dFRpbWVyUXVlcnkuZW5kUXVlcnlFWFQoZXh0VGltZXJRdWVyeS5USU1FX0VMQVBTRURfRVhULCBncHVUaW1lcik7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJHUFVUaW1lID0gZXh0VGltZXJRdWVyeS5nZXRRdWVyeU9iamVjdEVYVChncHVUaW1lciwgZXh0VGltZXJRdWVyeS5RVUVSWV9SRVNVTFRfRVhUKSAvICgxMDAwICogMTAwMCk7XG4gICAgICAgICAgICAgICAgZXh0VGltZXJRdWVyeS5kZWxldGVRdWVyeUVYVChncHVUaW1lcik7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZ3B1LXRpbWluZy1mcmFtZScsIHtcbiAgICAgICAgICAgICAgICAgICAgY3B1VGltZTogcmVuZGVyQ1BVVGltZSxcbiAgICAgICAgICAgICAgICAgICAgZ3B1VGltZTogcmVuZGVyR1BVVGltZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0sIDUwKTsgLy8gV2FpdCA1MG1zIHRvIGdpdmUgdGltZSBmb3IgYWxsIEdQVSBjYWxscyB0byBmaW5pc2ggYmVmb3JlIHF1ZXJ5aW5nXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5saXN0ZW5zKCdncHUtdGltaW5nLWxheWVyJykpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0dGluZyB0aGUgUGFpbnRlcidzIHBlci1sYXllciB0aW1pbmcgcXVlcmllcyBoZXJlIGFsbG93cyB1cyB0byBpc29sYXRlXG4gICAgICAgICAgICAvLyB0aGUgcXVlcmllcyB0byBpbmRpdmlkdWFsIGZyYW1lcy5cbiAgICAgICAgICAgIGNvbnN0IGZyYW1lTGF5ZXJRdWVyaWVzID0gdGhpcy5wYWludGVyLmNvbGxlY3RHcHVUaW1lcnMoKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyZWRMYXllclRpbWVzID0gdGhpcy5wYWludGVyLnF1ZXJ5R3B1VGltZXJzKGZyYW1lTGF5ZXJRdWVyaWVzKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2dwdS10aW1pbmctbGF5ZXInLCB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyVGltZXM6IHJlbmRlcmVkTGF5ZXJUaW1lc1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0sIDUwKTsgLy8gV2FpdCA1MG1zIHRvIGdpdmUgdGltZSBmb3IgYWxsIEdQVSBjYWxscyB0byBmaW5pc2ggYmVmb3JlIHF1ZXJ5aW5nXG4gICAgICAgIH1cblxuICAgICAgICAvLyBTY2hlZHVsZSBhbm90aGVyIHJlbmRlciBmcmFtZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gRXZlbiB0aG91Z2ggYF9zdHlsZURpcnR5YCBhbmQgYF9zb3VyY2VzRGlydHlgIGFyZSByZXNldCBpbiB0aGlzXG4gICAgICAgIC8vIG1ldGhvZCwgc3luY2hyb25vdXMgZXZlbnRzIGZpcmVkIGR1cmluZyBTdHlsZSN1cGRhdGUgb3JcbiAgICAgICAgLy8gU3R5bGUjX3VwZGF0ZVNvdXJjZXMgY291bGQgaGF2ZSBjYXVzZWQgdGhlbSB0byBiZSBzZXQgYWdhaW4uXG4gICAgICAgIGNvbnN0IHNvbWV0aGluZ0RpcnR5ID0gdGhpcy5fc291cmNlc0RpcnR5IHx8IHRoaXMuX3N0eWxlRGlydHkgfHwgdGhpcy5fcGxhY2VtZW50RGlydHk7XG4gICAgICAgIGlmIChzb21ldGhpbmdEaXJ0eSB8fCB0aGlzLl9yZXBhaW50KSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJSZXBhaW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNNb3ZpbmcoKSAmJiB0aGlzLmxvYWRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdpZGxlJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2xvYWRlZCAmJiAhdGhpcy5fZnVsbHlMb2FkZWQgJiYgIXNvbWV0aGluZ0RpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxseUxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBQZXJmb3JtYW5jZVV0aWxzLm1hcmsoUGVyZm9ybWFuY2VNYXJrZXJzLmZ1bGxMb2FkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFuIHVwIGFuZCByZWxlYXNlIGFsbCBpbnRlcm5hbCByZXNvdXJjZXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbWFwLlxuICAgICAqXG4gICAgICogVGhpcyBpbmNsdWRlcyBET00gZWxlbWVudHMsIGV2ZW50IGJpbmRpbmdzLCB3ZWIgd29ya2VycywgYW5kIFdlYkdMIHJlc291cmNlcy5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIG1ldGhvZCB3aGVuIHlvdSBhcmUgZG9uZSB1c2luZyB0aGUgbWFwIGFuZCB3aXNoIHRvIGVuc3VyZSB0aGF0IGl0IG5vXG4gICAgICogbG9uZ2VyIGNvbnN1bWVzIGJyb3dzZXIgcmVzb3VyY2VzLiBBZnRlcndhcmRzLCB5b3UgbXVzdCBub3QgY2FsbCBhbnkgb3RoZXJcbiAgICAgKiBtZXRob2RzIG9uIHRoZSBtYXAuXG4gICAgICovXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICBpZiAodGhpcy5faGFzaCkgdGhpcy5faGFzaC5yZW1vdmUoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGNvbnRyb2wgb2YgdGhpcy5fY29udHJvbHMpIGNvbnRyb2wub25SZW1vdmUodGhpcyk7XG4gICAgICAgIHRoaXMuX2NvbnRyb2xzID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZS5jYW5jZWwoKTtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW5kZXJUYXNrUXVldWUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5wYWludGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5kZXN0cm95KCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICB0aGlzLnNldFN0eWxlKG51bGwpO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9vbldpbmRvd1Jlc2l6ZSwgZmFsc2UpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcy5fb25XaW5kb3dSZXNpemUsIGZhbHNlKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvbmxpbmUnLCB0aGlzLl9vbldpbmRvd09ubGluZSwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gdGhpcy5wYWludGVyLmNvbnRleHQuZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9sb3NlX2NvbnRleHQnKTtcbiAgICAgICAgaWYgKGV4dGVuc2lvbikgZXh0ZW5zaW9uLmxvc2VDb250ZXh0KCk7XG4gICAgICAgIHJlbW92ZU5vZGUodGhpcy5fY2FudmFzQ29udGFpbmVyKTtcbiAgICAgICAgcmVtb3ZlTm9kZSh0aGlzLl9jb250cm9sQ29udGFpbmVyKTtcbiAgICAgICAgcmVtb3ZlTm9kZSh0aGlzLl9taXNzaW5nQ1NTQ2FuYXJ5KTtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLW1hcCcpO1xuXG4gICAgICAgIFBlcmZvcm1hbmNlVXRpbHMuY2xlYXJNZXRyaWNzKCk7XG5cbiAgICAgICAgdGhpcy5fcmVtb3ZlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3JlbW92ZScpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSByZW5kZXJpbmcgb2YgYSBzaW5nbGUgZnJhbWUuIFVzZSB0aGlzIG1ldGhvZCB3aXRoIGN1c3RvbSBsYXllcnMgdG9cbiAgICAgKiByZXBhaW50IHRoZSBtYXAgd2hlbiB0aGUgbGF5ZXIgY2hhbmdlcy4gQ2FsbGluZyB0aGlzIG11bHRpcGxlIHRpbWVzIGJlZm9yZSB0aGVcbiAgICAgKiBuZXh0IGZyYW1lIGlzIHJlbmRlcmVkIHdpbGwgc3RpbGwgcmVzdWx0IGluIG9ubHkgYSBzaW5nbGUgZnJhbWUgYmVpbmcgcmVuZGVyZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAudHJpZ2dlclJlcGFpbnQoKTtcbiAgICAgKiBAc2VlIFtBZGQgYSAzRCBtb2RlbF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYWRkLTNkLW1vZGVsLylcbiAgICAgKiBAc2VlIFtBZGQgYW4gYW5pbWF0ZWQgaWNvbiB0byB0aGUgbWFwXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9hZGQtaW1hZ2UtYW5pbWF0ZWQvKVxuICAgICAqL1xuICAgIHRyaWdnZXJSZXBhaW50KCkge1xuICAgICAgICBpZiAodGhpcy5zdHlsZSAmJiAhdGhpcy5fZnJhbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lID0gYnJvd3Nlci5mcmFtZSgocGFpbnRTdGFydFRpbWVTdGFtcDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgUGVyZm9ybWFuY2VVdGlscy5mcmFtZShwYWludFN0YXJ0VGltZVN0YW1wKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKHBhaW50U3RhcnRUaW1lU3RhbXApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25XaW5kb3dPbmxpbmUoKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH1cblxuICAgIF9vbldpbmRvd1Jlc2l6ZShldmVudDogRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYWNrUmVzaXplKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSh7b3JpZ2luYWxFdmVudDogZXZlbnR9KS5fdXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuZCBzZXRzIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIG1hcCB3aWxsIHJlbmRlciBhbiBvdXRsaW5lXG4gICAgICogYXJvdW5kIGVhY2ggdGlsZSBhbmQgdGhlIHRpbGUgSUQuIFRoZXNlIHRpbGUgYm91bmRhcmllcyBhcmUgdXNlZnVsIGZvclxuICAgICAqIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIFRoZSB1bmNvbXByZXNzZWQgZmlsZSBzaXplIG9mIHRoZSBmaXJzdCB2ZWN0b3Igc291cmNlIGlzIGRyYXduIGluIHRoZSB0b3AgbGVmdFxuICAgICAqIGNvcm5lciBvZiBlYWNoIHRpbGUsIG5leHQgdG8gdGhlIHRpbGUgSUQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBzaG93VGlsZUJvdW5kYXJpZXNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuc2hvd1RpbGVCb3VuZGFyaWVzID0gdHJ1ZTtcbiAgICAgKi9cbiAgICBnZXQgc2hvd1RpbGVCb3VuZGFyaWVzKCk6IGJvb2xlYW4geyByZXR1cm4gISF0aGlzLl9zaG93VGlsZUJvdW5kYXJpZXM7IH1cbiAgICBzZXQgc2hvd1RpbGVCb3VuZGFyaWVzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG93VGlsZUJvdW5kYXJpZXMgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuX3Nob3dUaWxlQm91bmRhcmllcyA9IHZhbHVlO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuZCBzZXRzIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIG1hcCB3aWxsIHZpc3VhbGl6ZVxuICAgICAqIHRoZSBwYWRkaW5nIG9mZnNldHMuXG4gICAgICpcbiAgICAgKiBAbmFtZSBzaG93UGFkZGluZ1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKi9cbiAgICBnZXQgc2hvd1BhZGRpbmcoKTogYm9vbGVhbiB7IHJldHVybiAhIXRoaXMuX3Nob3dQYWRkaW5nOyB9XG4gICAgc2V0IHNob3dQYWRkaW5nKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG93UGFkZGluZyA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5fc2hvd1BhZGRpbmcgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbmQgc2V0cyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBtYXAgd2lsbCByZW5kZXIgYm94ZXNcbiAgICAgKiBhcm91bmQgYWxsIHN5bWJvbHMgaW4gdGhlIGRhdGEgc291cmNlLCByZXZlYWxpbmcgd2hpY2ggc3ltYm9sc1xuICAgICAqIHdlcmUgcmVuZGVyZWQgb3Igd2hpY2ggd2VyZSBoaWRkZW4gZHVlIHRvIGNvbGxpc2lvbnMuXG4gICAgICogVGhpcyBpbmZvcm1hdGlvbiBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEBuYW1lIHNob3dDb2xsaXNpb25Cb3hlc1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKi9cbiAgICBnZXQgc2hvd0NvbGxpc2lvbkJveGVzKCk6IGJvb2xlYW4geyByZXR1cm4gISF0aGlzLl9zaG93Q29sbGlzaW9uQm94ZXM7IH1cbiAgICBzZXQgc2hvd0NvbGxpc2lvbkJveGVzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG93Q29sbGlzaW9uQm94ZXMgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuX3Nob3dDb2xsaXNpb25Cb3hlcyA9IHZhbHVlO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgdHVybiBjb2xsaXNpb24gYm94ZXMgb24gd2UgaGF2ZSB0byBnZW5lcmF0ZSB0aGVtIGZvciBleGlzdGluZyB0aWxlc1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSB0dXJuIHRoZW0gb2ZmLCB0aGVyZSdzIG5vIGNvc3QgdG8gbGVhdmluZyBleGlzdGluZyBib3hlcyBpbiBwbGFjZVxuICAgICAgICAgICAgdGhpcy5zdHlsZS5fZ2VuZXJhdGVDb2xsaXNpb25Cb3hlcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjYWxsIGFuIHVwZGF0ZSB0byByZW1vdmUgY29sbGlzaW9uIGJveGVzXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogR2V0cyBhbmQgc2V0cyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBtYXAgc2hvdWxkIGNvbG9yLWNvZGVcbiAgICAgKiBlYWNoIGZyYWdtZW50IHRvIHNob3cgaG93IG1hbnkgdGltZXMgaXQgaGFzIGJlZW4gc2hhZGVkLlxuICAgICAqIFdoaXRlIGZyYWdtZW50cyBoYXZlIGJlZW4gc2hhZGVkIDggb3IgbW9yZSB0aW1lcy5cbiAgICAgKiBCbGFjayBmcmFnbWVudHMgaGF2ZSBiZWVuIHNoYWRlZCAwIHRpbWVzLlxuICAgICAqIFRoaXMgaW5mb3JtYXRpb24gaXMgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBAbmFtZSBzaG93T3ZlcmRyYXdcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICovXG4gICAgZ2V0IHNob3dPdmVyZHJhd0luc3BlY3RvcigpOiBib29sZWFuIHsgcmV0dXJuICEhdGhpcy5fc2hvd092ZXJkcmF3SW5zcGVjdG9yOyB9XG4gICAgc2V0IHNob3dPdmVyZHJhd0luc3BlY3Rvcih2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5fc2hvd092ZXJkcmF3SW5zcGVjdG9yID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbmQgc2V0cyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBtYXAgd2lsbFxuICAgICAqIGNvbnRpbnVvdXNseSByZXBhaW50LiBUaGlzIGluZm9ybWF0aW9uIGlzIHVzZWZ1bCBmb3IgYW5hbHl6aW5nIHBlcmZvcm1hbmNlLlxuICAgICAqXG4gICAgICogQG5hbWUgcmVwYWludFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKi9cbiAgICBnZXQgcmVwYWludCgpOiBib29sZWFuIHsgcmV0dXJuICEhdGhpcy5fcmVwYWludDsgfVxuICAgIHNldCByZXBhaW50KHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXBhaW50ICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVwYWludCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyUmVwYWludCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHNob3cgdmVydGljZXNcbiAgICBnZXQgdmVydGljZXMoKTogYm9vbGVhbiB7IHJldHVybiAhIXRoaXMuX3ZlcnRpY2VzOyB9XG4gICAgc2V0IHZlcnRpY2VzKHZhbHVlOiBib29sZWFuKSB7IHRoaXMuX3ZlcnRpY2VzID0gdmFsdWU7IHRoaXMuX3VwZGF0ZSgpOyB9XG5cbiAgICAvLyBmb3IgY2FjaGUgYnJvd3NlciB0ZXN0c1xuICAgIF9zZXRDYWNoZUxpbWl0cyhsaW1pdDogbnVtYmVyLCBjaGVja1RocmVzaG9sZDogbnVtYmVyKSB7XG4gICAgICAgIHNldENhY2hlTGltaXRzKGxpbWl0LCBjaGVja1RocmVzaG9sZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHZlcnNpb24gb2YgTWFwYm94IEdMIEpTIGluIHVzZSBhcyBzcGVjaWZpZWQgaW4gcGFja2FnZS5qc29uLCBDSEFOR0VMT0cubWQsIGFuZCB0aGUgR2l0SHViIHJlbGVhc2UuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2ZXJzaW9uXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEB2YXIge3N0cmluZ30gdmVyc2lvblxuICAgICAqL1xuXG4gICAgZ2V0IHZlcnNpb24oKTogc3RyaW5nIHsgcmV0dXJuIHZlcnNpb247IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwO1xuXG5mdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpIHtcbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBpbnRlcmFjdGl2ZSBjb250cm9scyBhZGRlZCB0byB0aGUgbWFwLiBUaGlzIGlzIGFcbiAqIHNwZWNpZmljYXRpb24gZm9yIGltcGxlbWVudGVycyB0byBtb2RlbDogaXQgaXMgbm90XG4gKiBhbiBleHBvcnRlZCBtZXRob2Qgb3IgY2xhc3MuXG4gKlxuICogQ29udHJvbHMgbXVzdCBpbXBsZW1lbnQgYG9uQWRkYCBhbmQgYG9uUmVtb3ZlYCwgYW5kIG11c3Qgb3duIGFuXG4gKiBlbGVtZW50LCB3aGljaCBpcyBvZnRlbiBhIGBkaXZgIGVsZW1lbnQuIFRvIHVzZSBNYXBib3ggR0wgSlMnc1xuICogZGVmYXVsdCBjb250cm9sIHN0eWxpbmcsIGFkZCB0aGUgYG1hcGJveGdsLWN0cmxgIGNsYXNzIHRvIHlvdXIgY29udHJvbCdzXG4gKiBub2RlLlxuICpcbiAqIEBpbnRlcmZhY2UgSUNvbnRyb2xcbiAqIEBleGFtcGxlXG4gKiAvLyBDb250cm9sIGltcGxlbWVudGVkIGFzIEVTNiBjbGFzc1xuICogY2xhc3MgSGVsbG9Xb3JsZENvbnRyb2wge1xuICogICAgIG9uQWRkKG1hcCkge1xuICogICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gKiAgICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICogICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NOYW1lID0gJ21hcGJveGdsLWN0cmwnO1xuICogICAgICAgICB0aGlzLl9jb250YWluZXIudGV4dENvbnRlbnQgPSAnSGVsbG8sIHdvcmxkJztcbiAqICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcbiAqICAgICB9XG4gKlxuICogICAgIG9uUmVtb3ZlKCkge1xuICogICAgICAgICB0aGlzLl9jb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLl9jb250YWluZXIpO1xuICogICAgICAgICB0aGlzLl9tYXAgPSB1bmRlZmluZWQ7XG4gKiAgICAgfVxuICogfVxuICpcbiAqIC8vIENvbnRyb2wgaW1wbGVtZW50ZWQgYXMgRVM1IHByb3RvdHlwaWNhbCBjbGFzc1xuICogZnVuY3Rpb24gSGVsbG9Xb3JsZENvbnRyb2woKSB7IH1cbiAqXG4gKiBIZWxsb1dvcmxkQ29udHJvbC5wcm90b3R5cGUub25BZGQgPSBmdW5jdGlvbihtYXApIHtcbiAqICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gKiAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gKiAgICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTmFtZSA9ICdtYXBib3hnbC1jdHJsJztcbiAqICAgICB0aGlzLl9jb250YWluZXIudGV4dENvbnRlbnQgPSAnSGVsbG8sIHdvcmxkJztcbiAqICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICogfTtcbiAqXG4gKiBIZWxsb1dvcmxkQ29udHJvbC5wcm90b3R5cGUub25SZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gKiAgICAgIHRoaXMuX2NvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX2NvbnRhaW5lcik7XG4gKiAgICAgIHRoaXMuX21hcCA9IHVuZGVmaW5lZDtcbiAqIH07XG4gKi9cblxuLyoqXG4gKiBSZWdpc3RlciBhIGNvbnRyb2wgb24gdGhlIG1hcCBhbmQgZ2l2ZSBpdCBhIGNoYW5jZSB0byByZWdpc3RlciBldmVudCBsaXN0ZW5lcnNcbiAqIGFuZCByZXNvdXJjZXMuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB7QGxpbmsgTWFwI2FkZENvbnRyb2x9XG4gKiBpbnRlcm5hbGx5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIElDb250cm9sXG4gKiBAaW5zdGFuY2VcbiAqIEBuYW1lIG9uQWRkXG4gKiBAcGFyYW0ge01hcH0gbWFwIHRoZSBNYXAgdGhpcyBjb250cm9sIHdpbGwgYmUgYWRkZWQgdG9cbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gVGhlIGNvbnRyb2wncyBjb250YWluZXIgZWxlbWVudC4gVGhpcyBzaG91bGRcbiAqIGJlIGNyZWF0ZWQgYnkgdGhlIGNvbnRyb2wgYW5kIHJldHVybmVkIGJ5IG9uQWRkIHdpdGhvdXQgYmVpbmcgYXR0YWNoZWRcbiAqIHRvIHRoZSBET006IHRoZSBtYXAgd2lsbCBpbnNlcnQgdGhlIGNvbnRyb2wncyBlbGVtZW50IGludG8gdGhlIERPTVxuICogYXMgbmVjZXNzYXJ5LlxuICovXG5cbi8qKlxuICogVW5yZWdpc3RlciBhIGNvbnRyb2wgb24gdGhlIG1hcCBhbmQgZ2l2ZSBpdCBhIGNoYW5jZSB0byBkZXRhY2ggZXZlbnQgbGlzdGVuZXJzXG4gKiBhbmQgcmVzb3VyY2VzLiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkge0BsaW5rIE1hcCNyZW1vdmVDb250cm9sfVxuICogaW50ZXJuYWxseS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBJQ29udHJvbFxuICogQGluc3RhbmNlXG4gKiBAbmFtZSBvblJlbW92ZVxuICogQHBhcmFtIHtNYXB9IG1hcCB0aGUgTWFwIHRoaXMgY29udHJvbCB3aWxsIGJlIHJlbW92ZWQgZnJvbVxuICogQHJldHVybnMge3VuZGVmaW5lZH0gdGhlcmUgaXMgbm8gcmVxdWlyZWQgcmV0dXJuIHZhbHVlIGZvciB0aGlzIG1ldGhvZFxuICovXG5cbi8qKlxuICogT3B0aW9uYWxseSBwcm92aWRlIGEgZGVmYXVsdCBwb3NpdGlvbiBmb3IgdGhpcyBjb250cm9sLiBJZiB0aGlzIG1ldGhvZFxuICogaXMgaW1wbGVtZW50ZWQgYW5kIHtAbGluayBNYXAjYWRkQ29udHJvbH0gaXMgY2FsbGVkIHdpdGhvdXQgdGhlIGBwb3NpdGlvbmBcbiAqIHBhcmFtZXRlciwgdGhlIHZhbHVlIHJldHVybmVkIGJ5IGdldERlZmF1bHRQb3NpdGlvbiB3aWxsIGJlIHVzZWQgYXMgdGhlXG4gKiBjb250cm9sJ3MgcG9zaXRpb24uXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgSUNvbnRyb2xcbiAqIEBpbnN0YW5jZVxuICogQG5hbWUgZ2V0RGVmYXVsdFBvc2l0aW9uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBhIGNvbnRyb2wgcG9zaXRpb24sIG9uZSBvZiB0aGUgdmFsdWVzIHZhbGlkIGluIGFkZENvbnRyb2wuXG4gKi9cblxuLyoqXG4gKiBBIFtgUG9pbnRgIGdlb21ldHJ5XShodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L3BvaW50LWdlb21ldHJ5KSBvYmplY3QsIHdoaWNoIGhhc1xuICogYHhgIGFuZCBgeWAgcHJvcGVydGllcyByZXByZXNlbnRpbmcgc2NyZWVuIGNvb3JkaW5hdGVzIGluIHBpeGVscy5cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQb2ludFxuICogQGV4YW1wbGVcbiAqIHZhciBwb2ludCA9IG5ldyBtYXBib3hnbC5Qb2ludCgtNzcsIDM4KTtcbiAqL1xuXG4vKipcbiAqIEEge0BsaW5rIFBvaW50fSBvciBhbiBhcnJheSBvZiB0d28gbnVtYmVycyByZXByZXNlbnRpbmcgYHhgIGFuZCBgeWAgc2NyZWVuIGNvb3JkaW5hdGVzIGluIHBpeGVscy5cbiAqXG4gKiBAdHlwZWRlZiB7KFBvaW50IHwgQXJyYXk8bnVtYmVyPil9IFBvaW50TGlrZVxuICogQGV4YW1wbGVcbiAqIHZhciBwMSA9IG5ldyBtYXBib3hnbC5Qb2ludCgtNzcsIDM4KTsgLy8gYSBQb2ludExpa2Ugd2hpY2ggaXMgYSBQb2ludFxuICogdmFyIHAyID0gWy03NywgMzhdOyAvLyBhIFBvaW50TGlrZSB3aGljaCBpcyBhbiBhcnJheSBvZiB0d28gbnVtYmVyc1xuICovXG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL3V0aWwvZG9tJztcbmltcG9ydCB7ZXh0ZW5kLCBiaW5kQWxsfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHtNb3VzZVJvdGF0ZUhhbmRsZXIsIE1vdXNlUGl0Y2hIYW5kbGVyfSBmcm9tICcuLi9oYW5kbGVyL21vdXNlJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnLi4vLi4vdXRpbC93aW5kb3cnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcblxudHlwZSBPcHRpb25zID0ge1xuICAgIHNob3dDb21wYXNzPzogYm9vbGVhbixcbiAgICBzaG93Wm9vbT86IGJvb2xlYW4sXG4gICAgdmlzdWFsaXplUGl0Y2g/OiBib29sZWFuXG59O1xuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogT3B0aW9ucyA9IHtcbiAgICBzaG93Q29tcGFzczogdHJ1ZSxcbiAgICBzaG93Wm9vbTogdHJ1ZSxcbiAgICB2aXN1YWxpemVQaXRjaDogZmFsc2Vcbn07XG5cbi8qKlxuICogQSBgTmF2aWdhdGlvbkNvbnRyb2xgIGNvbnRyb2wgY29udGFpbnMgem9vbSBidXR0b25zIGFuZCBhIGNvbXBhc3MuXG4gKlxuICogQGltcGxlbWVudHMge0lDb250cm9sfVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zaG93Q29tcGFzcz10cnVlXSBJZiBgdHJ1ZWAgdGhlIGNvbXBhc3MgYnV0dG9uIGlzIGluY2x1ZGVkLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zaG93Wm9vbT10cnVlXSBJZiBgdHJ1ZWAgdGhlIHpvb20taW4gYW5kIHpvb20tb3V0IGJ1dHRvbnMgYXJlIGluY2x1ZGVkLlxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy52aXN1YWxpemVQaXRjaD1mYWxzZV0gSWYgYHRydWVgIHRoZSBwaXRjaCBpcyB2aXN1YWxpemVkIGJ5IHJvdGF0aW5nIFgtYXhpcyBvZiBjb21wYXNzLlxuICogQGV4YW1wbGVcbiAqIHZhciBuYXYgPSBuZXcgbWFwYm94Z2wuTmF2aWdhdGlvbkNvbnRyb2woKTtcbiAqIG1hcC5hZGRDb250cm9sKG5hdiwgJ3RvcC1sZWZ0Jyk7XG4gKiBAc2VlIFtEaXNwbGF5IG1hcCBuYXZpZ2F0aW9uIGNvbnRyb2xzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL25hdmlnYXRpb24vKVxuICogQHNlZSBbQWRkIGEgdGhpcmQgcGFydHkgdmVjdG9yIHRpbGUgc291cmNlXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3RoaXJkLXBhcnR5LylcbiAqL1xuY2xhc3MgTmF2aWdhdGlvbkNvbnRyb2wge1xuICAgIF9tYXA6IE1hcDtcbiAgICBvcHRpb25zOiBPcHRpb25zO1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIF96b29tSW5CdXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xuICAgIF96b29tT3V0QnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBfY29tcGFzczogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgX2NvbXBhc3NJY29uOiBIVE1MRWxlbWVudDtcbiAgICBfaGFuZGxlcjogTW91c2VSb3RhdGVXcmFwcGVyO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogT3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBET00uY3JlYXRlKCdkaXYnLCAnbWFwYm94Z2wtY3RybCBtYXBib3hnbC1jdHJsLWdyb3VwJyk7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCkpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd1pvb20pIHtcbiAgICAgICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgICAgICdfc2V0QnV0dG9uVGl0bGUnLFxuICAgICAgICAgICAgICAgICdfdXBkYXRlWm9vbUJ1dHRvbnMnXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3pvb21JbkJ1dHRvbiA9IHRoaXMuX2NyZWF0ZUJ1dHRvbignbWFwYm94Z2wtY3RybC16b29tLWluJywgKGUpID0+IHRoaXMuX21hcC56b29tSW4oe30sIHtvcmlnaW5hbEV2ZW50OiBlfSkpO1xuICAgICAgICAgICAgRE9NLmNyZWF0ZSgnc3BhbicsIGBtYXBib3hnbC1jdHJsLWljb25gLCB0aGlzLl96b29tSW5CdXR0b24pLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX3pvb21PdXRCdXR0b24gPSB0aGlzLl9jcmVhdGVCdXR0b24oJ21hcGJveGdsLWN0cmwtem9vbS1vdXQnLCAoZSkgPT4gdGhpcy5fbWFwLnpvb21PdXQoe30sIHtvcmlnaW5hbEV2ZW50OiBlfSkpO1xuICAgICAgICAgICAgRE9NLmNyZWF0ZSgnc3BhbicsIGBtYXBib3hnbC1jdHJsLWljb25gLCB0aGlzLl96b29tT3V0QnV0dG9uKS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93Q29tcGFzcykge1xuICAgICAgICAgICAgYmluZEFsbChbXG4gICAgICAgICAgICAgICAgJ19yb3RhdGVDb21wYXNzQXJyb3cnXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBhc3MgPSB0aGlzLl9jcmVhdGVCdXR0b24oJ21hcGJveGdsLWN0cmwtY29tcGFzcycsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52aXN1YWxpemVQaXRjaCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXAucmVzZXROb3J0aFBpdGNoKHt9LCB7b3JpZ2luYWxFdmVudDogZX0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcC5yZXNldE5vcnRoKHt9LCB7b3JpZ2luYWxFdmVudDogZX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fY29tcGFzc0ljb24gPSBET00uY3JlYXRlKCdzcGFuJywgJ21hcGJveGdsLWN0cmwtaWNvbicsIHRoaXMuX2NvbXBhc3MpO1xuICAgICAgICAgICAgdGhpcy5fY29tcGFzc0ljb24uc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZVpvb21CdXR0b25zKCkge1xuICAgICAgICBjb25zdCB6b29tID0gdGhpcy5fbWFwLmdldFpvb20oKTtcbiAgICAgICAgY29uc3QgaXNNYXggPSB6b29tID09PSB0aGlzLl9tYXAuZ2V0TWF4Wm9vbSgpO1xuICAgICAgICBjb25zdCBpc01pbiA9IHpvb20gPT09IHRoaXMuX21hcC5nZXRNaW5ab29tKCk7XG4gICAgICAgIHRoaXMuX3pvb21JbkJ1dHRvbi5kaXNhYmxlZCA9IGlzTWF4O1xuICAgICAgICB0aGlzLl96b29tT3V0QnV0dG9uLmRpc2FibGVkID0gaXNNaW47XG4gICAgICAgIHRoaXMuX3pvb21JbkJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBpc01heC50b1N0cmluZygpKTtcbiAgICAgICAgdGhpcy5fem9vbU91dEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBpc01pbi50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBfcm90YXRlQ29tcGFzc0Fycm93KCkge1xuICAgICAgICBjb25zdCByb3RhdGUgPSB0aGlzLm9wdGlvbnMudmlzdWFsaXplUGl0Y2ggP1xuICAgICAgICAgICAgYHNjYWxlKCR7MSAvIE1hdGgucG93KE1hdGguY29zKHRoaXMuX21hcC50cmFuc2Zvcm0ucGl0Y2ggKiAoTWF0aC5QSSAvIDE4MCkpLCAwLjUpfSkgcm90YXRlWCgke3RoaXMuX21hcC50cmFuc2Zvcm0ucGl0Y2h9ZGVnKSByb3RhdGVaKCR7dGhpcy5fbWFwLnRyYW5zZm9ybS5hbmdsZSAqICgxODAgLyBNYXRoLlBJKX1kZWcpYCA6XG4gICAgICAgICAgICBgcm90YXRlKCR7dGhpcy5fbWFwLnRyYW5zZm9ybS5hbmdsZSAqICgxODAgLyBNYXRoLlBJKX1kZWcpYDtcblxuICAgICAgICB0aGlzLl9jb21wYXNzSWNvbi5zdHlsZS50cmFuc2Zvcm0gPSByb3RhdGU7XG4gICAgfVxuXG4gICAgb25BZGQobWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dab29tKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRCdXR0b25UaXRsZSh0aGlzLl96b29tSW5CdXR0b24sICdab29tSW4nKTtcbiAgICAgICAgICAgIHRoaXMuX3NldEJ1dHRvblRpdGxlKHRoaXMuX3pvb21PdXRCdXR0b24sICdab29tT3V0Jyk7XG4gICAgICAgICAgICB0aGlzLl9tYXAub24oJ3pvb20nLCB0aGlzLl91cGRhdGVab29tQnV0dG9ucyk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVab29tQnV0dG9ucygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0NvbXBhc3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEJ1dHRvblRpdGxlKHRoaXMuX2NvbXBhc3MsICdSZXNldEJlYXJpbmcnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmlzdWFsaXplUGl0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXAub24oJ3BpdGNoJywgdGhpcy5fcm90YXRlQ29tcGFzc0Fycm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX21hcC5vbigncm90YXRlJywgdGhpcy5fcm90YXRlQ29tcGFzc0Fycm93KTtcbiAgICAgICAgICAgIHRoaXMuX3JvdGF0ZUNvbXBhc3NBcnJvdygpO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlciA9IG5ldyBNb3VzZVJvdGF0ZVdyYXBwZXIodGhpcy5fbWFwLCB0aGlzLl9jb21wYXNzLCB0aGlzLm9wdGlvbnMudmlzdWFsaXplUGl0Y2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XG4gICAgfVxuXG4gICAgb25SZW1vdmUoKSB7XG4gICAgICAgIERPTS5yZW1vdmUodGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93Wm9vbSkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignem9vbScsIHRoaXMuX3VwZGF0ZVpvb21CdXR0b25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dDb21wYXNzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnZpc3VhbGl6ZVBpdGNoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLm9mZigncGl0Y2gnLCB0aGlzLl9yb3RhdGVDb21wYXNzQXJyb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZigncm90YXRlJywgdGhpcy5fcm90YXRlQ29tcGFzc0Fycm93KTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZXIub2ZmKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faGFuZGxlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tYXA7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUJ1dHRvbihjbGFzc05hbWU6IHN0cmluZywgZm46ICgpID0+IG1peGVkKSB7XG4gICAgICAgIGNvbnN0IGEgPSBET00uY3JlYXRlKCdidXR0b24nLCBjbGFzc05hbWUsIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIGEudHlwZSA9ICdidXR0b24nO1xuICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZm4pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBfc2V0QnV0dG9uVGl0bGUoYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCwgdGl0bGU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLl9tYXAuX2dldFVJU3RyaW5nKGBOYXZpZ2F0aW9uQ29udHJvbC4ke3RpdGxlfWApO1xuICAgICAgICBidXR0b24udGl0bGUgPSBzdHI7XG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBzdHIpO1xuICAgIH1cbn1cblxuY2xhc3MgTW91c2VSb3RhdGVXcmFwcGVyIHtcblxuICAgIG1hcDogTWFwO1xuICAgIF9jbGlja1RvbGVyYW5jZTogbnVtYmVyO1xuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIG1vdXNlUm90YXRlOiBNb3VzZVJvdGF0ZUhhbmRsZXI7XG4gICAgbW91c2VQaXRjaDogTW91c2VQaXRjaEhhbmRsZXI7XG4gICAgX3N0YXJ0UG9zOiBQb2ludDtcbiAgICBfbGFzdFBvczogUG9pbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihtYXA6IE1hcCwgZWxlbWVudDogSFRNTEVsZW1lbnQsIHBpdGNoPzogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuX2NsaWNrVG9sZXJhbmNlID0gMTA7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMubW91c2VSb3RhdGUgPSBuZXcgTW91c2VSb3RhdGVIYW5kbGVyKHtjbGlja1RvbGVyYW5jZTogbWFwLmRyYWdSb3RhdGUuX21vdXNlUm90YXRlLl9jbGlja1RvbGVyYW5jZX0pO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgaWYgKHBpdGNoKSB0aGlzLm1vdXNlUGl0Y2ggPSBuZXcgTW91c2VQaXRjaEhhbmRsZXIoe2NsaWNrVG9sZXJhbmNlOiBtYXAuZHJhZ1JvdGF0ZS5fbW91c2VQaXRjaC5fY2xpY2tUb2xlcmFuY2V9KTtcblxuICAgICAgICBiaW5kQWxsKFsnbW91c2Vkb3duJywgJ21vdXNlbW92ZScsICdtb3VzZXVwJywgJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3Jlc2V0J10sIHRoaXMpO1xuICAgICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCAnbW91c2Vkb3duJywgdGhpcy5tb3VzZWRvd24pO1xuICAgICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCAndG91Y2hzdGFydCcsIHRoaXMudG91Y2hzdGFydCwge3Bhc3NpdmU6IGZhbHNlfSk7XG4gICAgICAgIERPTS5hZGRFdmVudExpc3RlbmVyKGVsZW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLnRvdWNobW92ZSk7XG4gICAgICAgIERPTS5hZGRFdmVudExpc3RlbmVyKGVsZW1lbnQsICd0b3VjaGVuZCcsIHRoaXMudG91Y2hlbmQpO1xuICAgICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLnJlc2V0KTtcbiAgICB9XG5cbiAgICBkb3duKGU6IE1vdXNlRXZlbnQsIHBvaW50OiBQb2ludCkge1xuICAgICAgICB0aGlzLm1vdXNlUm90YXRlLm1vdXNlZG93bihlLCBwb2ludCk7XG4gICAgICAgIGlmICh0aGlzLm1vdXNlUGl0Y2gpIHRoaXMubW91c2VQaXRjaC5tb3VzZWRvd24oZSwgcG9pbnQpO1xuICAgICAgICBET00uZGlzYWJsZURyYWcoKTtcbiAgICB9XG5cbiAgICBtb3ZlKGU6IE1vdXNlRXZlbnQsIHBvaW50OiBQb2ludCkge1xuICAgICAgICBjb25zdCBtYXAgPSB0aGlzLm1hcDtcbiAgICAgICAgY29uc3QgciA9IHRoaXMubW91c2VSb3RhdGUubW91c2Vtb3ZlV2luZG93KGUsIHBvaW50KTtcbiAgICAgICAgaWYgKHIgJiYgci5iZWFyaW5nRGVsdGEpIG1hcC5zZXRCZWFyaW5nKG1hcC5nZXRCZWFyaW5nKCkgKyByLmJlYXJpbmdEZWx0YSk7XG4gICAgICAgIGlmICh0aGlzLm1vdXNlUGl0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLm1vdXNlUGl0Y2gubW91c2Vtb3ZlV2luZG93KGUsIHBvaW50KTtcbiAgICAgICAgICAgIGlmIChwICYmIHAucGl0Y2hEZWx0YSkgbWFwLnNldFBpdGNoKG1hcC5nZXRQaXRjaCgpICsgcC5waXRjaERlbHRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9mZigpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgJ21vdXNlZG93bicsIHRoaXMubW91c2Vkb3duKTtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgJ3RvdWNoc3RhcnQnLCB0aGlzLnRvdWNoc3RhcnQsIHtwYXNzaXZlOiBmYWxzZX0pO1xuICAgICAgICBET00ucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCAndG91Y2htb3ZlJywgdGhpcy50b3VjaG1vdmUpO1xuICAgICAgICBET00ucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCAndG91Y2hlbmQnLCB0aGlzLnRvdWNoZW5kKTtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5yZXNldCk7XG4gICAgICAgIHRoaXMub2ZmVGVtcCgpO1xuICAgIH1cblxuICAgIG9mZlRlbXAoKSB7XG4gICAgICAgIERPTS5lbmFibGVEcmFnKCk7XG4gICAgICAgIERPTS5yZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgJ21vdXNlbW92ZScsIHRoaXMubW91c2Vtb3ZlKTtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCAnbW91c2V1cCcsIHRoaXMubW91c2V1cCk7XG4gICAgfVxuXG4gICAgbW91c2Vkb3duKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5kb3duKGV4dGVuZCh7fSwgZSwge2N0cmxLZXk6IHRydWUsIHByZXZlbnREZWZhdWx0OiAoKSA9PiBlLnByZXZlbnREZWZhdWx0KCl9KSwgRE9NLm1vdXNlUG9zKHRoaXMuZWxlbWVudCwgZSkpO1xuICAgICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlbW92ZSk7XG4gICAgICAgIERPTS5hZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ21vdXNldXAnLCB0aGlzLm1vdXNldXApO1xuICAgIH1cblxuICAgIG1vdXNlbW92ZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoaXMubW92ZShlLCBET00ubW91c2VQb3ModGhpcy5lbGVtZW50LCBlKSk7XG4gICAgfVxuXG4gICAgbW91c2V1cChlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoaXMubW91c2VSb3RhdGUubW91c2V1cFdpbmRvdyhlKTtcbiAgICAgICAgaWYgKHRoaXMubW91c2VQaXRjaCkgdGhpcy5tb3VzZVBpdGNoLm1vdXNldXBXaW5kb3coZSk7XG4gICAgICAgIHRoaXMub2ZmVGVtcCgpO1xuICAgIH1cblxuICAgIHRvdWNoc3RhcnQoZTogVG91Y2hFdmVudCkge1xuICAgICAgICBpZiAoZS50YXJnZXRUb3VjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRQb3MgPSB0aGlzLl9sYXN0UG9zID0gRE9NLnRvdWNoUG9zKHRoaXMuZWxlbWVudCwgZS50YXJnZXRUb3VjaGVzKVswXTtcbiAgICAgICAgICAgIHRoaXMuZG93bigoKHt0eXBlOiAnbW91c2Vkb3duJywgYnV0dG9uOiAwLCBjdHJsS2V5OiB0cnVlLCBwcmV2ZW50RGVmYXVsdDogKCkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpfTogYW55KTogTW91c2VFdmVudCksIHRoaXMuX3N0YXJ0UG9zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvdWNobW92ZShlOiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0UG9zID0gRE9NLnRvdWNoUG9zKHRoaXMuZWxlbWVudCwgZS50YXJnZXRUb3VjaGVzKVswXTtcbiAgICAgICAgICAgIHRoaXMubW92ZSgoKHtwcmV2ZW50RGVmYXVsdDogKCkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpfTogYW55KTogTW91c2VFdmVudCksIHRoaXMuX2xhc3RQb3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG91Y2hlbmQoZTogVG91Y2hFdmVudCkge1xuICAgICAgICBpZiAoZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhcnRQb3MgJiZcbiAgICAgICAgICAgIHRoaXMuX2xhc3RQb3MgJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0UG9zLmRpc3QodGhpcy5fbGFzdFBvcykgPCB0aGlzLl9jbGlja1RvbGVyYW5jZSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLm1vdXNlUm90YXRlLnJlc2V0KCk7XG4gICAgICAgIGlmICh0aGlzLm1vdXNlUGl0Y2gpIHRoaXMubW91c2VQaXRjaC5yZXNldCgpO1xuICAgICAgICBkZWxldGUgdGhpcy5fc3RhcnRQb3M7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9sYXN0UG9zO1xuICAgICAgICB0aGlzLm9mZlRlbXAoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hdmlnYXRpb25Db250cm9sO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IExuZ0xhdCBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5cbmltcG9ydCB0eXBlIFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHR5cGUgVHJhbnNmb3JtIGZyb20gJy4uL2dlby90cmFuc2Zvcm0nO1xuXG4vKipcbiAqIEdpdmVuIGEgTG5nTGF0LCBwcmlvciBwcm9qZWN0ZWQgcG9zaXRpb24sIGFuZCBhIHRyYW5zZm9ybSwgcmV0dXJuIGEgbmV3IExuZ0xhdCBzaGlmdGVkXG4gKiBuIMOXIDM2MMKwIGVhc3Qgb3Igd2VzdCBmb3Igc29tZSBuIOKJpSAwIHN1Y2ggdGhhdDpcbiAqXG4gKiAqIHRoZSBwcm9qZWN0ZWQgbG9jYXRpb24gb2YgdGhlIHJlc3VsdCBpcyBvbiBzY3JlZW4sIGlmIHBvc3NpYmxlLCBhbmQgc2Vjb25kYXJpbHk6XG4gKiAqIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHByb2plY3RlZCBsb2NhdGlvbiBvZiB0aGUgcmVzdWx0IGFuZCB0aGUgcHJpb3IgcG9zaXRpb25cbiAqICAgaXMgbWluaW1pemVkLlxuICpcbiAqIFRoZSBvYmplY3QgaXMgdG8gcHJlc2VydmUgcGVyY2VpdmVkIG9iamVjdCBjb25zdGFuY3kgZm9yIFBvcHVwcyBhbmQgTWFya2VycyBhcyBtdWNoIGFzXG4gKiBwb3NzaWJsZTsgdGhleSBzaG91bGQgYXZvaWQgc2hpZnRpbmcgbGFyZ2UgZGlzdGFuY2VzIGFjcm9zcyB0aGUgc2NyZWVuLCBldmVuIHdoZW4gdGhlXG4gKiBtYXAgY2VudGVyIGNoYW5nZXMgYnkgwrEzNjDCsCBkdWUgdG8gYXV0b21hdGljIHdyYXBwaW5nLCBhbmQgd2hlbiBhYm91dCB0byBnbyBvZmYgc2NyZWVuLFxuICogc2hvdWxkIHdyYXAganVzdCBlbm91Z2ggdG8gYXZvaWQgZG9pbmcgc28uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG5nTGF0OiBMbmdMYXQsIHByaW9yUG9zOiA/UG9pbnQsIHRyYW5zZm9ybTogVHJhbnNmb3JtKTogTG5nTGF0IHtcbiAgICBsbmdMYXQgPSBuZXcgTG5nTGF0KGxuZ0xhdC5sbmcsIGxuZ0xhdC5sYXQpO1xuXG4gICAgLy8gRmlyc3QsIHRyeSBzaGlmdGluZyBvbmUgd29ybGQgaW4gZWl0aGVyIGRpcmVjdGlvbiwgYW5kIHNlZSBpZiBlaXRoZXIgaXMgY2xvc2VyIHRvIHRoZVxuICAgIC8vIHByaW9yIHBvc2l0aW9uLiBUaGlzIHByZXNlcnZlcyBvYmplY3QgY29uc3RhbmN5IHdoZW4gdGhlIG1hcCBjZW50ZXIgaXMgYXV0by13cmFwcGVkXG4gICAgLy8gZHVyaW5nIGFuaW1hdGlvbnMuXG4gICAgaWYgKHByaW9yUG9zKSB7XG4gICAgICAgIGNvbnN0IGxlZnQgID0gbmV3IExuZ0xhdChsbmdMYXQubG5nIC0gMzYwLCBsbmdMYXQubGF0KTtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBuZXcgTG5nTGF0KGxuZ0xhdC5sbmcgKyAzNjAsIGxuZ0xhdC5sYXQpO1xuICAgICAgICBjb25zdCBkZWx0YSA9IHRyYW5zZm9ybS5sb2NhdGlvblBvaW50KGxuZ0xhdCkuZGlzdFNxcihwcmlvclBvcyk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm0ubG9jYXRpb25Qb2ludChsZWZ0KS5kaXN0U3FyKHByaW9yUG9zKSA8IGRlbHRhKSB7XG4gICAgICAgICAgICBsbmdMYXQgPSBsZWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zZm9ybS5sb2NhdGlvblBvaW50KHJpZ2h0KS5kaXN0U3FyKHByaW9yUG9zKSA8IGRlbHRhKSB7XG4gICAgICAgICAgICBsbmdMYXQgPSByaWdodDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNlY29uZCwgd3JhcCB0b3dhcmQgdGhlIGNlbnRlciB1bnRpbCB0aGUgbmV3IHBvc2l0aW9uIGlzIG9uIHNjcmVlbiwgb3Igd2UgY2FuJ3QgZ2V0XG4gICAgLy8gYW55IGNsb3Nlci5cbiAgICB3aGlsZSAoTWF0aC5hYnMobG5nTGF0LmxuZyAtIHRyYW5zZm9ybS5jZW50ZXIubG5nKSA+IDE4MCkge1xuICAgICAgICBjb25zdCBwb3MgPSB0cmFuc2Zvcm0ubG9jYXRpb25Qb2ludChsbmdMYXQpO1xuICAgICAgICBpZiAocG9zLnggPj0gMCAmJiBwb3MueSA+PSAwICYmIHBvcy54IDw9IHRyYW5zZm9ybS53aWR0aCAmJiBwb3MueSA8PSB0cmFuc2Zvcm0uaGVpZ2h0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAobG5nTGF0LmxuZyA+IHRyYW5zZm9ybS5jZW50ZXIubG5nKSB7XG4gICAgICAgICAgICBsbmdMYXQubG5nIC09IDM2MDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxuZ0xhdC5sbmcgKz0gMzYwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxuZ0xhdDtcbn1cbiIsIi8vIEBmbG93XG5cbmV4cG9ydCB0eXBlIEFuY2hvciA9XG4gICAgfCAnY2VudGVyJ1xuICAgIHwgJ3RvcCdcbiAgICB8ICdib3R0b20nXG4gICAgfCAnbGVmdCdcbiAgICB8ICdyaWdodCdcbiAgICB8ICd0b3AtbGVmdCdcbiAgICB8ICd0b3AtcmlnaHQnXG4gICAgfCAnYm90dG9tLWxlZnQnXG4gICAgfCAnYm90dG9tLXJpZ2h0JztcblxuZXhwb3J0IGNvbnN0IGFuY2hvclRyYW5zbGF0ZToge1tfOiBBbmNob3JdOiBzdHJpbmd9ID0ge1xuICAgICdjZW50ZXInOiAndHJhbnNsYXRlKC01MCUsLTUwJSknLFxuICAgICd0b3AnOiAndHJhbnNsYXRlKC01MCUsMCknLFxuICAgICd0b3AtbGVmdCc6ICd0cmFuc2xhdGUoMCwwKScsXG4gICAgJ3RvcC1yaWdodCc6ICd0cmFuc2xhdGUoLTEwMCUsMCknLFxuICAgICdib3R0b20nOiAndHJhbnNsYXRlKC01MCUsLTEwMCUpJyxcbiAgICAnYm90dG9tLWxlZnQnOiAndHJhbnNsYXRlKDAsLTEwMCUpJyxcbiAgICAnYm90dG9tLXJpZ2h0JzogJ3RyYW5zbGF0ZSgtMTAwJSwtMTAwJSknLFxuICAgICdsZWZ0JzogJ3RyYW5zbGF0ZSgwLC01MCUpJyxcbiAgICAncmlnaHQnOiAndHJhbnNsYXRlKC0xMDAlLC01MCUpJ1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5QW5jaG9yQ2xhc3MoZWxlbWVudDogSFRNTEVsZW1lbnQsIGFuY2hvcjogQW5jaG9yLCBwcmVmaXg6IHN0cmluZykge1xuICAgIGNvbnN0IGNsYXNzTGlzdCA9IGVsZW1lbnQuY2xhc3NMaXN0O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGFuY2hvclRyYW5zbGF0ZSkge1xuICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGBtYXBib3hnbC0ke3ByZWZpeH0tYW5jaG9yLSR7a2V5fWApO1xuICAgIH1cbiAgICBjbGFzc0xpc3QuYWRkKGBtYXBib3hnbC0ke3ByZWZpeH0tYW5jaG9yLSR7YW5jaG9yfWApO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERPTSBmcm9tICcuLi91dGlsL2RvbSc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uL3V0aWwvd2luZG93JztcbmltcG9ydCBMbmdMYXQgZnJvbSAnLi4vZ2VvL2xuZ19sYXQnO1xuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHNtYXJ0V3JhcCBmcm9tICcuLi91dGlsL3NtYXJ0X3dyYXAnO1xuaW1wb3J0IHtiaW5kQWxsLCBleHRlbmR9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQge3R5cGUgQW5jaG9yLCBhbmNob3JUcmFuc2xhdGUsIGFwcGx5QW5jaG9yQ2xhc3N9IGZyb20gJy4vYW5jaG9yJztcbmltcG9ydCB7RXZlbnQsIEV2ZW50ZWR9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHR5cGUgUG9wdXAgZnJvbSAnLi9wb3B1cCc7XG5pbXBvcnQgdHlwZSB7TG5nTGF0TGlrZX0gZnJvbSBcIi4uL2dlby9sbmdfbGF0XCI7XG5pbXBvcnQgdHlwZSB7TWFwTW91c2VFdmVudCwgTWFwVG91Y2hFdmVudH0gZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IHR5cGUge1BvaW50TGlrZX0gZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgICBlbGVtZW50PzogSFRNTEVsZW1lbnQsXG4gICAgb2Zmc2V0PzogUG9pbnRMaWtlLFxuICAgIGFuY2hvcj86IEFuY2hvcixcbiAgICBjb2xvcj86IHN0cmluZyxcbiAgICBzY2FsZT86IG51bWJlcixcbiAgICBkcmFnZ2FibGU/OiBib29sZWFuLFxuICAgIGNsaWNrVG9sZXJhbmNlPzogbnVtYmVyLFxuICAgIHJvdGF0aW9uPzogbnVtYmVyLFxuICAgIHJvdGF0aW9uQWxpZ25tZW50Pzogc3RyaW5nLFxuICAgIHBpdGNoQWxpZ25tZW50Pzogc3RyaW5nXG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXJrZXIgY29tcG9uZW50XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbb3B0aW9ucy5lbGVtZW50XSBET00gZWxlbWVudCB0byB1c2UgYXMgYSBtYXJrZXIuIFRoZSBkZWZhdWx0IGlzIGEgbGlnaHQgYmx1ZSwgZHJvcGxldC1zaGFwZWQgU1ZHIG1hcmtlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hbmNob3I9J2NlbnRlciddIEEgc3RyaW5nIGluZGljYXRpbmcgdGhlIHBhcnQgb2YgdGhlIE1hcmtlciB0aGF0IHNob3VsZCBiZSBwb3NpdGlvbmVkIGNsb3Nlc3QgdG8gdGhlIGNvb3JkaW5hdGUgc2V0IHZpYSB7QGxpbmsgTWFya2VyI3NldExuZ0xhdH0uXG4gKiAgIE9wdGlvbnMgYXJlIGAnY2VudGVyJ2AsIGAndG9wJ2AsIGAnYm90dG9tJ2AsIGAnbGVmdCdgLCBgJ3JpZ2h0J2AsIGAndG9wLWxlZnQnYCwgYCd0b3AtcmlnaHQnYCwgYCdib3R0b20tbGVmdCdgLCBhbmQgYCdib3R0b20tcmlnaHQnYC5cbiAqIEBwYXJhbSB7UG9pbnRMaWtlfSBbb3B0aW9ucy5vZmZzZXRdIFRoZSBvZmZzZXQgaW4gcGl4ZWxzIGFzIGEge0BsaW5rIFBvaW50TGlrZX0gb2JqZWN0IHRvIGFwcGx5IHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50J3MgY2VudGVyLiBOZWdhdGl2ZXMgaW5kaWNhdGUgbGVmdCBhbmQgdXAuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY29sb3I9JyMzRkIxQ0UnXSBUaGUgY29sb3IgdG8gdXNlIGZvciB0aGUgZGVmYXVsdCBtYXJrZXIgaWYgb3B0aW9ucy5lbGVtZW50IGlzIG5vdCBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaXMgbGlnaHQgYmx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zY2FsZT0xXSBUaGUgc2NhbGUgdG8gdXNlIGZvciB0aGUgZGVmYXVsdCBtYXJrZXIgaWYgb3B0aW9ucy5lbGVtZW50IGlzIG5vdCBwcm92aWRlZC4gVGhlIGRlZmF1bHQgc2NhbGUgY29ycmVzcG9uZHMgdG8gYSBoZWlnaHQgb2YgYDQxcHhgIGFuZCBhIHdpZHRoIG9mIGAyN3B4YC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZHJhZ2dhYmxlPWZhbHNlXSBBIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCBhIG1hcmtlciBpcyBhYmxlIHRvIGJlIGRyYWdnZWQgdG8gYSBuZXcgcG9zaXRpb24gb24gdGhlIG1hcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5jbGlja1RvbGVyYW5jZT0wXSBUaGUgbWF4IG51bWJlciBvZiBwaXhlbHMgYSB1c2VyIGNhbiBzaGlmdCB0aGUgbW91c2UgcG9pbnRlciBkdXJpbmcgYSBjbGljayBvbiB0aGUgbWFya2VyIGZvciBpdCB0byBiZSBjb25zaWRlcmVkIGEgdmFsaWQgY2xpY2sgKGFzIG9wcG9zZWQgdG8gYSBtYXJrZXIgZHJhZykuIFRoZSBkZWZhdWx0IGlzIHRvIGluaGVyaXQgbWFwJ3MgY2xpY2tUb2xlcmFuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucm90YXRpb249MF0gVGhlIHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBtYXJrZXIgaW4gZGVncmVlcywgcmVsYXRpdmUgdG8gaXRzIHJlc3BlY3RpdmUgYHJvdGF0aW9uQWxpZ25tZW50YCBzZXR0aW5nLiBBIHBvc2l0aXZlIHZhbHVlIHdpbGwgcm90YXRlIHRoZSBtYXJrZXIgY2xvY2t3aXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnBpdGNoQWxpZ25tZW50PSdhdXRvJ10gYG1hcGAgYWxpZ25zIHRoZSBgTWFya2VyYCB0byB0aGUgcGxhbmUgb2YgdGhlIG1hcC4gYHZpZXdwb3J0YCBhbGlnbnMgdGhlIGBNYXJrZXJgIHRvIHRoZSBwbGFuZSBvZiB0aGUgdmlld3BvcnQuIGBhdXRvYCBhdXRvbWF0aWNhbGx5IG1hdGNoZXMgdGhlIHZhbHVlIG9mIGByb3RhdGlvbkFsaWdubWVudGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucm90YXRpb25BbGlnbm1lbnQ9J2F1dG8nXSBgbWFwYCBhbGlnbnMgdGhlIGBNYXJrZXJgJ3Mgcm90YXRpb24gcmVsYXRpdmUgdG8gdGhlIG1hcCwgbWFpbnRhaW5pbmcgYSBiZWFyaW5nIGFzIHRoZSBtYXAgcm90YXRlcy4gYHZpZXdwb3J0YCBhbGlnbnMgdGhlIGBNYXJrZXJgJ3Mgcm90YXRpb24gcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0LCBhZ25vc3RpYyB0byBtYXAgcm90YXRpb25zLiBgYXV0b2AgaXMgZXF1aXZhbGVudCB0byBgdmlld3BvcnRgLlxuICogQGV4YW1wbGVcbiAqIHZhciBtYXJrZXIgPSBuZXcgbWFwYm94Z2wuTWFya2VyKClcbiAqICAgLnNldExuZ0xhdChbMzAuNSwgNTAuNV0pXG4gKiAgIC5hZGRUbyhtYXApO1xuICogQGV4YW1wbGVcbiAqIC8vIFNldCBvcHRpb25zXG4gKiB2YXIgbWFya2VyID0gbmV3IG1hcGJveGdsLk1hcmtlcih7XG4gKiAgICAgY29sb3I6IFwiI0ZGRkZGRlwiLFxuICogICAgIGRyYWdnYWJsZTogdHJ1ZVxuICogICB9KS5zZXRMbmdMYXQoWzMwLjUsIDUwLjVdKVxuICogICAuYWRkVG8obWFwKTtcbiAqIEBzZWUgW0FkZCBjdXN0b20gaWNvbnMgd2l0aCBNYXJrZXJzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2N1c3RvbS1tYXJrZXItaWNvbnMvKVxuICogQHNlZSBbQ3JlYXRlIGEgZHJhZ2dhYmxlIE1hcmtlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9kcmFnLWEtbWFya2VyLylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFya2VyIGV4dGVuZHMgRXZlbnRlZCB7XG4gICAgX21hcDogTWFwO1xuICAgIF9hbmNob3I6IEFuY2hvcjtcbiAgICBfb2Zmc2V0OiBQb2ludDtcbiAgICBfZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgX3BvcHVwOiA/UG9wdXA7XG4gICAgX2xuZ0xhdDogTG5nTGF0O1xuICAgIF9wb3M6ID9Qb2ludDtcbiAgICBfY29sb3I6ID9zdHJpbmc7XG4gICAgX3NjYWxlOiBudW1iZXI7XG4gICAgX2RlZmF1bHRNYXJrZXI6IGJvb2xlYW47XG4gICAgX2RyYWdnYWJsZTogYm9vbGVhbjtcbiAgICBfY2xpY2tUb2xlcmFuY2U6IG51bWJlcjtcbiAgICBfaXNEcmFnZ2luZzogYm9vbGVhbjtcbiAgICBfc3RhdGU6ICdpbmFjdGl2ZScgfCAncGVuZGluZycgfCAnYWN0aXZlJzsgLy8gdXNlZCBmb3IgaGFuZGxpbmcgZHJhZyBldmVudHNcbiAgICBfcG9zaXRpb25EZWx0YTogP1BvaW50O1xuICAgIF9wb2ludGVyZG93blBvczogP1BvaW50O1xuICAgIF9yb3RhdGlvbjogbnVtYmVyO1xuICAgIF9waXRjaEFsaWdubWVudDogc3RyaW5nO1xuICAgIF9yb3RhdGlvbkFsaWdubWVudDogc3RyaW5nO1xuICAgIF9vcmlnaW5hbFRhYkluZGV4OiA/c3RyaW5nOyAvLyBvcmlnaW5hbCB0YWJpbmRleCBvZiBfZWxlbWVudFxuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucz86IE9wdGlvbnMsIGxlZ2FjeU9wdGlvbnM/OiBPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IC0tIHRoZSBjb25zdHJ1Y3RvciB1c2VkIHRvIGFjY2VwdCB0aGUgZWxlbWVudCBhcyBhXG4gICAgICAgIC8vIHJlcXVpcmVkIGZpcnN0IGFyZ3VtZW50LCBiZWZvcmUgaXQgd2FzIG1hZGUgb3B0aW9uYWwuXG4gICAgICAgIGlmIChvcHRpb25zIGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50IHx8IGxlZ2FjeU9wdGlvbnMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBleHRlbmQoe2VsZW1lbnQ6IG9wdGlvbnN9LCBsZWdhY3lPcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ191cGRhdGUnLFxuICAgICAgICAgICAgJ19vbk1vdmUnLFxuICAgICAgICAgICAgJ19vblVwJyxcbiAgICAgICAgICAgICdfYWRkRHJhZ0hhbmRsZXInLFxuICAgICAgICAgICAgJ19vbk1hcENsaWNrJyxcbiAgICAgICAgICAgICdfb25LZXlQcmVzcydcbiAgICAgICAgXSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5fYW5jaG9yID0gb3B0aW9ucyAmJiBvcHRpb25zLmFuY2hvciB8fCAnY2VudGVyJztcbiAgICAgICAgdGhpcy5fY29sb3IgPSBvcHRpb25zICYmIG9wdGlvbnMuY29sb3IgfHwgJyMzRkIxQ0UnO1xuICAgICAgICB0aGlzLl9zY2FsZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zY2FsZSB8fCAxO1xuICAgICAgICB0aGlzLl9kcmFnZ2FibGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZHJhZ2dhYmxlIHx8IGZhbHNlO1xuICAgICAgICB0aGlzLl9jbGlja1RvbGVyYW5jZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5jbGlja1RvbGVyYW5jZSB8fCAwO1xuICAgICAgICB0aGlzLl9pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gJ2luYWN0aXZlJztcbiAgICAgICAgdGhpcy5fcm90YXRpb24gPSBvcHRpb25zICYmIG9wdGlvbnMucm90YXRpb24gfHwgMDtcbiAgICAgICAgdGhpcy5fcm90YXRpb25BbGlnbm1lbnQgPSBvcHRpb25zICYmIG9wdGlvbnMucm90YXRpb25BbGlnbm1lbnQgfHwgJ2F1dG8nO1xuICAgICAgICB0aGlzLl9waXRjaEFsaWdubWVudCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5waXRjaEFsaWdubWVudCAmJiBvcHRpb25zLnBpdGNoQWxpZ25tZW50ICE9PSAnYXV0bycgPyAgb3B0aW9ucy5waXRjaEFsaWdubWVudCA6IHRoaXMuX3JvdGF0aW9uQWxpZ25tZW50O1xuXG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0TWFya2VyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSBET00uY3JlYXRlKCdkaXYnKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ01hcCBtYXJrZXInKTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIGRlZmF1bHQgbWFwIG1hcmtlciBTVkdcbiAgICAgICAgICAgIGNvbnN0IHN2ZyA9IERPTS5jcmVhdGVOUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0SGVpZ2h0ID0gNDE7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0V2lkdGggPSAyNztcbiAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICdoZWlnaHQnLCBgJHtkZWZhdWx0SGVpZ2h0fXB4YCk7XG4gICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3dpZHRoJywgYCR7ZGVmYXVsdFdpZHRofXB4YCk7XG4gICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZpZXdCb3gnLCBgMCAwICR7ZGVmYXVsdFdpZHRofSAke2RlZmF1bHRIZWlnaHR9YCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1hcmtlckxhcmdlID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBtYXJrZXJMYXJnZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc3Ryb2tlJywgJ25vbmUnKTtcbiAgICAgICAgICAgIG1hcmtlckxhcmdlLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2Utd2lkdGgnLCAnMScpO1xuICAgICAgICAgICAgbWFya2VyTGFyZ2Uuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwnLCAnbm9uZScpO1xuICAgICAgICAgICAgbWFya2VyTGFyZ2Uuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwtcnVsZScsICdldmVub2RkJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhZ2UxID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBwYWdlMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZmlsbC1ydWxlJywgJ25vbnplcm8nKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hhZG93ID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBzaGFkb3cuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMy4wLCAyOS4wKScpO1xuICAgICAgICAgICAgc2hhZG93LnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyMwMDAwMDAnKTtcblxuICAgICAgICAgICAgY29uc3QgZWxsaXBzZXMgPSBbXG4gICAgICAgICAgICAgICAgeydyeCc6ICcxMC41JywgJ3J5JzogJzUuMjUwMDIyNzMnfSxcbiAgICAgICAgICAgICAgICB7J3J4JzogJzEwLjUnLCAncnknOiAnNS4yNTAwMjI3Myd9LFxuICAgICAgICAgICAgICAgIHsncngnOiAnOS41JywgJ3J5JzogJzQuNzcyNzUwMDcnfSxcbiAgICAgICAgICAgICAgICB7J3J4JzogJzguNScsICdyeSc6ICc0LjI5NTQ5OTM2J30sXG4gICAgICAgICAgICAgICAgeydyeCc6ICc3LjUnLCAncnknOiAnMy44MTgyMjMwOCd9LFxuICAgICAgICAgICAgICAgIHsncngnOiAnNi41JywgJ3J5JzogJzMuMzQwOTQ2NzknfSxcbiAgICAgICAgICAgICAgICB7J3J4JzogJzUuNScsICdyeSc6ICcyLjg2MzY3MDUxJ30sXG4gICAgICAgICAgICAgICAgeydyeCc6ICc0LjUnLCAncnknOiAnMi4zODYzNjg2NCd9XG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgZWxsaXBzZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGxpcHNlID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdlbGxpcHNlJyk7XG4gICAgICAgICAgICAgICAgZWxsaXBzZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnb3BhY2l0eScsICcwLjA0Jyk7XG4gICAgICAgICAgICAgICAgZWxsaXBzZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCAnMTAuNScpO1xuICAgICAgICAgICAgICAgIGVsbGlwc2Uuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2N5JywgJzUuODAwMjkwMDgnKTtcbiAgICAgICAgICAgICAgICBlbGxpcHNlLnNldEF0dHJpYnV0ZU5TKG51bGwsICdyeCcsIGRhdGFbJ3J4J10pO1xuICAgICAgICAgICAgICAgIGVsbGlwc2Uuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3J5JywgZGF0YVsncnknXSk7XG4gICAgICAgICAgICAgICAgc2hhZG93LmFwcGVuZENoaWxkKGVsbGlwc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgdGhpcy5fY29sb3IpO1xuXG4gICAgICAgICAgICBjb25zdCBiZ1BhdGggPSBET00uY3JlYXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcbiAgICAgICAgICAgIGJnUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsICdNMjcsMTMuNSBDMjcsMTkuMDc0NjQ0IDIwLjI1MDAwMSwyNy4wMDAwMDIgMTQuNzUsMzQuNTAwMDAyIEMxNC4wMTY2NjUsMzUuNTAwMDA0IDEyLjk4MzMzNSwzNS41MDAwMDQgMTIuMjUsMzQuNTAwMDAyIEM2Ljc0OTk5OTMsMjcuMDAwMDAyIDAsMTkuMjIyNTYyIDAsMTMuNSBDMCw2LjA0NDE1NTkgNi4wNDQxNTU5LDAgMTMuNSwwIEMyMC45NTU4NDQsMCAyNyw2LjA0NDE1NTkgMjcsMTMuNSBaJyk7XG5cbiAgICAgICAgICAgIGJhY2tncm91bmQuYXBwZW5kQ2hpbGQoYmdQYXRoKTtcblxuICAgICAgICAgICAgY29uc3QgYm9yZGVyID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBib3JkZXIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ29wYWNpdHknLCAnMC4yNScpO1xuICAgICAgICAgICAgYm9yZGVyLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyMwMDAwMDAnKTtcblxuICAgICAgICAgICAgY29uc3QgYm9yZGVyUGF0aCA9IERPTS5jcmVhdGVOUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xuICAgICAgICAgICAgYm9yZGVyUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsICdNMTMuNSwwIEM2LjA0NDE1NTksMCAwLDYuMDQ0MTU1OSAwLDEzLjUgQzAsMTkuMjIyNTYyIDYuNzQ5OTk5MywyNyAxMi4yNSwzNC41IEMxMywzNS41MjI3MjcgMTQuMDE2NjY0LDM1LjUwMDAwNCAxNC43NSwzNC41IEMyMC4yNTAwMDEsMjcgMjcsMTkuMDc0NjQ0IDI3LDEzLjUgQzI3LDYuMDQ0MTU1OSAyMC45NTU4NDQsMCAxMy41LDAgWiBNMTMuNSwxIEMyMC40MTU0MDQsMSAyNiw2LjU4NDU5NiAyNiwxMy41IEMyNiwxNS44OTg2NTcgMjQuNDk1NTg0LDE5LjE4MTQzMSAyMi4yMjA3MDMsMjIuNzM4MjgxIEMxOS45NDU4MjMsMjYuMjk1MTMyIDE2LjcwNTExOSwzMC4xNDIxNjcgMTMuOTQzMzU5LDMzLjkwODIwMyBDMTMuNzQzNDQ1LDM0LjE4MDgxNCAxMy42MTI3MTUsMzQuMzIyNzM4IDEzLjUsMzQuNDQxNDA2IEMxMy4zODcyODUsMzQuMzIyNzM4IDEzLjI1NjU1NSwzNC4xODA4MTQgMTMuMDU2NjQxLDMzLjkwODIwMyBDMTAuMjg0NDgxLDMwLjEyNzk4NSA3LjQxNDg2ODQsMjYuMzE0MTU5IDUuMDE1NjI1LDIyLjc3MzQzOCBDMi42MTYzODE2LDE5LjIzMjcxNSAxLDE1Ljk1MzUzOCAxLDEzLjUgQzEsNi41ODQ1OTYgNi41ODQ1OTYsMSAxMy41LDEgWicpO1xuXG4gICAgICAgICAgICBib3JkZXIuYXBwZW5kQ2hpbGQoYm9yZGVyUGF0aCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1ha2kgPSBET00uY3JlYXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcbiAgICAgICAgICAgIG1ha2kuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoNi4wLCA3LjApJyk7XG4gICAgICAgICAgICBtYWtpLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyNGRkZGRkYnKTtcblxuICAgICAgICAgICAgY29uc3QgY2lyY2xlQ29udGFpbmVyID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBjaXJjbGVDb250YWluZXIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoOC4wLCA4LjApJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNpcmNsZTEgPSBET00uY3JlYXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2NpcmNsZScpO1xuICAgICAgICAgICAgY2lyY2xlMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZmlsbCcsICcjMDAwMDAwJyk7XG4gICAgICAgICAgICBjaXJjbGUxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdvcGFjaXR5JywgJzAuMjUnKTtcbiAgICAgICAgICAgIGNpcmNsZTEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2N4JywgJzUuNScpO1xuICAgICAgICAgICAgY2lyY2xlMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3knLCAnNS41Jyk7XG4gICAgICAgICAgICBjaXJjbGUxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdyJywgJzUuNDk5OTk2MicpO1xuXG4gICAgICAgICAgICBjb25zdCBjaXJjbGUyID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdjaXJjbGUnKTtcbiAgICAgICAgICAgIGNpcmNsZTIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwnLCAnI0ZGRkZGRicpO1xuICAgICAgICAgICAgY2lyY2xlMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCAnNS41Jyk7XG4gICAgICAgICAgICBjaXJjbGUyLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeScsICc1LjUnKTtcbiAgICAgICAgICAgIGNpcmNsZTIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3InLCAnNS40OTk5OTYyJyk7XG5cbiAgICAgICAgICAgIGNpcmNsZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjaXJjbGUxKTtcbiAgICAgICAgICAgIGNpcmNsZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjaXJjbGUyKTtcblxuICAgICAgICAgICAgcGFnZTEuYXBwZW5kQ2hpbGQoc2hhZG93KTtcbiAgICAgICAgICAgIHBhZ2UxLmFwcGVuZENoaWxkKGJhY2tncm91bmQpO1xuICAgICAgICAgICAgcGFnZTEuYXBwZW5kQ2hpbGQoYm9yZGVyKTtcbiAgICAgICAgICAgIHBhZ2UxLmFwcGVuZENoaWxkKG1ha2kpO1xuICAgICAgICAgICAgcGFnZTEuYXBwZW5kQ2hpbGQoY2lyY2xlQ29udGFpbmVyKTtcblxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHBhZ2UxKTtcblxuICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICdoZWlnaHQnLCBgJHtkZWZhdWx0SGVpZ2h0ICogdGhpcy5fc2NhbGV9cHhgKTtcbiAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnd2lkdGgnLCBgJHtkZWZhdWx0V2lkdGggKiB0aGlzLl9zY2FsZX1weGApO1xuXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgICAgICAgICAgIC8vIGlmIG5vIGVsZW1lbnQgYW5kIG5vIG9mZnNldCBvcHRpb24gZ2l2ZW4gYXBwbHkgYW4gb2Zmc2V0IGZvciB0aGUgZGVmYXVsdCBtYXJrZXJcbiAgICAgICAgICAgIC8vIHRoZSAtMTQgYXMgdGhlIHkgdmFsdWUgb2YgdGhlIGRlZmF1bHQgbWFya2VyIG9mZnNldCB3YXMgZGV0ZXJtaW5lZCBhcyBmb2xsb3dzXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gdGhlIG1hcmtlciB0aXAgaXMgYXQgdGhlIGNlbnRlciBvZiB0aGUgc2hhZG93IGVsbGlwc2UgZnJvbSB0aGUgZGVmYXVsdCBzdmdcbiAgICAgICAgICAgIC8vIHRoZSB5IHZhbHVlIG9mIHRoZSBjZW50ZXIgb2YgdGhlIHNoYWRvdyBlbGxpcHNlIHJlbGF0aXZlIHRvIHRoZSBzdmcgdG9wIGxlZnQgaXMgXCJzaGFkb3cgdHJhbnNmb3JtIHRyYW5zbGF0ZS15ICgyOS4wKSArIGVsbGlwc2UgY3kgKDUuODAwMjkwMDgpXCJcbiAgICAgICAgICAgIC8vIG9mZnNldCB0byB0aGUgc3ZnIGNlbnRlciBcImhlaWdodCAoNDEgLyAyKVwiIGdpdmVzICgyOS4wICsgNS44MDAyOTAwOCkgLSAoNDEgLyAyKSBhbmQgcm91bmRlZCBmb3IgYW4gaW50ZWdlciBwaXhlbCBvZmZzZXQgZ2l2ZXMgMTRcbiAgICAgICAgICAgIC8vIG5lZ2F0aXZlIGlzIHVzZWQgdG8gbW92ZSB0aGUgbWFya2VyIHVwIGZyb20gdGhlIGNlbnRlciBzbyB0aGUgdGlwIGlzIGF0IHRoZSBNYXJrZXIgbG5nTGF0XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBQb2ludC5jb252ZXJ0KG9wdGlvbnMgJiYgb3B0aW9ucy5vZmZzZXQgfHwgWzAsIC0xNF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IFBvaW50LmNvbnZlcnQob3B0aW9ucyAmJiBvcHRpb25zLm9mZnNldCB8fCBbMCwgMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1tYXJrZXInKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCAoZTogRHJhZ0V2ZW50KSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBwcmV2ZW50IGZvY3VzaW5nIG9uIGNsaWNrXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcHBseUFuY2hvckNsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2FuY2hvciwgJ21hcmtlcicpO1xuXG4gICAgICAgIHRoaXMuX3BvcHVwID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyB0aGUgYE1hcmtlcmAgdG8gYSBgTWFwYCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtNYXB9IG1hcCBUaGUgTWFwYm94IEdMIEpTIG1hcCB0byBhZGQgdGhlIG1hcmtlciB0by5cbiAgICAgKiBAcmV0dXJucyB7TWFya2VyfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBtYXJrZXIgPSBuZXcgbWFwYm94Z2wuTWFya2VyKClcbiAgICAgKiAgIC5zZXRMbmdMYXQoWzMwLjUsIDUwLjVdKVxuICAgICAqICAgLmFkZFRvKG1hcCk7IC8vIGFkZCB0aGUgbWFya2VyIHRvIHRoZSBtYXBcbiAgICAgKi9cbiAgICBhZGRUbyhtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIG1hcC5nZXRDYW52YXNDb250YWluZXIoKS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgbWFwLm9uKCdtb3ZlJywgdGhpcy5fdXBkYXRlKTtcbiAgICAgICAgbWFwLm9uKCdtb3ZlZW5kJywgdGhpcy5fdXBkYXRlKTtcbiAgICAgICAgdGhpcy5zZXREcmFnZ2FibGUodGhpcy5fZHJhZ2dhYmxlKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG5cbiAgICAgICAgLy8gSWYgd2UgYXR0YWNoZWQgdGhlIGBjbGlja2AgbGlzdGVuZXIgdG8gdGhlIG1hcmtlciBlbGVtZW50LCB0aGUgcG9wdXBcbiAgICAgICAgLy8gd291bGQgY2xvc2Ugb25jZSB0aGUgZXZlbnQgcHJvcG9nYXRlZCB0byBgbWFwYCBkdWUgdG8gdGhlXG4gICAgICAgIC8vIGBQb3B1cCNfb25DbGlja0Nsb3NlYCBsaXN0ZW5lci5cbiAgICAgICAgdGhpcy5fbWFwLm9uKCdjbGljaycsIHRoaXMuX29uTWFwQ2xpY2spO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIG1hcmtlciBmcm9tIGEgbWFwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgbWFya2VyID0gbmV3IG1hcGJveGdsLk1hcmtlcigpLmFkZFRvKG1hcCk7XG4gICAgICogbWFya2VyLnJlbW92ZSgpO1xuICAgICAqIEByZXR1cm5zIHtNYXJrZXJ9IGB0aGlzYFxuICAgICAqL1xuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hcCkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignY2xpY2snLCB0aGlzLl9vbk1hcENsaWNrKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdmUnLCB0aGlzLl91cGRhdGUpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignbW92ZWVuZCcsIHRoaXMuX3VwZGF0ZSk7XG4gICAgICAgICAgICB0aGlzLl9tYXAub2ZmKCdtb3VzZWRvd24nLCB0aGlzLl9hZGREcmFnSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLl9tYXAub2ZmKCd0b3VjaHN0YXJ0JywgdGhpcy5fYWRkRHJhZ0hhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignbW91c2V1cCcsIHRoaXMuX29uVXApO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZigndG91Y2hlbmQnLCB0aGlzLl9vblVwKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdXNlbW92ZScsIHRoaXMuX29uTW92ZSk7XG4gICAgICAgICAgICB0aGlzLl9tYXAub2ZmKCd0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdmUpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX21hcDtcbiAgICAgICAgfVxuICAgICAgICBET00ucmVtb3ZlKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICBpZiAodGhpcy5fcG9wdXApIHRoaXMuX3BvcHVwLnJlbW92ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG1hcmtlcidzIGdlb2dyYXBoaWNhbCBsb2NhdGlvbi5cbiAgICAgKlxuICAgICAqIFRoZSBsb25naXR1ZGUgb2YgdGhlIHJlc3VsdCBtYXkgZGlmZmVyIGJ5IGEgbXVsdGlwbGUgb2YgMzYwIGRlZ3JlZXMgZnJvbSB0aGUgbG9uZ2l0dWRlIHByZXZpb3VzbHlcbiAgICAgKiBzZXQgYnkgYHNldExuZ0xhdGAgYmVjYXVzZSBgTWFya2VyYCB3cmFwcyB0aGUgYW5jaG9yIGxvbmdpdHVkZSBhY3Jvc3MgY29waWVzIG9mIHRoZSB3b3JsZCB0byBrZWVwXG4gICAgICogdGhlIG1hcmtlciBvbiBzY3JlZW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0fSBBIHtAbGluayBMbmdMYXR9IGRlc2NyaWJpbmcgdGhlIG1hcmtlcidzIGxvY2F0aW9uLlxuICAgICogQGV4YW1wbGVcbiAgICAqIC8vIFN0b3JlIHRoZSBtYXJrZXIncyBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIGNvb3JkaW5hdGVzIGluIGEgdmFyaWFibGVcbiAgICAqIHZhciBsbmdMYXQgPSBtYXJrZXIuZ2V0TG5nTGF0KCk7XG4gICAgKiAvLyBQcmludCB0aGUgbWFya2VyJ3MgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSB2YWx1ZXMgaW4gdGhlIGNvbnNvbGVcbiAgICAqIGNvbnNvbGUubG9nKCdMb25naXR1ZGU6ICcgKyBsbmdMYXQubG5nICsgJywgTGF0aXR1ZGU6ICcgKyBsbmdMYXQubGF0IClcbiAgICAqIEBzZWUgW0NyZWF0ZSBhIGRyYWdnYWJsZSBNYXJrZXJdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2RyYWctYS1tYXJrZXIvKVxuICAgICovXG4gICAgZ2V0TG5nTGF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG5nTGF0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogU2V0IHRoZSBtYXJrZXIncyBnZW9ncmFwaGljYWwgcG9zaXRpb24gYW5kIG1vdmUgaXQuXG4gICAgKiBAcGFyYW0ge0xuZ0xhdH0gbG5nbGF0IEEge0BsaW5rIExuZ0xhdH0gZGVzY3JpYmluZyB3aGVyZSB0aGUgbWFya2VyIHNob3VsZCBiZSBsb2NhdGVkLlxuICAgICogQHJldHVybnMge01hcmtlcn0gYHRoaXNgXG4gICAgKiBAZXhhbXBsZVxuICAgICogLy8gQ3JlYXRlIGEgbmV3IG1hcmtlciwgc2V0IHRoZSBsb25naXR1ZGUgYW5kIGxhdGl0dWRlLCBhbmQgYWRkIGl0IHRvIHRoZSBtYXBcbiAgICAqIG5ldyBtYXBib3hnbC5NYXJrZXIoKVxuICAgICogICAuc2V0TG5nTGF0KFstNjUuMDE3LCAtMTYuNDU3XSlcbiAgICAqICAgLmFkZFRvKG1hcCk7XG4gICAgKiBAc2VlIFtBZGQgY3VzdG9tIGljb25zIHdpdGggTWFya2Vyc10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvY3VzdG9tLW1hcmtlci1pY29ucy8pXG4gICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgTWFya2VyXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9kcmFnLWEtbWFya2VyLylcbiAgICAqIEBzZWUgW0FkZCBhIG1hcmtlciB1c2luZyBhIHBsYWNlIG5hbWVdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL21hcmtlci1mcm9tLWdlb2NvZGUvKVxuICAgICovXG4gICAgc2V0TG5nTGF0KGxuZ2xhdDogTG5nTGF0TGlrZSkge1xuICAgICAgICB0aGlzLl9sbmdMYXQgPSBMbmdMYXQuY29udmVydChsbmdsYXQpO1xuICAgICAgICB0aGlzLl9wb3MgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fcG9wdXApIHRoaXMuX3BvcHVwLnNldExuZ0xhdCh0aGlzLl9sbmdMYXQpO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYE1hcmtlcmAncyBIVE1MIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAgICovXG4gICAgZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmluZHMgYSB7QGxpbmsgUG9wdXB9IHRvIHRoZSB7QGxpbmsgTWFya2VyfS5cbiAgICAgKiBAcGFyYW0gcG9wdXAgQW4gaW5zdGFuY2Ugb2YgdGhlIHtAbGluayBQb3B1cH0gY2xhc3MuIElmIHVuZGVmaW5lZCBvciBudWxsLCBhbnkgcG9wdXBcbiAgICAgKiBzZXQgb24gdGhpcyB7QGxpbmsgTWFya2VyfSBpbnN0YW5jZSBpcyB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7TWFya2VyfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBtYXJrZXIgPSBuZXcgbWFwYm94Z2wuTWFya2VyKClcbiAgICAgKiAgLnNldExuZ0xhdChbMCwgMF0pXG4gICAgICogIC5zZXRQb3B1cChuZXcgbWFwYm94Z2wuUG9wdXAoKS5zZXRIVE1MKFwiPGgxPkhlbGxvIFdvcmxkITwvaDE+XCIpKSAvLyBhZGQgcG9wdXBcbiAgICAgKiAgLmFkZFRvKG1hcCk7XG4gICAgICogQHNlZSBbQXR0YWNoIGEgcG9wdXAgdG8gYSBtYXJrZXIgaW5zdGFuY2VdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3NldC1wb3B1cC8pXG4gICAgICovXG4gICAgc2V0UG9wdXAocG9wdXA6ID9Qb3B1cCkge1xuICAgICAgICBpZiAodGhpcy5fcG9wdXApIHtcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5fcG9wdXAgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIHRoaXMuX29uS2V5UHJlc3MpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX29yaWdpbmFsVGFiSW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3B1cCkge1xuICAgICAgICAgICAgaWYgKCEoJ29mZnNldCcgaW4gcG9wdXAub3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJIZWlnaHQgPSA0MSAtICg1LjggLyAyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJSYWRpdXMgPSAxMy41O1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVhck9mZnNldCA9IE1hdGguc3FydChNYXRoLnBvdyhtYXJrZXJSYWRpdXMsIDIpIC8gMik7XG4gICAgICAgICAgICAgICAgcG9wdXAub3B0aW9ucy5vZmZzZXQgPSB0aGlzLl9kZWZhdWx0TWFya2VyID8ge1xuICAgICAgICAgICAgICAgICAgICAndG9wJzogWzAsIDBdLFxuICAgICAgICAgICAgICAgICAgICAndG9wLWxlZnQnOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICd0b3AtcmlnaHQnOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICdib3R0b20nOiBbMCwgLW1hcmtlckhlaWdodF0sXG4gICAgICAgICAgICAgICAgICAgICdib3R0b20tbGVmdCc6IFtsaW5lYXJPZmZzZXQsIChtYXJrZXJIZWlnaHQgLSBtYXJrZXJSYWRpdXMgKyBsaW5lYXJPZmZzZXQpICogLTFdLFxuICAgICAgICAgICAgICAgICAgICAnYm90dG9tLXJpZ2h0JzogWy1saW5lYXJPZmZzZXQsIChtYXJrZXJIZWlnaHQgLSBtYXJrZXJSYWRpdXMgKyBsaW5lYXJPZmZzZXQpICogLTFdLFxuICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IFttYXJrZXJSYWRpdXMsIChtYXJrZXJIZWlnaHQgLSBtYXJrZXJSYWRpdXMpICogLTFdLFxuICAgICAgICAgICAgICAgICAgICAncmlnaHQnOiBbLW1hcmtlclJhZGl1cywgKG1hcmtlckhlaWdodCAtIG1hcmtlclJhZGl1cykgKiAtMV1cbiAgICAgICAgICAgICAgICB9IDogdGhpcy5fb2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcG9wdXAgPSBwb3B1cDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sbmdMYXQpIHRoaXMuX3BvcHVwLnNldExuZ0xhdCh0aGlzLl9sbmdMYXQpO1xuXG4gICAgICAgICAgICB0aGlzLl9vcmlnaW5hbFRhYkluZGV4ID0gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX29yaWdpbmFsVGFiSW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIHRoaXMuX29uS2V5UHJlc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX29uS2V5UHJlc3MoZTogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBjb25zdCBjb2RlID0gZS5jb2RlO1xuICAgICAgICBjb25zdCBsZWdhY3lDb2RlID0gZS5jaGFyQ29kZSB8fCBlLmtleUNvZGU7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGNvZGUgPT09ICdTcGFjZScpIHx8IChjb2RlID09PSAnRW50ZXInKSB8fFxuICAgICAgICAgICAgKGxlZ2FjeUNvZGUgPT09IDMyKSB8fCAobGVnYWN5Q29kZSA9PT0gMTMpIC8vIHNwYWNlIG9yIGVudGVyXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uTWFwQ2xpY2soZTogTWFwTW91c2VFdmVudCkge1xuICAgICAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZS5vcmlnaW5hbEV2ZW50LnRhcmdldDtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwICYmICh0YXJnZXRFbGVtZW50ID09PSBlbGVtZW50IHx8IGVsZW1lbnQuY29udGFpbnMoKHRhcmdldEVsZW1lbnQ6IGFueSkpKSkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUge0BsaW5rIFBvcHVwfSBpbnN0YW5jZSB0aGF0IGlzIGJvdW5kIHRvIHRoZSB7QGxpbmsgTWFya2VyfS5cbiAgICAgKiBAcmV0dXJucyB7UG9wdXB9IHBvcHVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgbWFya2VyID0gbmV3IG1hcGJveGdsLk1hcmtlcigpXG4gICAgICogIC5zZXRMbmdMYXQoWzAsIDBdKVxuICAgICAqICAuc2V0UG9wdXAobmV3IG1hcGJveGdsLlBvcHVwKCkuc2V0SFRNTChcIjxoMT5IZWxsbyBXb3JsZCE8L2gxPlwiKSlcbiAgICAgKiAgLmFkZFRvKG1hcCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhtYXJrZXIuZ2V0UG9wdXAoKSk7IC8vIHJldHVybiB0aGUgcG9wdXAgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBnZXRQb3B1cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIG9yIGNsb3NlcyB0aGUge0BsaW5rIFBvcHVwfSBpbnN0YW5jZSB0aGF0IGlzIGJvdW5kIHRvIHRoZSB7QGxpbmsgTWFya2VyfSwgZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB7QGxpbmsgUG9wdXB9LlxuICAgICAqIEByZXR1cm5zIHtNYXJrZXJ9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIG1hcmtlciA9IG5ldyBtYXBib3hnbC5NYXJrZXIoKVxuICAgICAqICAuc2V0TG5nTGF0KFswLCAwXSlcbiAgICAgKiAgLnNldFBvcHVwKG5ldyBtYXBib3hnbC5Qb3B1cCgpLnNldEhUTUwoXCI8aDE+SGVsbG8gV29ybGQhPC9oMT5cIikpXG4gICAgICogIC5hZGRUbyhtYXApO1xuICAgICAqXG4gICAgICogbWFya2VyLnRvZ2dsZVBvcHVwKCk7IC8vIHRvZ2dsZSBwb3B1cCBvcGVuIG9yIGNsb3NlZFxuICAgICAqL1xuICAgIHRvZ2dsZVBvcHVwKCkge1xuICAgICAgICBjb25zdCBwb3B1cCA9IHRoaXMuX3BvcHVwO1xuXG4gICAgICAgIGlmICghcG9wdXApIHJldHVybiB0aGlzO1xuICAgICAgICBlbHNlIGlmIChwb3B1cC5pc09wZW4oKSkgcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgIGVsc2UgcG9wdXAuYWRkVG8odGhpcy5fbWFwKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX3VwZGF0ZShlPzoge3R5cGU6ICdtb3ZlJyB8ICdtb3ZlZW5kJ30pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tYXApIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5fbWFwLnRyYW5zZm9ybS5yZW5kZXJXb3JsZENvcGllcykge1xuICAgICAgICAgICAgdGhpcy5fbG5nTGF0ID0gc21hcnRXcmFwKHRoaXMuX2xuZ0xhdCwgdGhpcy5fcG9zLCB0aGlzLl9tYXAudHJhbnNmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BvcyA9IHRoaXMuX21hcC5wcm9qZWN0KHRoaXMuX2xuZ0xhdCkuX2FkZCh0aGlzLl9vZmZzZXQpO1xuXG4gICAgICAgIGxldCByb3RhdGlvbiA9IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLl9yb3RhdGlvbkFsaWdubWVudCA9PT0gXCJ2aWV3cG9ydFwiIHx8IHRoaXMuX3JvdGF0aW9uQWxpZ25tZW50ID09PSBcImF1dG9cIikge1xuICAgICAgICAgICAgcm90YXRpb24gPSBgcm90YXRlWigke3RoaXMuX3JvdGF0aW9ufWRlZylgO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3JvdGF0aW9uQWxpZ25tZW50ID09PSBcIm1hcFwiKSB7XG4gICAgICAgICAgICByb3RhdGlvbiA9IGByb3RhdGVaKCR7dGhpcy5fcm90YXRpb24gLSB0aGlzLl9tYXAuZ2V0QmVhcmluZygpfWRlZylgO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBpdGNoID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuX3BpdGNoQWxpZ25tZW50ID09PSBcInZpZXdwb3J0XCIgfHwgdGhpcy5fcGl0Y2hBbGlnbm1lbnQgPT09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICBwaXRjaCA9IFwicm90YXRlWCgwZGVnKVwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3BpdGNoQWxpZ25tZW50ID09PSBcIm1hcFwiKSB7XG4gICAgICAgICAgICBwaXRjaCA9IGByb3RhdGVYKCR7dGhpcy5fbWFwLmdldFBpdGNoKCl9ZGVnKWA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBiZWNhdXNlIHJvdW5kaW5nIHRoZSBjb29yZGluYXRlcyBhdCBldmVyeSBgbW92ZWAgZXZlbnQgY2F1c2VzIHN0dXR0ZXJlZCB6b29taW5nXG4gICAgICAgIC8vIHdlIG9ubHkgcm91bmQgdGhlbSB3aGVuIF91cGRhdGUgaXMgY2FsbGVkIHdpdGggYG1vdmVlbmRgIG9yIHdoZW4gaXRzIGNhbGxlZCB3aXRoXG4gICAgICAgIC8vIG5vIGFyZ3VtZW50cyAod2hlbiB0aGUgTWFya2VyIGlzIGluaXRpYWxpemVkIG9yIE1hcmtlciNzZXRMbmdMYXQgaXMgaW52b2tlZCkuXG4gICAgICAgIGlmICghZSB8fCBlLnR5cGUgPT09IFwibW92ZWVuZFwiKSB7XG4gICAgICAgICAgICB0aGlzLl9wb3MgPSB0aGlzLl9wb3Mucm91bmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIERPTS5zZXRUcmFuc2Zvcm0odGhpcy5fZWxlbWVudCwgYCR7YW5jaG9yVHJhbnNsYXRlW3RoaXMuX2FuY2hvcl19IHRyYW5zbGF0ZSgke3RoaXMuX3Bvcy54fXB4LCAke3RoaXMuX3Bvcy55fXB4KSAke3BpdGNofSAke3JvdGF0aW9ufWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWFya2VyJ3Mgb2Zmc2V0LlxuICAgICAqIEByZXR1cm5zIHtQb2ludH0gVGhlIG1hcmtlcidzIHNjcmVlbiBjb29yZGluYXRlcyBpbiBwaXhlbHMuXG4gICAgICovXG4gICAgZ2V0T2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb2Zmc2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG9mZnNldCBvZiB0aGUgbWFya2VyXG4gICAgICogQHBhcmFtIHtQb2ludExpa2V9IG9mZnNldCBUaGUgb2Zmc2V0IGluIHBpeGVscyBhcyBhIHtAbGluayBQb2ludExpa2V9IG9iamVjdCB0byBhcHBseSByZWxhdGl2ZSB0byB0aGUgZWxlbWVudCdzIGNlbnRlci4gTmVnYXRpdmVzIGluZGljYXRlIGxlZnQgYW5kIHVwLlxuICAgICAqIEByZXR1cm5zIHtNYXJrZXJ9IGB0aGlzYFxuICAgICAqL1xuICAgIHNldE9mZnNldChvZmZzZXQ6IFBvaW50TGlrZSkge1xuICAgICAgICB0aGlzLl9vZmZzZXQgPSBQb2ludC5jb252ZXJ0KG9mZnNldCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBfb25Nb3ZlKGU6IE1hcE1vdXNlRXZlbnQgfCBNYXBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5faXNEcmFnZ2luZykge1xuICAgICAgICAgICAgY29uc3QgY2xpY2tUb2xlcmFuY2UgPSB0aGlzLl9jbGlja1RvbGVyYW5jZSB8fCB0aGlzLl9tYXAuX2NsaWNrVG9sZXJhbmNlO1xuICAgICAgICAgICAgdGhpcy5faXNEcmFnZ2luZyA9IGUucG9pbnQuZGlzdCh0aGlzLl9wb2ludGVyZG93blBvcykgPj0gY2xpY2tUb2xlcmFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fcG9zID0gZS5wb2ludC5zdWIodGhpcy5fcG9zaXRpb25EZWx0YSk7XG4gICAgICAgIHRoaXMuX2xuZ0xhdCA9IHRoaXMuX21hcC51bnByb2plY3QodGhpcy5fcG9zKTtcbiAgICAgICAgdGhpcy5zZXRMbmdMYXQodGhpcy5fbG5nTGF0KTtcbiAgICAgICAgLy8gc3VwcHJlc3MgY2xpY2sgZXZlbnQgc28gdGhhdCBwb3B1cHMgZG9uJ3QgdG9nZ2xlIG9uIGRyYWdcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuXG4gICAgICAgIC8vIG1ha2Ugc3VyZSBkcmFnc3RhcnQgb25seSBmaXJlcyBvbiB0aGUgZmlyc3QgbW92ZSBldmVudCBhZnRlciBtb3VzZWRvd24uXG4gICAgICAgIC8vIHRoaXMgY2FuJ3QgYmUgb24gbW91c2Vkb3duIGJlY2F1c2UgdGhhdCBldmVudCBkb2Vzbid0IG5lY2Vzc2FyaWx5XG4gICAgICAgIC8vIGltcGx5IHRoYXQgYSBkcmFnIGlzIGFib3V0IHRvIGhhcHBlbi5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSAncGVuZGluZycpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2FjdGl2ZSc7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmlyZWQgd2hlbiBkcmFnZ2luZyBzdGFydHNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXZlbnQgZHJhZ3N0YXJ0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgTWFya2VyXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge01hcmtlcn0gbWFya2VyIG9iamVjdCB0aGF0IGlzIGJlaW5nIGRyYWdnZWRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZHJhZ3N0YXJ0JykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoaWxlIGRyYWdnaW5nXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBkcmFnXG4gICAgICAgICAqIEBtZW1iZXJvZiBNYXJrZXJcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TWFya2VyfSBtYXJrZXIgb2JqZWN0IHRoYXQgaXMgYmVpbmcgZHJhZ2dlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZHJhZycpKTtcbiAgICB9XG5cbiAgICBfb25VcCgpIHtcbiAgICAgICAgLy8gcmV2ZXJ0IHRvIG5vcm1hbCBwb2ludGVyIGV2ZW50IGhhbmRsaW5nXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdhdXRvJztcbiAgICAgICAgdGhpcy5fcG9zaXRpb25EZWx0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BvaW50ZXJkb3duUG9zID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9tYXAub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLl9vbk1vdmUpO1xuICAgICAgICB0aGlzLl9tYXAub2ZmKCd0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdmUpO1xuXG4gICAgICAgIC8vIG9ubHkgZmlyZSBkcmFnZW5kIGlmIGl0IHdhcyBwcmVjZWRlZCBieSBhdCBsZWFzdCBvbmUgZHJhZyBldmVudFxuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogRmlyZWQgd2hlbiB0aGUgbWFya2VyIGlzIGZpbmlzaGVkIGJlaW5nIGRyYWdnZWRcbiAgICAgICAgICAgICpcbiAgICAgICAgICAgICogQGV2ZW50IGRyYWdlbmRcbiAgICAgICAgICAgICogQG1lbWJlcm9mIE1hcmtlclxuICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICAgICogQHByb3BlcnR5IHtNYXJrZXJ9IG1hcmtlciBvYmplY3QgdGhhdCB3YXMgZHJhZ2dlZFxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RyYWdlbmQnKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zdGF0ZSA9ICdpbmFjdGl2ZSc7XG4gICAgfVxuXG4gICAgX2FkZERyYWdIYW5kbGVyKGU6IE1hcE1vdXNlRXZlbnQgfCBNYXBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50LmNvbnRhaW5zKChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0OiBhbnkpKSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgcGl4ZWwgZGlzdGFuY2UgYmV0d2VlbiB0aGUgY2xpY2sgcG9pbnRcbiAgICAgICAgICAgIC8vIGFuZCB0aGUgbWFya2VyIHBvc2l0aW9uLCB3aXRoIHRoZSBvZmZzZXQgYWNjb3VudGVkIGZvci4gVGhlbiB3ZVxuICAgICAgICAgICAgLy8gY2FuIHN1YnRyYWN0IHRoaXMgZGlzdGFuY2UgZnJvbSB0aGUgbW91c2Vtb3ZlIGV2ZW50J3MgcG9zaXRpb25cbiAgICAgICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGUgbmV3IG1hcmtlciBwb3NpdGlvbi5cbiAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGRvIHRoaXMsIHRoZSBtYXJrZXIgJ2p1bXBzJyB0byB0aGUgY2xpY2sgcG9zaXRpb25cbiAgICAgICAgICAgIC8vIGNyZWF0aW5nIGEgamFycmluZyBVWCBlZmZlY3QuXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbkRlbHRhID0gZS5wb2ludC5zdWIodGhpcy5fcG9zKS5hZGQodGhpcy5fb2Zmc2V0KTtcblxuICAgICAgICAgICAgdGhpcy5fcG9pbnRlcmRvd25Qb3MgPSBlLnBvaW50O1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9ICdwZW5kaW5nJztcbiAgICAgICAgICAgIHRoaXMuX21hcC5vbignbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3ZlKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vbigndG91Y2htb3ZlJywgdGhpcy5fb25Nb3ZlKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vbmNlKCdtb3VzZXVwJywgdGhpcy5fb25VcCk7XG4gICAgICAgICAgICB0aGlzLl9tYXAub25jZSgndG91Y2hlbmQnLCB0aGlzLl9vblVwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGBkcmFnZ2FibGVgIHByb3BlcnR5IGFuZCBmdW5jdGlvbmFsaXR5IG9mIHRoZSBtYXJrZXJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaG91bGRCZURyYWdnYWJsZT1mYWxzZV0gVHVybnMgZHJhZyBmdW5jdGlvbmFsaXR5IG9uL29mZlxuICAgICAqIEByZXR1cm5zIHtNYXJrZXJ9IGB0aGlzYFxuICAgICAqL1xuICAgIHNldERyYWdnYWJsZShzaG91bGRCZURyYWdnYWJsZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9kcmFnZ2FibGUgPSAhIXNob3VsZEJlRHJhZ2dhYmxlOyAvLyBjb252ZXJ0IHBvc3NpYmxlIHVuZGVmaW5lZCB2YWx1ZSB0byBmYWxzZVxuXG4gICAgICAgIC8vIGhhbmRsZSBjYXNlIHdoZXJlIG1hcCBtYXkgbm90IGV4aXN0IHlldFxuICAgICAgICAvLyBlLmcuIHdoZW4gc2V0RHJhZ2dhYmxlIGlzIGNhbGxlZCBiZWZvcmUgYWRkVG9cbiAgICAgICAgaWYgKHRoaXMuX21hcCkge1xuICAgICAgICAgICAgaWYgKHNob3VsZEJlRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdtb3VzZWRvd24nLCB0aGlzLl9hZGREcmFnSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCd0b3VjaHN0YXJ0JywgdGhpcy5fYWRkRHJhZ0hhbmRsZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXAub2ZmKCdtb3VzZWRvd24nLCB0aGlzLl9hZGREcmFnSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLm9mZigndG91Y2hzdGFydCcsIHRoaXMuX2FkZERyYWdIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbWFya2VyIGNhbiBiZSBkcmFnZ2VkXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIG1hcmtlciBpcyBkcmFnZ2FibGUuXG4gICAgICovXG4gICAgaXNEcmFnZ2FibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kcmFnZ2FibGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHJvdGF0aW9uYCBwcm9wZXJ0eSBvZiB0aGUgbWFya2VyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcm90YXRpb249MF0gVGhlIHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBtYXJrZXIgKGNsb2Nrd2lzZSwgaW4gZGVncmVlcyksIHJlbGF0aXZlIHRvIGl0cyByZXNwZWN0aXZlIHtAbGluayBNYXJrZXIjc2V0Um90YXRpb25BbGlnbm1lbnR9IHNldHRpbmcuXG4gICAgICogQHJldHVybnMge01hcmtlcn0gYHRoaXNgXG4gICAgICovXG4gICAgc2V0Um90YXRpb24ocm90YXRpb246IG51bWJlcikge1xuICAgICAgICB0aGlzLl9yb3RhdGlvbiA9IHJvdGF0aW9uIHx8IDA7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBtYXJrZXIgKGluIGRlZ3JlZXMpLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjdXJyZW50IHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBtYXJrZXIuXG4gICAgICovXG4gICAgZ2V0Um90YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb3RhdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgcm90YXRpb25BbGlnbm1lbnRgIHByb3BlcnR5IG9mIHRoZSBtYXJrZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFthbGlnbm1lbnQ9J2F1dG8nXSBTZXRzIHRoZSBgcm90YXRpb25BbGlnbm1lbnRgIHByb3BlcnR5IG9mIHRoZSBtYXJrZXIuXG4gICAgICogQHJldHVybnMge01hcmtlcn0gYHRoaXNgXG4gICAgICovXG4gICAgc2V0Um90YXRpb25BbGlnbm1lbnQoYWxpZ25tZW50OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fcm90YXRpb25BbGlnbm1lbnQgPSBhbGlnbm1lbnQgfHwgJ2F1dG8nO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBgcm90YXRpb25BbGlnbm1lbnRgIHByb3BlcnR5IG9mIHRoZSBtYXJrZXIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgcm90YXRpb25hbCBhbGlnbm1lbnQgb2YgdGhlIG1hcmtlci5cbiAgICAgKi9cbiAgICBnZXRSb3RhdGlvbkFsaWdubWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JvdGF0aW9uQWxpZ25tZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGBwaXRjaEFsaWdubWVudGAgcHJvcGVydHkgb2YgdGhlIG1hcmtlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2FsaWdubWVudF0gU2V0cyB0aGUgYHBpdGNoQWxpZ25tZW50YCBwcm9wZXJ0eSBvZiB0aGUgbWFya2VyLiBJZiBhbGlnbm1lbnQgaXMgJ2F1dG8nLCBpdCB3aWxsIGF1dG9tYXRpY2FsbHkgbWF0Y2ggYHJvdGF0aW9uQWxpZ25tZW50YC5cbiAgICAgKiBAcmV0dXJucyB7TWFya2VyfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRQaXRjaEFsaWdubWVudChhbGlnbm1lbnQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9waXRjaEFsaWdubWVudCA9IGFsaWdubWVudCAmJiBhbGlnbm1lbnQgIT09ICdhdXRvJyA/IGFsaWdubWVudCA6IHRoaXMuX3JvdGF0aW9uQWxpZ25tZW50O1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBgcGl0Y2hBbGlnbm1lbnRgIHByb3BlcnR5IG9mIHRoZSBtYXJrZXIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgcGl0Y2ggYWxpZ25tZW50IG9mIHRoZSBtYXJrZXIgaW4gZGVncmVlcy5cbiAgICAgKi9cbiAgICBnZXRQaXRjaEFsaWdubWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BpdGNoQWxpZ25tZW50O1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7RXZlbnQsIEV2ZW50ZWR9IGZyb20gJy4uLy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL3V0aWwvZG9tJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnLi4vLi4vdXRpbC93aW5kb3cnO1xuaW1wb3J0IHtleHRlbmQsIGJpbmRBbGwsIHdhcm5PbmNlfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IExuZ0xhdCBmcm9tICcuLi8uLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgTWFya2VyIGZyb20gJy4uL21hcmtlcic7XG5cbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi9tYXAnO1xuaW1wb3J0IHR5cGUge0FuaW1hdGlvbk9wdGlvbnMsIENhbWVyYU9wdGlvbnN9IGZyb20gJy4uL2NhbWVyYSc7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgICBwb3NpdGlvbk9wdGlvbnM/OiBQb3NpdGlvbk9wdGlvbnMsXG4gICAgZml0Qm91bmRzT3B0aW9ucz86IEFuaW1hdGlvbk9wdGlvbnMgJiBDYW1lcmFPcHRpb25zLFxuICAgIHRyYWNrVXNlckxvY2F0aW9uPzogYm9vbGVhbixcbiAgICBzaG93QWNjdXJhY3lDaXJjbGU/OiBib29sZWFuLFxuICAgIHNob3dVc2VyTG9jYXRpb24/OiBib29sZWFuLFxuICAgIGdlb2xvY2F0aW9uOiBHZW9sb2NhdGlvbixcbn07XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBPcHRpb25zID0ge1xuICAgIHBvc2l0aW9uT3B0aW9uczoge1xuICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IGZhbHNlLFxuICAgICAgICBtYXhpbXVtQWdlOiAwLFxuICAgICAgICB0aW1lb3V0OiA2MDAwIC8qIDYgc2VjICovXG4gICAgfSxcbiAgICBmaXRCb3VuZHNPcHRpb25zOiB7XG4gICAgICAgIG1heFpvb206IDE1XG4gICAgfSxcbiAgICB0cmFja1VzZXJMb2NhdGlvbjogZmFsc2UsXG4gICAgc2hvd0FjY3VyYWN5Q2lyY2xlOiB0cnVlLFxuICAgIHNob3dVc2VyTG9jYXRpb246IHRydWVcbn07XG5cbi8qKlxuICogQSBgR2VvbG9jYXRlQ29udHJvbGAgY29udHJvbCBwcm92aWRlcyBhIGJ1dHRvbiB0aGF0IHVzZXMgdGhlIGJyb3dzZXIncyBnZW9sb2NhdGlvblxuICogQVBJIHRvIGxvY2F0ZSB0aGUgdXNlciBvbiB0aGUgbWFwLlxuICpcbiAqIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBnZW9sb2NhdGlvbixcbiAqIGFuZCBzb21lIHVzZXJzIG1heSBkaXNhYmxlIHRoZSBmZWF0dXJlLiBHZW9sb2NhdGlvbiBzdXBwb3J0IGZvciBtb2Rlcm5cbiAqIGJyb3dzZXJzIGluY2x1ZGluZyBDaHJvbWUgcmVxdWlyZXMgc2l0ZXMgdG8gYmUgc2VydmVkIG92ZXIgSFRUUFMuIElmXG4gKiBnZW9sb2NhdGlvbiBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUsIHRoZSBHZW9sb2NhdGVDb250cm9sIHdpbGwgc2hvd1xuICogYXMgZGlzYWJsZWQuXG4gKlxuICogVGhlIHpvb20gbGV2ZWwgYXBwbGllZCB3aWxsIGRlcGVuZCBvbiB0aGUgYWNjdXJhY3kgb2YgdGhlIGdlb2xvY2F0aW9uIHByb3ZpZGVkIGJ5IHRoZSBkZXZpY2UuXG4gKlxuICogVGhlIEdlb2xvY2F0ZUNvbnRyb2wgaGFzIHR3byBtb2Rlcy4gSWYgYHRyYWNrVXNlckxvY2F0aW9uYCBpcyBgZmFsc2VgIChkZWZhdWx0KSB0aGUgY29udHJvbCBhY3RzIGFzIGEgYnV0dG9uLCB3aGljaCB3aGVuIHByZXNzZWQgd2lsbCBzZXQgdGhlIG1hcCdzIGNhbWVyYSB0byB0YXJnZXQgdGhlIHVzZXIgbG9jYXRpb24uIElmIHRoZSB1c2VyIG1vdmVzLCB0aGUgbWFwIHdvbid0IHVwZGF0ZS4gVGhpcyBpcyBtb3N0IHN1aXRlZCBmb3IgdGhlIGRlc2t0b3AuIElmIGB0cmFja1VzZXJMb2NhdGlvbmAgaXMgYHRydWVgIHRoZSBjb250cm9sIGFjdHMgYXMgYSB0b2dnbGUgYnV0dG9uIHRoYXQgd2hlbiBhY3RpdmUgdGhlIHVzZXIncyBsb2NhdGlvbiBpcyBhY3RpdmVseSBtb25pdG9yZWQgZm9yIGNoYW5nZXMuIEluIHRoaXMgbW9kZSB0aGUgR2VvbG9jYXRlQ29udHJvbCBoYXMgdGhyZWUgaW50ZXJhY3Rpb24gc3RhdGVzOlxuICogKiBhY3RpdmUgLSB0aGUgbWFwJ3MgY2FtZXJhIGF1dG9tYXRpY2FsbHkgdXBkYXRlcyBhcyB0aGUgdXNlcidzIGxvY2F0aW9uIGNoYW5nZXMsIGtlZXBpbmcgdGhlIGxvY2F0aW9uIGRvdCBpbiB0aGUgY2VudGVyLiBJbml0aWFsIHN0YXRlIGFuZCB1cG9uIGNsaWNraW5nIHRoZSBgR2VvbG9jYXRlQ29udHJvbGAgYnV0dG9uLlxuICogKiBwYXNzaXZlIC0gdGhlIHVzZXIncyBsb2NhdGlvbiBkb3QgYXV0b21hdGljYWxseSB1cGRhdGVzLCBidXQgdGhlIG1hcCdzIGNhbWVyYSBkb2VzIG5vdC4gT2NjdXJzIHVwb24gdGhlIHVzZXIgaW5pdGlhdGluZyBhIG1hcCBtb3ZlbWVudC5cbiAqICogZGlzYWJsZWQgLSBvY2N1cnMgaWYgR2VvbG9jYXRpb24gaXMgbm90IGF2YWlsYWJsZSwgZGlzYWJsZWQgb3IgZGVuaWVkLlxuICpcbiAqIFRoZXNlIGludGVyYWN0aW9uIHN0YXRlcyBjYW4ndCBiZSBjb250cm9sbGVkIHByb2dyYW1tYXRpY2FsbHksIHJhdGhlciB0aGV5IGFyZSBzZXQgYmFzZWQgb24gdXNlciBpbnRlcmFjdGlvbnMuXG4gKlxuICogQGltcGxlbWVudHMge0lDb250cm9sfVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnBvc2l0aW9uT3B0aW9ucz17ZW5hYmxlSGlnaEFjY3VyYWN5OiBmYWxzZSwgdGltZW91dDogNjAwMH1dIEEgR2VvbG9jYXRpb24gQVBJIFtQb3NpdGlvbk9wdGlvbnNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Qb3NpdGlvbk9wdGlvbnMpIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5maXRCb3VuZHNPcHRpb25zPXttYXhab29tOiAxNX1dIEEge0BsaW5rIE1hcCNmaXRCb3VuZHN9IG9wdGlvbnMgb2JqZWN0IHRvIHVzZSB3aGVuIHRoZSBtYXAgaXMgcGFubmVkIGFuZCB6b29tZWQgdG8gdGhlIHVzZXIncyBsb2NhdGlvbi4gVGhlIGRlZmF1bHQgaXMgdG8gdXNlIGEgYG1heFpvb21gIG9mIDE1IHRvIGxpbWl0IGhvdyBmYXIgdGhlIG1hcCB3aWxsIHpvb20gaW4gZm9yIHZlcnkgYWNjdXJhdGUgbG9jYXRpb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnRyYWNrVXNlckxvY2F0aW9uPWZhbHNlXSBJZiBgdHJ1ZWAgdGhlIEdlb2xvY2F0ZSBDb250cm9sIGJlY29tZXMgYSB0b2dnbGUgYnV0dG9uIGFuZCB3aGVuIGFjdGl2ZSB0aGUgbWFwIHdpbGwgcmVjZWl2ZSB1cGRhdGVzIHRvIHRoZSB1c2VyJ3MgbG9jYXRpb24gYXMgaXQgY2hhbmdlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5zaG93QWNjdXJhY3lDaXJjbGU9dHJ1ZV0gQnkgZGVmYXVsdCwgaWYgc2hvd1VzZXJMb2NhdGlvbiBpcyBgdHJ1ZWAsIGEgdHJhbnNwYXJlbnQgY2lyY2xlIHdpbGwgYmUgZHJhd24gYXJvdW5kIHRoZSB1c2VyIGxvY2F0aW9uIGluZGljYXRpbmcgdGhlIGFjY3VyYWN5ICg5NSUgY29uZmlkZW5jZSBsZXZlbCkgb2YgdGhlIHVzZXIncyBsb2NhdGlvbi4gU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZS4gQWx3YXlzIGRpc2FibGVkIHdoZW4gc2hvd1VzZXJMb2NhdGlvbiBpcyBgZmFsc2VgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnNob3dVc2VyTG9jYXRpb249dHJ1ZV0gQnkgZGVmYXVsdCBhIGRvdCB3aWxsIGJlIHNob3duIG9uIHRoZSBtYXAgYXQgdGhlIHVzZXIncyBsb2NhdGlvbi4gU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogbWFwLmFkZENvbnRyb2wobmV3IG1hcGJveGdsLkdlb2xvY2F0ZUNvbnRyb2woe1xuICogICAgIHBvc2l0aW9uT3B0aW9uczoge1xuICogICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWVcbiAqICAgICB9LFxuICogICAgIHRyYWNrVXNlckxvY2F0aW9uOiB0cnVlXG4gKiB9KSk7XG4gKiBAc2VlIFtMb2NhdGUgdGhlIHVzZXJdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvbG9jYXRlLXVzZXIvKVxuICovXG5jbGFzcyBHZW9sb2NhdGVDb250cm9sIGV4dGVuZHMgRXZlbnRlZCB7XG4gICAgX21hcDogTWFwO1xuICAgIG9wdGlvbnM6IE9wdGlvbnM7XG4gICAgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgX2RvdEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIF9jaXJjbGVFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBfZ2VvbG9jYXRlQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBfZ2VvbG9jYXRpb25XYXRjaElEOiBudW1iZXI7XG4gICAgX3RpbWVvdXRJZDogP1RpbWVvdXRJRDtcbiAgICBfd2F0Y2hTdGF0ZTogJ09GRicgfCAnQUNUSVZFX0xPQ0snIHwgJ1dBSVRJTkdfQUNUSVZFJyB8ICdBQ1RJVkVfRVJST1InIHwgJ0JBQ0tHUk9VTkQnIHwgJ0JBQ0tHUk9VTkRfRVJST1InO1xuICAgIF9sYXN0S25vd25Qb3NpdGlvbjogYW55O1xuICAgIF91c2VyTG9jYXRpb25Eb3RNYXJrZXI6IE1hcmtlcjtcbiAgICBfYWNjdXJhY3lDaXJjbGVNYXJrZXI6IE1hcmtlcjtcbiAgICBfYWNjdXJhY3k6IG51bWJlcjtcbiAgICBfc2V0dXA6IGJvb2xlYW47IC8vIHNldCB0byB0cnVlIG9uY2UgdGhlIGNvbnRyb2wgaGFzIGJlZW4gc2V0dXBcbiAgICBfbnVtYmVyT2ZXYXRjaGVzOiBudW1iZXI7XG4gICAgX25vVGltZW91dDogYm9vbGVhbjtcbiAgICBfc3VwcG9ydHNHZW9sb2NhdGlvbjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc3QgZ2VvbG9jYXRpb24gPSB3aW5kb3cubmF2aWdhdG9yLmdlb2xvY2F0aW9uO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmQoe2dlb2xvY2F0aW9ufSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ19vblN1Y2Nlc3MnLFxuICAgICAgICAgICAgJ19vbkVycm9yJyxcbiAgICAgICAgICAgICdfb25ab29tJyxcbiAgICAgICAgICAgICdfZmluaXNoJyxcbiAgICAgICAgICAgICdfc2V0dXBVSScsXG4gICAgICAgICAgICAnX3VwZGF0ZUNhbWVyYScsXG4gICAgICAgICAgICAnX3VwZGF0ZU1hcmtlcidcbiAgICAgICAgXSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5fbnVtYmVyT2ZXYXRjaGVzID0gMDtcbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IERPTS5jcmVhdGUoJ2RpdicsIGBtYXBib3hnbC1jdHJsIG1hcGJveGdsLWN0cmwtZ3JvdXBgKTtcbiAgICAgICAgdGhpcy5fY2hlY2tHZW9sb2NhdGlvblN1cHBvcnQodGhpcy5fc2V0dXBVSSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XG4gICAgfVxuXG4gICAgb25SZW1vdmUoKSB7XG4gICAgICAgIC8vIGNsZWFyIHRoZSBnZW9sb2NhdGlvbiB3YXRjaCBpZiBleGlzdHNcbiAgICAgICAgaWYgKHRoaXMuX2dlb2xvY2F0aW9uV2F0Y2hJRCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3aW5kb3cubmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2godGhpcy5fZ2VvbG9jYXRpb25XYXRjaElEKTtcbiAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0aW9uV2F0Y2hJRCA9ICh1bmRlZmluZWQ6IGFueSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciB0aGUgbWFya2VycyBmcm9tIHRoZSBtYXBcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93VXNlckxvY2F0aW9uICYmIHRoaXMuX3VzZXJMb2NhdGlvbkRvdE1hcmtlcikge1xuICAgICAgICAgICAgdGhpcy5fdXNlckxvY2F0aW9uRG90TWFya2VyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0FjY3VyYWN5Q2lyY2xlICYmIHRoaXMuX2FjY3VyYWN5Q2lyY2xlTWFya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl9hY2N1cmFjeUNpcmNsZU1hcmtlci5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIERPTS5yZW1vdmUodGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fbWFwLm9mZignem9vbScsIHRoaXMuX29uWm9vbSk7XG4gICAgICAgIHRoaXMuX21hcCA9ICh1bmRlZmluZWQ6IGFueSk7XG4gICAgICAgIHRoaXMuX251bWJlck9mV2F0Y2hlcyA9IDA7XG4gICAgICAgIHRoaXMuX25vVGltZW91dCA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9jaGVja0dlb2xvY2F0aW9uU3VwcG9ydChjYWxsYmFjazogYm9vbGVhbiA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZVN1cHBvcnQgPSAoc3VwcG9ydGVkOiBib29sZWFuID0gISF0aGlzLm9wdGlvbnMuZ2VvbG9jYXRpb24pID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N1cHBvcnRzR2VvbG9jYXRpb24gPSBzdXBwb3J0ZWQ7XG4gICAgICAgICAgICBjYWxsYmFjayhzdXBwb3J0ZWQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5fc3VwcG9ydHNHZW9sb2NhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjayh0aGlzLl9zdXBwb3J0c0dlb2xvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IucGVybWlzc2lvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbmF2aWdhdG9yLnBlcm1pc3Npb25zIGhhcyBpbmNvbXBsZXRlIGJyb3dzZXIgc3VwcG9ydCBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9cGVybWlzc2lvbnMtYXBpXG4gICAgICAgICAgICAvLyBUZXN0IGZvciB0aGUgY2FzZSB3aGVyZSBhIGJyb3dzZXIgZGlzYWJsZXMgR2VvbG9jYXRpb24gYmVjYXVzZSBvZiBhbiBpbnNlY3VyZSBvcmlnaW47XG4gICAgICAgICAgICAvLyBpbiBzb21lIGVudmlyb25tZW50cyBsaWtlIGlPUzE2IFdlYlZpZXcsIHBlcm1pc3Npb25zIHJlamVjdCBxdWVyaWVzIGJ1dCBzdGlsbCBzdXBwb3J0IGdlb2xvY2F0aW9uXG4gICAgICAgICAgICBuYXZpZ2F0b3IucGVybWlzc2lvbnMucXVlcnkoe25hbWU6ICdnZW9sb2NhdGlvbid9KVxuICAgICAgICAgICAgICAgIC50aGVuKHAgPT4gdXBkYXRlU3VwcG9ydChwLnN0YXRlICE9PSAnZGVuaWVkJykpXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHVwZGF0ZVN1cHBvcnQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGVTdXBwb3J0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgR2VvbG9jYXRpb24gQVBJIFBvc2l0aW9uIGlzIG91dHNpZGUgdGhlIG1hcCdzIG1heGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UG9zaXRpb259IHBvc2l0aW9uIHRoZSBHZW9sb2NhdGlvbiBBUEkgUG9zaXRpb25cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgcG9zaXRpb24gaXMgb3V0c2lkZSB0aGUgbWFwJ3MgbWF4Ym91bmRzLCBvdGhlcndpc2UgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2lzT3V0T2ZNYXBNYXhCb3VuZHMocG9zaXRpb246IFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuX21hcC5nZXRNYXhCb3VuZHMoKTtcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZXMgPSBwb3NpdGlvbi5jb29yZHM7XG5cbiAgICAgICAgcmV0dXJuIGJvdW5kcyAmJiAoXG4gICAgICAgICAgICBjb29yZGluYXRlcy5sb25naXR1ZGUgPCBib3VuZHMuZ2V0V2VzdCgpIHx8XG4gICAgICAgICAgICBjb29yZGluYXRlcy5sb25naXR1ZGUgPiBib3VuZHMuZ2V0RWFzdCgpIHx8XG4gICAgICAgICAgICBjb29yZGluYXRlcy5sYXRpdHVkZSA8IGJvdW5kcy5nZXRTb3V0aCgpIHx8XG4gICAgICAgICAgICBjb29yZGluYXRlcy5sYXRpdHVkZSA+IGJvdW5kcy5nZXROb3J0aCgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX3NldEVycm9yU3RhdGUoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fd2F0Y2hTdGF0ZSkge1xuICAgICAgICBjYXNlICdXQUlUSU5HX0FDVElWRSc6XG4gICAgICAgICAgICB0aGlzLl93YXRjaFN0YXRlID0gJ0FDVElWRV9FUlJPUic7XG4gICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlJyk7XG4gICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlLWVycm9yJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQUNUSVZFX0xPQ0snOlxuICAgICAgICAgICAgdGhpcy5fd2F0Y2hTdGF0ZSA9ICdBQ1RJVkVfRVJST1InO1xuICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZScpO1xuICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZS1lcnJvcicpO1xuICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgICAgIC8vIHR1cm4gbWFya2VyIGdyZXlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdCQUNLR1JPVU5EJzpcbiAgICAgICAgICAgIHRoaXMuX3dhdGNoU3RhdGUgPSAnQkFDS0dST1VORF9FUlJPUic7XG4gICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZCcpO1xuICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWJhY2tncm91bmQtZXJyb3InKTtcbiAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgICAgICAvLyB0dXJuIG1hcmtlciBncmV5XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQUNUSVZFX0VSUk9SJzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgVW5leHBlY3RlZCB3YXRjaFN0YXRlICR7dGhpcy5fd2F0Y2hTdGF0ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIEdlb2xvY2F0aW9uIEFQSSByZXR1cm5zIGEgbmV3IGxvY2F0aW9uLCB1cGRhdGUgdGhlIEdlb2xvY2F0ZUNvbnRyb2wuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Bvc2l0aW9ufSBwb3NpdGlvbiB0aGUgR2VvbG9jYXRpb24gQVBJIFBvc2l0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfb25TdWNjZXNzKHBvc2l0aW9uOiBQb3NpdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMuX21hcCkge1xuICAgICAgICAgICAgLy8gY29udHJvbCBoYXMgc2luY2UgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNPdXRPZk1hcE1heEJvdW5kcyhwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEVycm9yU3RhdGUoKTtcblxuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnb3V0b2ZtYXhib3VuZHMnLCBwb3NpdGlvbikpO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlTWFya2VyKCk7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2goKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFja1VzZXJMb2NhdGlvbikge1xuICAgICAgICAgICAgLy8ga2VlcCBhIHJlY29yZCBvZiB0aGUgcG9zaXRpb24gc28gdGhhdCBpZiB0aGUgc3RhdGUgaXMgQkFDS0dST1VORCBhbmQgdGhlIHVzZXJcbiAgICAgICAgICAgIC8vIGNsaWNrcyB0aGUgYnV0dG9uLCB3ZSBjYW4gbW92ZSB0byBBQ1RJVkVfTE9DSyBpbW1lZGlhdGVseSB3aXRob3V0IHdhaXRpbmcgZm9yXG4gICAgICAgICAgICAvLyB3YXRjaFBvc2l0aW9uIHRvIHRyaWdnZXIgX29uU3VjY2Vzc1xuICAgICAgICAgICAgdGhpcy5fbGFzdEtub3duUG9zaXRpb24gPSBwb3NpdGlvbjtcblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl93YXRjaFN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdXQUlUSU5HX0FDVElWRSc6XG4gICAgICAgICAgICBjYXNlICdBQ1RJVkVfTE9DSyc6XG4gICAgICAgICAgICBjYXNlICdBQ1RJVkVfRVJST1InOlxuICAgICAgICAgICAgICAgIHRoaXMuX3dhdGNoU3RhdGUgPSAnQUNUSVZFX0xPQ0snO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZS1lcnJvcicpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0JBQ0tHUk9VTkQnOlxuICAgICAgICAgICAgY2FzZSAnQkFDS0dST1VORF9FUlJPUic6XG4gICAgICAgICAgICAgICAgdGhpcy5fd2F0Y2hTdGF0ZSA9ICdCQUNLR1JPVU5EJztcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtd2FpdGluZycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWJhY2tncm91bmQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgVW5leHBlY3RlZCB3YXRjaFN0YXRlICR7dGhpcy5fd2F0Y2hTdGF0ZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHNob3dVc2VyTG9jYXRpb24gYW5kIHRoZSB3YXRjaCBzdGF0ZSBpc24ndCBvZmYgdGhlbiB1cGRhdGUgdGhlIG1hcmtlciBsb2NhdGlvblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dVc2VyTG9jYXRpb24gJiYgdGhpcy5fd2F0Y2hTdGF0ZSAhPT0gJ09GRicpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU1hcmtlcihwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBpbiBub3JtYWwgbW9kZSAobm90IHdhdGNoIG1vZGUpLCBvciBpZiBpbiB3YXRjaCBtb2RlIGFuZCB0aGUgc3RhdGUgaXMgYWN0aXZlIHdhdGNoXG4gICAgICAgIC8vIHRoZW4gdXBkYXRlIHRoZSBjYW1lcmFcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudHJhY2tVc2VyTG9jYXRpb24gfHwgdGhpcy5fd2F0Y2hTdGF0ZSA9PT0gJ0FDVElWRV9MT0NLJykge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ2FtZXJhKHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd1VzZXJMb2NhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fZG90RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC11c2VyLWxvY2F0aW9uLWRvdC1zdGFsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZ2VvbG9jYXRlJywgcG9zaXRpb24pKTtcbiAgICAgICAgdGhpcy5fZmluaXNoKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBjYW1lcmEgbG9jYXRpb24gdG8gY2VudGVyIG9uIHRoZSBjdXJyZW50IHBvc2l0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Bvc2l0aW9ufSBwb3NpdGlvbiB0aGUgR2VvbG9jYXRpb24gQVBJIFBvc2l0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdXBkYXRlQ2FtZXJhKHBvc2l0aW9uOiBQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBuZXcgTG5nTGF0KHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUsIHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSk7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IHBvc2l0aW9uLmNvb3Jkcy5hY2N1cmFjeTtcbiAgICAgICAgY29uc3QgYmVhcmluZyA9IHRoaXMuX21hcC5nZXRCZWFyaW5nKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBleHRlbmQoe2JlYXJpbmd9LCB0aGlzLm9wdGlvbnMuZml0Qm91bmRzT3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fbWFwLmZpdEJvdW5kcyhjZW50ZXIudG9Cb3VuZHMocmFkaXVzKSwgb3B0aW9ucywge1xuICAgICAgICAgICAgZ2VvbG9jYXRlU291cmNlOiB0cnVlIC8vIHRhZyB0aGlzIGNhbWVyYSBjaGFuZ2Ugc28gaXQgd29uJ3QgY2F1c2UgdGhlIGNvbnRyb2wgdG8gY2hhbmdlIHRvIGJhY2tncm91bmQgc3RhdGVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSB1c2VyIGxvY2F0aW9uIGRvdCBNYXJrZXIgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UG9zaXRpb259IFtwb3NpdGlvbl0gdGhlIEdlb2xvY2F0aW9uIEFQSSBQb3NpdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VwZGF0ZU1hcmtlcihwb3NpdGlvbjogP1Bvc2l0aW9uKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgY2VudGVyID0gbmV3IExuZ0xhdChwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlLCBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUpO1xuICAgICAgICAgICAgdGhpcy5fYWNjdXJhY3lDaXJjbGVNYXJrZXIuc2V0TG5nTGF0KGNlbnRlcikuYWRkVG8odGhpcy5fbWFwKTtcbiAgICAgICAgICAgIHRoaXMuX3VzZXJMb2NhdGlvbkRvdE1hcmtlci5zZXRMbmdMYXQoY2VudGVyKS5hZGRUbyh0aGlzLl9tYXApO1xuICAgICAgICAgICAgdGhpcy5fYWNjdXJhY3kgPSBwb3NpdGlvbi5jb29yZHMuYWNjdXJhY3k7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dVc2VyTG9jYXRpb24gJiYgdGhpcy5vcHRpb25zLnNob3dBY2N1cmFjeUNpcmNsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNpcmNsZVJhZGl1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdXNlckxvY2F0aW9uRG90TWFya2VyLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGhpcy5fYWNjdXJhY3lDaXJjbGVNYXJrZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfdXBkYXRlQ2lyY2xlUmFkaXVzKCkge1xuICAgICAgICBhc3NlcnQodGhpcy5fY2lyY2xlRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLl9tYXAuX2NvbnRhaW5lci5jbGllbnRIZWlnaHQgLyAyO1xuICAgICAgICBjb25zdCBhID0gdGhpcy5fbWFwLnVucHJvamVjdChbMCwgeV0pO1xuICAgICAgICBjb25zdCBiID0gdGhpcy5fbWFwLnVucHJvamVjdChbMSwgeV0pO1xuICAgICAgICBjb25zdCBtZXRlcnNQZXJQaXhlbCA9IGEuZGlzdGFuY2VUbyhiKTtcbiAgICAgICAgY29uc3QgY2lyY2xlRGlhbWV0ZXIgPSBNYXRoLmNlaWwoMi4wICogdGhpcy5fYWNjdXJhY3kgLyBtZXRlcnNQZXJQaXhlbCk7XG4gICAgICAgIHRoaXMuX2NpcmNsZUVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtjaXJjbGVEaWFtZXRlcn1weGA7XG4gICAgICAgIHRoaXMuX2NpcmNsZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7Y2lyY2xlRGlhbWV0ZXJ9cHhgO1xuICAgIH1cblxuICAgIF9vblpvb20oKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd1VzZXJMb2NhdGlvbiAmJiB0aGlzLm9wdGlvbnMuc2hvd0FjY3VyYWN5Q2lyY2xlKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDaXJjbGVSYWRpdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkVycm9yKGVycm9yOiBQb3NpdGlvbkVycm9yKSB7XG4gICAgICAgIGlmICghdGhpcy5fbWFwKSB7XG4gICAgICAgICAgICAvLyBjb250cm9sIGhhcyBzaW5jZSBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2tVc2VyTG9jYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gUEVSTUlTU0lPTl9ERU5JRURcbiAgICAgICAgICAgICAgICB0aGlzLl93YXRjaFN0YXRlID0gJ09GRic7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZS1lcnJvcicpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWJhY2tncm91bmQtZXJyb3InKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fbWFwLl9nZXRVSVN0cmluZygnR2VvbG9jYXRlQ29udHJvbC5Mb2NhdGlvbk5vdEF2YWlsYWJsZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi50aXRsZSA9IHRpdGxlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCB0aXRsZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ2VvbG9jYXRpb25XYXRjaElEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJXYXRjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IuY29kZSA9PT0gMyAmJiB0aGlzLl9ub1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHJlcHJlc2VudHMgYSBmb3JjZWQgZXJyb3Igc3RhdGVcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHdhcyB0cmlnZ2VyZWQgdG8gZm9yY2UgaW1tZWRpYXRlIGdlb2xvY2F0aW9uIHdoZW4gYSB3YXRjaCBpcyBhbHJlYWR5IHByZXNlbnRcbiAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtanMvaXNzdWVzLzgyMTRcbiAgICAgICAgICAgICAgICAvLyBhbmQgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dlb2xvY2F0aW9uLWFwaS8jZXhhbXBsZS01LWZvcmNpbmctdGhlLXVzZXItYWdlbnQtdG8tcmV0dXJuLWEtZnJlc2gtY2FjaGVkLXBvc2l0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRFcnJvclN0YXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fd2F0Y2hTdGF0ZSAhPT0gJ09GRicgJiYgdGhpcy5vcHRpb25zLnNob3dVc2VyTG9jYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2RvdEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtdXNlci1sb2NhdGlvbi1kb3Qtc3RhbGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2Vycm9yJywgZXJyb3IpKTtcblxuICAgICAgICB0aGlzLl9maW5pc2goKTtcbiAgICB9XG5cbiAgICBfZmluaXNoKCkge1xuICAgICAgICBpZiAodGhpcy5fdGltZW91dElkKSB7IGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0SWQpOyB9XG4gICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBfc2V0dXBVSShzdXBwb3J0ZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgKGU6IE1vdXNlRXZlbnQpID0+IGUucHJldmVudERlZmF1bHQoKSk7XG4gICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbiA9IERPTS5jcmVhdGUoJ2J1dHRvbicsIGBtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZWAsIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIERPTS5jcmVhdGUoJ3NwYW4nLCBgbWFwYm94Z2wtY3RybC1pY29uYCwgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uKS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG5cbiAgICAgICAgaWYgKHN1cHBvcnRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKCdHZW9sb2NhdGlvbiBzdXBwb3J0IGlzIG5vdCBhdmFpbGFibGUgc28gdGhlIEdlb2xvY2F0ZUNvbnRyb2wgd2lsbCBiZSBkaXNhYmxlZC4nKTtcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fbWFwICYmIHRoaXMuX21hcC5fZ2V0VUlTdHJpbmcgPyB0aGlzLl9tYXAuX2dldFVJU3RyaW5nKCdHZW9sb2NhdGVDb250cm9sLkxvY2F0aW9uTm90QXZhaWxhYmxlJykgOiAnTG9jYXRpb24gTm90IEF2YWlsYWJsZSc7XG4gICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLnRpdGxlID0gdGl0bGU7XG4gICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGl0bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLl9nZXRVSVN0cmluZyA/IHRoaXMuX21hcC5fZ2V0VUlTdHJpbmcoJ0dlb2xvY2F0ZUNvbnRyb2wuRmluZE15TG9jYXRpb24nKSA6ICdGaW5kIE15IExvY2F0aW9uJztcbiAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi50aXRsZSA9IHRpdGxlO1xuICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRpdGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2tVc2VyTG9jYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgdGhpcy5fd2F0Y2hTdGF0ZSA9ICdPRkYnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2hlbiBzaG93VXNlckxvY2F0aW9uIGlzIGVuYWJsZWQsIGtlZXAgdGhlIEdlb2xvY2F0ZSBidXR0b24gZGlzYWJsZWQgdW50aWwgdGhlIGRldmljZSBsb2NhdGlvbiBtYXJrZXIgaXMgc2V0dXAgb24gdGhlIG1hcFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dVc2VyTG9jYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2RvdEVsZW1lbnQgPSBET00uY3JlYXRlKCdkaXYnLCAnbWFwYm94Z2wtdXNlci1sb2NhdGlvbi1kb3QnKTtcblxuICAgICAgICAgICAgdGhpcy5fdXNlckxvY2F0aW9uRG90TWFya2VyID0gbmV3IE1hcmtlcih0aGlzLl9kb3RFbGVtZW50KTtcblxuICAgICAgICAgICAgdGhpcy5fY2lyY2xlRWxlbWVudCA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC11c2VyLWxvY2F0aW9uLWFjY3VyYWN5LWNpcmNsZScpO1xuICAgICAgICAgICAgdGhpcy5fYWNjdXJhY3lDaXJjbGVNYXJrZXIgPSBuZXcgTWFya2VyKHtlbGVtZW50OiB0aGlzLl9jaXJjbGVFbGVtZW50LCBwaXRjaEFsaWdubWVudDogJ21hcCd9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFja1VzZXJMb2NhdGlvbikgdGhpcy5fd2F0Y2hTdGF0ZSA9ICdPRkYnO1xuXG4gICAgICAgICAgICB0aGlzLl9tYXAub24oJ3pvb20nLCB0aGlzLl9vblpvb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlci5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLl9zZXR1cCA9IHRydWU7XG5cbiAgICAgICAgLy8gd2hlbiB0aGUgY2FtZXJhIGlzIGNoYW5nZWQgKGFuZCBpdCdzIG5vdCBhcyBhIHJlc3VsdCBvZiB0aGUgR2VvbG9jYXRpb24gQ29udHJvbCkgY2hhbmdlXG4gICAgICAgIC8vIHRoZSB3YXRjaCBtb2RlIHRvIGJhY2tncm91bmQgd2F0Y2gsIHNvIHRoYXQgdGhlIG1hcmtlciBpcyB1cGRhdGVkIGJ1dCBub3QgdGhlIGNhbWVyYS5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFja1VzZXJMb2NhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdtb3Zlc3RhcnQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmcm9tUmVzaXplID0gZXZlbnQub3JpZ2luYWxFdmVudCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnR5cGUgPT09ICdyZXNpemUnO1xuICAgICAgICAgICAgICAgIGlmICghZXZlbnQuZ2VvbG9jYXRlU291cmNlICYmIHRoaXMuX3dhdGNoU3RhdGUgPT09ICdBQ1RJVkVfTE9DSycgJiYgIWZyb21SZXNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2F0Y2hTdGF0ZSA9ICdCQUNLR1JPVU5EJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWJhY2tncm91bmQnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3RyYWNrdXNlcmxvY2F0aW9uZW5kJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBQcm9ncmFtbWF0aWNhbGx5IHJlcXVlc3QgYW5kIG1vdmUgdGhlIG1hcCB0byB0aGUgdXNlcidzIGxvY2F0aW9uLlxuICAgICpcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAgaWYgY2FsbGVkIGJlZm9yZSBjb250cm9sIHdhcyBhZGRlZCB0byBhIG1hcCwgb3RoZXJ3aXNlIHJldHVybnMgYHRydWVgLlxuICAgICogQGV4YW1wbGVcbiAgICAqIC8vIEluaXRpYWxpemUgdGhlIGdlb2xvY2F0ZSBjb250cm9sLlxuICAgICogdmFyIGdlb2xvY2F0ZSA9IG5ldyBtYXBib3hnbC5HZW9sb2NhdGVDb250cm9sKHtcbiAgICAqICBwb3NpdGlvbk9wdGlvbnM6IHtcbiAgICAqICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxuICAgICogIH0sXG4gICAgKiAgdHJhY2tVc2VyTG9jYXRpb246IHRydWVcbiAgICAqIH0pO1xuICAgICogLy8gQWRkIHRoZSBjb250cm9sIHRvIHRoZSBtYXAuXG4gICAgKiBtYXAuYWRkQ29udHJvbChnZW9sb2NhdGUpO1xuICAgICogbWFwLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgKiAgIGdlb2xvY2F0ZS50cmlnZ2VyKCk7XG4gICAgKiB9KTtcbiAgICAqL1xuICAgIHRyaWdnZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5fc2V0dXApIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKCdHZW9sb2NhdGUgY29udHJvbCB0cmlnZ2VyZWQgYmVmb3JlIGFkZGVkIHRvIGEgbWFwJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFja1VzZXJMb2NhdGlvbikge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHdhdGNoU3RhdGUgYW5kIGRvIGFueSBvdXRnb2luZyBzdGF0ZSBjbGVhbnVwXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX3dhdGNoU3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ09GRic6XG4gICAgICAgICAgICAgICAgLy8gdHVybiBvbiB0aGUgR2VvbG9jYXRlIENvbnRyb2xcbiAgICAgICAgICAgICAgICB0aGlzLl93YXRjaFN0YXRlID0gJ1dBSVRJTkdfQUNUSVZFJztcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3RyYWNrdXNlcmxvY2F0aW9uc3RhcnQnKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdXQUlUSU5HX0FDVElWRSc6XG4gICAgICAgICAgICBjYXNlICdBQ1RJVkVfTE9DSyc6XG4gICAgICAgICAgICBjYXNlICdBQ1RJVkVfRVJST1InOlxuICAgICAgICAgICAgY2FzZSAnQkFDS0dST1VORF9FUlJPUic6XG4gICAgICAgICAgICAgICAgLy8gdHVybiBvZmYgdGhlIEdlb2xvY2F0ZSBDb250cm9sXG4gICAgICAgICAgICAgICAgdGhpcy5fbnVtYmVyT2ZXYXRjaGVzLS07XG4gICAgICAgICAgICAgICAgdGhpcy5fbm9UaW1lb3V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2F0Y2hTdGF0ZSA9ICdPRkYnO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUtZXJyb3InKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kLWVycm9yJyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCd0cmFja3VzZXJsb2NhdGlvbmVuZCcpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0JBQ0tHUk9VTkQnOlxuICAgICAgICAgICAgICAgIHRoaXMuX3dhdGNoU3RhdGUgPSAnQUNUSVZFX0xPQ0snO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICAgICAgLy8gc2V0IGNhbWVyYSB0byBsYXN0IGtub3duIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xhc3RLbm93blBvc2l0aW9uKSB0aGlzLl91cGRhdGVDYW1lcmEodGhpcy5fbGFzdEtub3duUG9zaXRpb24pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgndHJhY2t1c2VybG9jYXRpb25zdGFydCcpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgVW5leHBlY3RlZCB3YXRjaFN0YXRlICR7dGhpcy5fd2F0Y2hTdGF0ZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaW5jb21pbmcgc3RhdGUgc2V0dXBcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fd2F0Y2hTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnV0FJVElOR19BQ1RJVkUnOlxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQUNUSVZFX0xPQ0snOlxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0FDVElWRV9FUlJPUic6XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdCQUNLR1JPVU5EJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQkFDS0dST1VORF9FUlJPUic6XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZC1lcnJvcicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnT0ZGJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgVW5leHBlY3RlZCB3YXRjaFN0YXRlICR7dGhpcy5fd2F0Y2hTdGF0ZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWFuYWdlIGdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gLyBnZW9sb2NhdGlvbi5jbGVhcldhdGNoXG4gICAgICAgICAgICBpZiAodGhpcy5fd2F0Y2hTdGF0ZSA9PT0gJ09GRicgJiYgdGhpcy5fZ2VvbG9jYXRpb25XYXRjaElEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBjbGVhciB3YXRjaFBvc2l0aW9uIGFzIHdlJ3ZlIGNoYW5nZWQgdG8gYW4gT0ZGIHN0YXRlXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJXYXRjaCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9nZW9sb2NhdGlvbldhdGNoSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGVuYWJsZSB3YXRjaFBvc2l0aW9uIHNpbmNlIHdhdGNoU3RhdGUgaXMgbm90IE9GRiBhbmQgdGhlcmUgaXMgbm8gd2F0Y2hQb3NpdGlvbiBhbHJlYWR5IHJ1bm5pbmdcblxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ3RydWUnKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX251bWJlck9mV2F0Y2hlcysrO1xuICAgICAgICAgICAgICAgIGxldCBwb3NpdGlvbk9wdGlvbnM7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX251bWJlck9mV2F0Y2hlcyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25PcHRpb25zID0ge21heGltdW1BZ2U6NjAwMDAwLCB0aW1lb3V0OjB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ub1RpbWVvdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbk9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25vVGltZW91dCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0aW9uV2F0Y2hJRCA9IHdpbmRvdy5uYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25TdWNjZXNzLCB0aGlzLl9vbkVycm9yLCBwb3NpdGlvbk9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luZG93Lm5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5fb25TdWNjZXNzLCB0aGlzLl9vbkVycm9yLCB0aGlzLm9wdGlvbnMucG9zaXRpb25PcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gVGhpcyB0aW1lb3V0IGVuc3VyZXMgdGhhdCB3ZSBzdGlsbCBjYWxsIGZpbmlzaCgpIGV2ZW4gaWZcbiAgICAgICAgICAgIC8vIHRoZSB1c2VyIGRlY2xpbmVzIHRvIHNoYXJlIHRoZWlyIGxvY2F0aW9uIGluIEZpcmVmb3hcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5fZmluaXNoLCAxMDAwMCAvKiAxMHNlYyAqLyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBfY2xlYXJXYXRjaCgpIHtcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5nZW9sb2NhdGlvbi5jbGVhcldhdGNoKHRoaXMuX2dlb2xvY2F0aW9uV2F0Y2hJRCk7XG5cbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRpb25XYXRjaElEID0gKHVuZGVmaW5lZDogYW55KTtcbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93VXNlckxvY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVNYXJrZXIobnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlb2xvY2F0ZUNvbnRyb2w7XG5cbi8qIEdlb2xvY2F0ZSBDb250cm9sIFdhdGNoIFN0YXRlc1xuICogVGhpcyBpcyB0aGUgcHJpdmF0ZSBzdGF0ZSBvZiB0aGUgY29udHJvbC5cbiAqXG4gKiBPRkZcbiAqICAgIG9mZi9pbmFjdGl2ZVxuICogV0FJVElOR19BQ1RJVkVcbiAqICAgIEdlb2xvY2F0ZSBDb250cm9sIHdhcyBjbGlja2VkIGJ1dCBzdGlsbCB3YWl0aW5nIGZvciBHZW9sb2NhdGlvbiBBUEkgcmVzcG9uc2Ugd2l0aCB1c2VyIGxvY2F0aW9uXG4gKiBBQ1RJVkVfTE9DS1xuICogICAgU2hvd2luZyB0aGUgdXNlciBsb2NhdGlvbiBhcyBhIGRvdCBBTkQgdHJhY2tpbmcgdGhlIGNhbWVyYSB0byBiZSBmaXhlZCB0byB0aGVpciBsb2NhdGlvbi4gSWYgdGhlaXIgbG9jYXRpb24gY2hhbmdlcyB0aGUgbWFwIG1vdmVzIHRvIGZvbGxvdy5cbiAqIEFDVElWRV9FUlJPUlxuICogICAgVGhlcmUgd2FzIGVuIGVycm9yIGZyb20gdGhlIEdlb2xvY2F0aW9uIEFQSSB3aGlsZSB0cnlpbmcgdG8gc2hvdyBhbmQgdHJhY2sgdGhlIHVzZXIgbG9jYXRpb24uXG4gKiBCQUNLR1JPVU5EXG4gKiAgICBTaG93aW5nIHRoZSB1c2VyIGxvY2F0aW9uIGFzIGEgZG90IGJ1dCB0aGUgY2FtZXJhIGRvZXNuJ3QgZm9sbG93IHRoZWlyIGxvY2F0aW9uIGFzIGl0IGNoYW5nZXMuXG4gKiBCQUNLR1JPVU5EX0VSUk9SXG4gKiAgICBUaGVyZSB3YXMgYW4gZXJyb3IgZnJvbSB0aGUgR2VvbG9jYXRpb24gQVBJIHdoaWxlIHRyeWluZyB0byBzaG93IChidXQgbm90IHRyYWNrKSB0aGUgdXNlciBsb2NhdGlvbi5cbiAqL1xuXG4vKipcbiAqIEZpcmVkIG9uIGVhY2ggR2VvbG9jYXRpb24gQVBJIHBvc2l0aW9uIHVwZGF0ZSB3aGljaCByZXR1cm5lZCBhcyBzdWNjZXNzLlxuICpcbiAqIEBldmVudCBnZW9sb2NhdGVcbiAqIEBtZW1iZXJvZiBHZW9sb2NhdGVDb250cm9sXG4gKiBAaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7UG9zaXRpb259IGRhdGEgVGhlIHJldHVybmVkIFtQb3NpdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uKSBvYmplY3QgZnJvbSB0aGUgY2FsbGJhY2sgaW4gW0dlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2VvbG9jYXRpb24vZ2V0Q3VycmVudFBvc2l0aW9uKSBvciBbR2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbigpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2VvbG9jYXRpb24vd2F0Y2hQb3NpdGlvbikuXG4gKiBAZXhhbXBsZVxuICogLy8gSW5pdGlhbGl6ZSB0aGUgZ2VvbG9jYXRlIGNvbnRyb2wuXG4gKiB2YXIgZ2VvbG9jYXRlID0gbmV3IG1hcGJveGdsLkdlb2xvY2F0ZUNvbnRyb2woe1xuICogICBwb3NpdGlvbk9wdGlvbnM6IHtcbiAqICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxuICogICB9LFxuICogICB0cmFja1VzZXJMb2NhdGlvbjogdHJ1ZVxuICogfSk7XG4gKiAvLyBBZGQgdGhlIGNvbnRyb2wgdG8gdGhlIG1hcC5cbiAqIG1hcC5hZGRDb250cm9sKGdlb2xvY2F0ZSk7XG4gKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICogLy8gd2hlbiBhIGdlb2xvY2F0ZSBldmVudCBvY2N1cnMuXG4gKiBnZW9sb2NhdGUub24oJ2dlb2xvY2F0ZScsIGZ1bmN0aW9uKCkge1xuICogICBjb25zb2xlLmxvZygnQSBnZW9sb2NhdGUgZXZlbnQgaGFzIG9jY3VycmVkLicpXG4gKiB9KTtcbiAqXG4gKi9cblxuLyoqXG4gKiBGaXJlZCBvbiBlYWNoIEdlb2xvY2F0aW9uIEFQSSBwb3NpdGlvbiB1cGRhdGUgd2hpY2ggcmV0dXJuZWQgYXMgYW4gZXJyb3IuXG4gKlxuICogQGV2ZW50IGVycm9yXG4gKiBAbWVtYmVyb2YgR2VvbG9jYXRlQ29udHJvbFxuICogQGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1Bvc2l0aW9uRXJyb3J9IGRhdGEgVGhlIHJldHVybmVkIFtQb3NpdGlvbkVycm9yXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUG9zaXRpb25FcnJvcikgb2JqZWN0IGZyb20gdGhlIGNhbGxiYWNrIGluIFtHZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dlb2xvY2F0aW9uL2dldEN1cnJlbnRQb3NpdGlvbikgb3IgW0dlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24oKV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dlb2xvY2F0aW9uL3dhdGNoUG9zaXRpb24pLlxuICogQGV4YW1wbGVcbiAqIC8vIEluaXRpYWxpemUgdGhlIGdlb2xvY2F0ZSBjb250cm9sLlxuICogdmFyIGdlb2xvY2F0ZSA9IG5ldyBtYXBib3hnbC5HZW9sb2NhdGVDb250cm9sKHtcbiAqICAgcG9zaXRpb25PcHRpb25zOiB7XG4gKiAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWVcbiAqICAgfSxcbiAqICAgdHJhY2tVc2VyTG9jYXRpb246IHRydWVcbiAqIH0pO1xuICogLy8gQWRkIHRoZSBjb250cm9sIHRvIHRoZSBtYXAuXG4gKiBtYXAuYWRkQ29udHJvbChnZW9sb2NhdGUpO1xuICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgZmlyZXNcbiAqIC8vIHdoZW4gYW4gZXJyb3IgZXZlbnQgb2NjdXJzLlxuICogZ2VvbG9jYXRlLm9uKCdlcnJvcicsIGZ1bmN0aW9uKCkge1xuICogICBjb25zb2xlLmxvZygnQW4gZXJyb3IgZXZlbnQgaGFzIG9jY3VycmVkLicpXG4gKiB9KTtcbiAqXG4gKi9cblxuLyoqXG4gKiBGaXJlZCBvbiBlYWNoIEdlb2xvY2F0aW9uIEFQSSBwb3NpdGlvbiB1cGRhdGUgd2hpY2ggcmV0dXJuZWQgYXMgc3VjY2VzcyBidXQgdXNlciBwb3NpdGlvbiBpcyBvdXQgb2YgbWFwIG1heEJvdW5kcy5cbiAqXG4gKiBAZXZlbnQgb3V0b2ZtYXhib3VuZHNcbiAqIEBtZW1iZXJvZiBHZW9sb2NhdGVDb250cm9sXG4gKiBAaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7UG9zaXRpb259IGRhdGEgVGhlIHJldHVybmVkIFtQb3NpdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uKSBvYmplY3QgZnJvbSB0aGUgY2FsbGJhY2sgaW4gW0dlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2VvbG9jYXRpb24vZ2V0Q3VycmVudFBvc2l0aW9uKSBvciBbR2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbigpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2VvbG9jYXRpb24vd2F0Y2hQb3NpdGlvbikuXG4gKiBAZXhhbXBsZVxuICogLy8gSW5pdGlhbGl6ZSB0aGUgZ2VvbG9jYXRlIGNvbnRyb2wuXG4gKiB2YXIgZ2VvbG9jYXRlID0gbmV3IG1hcGJveGdsLkdlb2xvY2F0ZUNvbnRyb2woe1xuICogICBwb3NpdGlvbk9wdGlvbnM6IHtcbiAqICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxuICogICB9LFxuICogICB0cmFja1VzZXJMb2NhdGlvbjogdHJ1ZVxuICogfSk7XG4gKiAvLyBBZGQgdGhlIGNvbnRyb2wgdG8gdGhlIG1hcC5cbiAqIG1hcC5hZGRDb250cm9sKGdlb2xvY2F0ZSk7XG4gKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICogLy8gd2hlbiBhbiBvdXRvZm1heGJvdW5kcyBldmVudCBvY2N1cnMuXG4gKiBnZW9sb2NhdGUub24oJ291dG9mbWF4Ym91bmRzJywgZnVuY3Rpb24oKSB7XG4gKiAgIGNvbnNvbGUubG9nKCdBbiBvdXRvZm1heGJvdW5kcyBldmVudCBoYXMgb2NjdXJyZWQuJylcbiAqIH0pO1xuICpcbiAqL1xuXG4vKipcbiAqIEZpcmVkIHdoZW4gdGhlIEdlb2xvY2F0ZSBDb250cm9sIGNoYW5nZXMgdG8gdGhlIGFjdGl2ZSBsb2NrIHN0YXRlLCB3aGljaCBoYXBwZW5zIGVpdGhlciB1cG9uIGZpcnN0IG9idGFpbmluZyBhIHN1Y2Nlc3NmdWwgR2VvbG9jYXRpb24gQVBJIHBvc2l0aW9uIGZvciB0aGUgdXNlciAoYSBnZW9sb2NhdGUgZXZlbnQgd2lsbCBmb2xsb3cpLCBvciB0aGUgdXNlciBjbGlja3MgdGhlIGdlb2xvY2F0ZSBidXR0b24gd2hlbiBpbiB0aGUgYmFja2dyb3VuZCBzdGF0ZSB3aGljaCB1c2VzIHRoZSBsYXN0IGtub3duIHBvc2l0aW9uIHRvIHJlY2VudGVyIHRoZSBtYXAgYW5kIGVudGVyIGFjdGl2ZSBsb2NrIHN0YXRlIChubyBnZW9sb2NhdGUgZXZlbnQgd2lsbCBmb2xsb3cgdW5sZXNzIHRoZSB1c2VycydzIGxvY2F0aW9uIGNoYW5nZXMpLlxuICpcbiAqIEBldmVudCB0cmFja3VzZXJsb2NhdGlvbnN0YXJ0XG4gKiBAbWVtYmVyb2YgR2VvbG9jYXRlQ29udHJvbFxuICogQGluc3RhbmNlXG4gKiBAZXhhbXBsZVxuICogLy8gSW5pdGlhbGl6ZSB0aGUgZ2VvbG9jYXRlIGNvbnRyb2wuXG4gKiB2YXIgZ2VvbG9jYXRlID0gbmV3IG1hcGJveGdsLkdlb2xvY2F0ZUNvbnRyb2woe1xuICogICBwb3NpdGlvbk9wdGlvbnM6IHtcbiAqICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxuICogICB9LFxuICogICB0cmFja1VzZXJMb2NhdGlvbjogdHJ1ZVxuICogfSk7XG4gKiAvLyBBZGQgdGhlIGNvbnRyb2wgdG8gdGhlIG1hcC5cbiAqIG1hcC5hZGRDb250cm9sKGdlb2xvY2F0ZSk7XG4gKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICogLy8gd2hlbiBhIHRyYWNrdXNlcmxvY2F0aW9uc3RhcnQgZXZlbnQgb2NjdXJzLlxuICogZ2VvbG9jYXRlLm9uKCd0cmFja3VzZXJsb2NhdGlvbnN0YXJ0JywgZnVuY3Rpb24oKSB7XG4gKiAgIGNvbnNvbGUubG9nKCdBIHRyYWNrdXNlcmxvY2F0aW9uc3RhcnQgZXZlbnQgaGFzIG9jY3VycmVkLicpXG4gKiB9KTtcbiAqXG4gKi9cblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSBHZW9sb2NhdGUgQ29udHJvbCBjaGFuZ2VzIHRvIHRoZSBiYWNrZ3JvdW5kIHN0YXRlLCB3aGljaCBoYXBwZW5zIHdoZW4gYSB1c2VyIGNoYW5nZXMgdGhlIGNhbWVyYSBkdXJpbmcgYW4gYWN0aXZlIHBvc2l0aW9uIGxvY2suIFRoaXMgb25seSBhcHBsaWVzIHdoZW4gdHJhY2tVc2VyTG9jYXRpb24gaXMgdHJ1ZS4gSW4gdGhlIGJhY2tncm91bmQgc3RhdGUsIHRoZSBkb3Qgb24gdGhlIG1hcCB3aWxsIHVwZGF0ZSB3aXRoIGxvY2F0aW9uIHVwZGF0ZXMgYnV0IHRoZSBjYW1lcmEgd2lsbCBub3QuXG4gKlxuICogQGV2ZW50IHRyYWNrdXNlcmxvY2F0aW9uZW5kXG4gKiBAbWVtYmVyb2YgR2VvbG9jYXRlQ29udHJvbFxuICogQGluc3RhbmNlXG4gKiBAZXhhbXBsZVxuICogLy8gSW5pdGlhbGl6ZSB0aGUgZ2VvbG9jYXRlIGNvbnRyb2wuXG4gKiB2YXIgZ2VvbG9jYXRlID0gbmV3IG1hcGJveGdsLkdlb2xvY2F0ZUNvbnRyb2woe1xuICogICBwb3NpdGlvbk9wdGlvbnM6IHtcbiAqICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxuICogICB9LFxuICogICB0cmFja1VzZXJMb2NhdGlvbjogdHJ1ZVxuICogfSk7XG4gKiAvLyBBZGQgdGhlIGNvbnRyb2wgdG8gdGhlIG1hcC5cbiAqIG1hcC5hZGRDb250cm9sKGdlb2xvY2F0ZSk7XG4gKiAvLyBTZXQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBmaXJlc1xuICogLy8gd2hlbiBhIHRyYWNrdXNlcmxvY2F0aW9uZW5kIGV2ZW50IG9jY3Vycy5cbiAqIGdlb2xvY2F0ZS5vbigndHJhY2t1c2VybG9jYXRpb25lbmQnLCBmdW5jdGlvbigpIHtcbiAqICAgY29uc29sZS5sb2coJ0EgdHJhY2t1c2VybG9jYXRpb25lbmQgZXZlbnQgaGFzIG9jY3VycmVkLicpXG4gKiB9KTtcbiAqXG4gKi9cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBET00gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuaW1wb3J0IHtleHRlbmQsIGJpbmRBbGx9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi9tYXAnO1xuXG50eXBlIFVuaXQgPSAnaW1wZXJpYWwnIHwgJ21ldHJpYycgfCAnbmF1dGljYWwnO1xuXG50eXBlIE9wdGlvbnMgPSB7XG4gICAgbWF4V2lkdGg/OiBudW1iZXIsXG4gICAgdW5pdD86IFVuaXQ7XG59O1xuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogT3B0aW9ucyA9IHtcbiAgICBtYXhXaWR0aDogMTAwLFxuICAgIHVuaXQ6ICdtZXRyaWMnXG59O1xuXG4vKipcbiAqIEEgYFNjYWxlQ29udHJvbGAgY29udHJvbCBkaXNwbGF5cyB0aGUgcmF0aW8gb2YgYSBkaXN0YW5jZSBvbiB0aGUgbWFwIHRvIHRoZSBjb3JyZXNwb25kaW5nIGRpc3RhbmNlIG9uIHRoZSBncm91bmQuXG4gKlxuICogQGltcGxlbWVudHMge0lDb250cm9sfVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdpZHRoPScxMDAnXSBUaGUgbWF4aW11bSBsZW5ndGggb2YgdGhlIHNjYWxlIGNvbnRyb2wgaW4gcGl4ZWxzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnVuaXQ9J21ldHJpYyddIFVuaXQgb2YgdGhlIGRpc3RhbmNlIChgJ2ltcGVyaWFsJ2AsIGAnbWV0cmljJ2Agb3IgYCduYXV0aWNhbCdgKS5cbiAqIEBleGFtcGxlXG4gKiB2YXIgc2NhbGUgPSBuZXcgbWFwYm94Z2wuU2NhbGVDb250cm9sKHtcbiAqICAgICBtYXhXaWR0aDogODAsXG4gKiAgICAgdW5pdDogJ2ltcGVyaWFsJ1xuICogfSk7XG4gKiBtYXAuYWRkQ29udHJvbChzY2FsZSk7XG4gKlxuICogc2NhbGUuc2V0VW5pdCgnbWV0cmljJyk7XG4gKi9cbmNsYXNzIFNjYWxlQ29udHJvbCB7XG4gICAgX21hcDogTWFwO1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIG9wdGlvbnM6IE9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBPcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ19vbk1vdmUnLFxuICAgICAgICAgICAgJ3NldFVuaXQnXG4gICAgICAgIF0sIHRoaXMpO1xuICAgIH1cblxuICAgIGdldERlZmF1bHRQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICdib3R0b20tbGVmdCc7XG4gICAgfVxuXG4gICAgX29uTW92ZSgpIHtcbiAgICAgICAgdXBkYXRlU2NhbGUodGhpcy5fbWFwLCB0aGlzLl9jb250YWluZXIsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuXG4gICAgb25BZGQobWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBET00uY3JlYXRlKCdkaXYnLCAnbWFwYm94Z2wtY3RybCBtYXBib3hnbC1jdHJsLXNjYWxlJywgbWFwLmdldENvbnRhaW5lcigpKTtcblxuICAgICAgICB0aGlzLl9tYXAub24oJ21vdmUnLCB0aGlzLl9vbk1vdmUpO1xuICAgICAgICB0aGlzLl9vbk1vdmUoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICAgIH1cblxuICAgIG9uUmVtb3ZlKCkge1xuICAgICAgICBET00ucmVtb3ZlKHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdmUnLCB0aGlzLl9vbk1vdmUpO1xuICAgICAgICB0aGlzLl9tYXAgPSAodW5kZWZpbmVkOiBhbnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgc2NhbGUncyB1bml0IG9mIHRoZSBkaXN0YW5jZVxuICAgICAqXG4gICAgICogQHBhcmFtIHVuaXQgVW5pdCBvZiB0aGUgZGlzdGFuY2UgKGAnaW1wZXJpYWwnYCwgYCdtZXRyaWMnYCBvciBgJ25hdXRpY2FsJ2ApLlxuICAgICAqL1xuICAgIHNldFVuaXQodW5pdDogVW5pdCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudW5pdCA9IHVuaXQ7XG4gICAgICAgIHVwZGF0ZVNjYWxlKHRoaXMuX21hcCwgdGhpcy5fY29udGFpbmVyLCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NhbGVDb250cm9sO1xuXG5mdW5jdGlvbiB1cGRhdGVTY2FsZShtYXAsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIC8vIEEgaG9yaXpvbnRhbCBzY2FsZSBpcyBpbWFnaW5lZCB0byBiZSBwcmVzZW50IGF0IGNlbnRlciBvZiB0aGUgbWFwXG4gICAgLy8gY29udGFpbmVyIHdpdGggbWF4aW11bSBsZW5ndGggKERlZmF1bHQpIGFzIDEwMHB4LlxuICAgIC8vIFVzaW5nIHNwaGVyaWNhbCBsYXcgb2YgY29zaW5lcyBhcHByb3hpbWF0aW9uLCB0aGUgcmVhbCBkaXN0YW5jZSBpc1xuICAgIC8vIGZvdW5kIGJldHdlZW4gdGhlIHR3byBjb29yZGluYXRlcy5cbiAgICBjb25zdCBtYXhXaWR0aCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5tYXhXaWR0aCB8fCAxMDA7XG5cbiAgICBjb25zdCB5ID0gbWFwLl9jb250YWluZXIuY2xpZW50SGVpZ2h0IC8gMjtcbiAgICBjb25zdCBsZWZ0ID0gbWFwLnVucHJvamVjdChbMCwgeV0pO1xuICAgIGNvbnN0IHJpZ2h0ID0gbWFwLnVucHJvamVjdChbbWF4V2lkdGgsIHldKTtcbiAgICBjb25zdCBtYXhNZXRlcnMgPSBsZWZ0LmRpc3RhbmNlVG8ocmlnaHQpO1xuICAgIC8vIFRoZSByZWFsIGRpc3RhbmNlIGNvcnJlc3BvbmRpbmcgdG8gMTAwcHggc2NhbGUgbGVuZ3RoIGlzIHJvdW5kZWQgb2ZmIHRvXG4gICAgLy8gbmVhciBwcmV0dHkgbnVtYmVyIGFuZCB0aGUgc2NhbGUgbGVuZ3RoIGZvciB0aGUgc2FtZSBpcyBmb3VuZCBvdXQuXG4gICAgLy8gRGVmYXVsdCB1bml0IG9mIHRoZSBzY2FsZSBpcyBiYXNlZCBvbiBVc2VyJ3MgbG9jYWxlLlxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudW5pdCA9PT0gJ2ltcGVyaWFsJykge1xuICAgICAgICBjb25zdCBtYXhGZWV0ID0gMy4yODA4ICogbWF4TWV0ZXJzO1xuICAgICAgICBpZiAobWF4RmVldCA+IDUyODApIHtcbiAgICAgICAgICAgIGNvbnN0IG1heE1pbGVzID0gbWF4RmVldCAvIDUyODA7XG4gICAgICAgICAgICBzZXRTY2FsZShjb250YWluZXIsIG1heFdpZHRoLCBtYXhNaWxlcywgbWFwLl9nZXRVSVN0cmluZygnU2NhbGVDb250cm9sLk1pbGVzJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0U2NhbGUoY29udGFpbmVyLCBtYXhXaWR0aCwgbWF4RmVldCwgbWFwLl9nZXRVSVN0cmluZygnU2NhbGVDb250cm9sLkZlZXQnKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy51bml0ID09PSAnbmF1dGljYWwnKSB7XG4gICAgICAgIGNvbnN0IG1heE5hdXRpY2FscyA9IG1heE1ldGVycyAvIDE4NTI7XG4gICAgICAgIHNldFNjYWxlKGNvbnRhaW5lciwgbWF4V2lkdGgsIG1heE5hdXRpY2FscywgbWFwLl9nZXRVSVN0cmluZygnU2NhbGVDb250cm9sLk5hdXRpY2FsTWlsZXMnKSk7XG4gICAgfSBlbHNlIGlmIChtYXhNZXRlcnMgPj0gMTAwMCkge1xuICAgICAgICBzZXRTY2FsZShjb250YWluZXIsIG1heFdpZHRoLCBtYXhNZXRlcnMgLyAxMDAwLCBtYXAuX2dldFVJU3RyaW5nKCdTY2FsZUNvbnRyb2wuS2lsb21ldGVycycpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTY2FsZShjb250YWluZXIsIG1heFdpZHRoLCBtYXhNZXRlcnMsIG1hcC5fZ2V0VUlTdHJpbmcoJ1NjYWxlQ29udHJvbC5NZXRlcnMnKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRTY2FsZShjb250YWluZXIsIG1heFdpZHRoLCBtYXhEaXN0YW5jZSwgdW5pdCkge1xuICAgIGNvbnN0IGRpc3RhbmNlID0gZ2V0Um91bmROdW0obWF4RGlzdGFuY2UpO1xuICAgIGNvbnN0IHJhdGlvID0gZGlzdGFuY2UgLyBtYXhEaXN0YW5jZTtcbiAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSBgJHttYXhXaWR0aCAqIHJhdGlvfXB4YDtcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gYCR7ZGlzdGFuY2V9Jm5ic3A7JHt1bml0fWA7XG59XG5cbmZ1bmN0aW9uIGdldERlY2ltYWxSb3VuZE51bShkKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IE1hdGgucG93KDEwLCBNYXRoLmNlaWwoLU1hdGgubG9nKGQpIC8gTWF0aC5MTjEwKSk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoZCAqIG11bHRpcGxpZXIpIC8gbXVsdGlwbGllcjtcbn1cblxuZnVuY3Rpb24gZ2V0Um91bmROdW0obnVtKSB7XG4gICAgY29uc3QgcG93MTAgPSBNYXRoLnBvdygxMCwgKGAke01hdGguZmxvb3IobnVtKX1gKS5sZW5ndGggLSAxKTtcbiAgICBsZXQgZCA9IG51bSAvIHBvdzEwO1xuXG4gICAgZCA9IGQgPj0gMTAgPyAxMCA6XG4gICAgICAgIGQgPj0gNSA/IDUgOlxuICAgICAgICBkID49IDMgPyAzIDpcbiAgICAgICAgZCA+PSAyID8gMiA6XG4gICAgICAgIGQgPj0gMSA/IDEgOiBnZXREZWNpbWFsUm91bmROdW0oZCk7XG5cbiAgICByZXR1cm4gcG93MTAgKiBkO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERPTSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5cbmltcG9ydCB7YmluZEFsbCwgd2Fybk9uY2V9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uLy4uL3V0aWwvd2luZG93JztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL21hcCc7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgICBjb250YWluZXI/OiBIVE1MRWxlbWVudFxufTtcblxuLyoqXG4gKiBBIGBGdWxsc2NyZWVuQ29udHJvbGAgY29udHJvbCBjb250YWlucyBhIGJ1dHRvbiBmb3IgdG9nZ2xpbmcgdGhlIG1hcCBpbiBhbmQgb3V0IG9mIGZ1bGxzY3JlZW4gbW9kZS5cbiAqXG4gKiBAaW1wbGVtZW50cyB7SUNvbnRyb2x9XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbb3B0aW9ucy5jb250YWluZXJdIGBjb250YWluZXJgIGlzIHRoZSBbY29tcGF0aWJsZSBET00gZWxlbWVudF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvcmVxdWVzdEZ1bGxTY3JlZW4jQ29tcGF0aWJsZV9lbGVtZW50cykgd2hpY2ggc2hvdWxkIGJlIG1hZGUgZnVsbCBzY3JlZW4uIEJ5IGRlZmF1bHQsIHRoZSBtYXAgY29udGFpbmVyIGVsZW1lbnQgd2lsbCBiZSBtYWRlIGZ1bGwgc2NyZWVuLlxuICpcbiAqIEBleGFtcGxlXG4gKiBtYXAuYWRkQ29udHJvbChuZXcgbWFwYm94Z2wuRnVsbHNjcmVlbkNvbnRyb2woe2NvbnRhaW5lcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpfSkpO1xuICogQHNlZSBbVmlldyBhIGZ1bGxzY3JlZW4gbWFwXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2Z1bGxzY3JlZW4vKVxuICovXG5cbmNsYXNzIEZ1bGxzY3JlZW5Db250cm9sIHtcbiAgICBfbWFwOiBNYXA7XG4gICAgX2NvbnRyb2xDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIF9mdWxsc2NyZWVuOiBib29sZWFuO1xuICAgIF9mdWxsc2NyZWVuY2hhbmdlOiBzdHJpbmc7XG4gICAgX2Z1bGxzY3JlZW5CdXR0b246IEhUTUxFbGVtZW50O1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogT3B0aW9ucykge1xuICAgICAgICB0aGlzLl9mdWxsc2NyZWVuID0gZmFsc2U7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29udGFpbmVyKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb250YWluZXIgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2Fybk9uY2UoJ0Z1bGwgc2NyZWVuIGNvbnRyb2wgXFwnY29udGFpbmVyXFwnIG11c3QgYmUgYSBET00gZWxlbWVudC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfb25DbGlja0Z1bGxzY3JlZW4nLFxuICAgICAgICAgICAgJ19jaGFuZ2VJY29uJ1xuICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgaWYgKCdvbmZ1bGxzY3JlZW5jaGFuZ2UnIGluIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZnVsbHNjcmVlbmNoYW5nZSA9ICdmdWxsc2NyZWVuY2hhbmdlJztcbiAgICAgICAgfSBlbHNlIGlmICgnb25tb3pmdWxsc2NyZWVuY2hhbmdlJyBpbiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxzY3JlZW5jaGFuZ2UgPSAnbW96ZnVsbHNjcmVlbmNoYW5nZSc7XG4gICAgICAgIH0gZWxzZSBpZiAoJ29ud2Via2l0ZnVsbHNjcmVlbmNoYW5nZScgaW4gd2luZG93LmRvY3VtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuY2hhbmdlID0gJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnO1xuICAgICAgICB9IGVsc2UgaWYgKCdvbm1zZnVsbHNjcmVlbmNoYW5nZScgaW4gd2luZG93LmRvY3VtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuY2hhbmdlID0gJ01TRnVsbHNjcmVlbkNoYW5nZSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIGlmICghdGhpcy5fY29udGFpbmVyKSB0aGlzLl9jb250YWluZXIgPSB0aGlzLl9tYXAuZ2V0Q29udGFpbmVyKCk7XG4gICAgICAgIHRoaXMuX2NvbnRyb2xDb250YWluZXIgPSBET00uY3JlYXRlKCdkaXYnLCBgbWFwYm94Z2wtY3RybCBtYXBib3hnbC1jdHJsLWdyb3VwYCk7XG4gICAgICAgIGlmICh0aGlzLl9jaGVja0Z1bGxzY3JlZW5TdXBwb3J0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHVwVUkoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHdhcm5PbmNlKCdUaGlzIGRldmljZSBkb2VzIG5vdCBzdXBwb3J0IGZ1bGxzY3JlZW4gbW9kZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29udHJvbENvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgRE9NLnJlbW92ZSh0aGlzLl9jb250cm9sQ29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fbWFwID0gKG51bGw6IGFueSk7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuX2Z1bGxzY3JlZW5jaGFuZ2UsIHRoaXMuX2NoYW5nZUljb24pO1xuICAgIH1cblxuICAgIF9jaGVja0Z1bGxzY3JlZW5TdXBwb3J0KCkge1xuICAgICAgICByZXR1cm4gISEoXG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuZnVsbHNjcmVlbkVuYWJsZWQgfHxcbiAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubW96RnVsbFNjcmVlbkVuYWJsZWQgfHxcbiAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubXNGdWxsc2NyZWVuRW5hYmxlZCB8fFxuICAgICAgICAgICAgKHdpbmRvdy5kb2N1bWVudDogYW55KS53ZWJraXRGdWxsc2NyZWVuRW5hYmxlZFxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9zZXR1cFVJKCkge1xuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLl9mdWxsc2NyZWVuQnV0dG9uID0gRE9NLmNyZWF0ZSgnYnV0dG9uJywgKGBtYXBib3hnbC1jdHJsLWZ1bGxzY3JlZW5gKSwgdGhpcy5fY29udHJvbENvbnRhaW5lcik7XG4gICAgICAgIERPTS5jcmVhdGUoJ3NwYW4nLCBgbWFwYm94Z2wtY3RybC1pY29uYCwgYnV0dG9uKS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICAgIGJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRpdGxlKCk7XG4gICAgICAgIHRoaXMuX2Z1bGxzY3JlZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkNsaWNrRnVsbHNjcmVlbik7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuX2Z1bGxzY3JlZW5jaGFuZ2UsIHRoaXMuX2NoYW5nZUljb24pO1xuICAgIH1cblxuICAgIF91cGRhdGVUaXRsZSgpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLl9nZXRUaXRsZSgpO1xuICAgICAgICB0aGlzLl9mdWxsc2NyZWVuQnV0dG9uLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGl0bGUpO1xuICAgICAgICB0aGlzLl9mdWxsc2NyZWVuQnV0dG9uLnRpdGxlID0gdGl0bGU7XG4gICAgfVxuXG4gICAgX2dldFRpdGxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwLl9nZXRVSVN0cmluZyh0aGlzLl9pc0Z1bGxzY3JlZW4oKSA/ICdGdWxsc2NyZWVuQ29udHJvbC5FeGl0JyA6ICdGdWxsc2NyZWVuQ29udHJvbC5FbnRlcicpO1xuICAgIH1cblxuICAgIF9pc0Z1bGxzY3JlZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mdWxsc2NyZWVuO1xuICAgIH1cblxuICAgIF9jaGFuZ2VJY29uKCkge1xuICAgICAgICBjb25zdCBmdWxsc2NyZWVuRWxlbWVudCA9XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHxcbiAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubW96RnVsbFNjcmVlbkVsZW1lbnQgfHxcbiAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgfHxcbiAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubXNGdWxsc2NyZWVuRWxlbWVudDtcblxuICAgICAgICBpZiAoKGZ1bGxzY3JlZW5FbGVtZW50ID09PSB0aGlzLl9jb250YWluZXIpICE9PSB0aGlzLl9mdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuID0gIXRoaXMuX2Z1bGxzY3JlZW47XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoYG1hcGJveGdsLWN0cmwtc2hyaW5rYCk7XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoYG1hcGJveGdsLWN0cmwtZnVsbHNjcmVlbmApO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGl0bGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkNsaWNrRnVsbHNjcmVlbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRnVsbHNjcmVlbigpKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgKHdpbmRvdy5kb2N1bWVudDogYW55KS5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubW96Q2FuY2VsRnVsbFNjcmVlbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubXNFeGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkud2Via2l0Q2FuY2VsRnVsbFNjcmVlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NvbnRhaW5lci5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyLnJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoKHRoaXMuX2NvbnRhaW5lcjogYW55KS5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgICAgICAgKHRoaXMuX2NvbnRhaW5lcjogYW55KS5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKCh0aGlzLl9jb250YWluZXI6IGFueSkubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgKHRoaXMuX2NvbnRhaW5lcjogYW55KS5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoKHRoaXMuX2NvbnRhaW5lcjogYW55KS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgKHRoaXMuX2NvbnRhaW5lcjogYW55KS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGdWxsc2NyZWVuQ29udHJvbDtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7ZXh0ZW5kLCBiaW5kQWxsfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHtFdmVudCwgRXZlbnRlZH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcbmltcG9ydCB7TWFwTW91c2VFdmVudH0gZnJvbSAnLi4vdWkvZXZlbnRzJztcbmltcG9ydCBET00gZnJvbSAnLi4vdXRpbC9kb20nO1xuaW1wb3J0IExuZ0xhdCBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uL3V0aWwvd2luZG93JztcbmltcG9ydCBzbWFydFdyYXAgZnJvbSAnLi4vdXRpbC9zbWFydF93cmFwJztcbmltcG9ydCB7dHlwZSBBbmNob3IsIGFuY2hvclRyYW5zbGF0ZSwgYXBwbHlBbmNob3JDbGFzc30gZnJvbSAnLi9hbmNob3InO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHR5cGUge0xuZ0xhdExpa2V9IGZyb20gJy4uL2dlby9sbmdfbGF0JztcbmltcG9ydCB0eXBlIHtQb2ludExpa2V9IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBjbG9zZUJ1dHRvbjogdHJ1ZSxcbiAgICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gICAgZm9jdXNBZnRlck9wZW46IHRydWUsXG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICBtYXhXaWR0aDogXCIyNDBweFwiXG59O1xuXG5leHBvcnQgdHlwZSBPZmZzZXQgPSBudW1iZXIgfCBQb2ludExpa2UgfCB7W186IEFuY2hvcl06IFBvaW50TGlrZX07XG5cbmV4cG9ydCB0eXBlIFBvcHVwT3B0aW9ucyA9IHtcbiAgICBjbG9zZUJ1dHRvbj86IGJvb2xlYW4sXG4gICAgY2xvc2VPbkNsaWNrPzogYm9vbGVhbixcbiAgICBjbG9zZU9uTW92ZT86IGJvb2xlYW4sXG4gICAgZm9jdXNBZnRlck9wZW4/OiBib29sZWFuLFxuICAgIGFuY2hvcj86IEFuY2hvcixcbiAgICBvZmZzZXQ/OiBPZmZzZXQsXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nLFxuICAgIG1heFdpZHRoPzogc3RyaW5nXG59O1xuXG5jb25zdCBmb2N1c1F1ZXJ5U2VsZWN0b3IgPSBbXG4gICAgXCJhW2hyZWZdXCIsXG4gICAgXCJbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXg9Jy0xJ10pXCIsXG4gICAgXCJbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT0nZmFsc2UnXSlcIixcbiAgICBcImJ1dHRvbjpub3QoW2Rpc2FibGVkXSlcIixcbiAgICBcImlucHV0Om5vdChbZGlzYWJsZWRdKVwiLFxuICAgIFwic2VsZWN0Om5vdChbZGlzYWJsZWRdKVwiLFxuICAgIFwidGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pXCIsXG5dLmpvaW4oXCIsIFwiKTtcblxuLyoqXG4gKiBBIHBvcHVwIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNsb3NlQnV0dG9uPXRydWVdIElmIGB0cnVlYCwgYSBjbG9zZSBidXR0b24gd2lsbCBhcHBlYXIgaW4gdGhlXG4gKiAgIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIHBvcHVwLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jbG9zZU9uQ2xpY2s9dHJ1ZV0gSWYgYHRydWVgLCB0aGUgcG9wdXAgd2lsbCBjbG9zZWQgd2hlbiB0aGVcbiAqICAgbWFwIGlzIGNsaWNrZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNsb3NlT25Nb3ZlPWZhbHNlXSBJZiBgdHJ1ZWAsIHRoZSBwb3B1cCB3aWxsIGNsb3NlZCB3aGVuIHRoZVxuICogICBtYXAgbW92ZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZvY3VzQWZ0ZXJPcGVuPXRydWVdIElmIGB0cnVlYCwgdGhlIHBvcHVwIHdpbGwgdHJ5IHRvIGZvY3VzIHRoZVxuICogICBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCBpbnNpZGUgdGhlIHBvcHVwLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFuY2hvcl0gLSBBIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBwYXJ0IG9mIHRoZSBQb3B1cCB0aGF0IHNob3VsZFxuICogICBiZSBwb3NpdGlvbmVkIGNsb3Nlc3QgdG8gdGhlIGNvb3JkaW5hdGUgc2V0IHZpYSB7QGxpbmsgUG9wdXAjc2V0TG5nTGF0fS5cbiAqICAgT3B0aW9ucyBhcmUgYCdjZW50ZXInYCwgYCd0b3AnYCwgYCdib3R0b20nYCwgYCdsZWZ0J2AsIGAncmlnaHQnYCwgYCd0b3AtbGVmdCdgLFxuICogICBgJ3RvcC1yaWdodCdgLCBgJ2JvdHRvbS1sZWZ0J2AsIGFuZCBgJ2JvdHRvbS1yaWdodCdgLiBJZiB1bnNldCB0aGUgYW5jaG9yIHdpbGwgYmVcbiAqICAgZHluYW1pY2FsbHkgc2V0IHRvIGVuc3VyZSB0aGUgcG9wdXAgZmFsbHMgd2l0aGluIHRoZSBtYXAgY29udGFpbmVyIHdpdGggYSBwcmVmZXJlbmNlXG4gKiAgIGZvciBgJ2JvdHRvbSdgLlxuICogQHBhcmFtIHtudW1iZXJ8UG9pbnRMaWtlfE9iamVjdH0gW29wdGlvbnMub2Zmc2V0XSAtXG4gKiAgQSBwaXhlbCBvZmZzZXQgYXBwbGllZCB0byB0aGUgcG9wdXAncyBsb2NhdGlvbiBzcGVjaWZpZWQgYXM6XG4gKiAgIC0gYSBzaW5nbGUgbnVtYmVyIHNwZWNpZnlpbmcgYSBkaXN0YW5jZSBmcm9tIHRoZSBwb3B1cCdzIGxvY2F0aW9uXG4gKiAgIC0gYSB7QGxpbmsgUG9pbnRMaWtlfSBzcGVjaWZ5aW5nIGEgY29uc3RhbnQgb2Zmc2V0XG4gKiAgIC0gYW4gb2JqZWN0IG9mIHtAbGluayBQb2ludH1zIHNwZWNpZmluZyBhbiBvZmZzZXQgZm9yIGVhY2ggYW5jaG9yIHBvc2l0aW9uXG4gKiAgTmVnYXRpdmUgb2Zmc2V0cyBpbmRpY2F0ZSBsZWZ0IGFuZCB1cC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jbGFzc05hbWVdIFNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3MgbmFtZXMgdG8gYWRkIHRvIHBvcHVwIGNvbnRhaW5lclxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm1heFdpZHRoPScyNDBweCddIC1cbiAqICBBIHN0cmluZyB0aGF0IHNldHMgdGhlIENTUyBwcm9wZXJ0eSBvZiB0aGUgcG9wdXAncyBtYXhpbXVtIHdpZHRoLCBlZyBgJzMwMHB4J2AuXG4gKiAgVG8gZW5zdXJlIHRoZSBwb3B1cCByZXNpemVzIHRvIGZpdCBpdHMgY29udGVudCwgc2V0IHRoaXMgcHJvcGVydHkgdG8gYCdub25lJ2AuXG4gKiAgQXZhaWxhYmxlIHZhbHVlcyBjYW4gYmUgZm91bmQgaGVyZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21heC13aWR0aFxuICogQGV4YW1wbGVcbiAqIHZhciBtYXJrZXJIZWlnaHQgPSA1MCwgbWFya2VyUmFkaXVzID0gMTAsIGxpbmVhck9mZnNldCA9IDI1O1xuICogdmFyIHBvcHVwT2Zmc2V0cyA9IHtcbiAqICAndG9wJzogWzAsIDBdLFxuICogICd0b3AtbGVmdCc6IFswLDBdLFxuICogICd0b3AtcmlnaHQnOiBbMCwwXSxcbiAqICAnYm90dG9tJzogWzAsIC1tYXJrZXJIZWlnaHRdLFxuICogICdib3R0b20tbGVmdCc6IFtsaW5lYXJPZmZzZXQsIChtYXJrZXJIZWlnaHQgLSBtYXJrZXJSYWRpdXMgKyBsaW5lYXJPZmZzZXQpICogLTFdLFxuICogICdib3R0b20tcmlnaHQnOiBbLWxpbmVhck9mZnNldCwgKG1hcmtlckhlaWdodCAtIG1hcmtlclJhZGl1cyArIGxpbmVhck9mZnNldCkgKiAtMV0sXG4gKiAgJ2xlZnQnOiBbbWFya2VyUmFkaXVzLCAobWFya2VySGVpZ2h0IC0gbWFya2VyUmFkaXVzKSAqIC0xXSxcbiAqICAncmlnaHQnOiBbLW1hcmtlclJhZGl1cywgKG1hcmtlckhlaWdodCAtIG1hcmtlclJhZGl1cykgKiAtMV1cbiAqICB9O1xuICogdmFyIHBvcHVwID0gbmV3IG1hcGJveGdsLlBvcHVwKHtvZmZzZXQ6IHBvcHVwT2Zmc2V0cywgY2xhc3NOYW1lOiAnbXktY2xhc3MnfSlcbiAqICAgLnNldExuZ0xhdChlLmxuZ0xhdClcbiAqICAgLnNldEhUTUwoXCI8aDE+SGVsbG8gV29ybGQhPC9oMT5cIilcbiAqICAgLnNldE1heFdpZHRoKFwiMzAwcHhcIilcbiAqICAgLmFkZFRvKG1hcCk7XG4gKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXBdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAvKVxuICogQHNlZSBbRGlzcGxheSBhIHBvcHVwIG9uIGhvdmVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvcHVwLW9uLWhvdmVyLylcbiAqIEBzZWUgW0Rpc3BsYXkgYSBwb3B1cCBvbiBjbGlja10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9wb3B1cC1vbi1jbGljay8pXG4gKiBAc2VlIFtBdHRhY2ggYSBwb3B1cCB0byBhIG1hcmtlciBpbnN0YW5jZV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9zZXQtcG9wdXAvKVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCBleHRlbmRzIEV2ZW50ZWQge1xuICAgIF9tYXA6IE1hcDtcbiAgICBvcHRpb25zOiBQb3B1cE9wdGlvbnM7XG4gICAgX2NvbnRlbnQ6IEhUTUxFbGVtZW50O1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIF9jbG9zZUJ1dHRvbjogSFRNTEVsZW1lbnQ7XG4gICAgX3RpcDogSFRNTEVsZW1lbnQ7XG4gICAgX2xuZ0xhdDogTG5nTGF0O1xuICAgIF90cmFja1BvaW50ZXI6IGJvb2xlYW47XG4gICAgX3BvczogP1BvaW50O1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogUG9wdXBPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZChPYmplY3QuY3JlYXRlKGRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgIGJpbmRBbGwoWydfdXBkYXRlJywgJ19vbkNsb3NlJywgJ3JlbW92ZScsICdfb25Nb3VzZU1vdmUnLCAnX29uTW91c2VVcCcsICdfb25EcmFnJ10sIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHBvcHVwIHRvIGEgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtNYXB9IG1hcCBUaGUgTWFwYm94IEdMIEpTIG1hcCB0byBhZGQgdGhlIHBvcHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtQb3B1cH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBuZXcgbWFwYm94Z2wuUG9wdXAoKVxuICAgICAqICAgLnNldExuZ0xhdChbMCwgMF0pXG4gICAgICogICAuc2V0SFRNTChcIjxoMT5OdWxsIElzbGFuZDwvaDE+XCIpXG4gICAgICogICAuYWRkVG8obWFwKTtcbiAgICAgKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXBdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvcHVwLylcbiAgICAgKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXAgb24gaG92ZXJdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvcHVwLW9uLWhvdmVyLylcbiAgICAgKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXAgb24gY2xpY2tdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvcHVwLW9uLWNsaWNrLylcbiAgICAgKiBAc2VlIFtTaG93IHBvbHlnb24gaW5mb3JtYXRpb24gb24gY2xpY2tdKGh0dHBzOi8vZG9jcy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvbHlnb24tcG9wdXAtb24tY2xpY2svKVxuICAgICAqL1xuICAgIGFkZFRvKG1hcDogTWFwKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXApIHRoaXMucmVtb3ZlKCk7XG5cbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdjbGljaycsIHRoaXMuX29uQ2xvc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uTW92ZSkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdtb3ZlJywgdGhpcy5fb25DbG9zZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tYXAub24oJ3JlbW92ZScsIHRoaXMucmVtb3ZlKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgIHRoaXMuX2ZvY3VzRmlyc3RFbGVtZW50KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RyYWNrUG9pbnRlcikge1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdtb3VzZW1vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSk7XG4gICAgICAgICAgICB0aGlzLl9tYXAub24oJ21vdXNldXAnLCB0aGlzLl9vbk1vdXNlVXApO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1wb3B1cC10cmFjay1wb2ludGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tYXAuX2NhbnZhc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC10cmFjay1wb2ludGVyJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAub24oJ21vdmUnLCB0aGlzLl91cGRhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdGhlIHBvcHVwIGlzIG9wZW5lZCBtYW51YWxseSBvciBwcm9ncmFtYXRpY2FsbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBvcGVuXG4gICAgICAgICAqIEBtZW1iZXJvZiBQb3B1cFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICogQHByb3BlcnR5IHtQb3B1cH0gcG9wdXAgb2JqZWN0IHRoYXQgd2FzIG9wZW5lZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiAvLyBDcmVhdGUgYSBwb3B1cFxuICAgICAgICAgKiB2YXIgcG9wdXAgPSBuZXcgbWFwYm94Z2wuUG9wdXAoKTtcbiAgICAgICAgICogLy8gU2V0IGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgd2lsbCBmaXJlXG4gICAgICAgICAqIC8vIGFueSB0aW1lIHRoZSBwb3B1cCBpcyBvcGVuZWRcbiAgICAgICAgICogcG9wdXAub24oJ29wZW4nLCBmdW5jdGlvbigpe1xuICAgICAgICAgKiAgIGNvbnNvbGUubG9nKCdwb3B1cCB3YXMgb3BlbmVkJyk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnb3BlbicpKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBwb3B1cCBpcyBvcGVuLCBgZmFsc2VgIGlmIGl0IGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBpc09wZW4oKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX21hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwb3B1cCBmcm9tIHRoZSBtYXAgaXQgaGFzIGJlZW4gYWRkZWQgdG8uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBwb3B1cCA9IG5ldyBtYXBib3hnbC5Qb3B1cCgpLmFkZFRvKG1hcCk7XG4gICAgICogcG9wdXAucmVtb3ZlKCk7XG4gICAgICogQHJldHVybnMge1BvcHVwfSBgdGhpc2BcbiAgICAgKi9cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb250ZW50KSB7XG4gICAgICAgICAgICBET00ucmVtb3ZlKHRoaXMuX2NvbnRlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgRE9NLnJlbW92ZSh0aGlzLl9jb250YWluZXIpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NvbnRhaW5lcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdmUnLCB0aGlzLl91cGRhdGUpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignbW92ZScsIHRoaXMuX29uQ2xvc2UpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignY2xpY2snLCB0aGlzLl9vbkNsb3NlKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ3JlbW92ZScsIHRoaXMucmVtb3ZlKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdXNlbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdXNldXAnLCB0aGlzLl9vbk1vdXNlVXApO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignZHJhZycsIHRoaXMuX29uRHJhZyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fbWFwO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdGhlIHBvcHVwIGlzIGNsb3NlZCBtYW51YWxseSBvciBwcm9ncmFtYXRpY2FsbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBjbG9zZVxuICAgICAgICAgKiBAbWVtYmVyb2YgUG9wdXBcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7UG9wdXB9IHBvcHVwIG9iamVjdCB0aGF0IHdhcyBjbG9zZWRcbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogLy8gQ3JlYXRlIGEgcG9wdXBcbiAgICAgICAgICogdmFyIHBvcHVwID0gbmV3IG1hcGJveGdsLlBvcHVwKCk7XG4gICAgICAgICAqIC8vIFNldCBhbiBldmVudCBsaXN0ZW5lciB0aGF0IHdpbGwgZmlyZVxuICAgICAgICAgKiAvLyBhbnkgdGltZSB0aGUgcG9wdXAgaXMgY2xvc2VkXG4gICAgICAgICAqIHBvcHVwLm9uKCdjbG9zZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAqICAgY29uc29sZS5sb2coJ3BvcHVwIHdhcyBjbG9zZWQnKTtcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdjbG9zZScpKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBnZW9ncmFwaGljYWwgbG9jYXRpb24gb2YgdGhlIHBvcHVwJ3MgYW5jaG9yLlxuICAgICAqXG4gICAgICogVGhlIGxvbmdpdHVkZSBvZiB0aGUgcmVzdWx0IG1heSBkaWZmZXIgYnkgYSBtdWx0aXBsZSBvZiAzNjAgZGVncmVlcyBmcm9tIHRoZSBsb25naXR1ZGUgcHJldmlvdXNseVxuICAgICAqIHNldCBieSBgc2V0TG5nTGF0YCBiZWNhdXNlIGBQb3B1cGAgd3JhcHMgdGhlIGFuY2hvciBsb25naXR1ZGUgYWNyb3NzIGNvcGllcyBvZiB0aGUgd29ybGQgdG8ga2VlcFxuICAgICAqIHRoZSBwb3B1cCBvbiBzY3JlZW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0fSBUaGUgZ2VvZ3JhcGhpY2FsIGxvY2F0aW9uIG9mIHRoZSBwb3B1cCdzIGFuY2hvci5cbiAgICAgKi9cbiAgICBnZXRMbmdMYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sbmdMYXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2VvZ3JhcGhpY2FsIGxvY2F0aW9uIG9mIHRoZSBwb3B1cCdzIGFuY2hvciwgYW5kIG1vdmVzIHRoZSBwb3B1cCB0byBpdC4gUmVwbGFjZXMgdHJhY2tQb2ludGVyKCkgYmVoYXZpb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbG5nbGF0IFRoZSBnZW9ncmFwaGljYWwgbG9jYXRpb24gdG8gc2V0IGFzIHRoZSBwb3B1cCdzIGFuY2hvci5cbiAgICAgKiBAcmV0dXJucyB7UG9wdXB9IGB0aGlzYFxuICAgICAqL1xuICAgIHNldExuZ0xhdChsbmdsYXQ6IExuZ0xhdExpa2UpIHtcbiAgICAgICAgdGhpcy5fbG5nTGF0ID0gTG5nTGF0LmNvbnZlcnQobG5nbGF0KTtcbiAgICAgICAgdGhpcy5fcG9zID0gbnVsbDtcblxuICAgICAgICB0aGlzLl90cmFja1BvaW50ZXIgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl91cGRhdGUoKTtcblxuICAgICAgICBpZiAodGhpcy5fbWFwKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAub24oJ21vdmUnLCB0aGlzLl91cGRhdGUpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1wb3B1cC10cmFjay1wb2ludGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tYXAuX2NhbnZhc0NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC10cmFjay1wb2ludGVyJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFja3MgdGhlIHBvcHVwIGFuY2hvciB0byB0aGUgY3Vyc29yIHBvc2l0aW9uIG9uIHNjcmVlbnMgd2l0aCBhIHBvaW50ZXIgZGV2aWNlIChpdCB3aWxsIGJlIGhpZGRlbiBvbiB0b3VjaHNjcmVlbnMpLiBSZXBsYWNlcyB0aGUgYHNldExuZ0xhdGAgYmVoYXZpb3IuXG4gICAgICogRm9yIG1vc3QgdXNlIGNhc2VzLCBzZXQgYGNsb3NlT25DbGlja2AgYW5kIGBjbG9zZUJ1dHRvbmAgdG8gYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBwb3B1cCA9IG5ldyBtYXBib3hnbC5Qb3B1cCh7IGNsb3NlT25DbGljazogZmFsc2UsIGNsb3NlQnV0dG9uOiBmYWxzZSB9KVxuICAgICAqICAgLnNldEhUTUwoXCI8aDE+SGVsbG8gV29ybGQhPC9oMT5cIilcbiAgICAgKiAgIC50cmFja1BvaW50ZXIoKVxuICAgICAqICAgLmFkZFRvKG1hcCk7XG4gICAgICogQHJldHVybnMge1BvcHVwfSBgdGhpc2BcbiAgICAgKi9cbiAgICB0cmFja1BvaW50ZXIoKSB7XG4gICAgICAgIHRoaXMuX3RyYWNrUG9pbnRlciA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BvcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICBpZiAodGhpcy5fbWFwKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAub2ZmKCdtb3ZlJywgdGhpcy5fdXBkYXRlKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vbignbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdkcmFnJywgdGhpcy5fb25EcmFnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtcG9wdXAtdHJhY2stcG9pbnRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWFwLl9jYW52YXNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtdHJhY2stcG9pbnRlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgUG9wdXBgJ3MgSFRNTCBlbGVtZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gQ2hhbmdlIHRoZSBgUG9wdXBgIGVsZW1lbnQncyBmb250IHNpemVcbiAgICAgKiB2YXIgcG9wdXAgPSBuZXcgbWFwYm94Z2wuUG9wdXAoKVxuICAgICAqICAgLnNldExuZ0xhdChbLTk2LCAzNy44XSlcbiAgICAgKiAgIC5zZXRIVE1MKFwiPHA+SGVsbG8gV29ybGQhPC9wPlwiKVxuICAgICAqICAgLmFkZFRvKG1hcCk7XG4gICAgICogdmFyIHBvcHVwRWxlbSA9IHBvcHVwLmdldEVsZW1lbnQoKTtcbiAgICAgKiBwb3B1cEVsZW0uc3R5bGUuZm9udFNpemUgPSBcIjI1cHhcIjtcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKi9cbiAgICBnZXRFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBvcHVwJ3MgY29udGVudCB0byBhIHN0cmluZyBvZiB0ZXh0LlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgW1RleHRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UZXh0KSBub2RlIGluIHRoZSBET00sXG4gICAgICogc28gaXQgY2Fubm90IGluc2VydCByYXcgSFRNTC4gVXNlIHRoaXMgbWV0aG9kIGZvciBzZWN1cml0eSBhZ2FpbnN0IFhTU1xuICAgICAqIGlmIHRoZSBwb3B1cCBjb250ZW50IGlzIHVzZXItcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGV4dCBUZXh0dWFsIGNvbnRlbnQgZm9yIHRoZSBwb3B1cC5cbiAgICAgKiBAcmV0dXJucyB7UG9wdXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHBvcHVwID0gbmV3IG1hcGJveGdsLlBvcHVwKClcbiAgICAgKiAgIC5zZXRMbmdMYXQoZS5sbmdMYXQpXG4gICAgICogICAuc2V0VGV4dCgnSGVsbG8sIHdvcmxkIScpXG4gICAgICogICAuYWRkVG8obWFwKTtcbiAgICAgKi9cbiAgICBzZXRUZXh0KHRleHQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRET01Db250ZW50KHdpbmRvdy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9wdXAncyBjb250ZW50IHRvIHRoZSBIVE1MIHByb3ZpZGVkIGFzIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZG9lcyBub3QgcGVyZm9ybSBIVE1MIGZpbHRlcmluZyBvciBzYW5pdGl6YXRpb24sIGFuZCBtdXN0IGJlXG4gICAgICogdXNlZCBvbmx5IHdpdGggdHJ1c3RlZCBjb250ZW50LiBDb25zaWRlciB7QGxpbmsgUG9wdXAjc2V0VGV4dH0gaWZcbiAgICAgKiB0aGUgY29udGVudCBpcyBhbiB1bnRydXN0ZWQgdGV4dCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHRtbCBBIHN0cmluZyByZXByZXNlbnRpbmcgSFRNTCBjb250ZW50IGZvciB0aGUgcG9wdXAuXG4gICAgICogQHJldHVybnMge1BvcHVwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBwb3B1cCA9IG5ldyBtYXBib3hnbC5Qb3B1cCgpXG4gICAgICogICAuc2V0TG5nTGF0KGUubG5nTGF0KVxuICAgICAqICAgLnNldEhUTUwoXCI8aDE+SGVsbG8gV29ybGQhPC9oMT5cIilcbiAgICAgKiAgIC5hZGRUbyhtYXApO1xuICAgICAqIEBzZWUgW0Rpc3BsYXkgYSBwb3B1cF0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAvKVxuICAgICAqIEBzZWUgW0Rpc3BsYXkgYSBwb3B1cCBvbiBob3Zlcl0oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAtb24taG92ZXIvKVxuICAgICAqIEBzZWUgW0Rpc3BsYXkgYSBwb3B1cCBvbiBjbGlja10oaHR0cHM6Ly9kb2NzLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAtb24tY2xpY2svKVxuICAgICAqIEBzZWUgW0F0dGFjaCBhIHBvcHVwIHRvIGEgbWFya2VyIGluc3RhbmNlXShodHRwczovL2RvY3MubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9zZXQtcG9wdXAvKVxuICAgICAqL1xuICAgIHNldEhUTUwoaHRtbDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGZyYWcgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBjb25zdCB0ZW1wID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICAgICAgbGV0IGNoaWxkO1xuICAgICAgICB0ZW1wLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHRlbXAuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmICghY2hpbGQpIGJyZWFrO1xuICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zZXRET01Db250ZW50KGZyYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBvcHVwJ3MgbWF4aW11bSB3aWR0aC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBtYXhpbXVtIHdpZHRoIG9mIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICBnZXRNYXhXaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lciAmJiB0aGlzLl9jb250YWluZXIuc3R5bGUubWF4V2lkdGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9wdXAncyBtYXhpbXVtIHdpZHRoLiBUaGlzIGlzIHNldHRpbmcgdGhlIENTUyBwcm9wZXJ0eSBgbWF4LXdpZHRoYC5cbiAgICAgKiBBdmFpbGFibGUgdmFsdWVzIGNhbiBiZSBmb3VuZCBoZXJlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWF4LXdpZHRoXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWF4V2lkdGggQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBmb3IgdGhlIG1heGltdW0gd2lkdGguXG4gICAgICogQHJldHVybnMge1BvcHVwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRNYXhXaWR0aChtYXhXaWR0aDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9wdXAncyBjb250ZW50IHRvIHRoZSBlbGVtZW50IHByb3ZpZGVkIGFzIGEgRE9NIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHRtbE5vZGUgQSBET00gbm9kZSB0byBiZSB1c2VkIGFzIGNvbnRlbnQgZm9yIHRoZSBwb3B1cC5cbiAgICAgKiBAcmV0dXJucyB7UG9wdXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gY3JlYXRlIGFuIGVsZW1lbnQgd2l0aCB0aGUgcG9wdXAgY29udGVudFxuICAgICAqIHZhciBkaXYgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICogZGl2LmlubmVySFRNTCA9ICdIZWxsbywgd29ybGQhJztcbiAgICAgKiB2YXIgcG9wdXAgPSBuZXcgbWFwYm94Z2wuUG9wdXAoKVxuICAgICAqICAgLnNldExuZ0xhdChlLmxuZ0xhdClcbiAgICAgKiAgIC5zZXRET01Db250ZW50KGRpdilcbiAgICAgKiAgIC5hZGRUbyhtYXApO1xuICAgICAqL1xuICAgIHNldERPTUNvbnRlbnQoaHRtbE5vZGU6IE5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnQpIHtcbiAgICAgICAgICAgIC8vIENsZWFyIG91dCBjaGlsZHJlbiBmaXJzdC5cbiAgICAgICAgICAgIHdoaWxlICh0aGlzLl9jb250ZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGVudC5yZW1vdmVDaGlsZCh0aGlzLl9jb250ZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnQgPSBET00uY3JlYXRlKCdkaXYnLCAnbWFwYm94Z2wtcG9wdXAtY29udGVudCcsIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgY2xvc2UgYnV0dG9uIHNob3VsZCBiZSB0aGUgbGFzdCB0YWJiYWJsZSBlbGVtZW50IGluc2lkZSB0aGUgcG9wdXAgZm9yIGEgZ29vZCBrZXlib2FyZCBVWC5cbiAgICAgICAgdGhpcy5fY29udGVudC5hcHBlbmRDaGlsZChodG1sTm9kZSk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUNsb3NlQnV0dG9uKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICB0aGlzLl9mb2N1c0ZpcnN0RWxlbWVudCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgQ1NTIGNsYXNzIHRvIHRoZSBwb3B1cCBjb250YWluZXIgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgTm9uLWVtcHR5IHN0cmluZyB3aXRoIENTUyBjbGFzcyBuYW1lIHRvIGFkZCB0byBwb3B1cCBjb250YWluZXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IHBvcHVwID0gbmV3IG1hcGJveGdsLlBvcHVwKClcbiAgICAgKiBwb3B1cC5hZGRDbGFzc05hbWUoJ3NvbWUtY2xhc3MnKVxuICAgICAqL1xuICAgIGFkZENsYXNzTmFtZShjbGFzc05hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5fY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIENTUyBjbGFzcyBmcm9tIHRoZSBwb3B1cCBjb250YWluZXIgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgTm9uLWVtcHR5IHN0cmluZyB3aXRoIENTUyBjbGFzcyBuYW1lIHRvIHJlbW92ZSBmcm9tIHBvcHVwIGNvbnRhaW5lclxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgcG9wdXAgPSBuZXcgbWFwYm94Z2wuUG9wdXAoKVxuICAgICAqIHBvcHVwLnJlbW92ZUNsYXNzTmFtZSgnc29tZS1jbGFzcycpXG4gICAgICovXG4gICAgcmVtb3ZlQ2xhc3NOYW1lKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3B1cCdzIG9mZnNldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvZmZzZXQgU2V0cyB0aGUgcG9wdXAncyBvZmZzZXQuXG4gICAgICogQHJldHVybnMge1BvcHVwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRPZmZzZXQgKG9mZnNldD86IE9mZnNldCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIG9yIHJlbW92ZSB0aGUgZ2l2ZW4gQ1NTIGNsYXNzIG9uIHRoZSBwb3B1cCBjb250YWluZXIsIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBjb250YWluZXIgY3VycmVudGx5IGhhcyB0aGF0IGNsYXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBOb24tZW1wdHkgc3RyaW5nIHdpdGggQ1NTIGNsYXNzIG5hbWUgdG8gYWRkL3JlbW92ZVxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGlmIHRoZSBjbGFzcyB3YXMgcmVtb3ZlZCByZXR1cm4gZmFsc2UsIGlmIGNsYXNzIHdhcyBhZGRlZCwgdGhlbiByZXR1cm4gdHJ1ZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBsZXQgcG9wdXAgPSBuZXcgbWFwYm94Z2wuUG9wdXAoKVxuICAgICAqIHBvcHVwLnRvZ2dsZUNsYXNzTmFtZSgndG9nZ2xlQ2xhc3MnKVxuICAgICAqL1xuICAgIHRvZ2dsZUNsYXNzTmFtZShjbGFzc05hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5fY29udGFpbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jcmVhdGVDbG9zZUJ1dHRvbigpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZUJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24gPSBET00uY3JlYXRlKCdidXR0b24nLCAnbWFwYm94Z2wtcG9wdXAtY2xvc2UtYnV0dG9uJywgdGhpcy5fY29udGVudCk7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZUJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnQ2xvc2UgcG9wdXAnKTtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uLmlubmVySFRNTCA9ICcmIzIxNTsnO1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkNsb3NlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbk1vdXNlVXAoZXZlbnQ6IE1hcE1vdXNlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlKGV2ZW50LnBvaW50KTtcbiAgICB9XG5cbiAgICBfb25Nb3VzZU1vdmUoZXZlbnQ6IE1hcE1vdXNlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlKGV2ZW50LnBvaW50KTtcbiAgICB9XG5cbiAgICBfb25EcmFnKGV2ZW50OiBNYXBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZShldmVudC5wb2ludCk7XG4gICAgfVxuXG4gICAgX3VwZGF0ZShjdXJzb3I6ID9Qb2ludExpa2UpIHtcbiAgICAgICAgY29uc3QgaGFzUG9zaXRpb24gPSB0aGlzLl9sbmdMYXQgfHwgdGhpcy5fdHJhY2tQb2ludGVyO1xuXG4gICAgICAgIGlmICghdGhpcy5fbWFwIHx8ICFoYXNQb3NpdGlvbiB8fCAhdGhpcy5fY29udGVudCkgeyByZXR1cm47IH1cblxuICAgICAgICBpZiAoIXRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLXBvcHVwJywgdGhpcy5fbWFwLmdldENvbnRhaW5lcigpKTtcbiAgICAgICAgICAgIHRoaXMuX3RpcCAgICAgICA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC1wb3B1cC10aXAnLCB0aGlzLl9jb250YWluZXIpO1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX2NvbnRlbnQpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuY2xhc3NOYW1lLnNwbGl0KCcgJykuZm9yRWFjaChuYW1lID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKG5hbWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX3RyYWNrUG9pbnRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1wb3B1cC10cmFjay1wb2ludGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1heFdpZHRoICYmIHRoaXMuX2NvbnRhaW5lci5zdHlsZS5tYXhXaWR0aCAhPT0gdGhpcy5vcHRpb25zLm1heFdpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUubWF4V2lkdGggPSB0aGlzLm9wdGlvbnMubWF4V2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbWFwLnRyYW5zZm9ybS5yZW5kZXJXb3JsZENvcGllcyAmJiAhdGhpcy5fdHJhY2tQb2ludGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9sbmdMYXQgPSBzbWFydFdyYXAodGhpcy5fbG5nTGF0LCB0aGlzLl9wb3MsIHRoaXMuX21hcC50cmFuc2Zvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3RyYWNrUG9pbnRlciAmJiAhY3Vyc29yKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5fcG9zID0gdGhpcy5fdHJhY2tQb2ludGVyICYmIGN1cnNvciA/IGN1cnNvciA6IHRoaXMuX21hcC5wcm9qZWN0KHRoaXMuX2xuZ0xhdCk7XG5cbiAgICAgICAgbGV0IGFuY2hvcjogP0FuY2hvciA9IHRoaXMub3B0aW9ucy5hbmNob3I7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IG5vcm1hbGl6ZU9mZnNldCh0aGlzLm9wdGlvbnMub2Zmc2V0KTtcblxuICAgICAgICBpZiAoIWFuY2hvcikge1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLl9jb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLl9jb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgbGV0IGFuY2hvckNvbXBvbmVudHM7XG5cbiAgICAgICAgICAgIGlmIChwb3MueSArIG9mZnNldC5ib3R0b20ueSA8IGhlaWdodCkge1xuICAgICAgICAgICAgICAgIGFuY2hvckNvbXBvbmVudHMgPSBbJ3RvcCddO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwb3MueSA+IHRoaXMuX21hcC50cmFuc2Zvcm0uaGVpZ2h0IC0gaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yQ29tcG9uZW50cyA9IFsnYm90dG9tJ107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuY2hvckNvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBvcy54IDwgd2lkdGggLyAyKSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yQ29tcG9uZW50cy5wdXNoKCdsZWZ0Jyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvcy54ID4gdGhpcy5fbWFwLnRyYW5zZm9ybS53aWR0aCAtIHdpZHRoIC8gMikge1xuICAgICAgICAgICAgICAgIGFuY2hvckNvbXBvbmVudHMucHVzaCgncmlnaHQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFuY2hvckNvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuY2hvciA9IChhbmNob3JDb21wb25lbnRzLmpvaW4oJy0nKTogYW55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9mZnNldGVkUG9zID0gcG9zLmFkZChvZmZzZXRbYW5jaG9yXSkucm91bmQoKTtcbiAgICAgICAgRE9NLnNldFRyYW5zZm9ybSh0aGlzLl9jb250YWluZXIsIGAke2FuY2hvclRyYW5zbGF0ZVthbmNob3JdfSB0cmFuc2xhdGUoJHtvZmZzZXRlZFBvcy54fXB4LCR7b2Zmc2V0ZWRQb3MueX1weClgKTtcbiAgICAgICAgYXBwbHlBbmNob3JDbGFzcyh0aGlzLl9jb250YWluZXIsIGFuY2hvciwgJ3BvcHVwJyk7XG4gICAgfVxuXG4gICAgX2ZvY3VzRmlyc3RFbGVtZW50KCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5mb2N1c0FmdGVyT3BlbiB8fCAhdGhpcy5fY29udGFpbmVyKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZmlyc3RGb2N1c2FibGUgPSB0aGlzLl9jb250YWluZXIucXVlcnlTZWxlY3Rvcihmb2N1c1F1ZXJ5U2VsZWN0b3IpO1xuXG4gICAgICAgIGlmIChmaXJzdEZvY3VzYWJsZSkgZmlyc3RGb2N1c2FibGUuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBfb25DbG9zZSgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9mZnNldChvZmZzZXQ6ID9PZmZzZXQpIHtcbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplT2Zmc2V0KG5ldyBQb2ludCgwLCAwKSk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIGlucHV0IHNwZWNpZmllcyBhIHJhZGl1cyBmcm9tIHdoaWNoIHRvIGNhbGN1bGF0ZSBvZmZzZXRzIGF0IGFsbCBwb3NpdGlvbnNcbiAgICAgICAgY29uc3QgY29ybmVyT2Zmc2V0ID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoMC41ICogTWF0aC5wb3cob2Zmc2V0LCAyKSkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2NlbnRlcic6IG5ldyBQb2ludCgwLCAwKSxcbiAgICAgICAgICAgICd0b3AnOiBuZXcgUG9pbnQoMCwgb2Zmc2V0KSxcbiAgICAgICAgICAgICd0b3AtbGVmdCc6IG5ldyBQb2ludChjb3JuZXJPZmZzZXQsIGNvcm5lck9mZnNldCksXG4gICAgICAgICAgICAndG9wLXJpZ2h0JzogbmV3IFBvaW50KC1jb3JuZXJPZmZzZXQsIGNvcm5lck9mZnNldCksXG4gICAgICAgICAgICAnYm90dG9tJzogbmV3IFBvaW50KDAsIC1vZmZzZXQpLFxuICAgICAgICAgICAgJ2JvdHRvbS1sZWZ0JzogbmV3IFBvaW50KGNvcm5lck9mZnNldCwgLWNvcm5lck9mZnNldCksXG4gICAgICAgICAgICAnYm90dG9tLXJpZ2h0JzogbmV3IFBvaW50KC1jb3JuZXJPZmZzZXQsIC1jb3JuZXJPZmZzZXQpLFxuICAgICAgICAgICAgJ2xlZnQnOiBuZXcgUG9pbnQob2Zmc2V0LCAwKSxcbiAgICAgICAgICAgICdyaWdodCc6IG5ldyBQb2ludCgtb2Zmc2V0LCAwKVxuICAgICAgICB9O1xuXG4gICAgfSBlbHNlIGlmIChvZmZzZXQgaW5zdGFuY2VvZiBQb2ludCB8fCBBcnJheS5pc0FycmF5KG9mZnNldCkpIHtcbiAgICAgICAgLy8gaW5wdXQgc3BlY2lmaWVzIGEgc2luZ2xlIG9mZnNldCB0byBiZSBhcHBsaWVkIHRvIGFsbCBwb3NpdGlvbnNcbiAgICAgICAgY29uc3QgY29udmVydGVkT2Zmc2V0ID0gUG9pbnQuY29udmVydChvZmZzZXQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2NlbnRlcic6IGNvbnZlcnRlZE9mZnNldCxcbiAgICAgICAgICAgICd0b3AnOiBjb252ZXJ0ZWRPZmZzZXQsXG4gICAgICAgICAgICAndG9wLWxlZnQnOiBjb252ZXJ0ZWRPZmZzZXQsXG4gICAgICAgICAgICAndG9wLXJpZ2h0JzogY29udmVydGVkT2Zmc2V0LFxuICAgICAgICAgICAgJ2JvdHRvbSc6IGNvbnZlcnRlZE9mZnNldCxcbiAgICAgICAgICAgICdib3R0b20tbGVmdCc6IGNvbnZlcnRlZE9mZnNldCxcbiAgICAgICAgICAgICdib3R0b20tcmlnaHQnOiBjb252ZXJ0ZWRPZmZzZXQsXG4gICAgICAgICAgICAnbGVmdCc6IGNvbnZlcnRlZE9mZnNldCxcbiAgICAgICAgICAgICdyaWdodCc6IGNvbnZlcnRlZE9mZnNldFxuICAgICAgICB9O1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW5wdXQgc3BlY2lmaWVzIGFuIG9mZnNldCBwZXIgcG9zaXRpb25cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdjZW50ZXInOiBQb2ludC5jb252ZXJ0KG9mZnNldFsnY2VudGVyJ10gfHwgWzAsIDBdKSxcbiAgICAgICAgICAgICd0b3AnOiBQb2ludC5jb252ZXJ0KG9mZnNldFsndG9wJ10gfHwgWzAsIDBdKSxcbiAgICAgICAgICAgICd0b3AtbGVmdCc6IFBvaW50LmNvbnZlcnQob2Zmc2V0Wyd0b3AtbGVmdCddIHx8IFswLCAwXSksXG4gICAgICAgICAgICAndG9wLXJpZ2h0JzogUG9pbnQuY29udmVydChvZmZzZXRbJ3RvcC1yaWdodCddIHx8IFswLCAwXSksXG4gICAgICAgICAgICAnYm90dG9tJzogUG9pbnQuY29udmVydChvZmZzZXRbJ2JvdHRvbSddIHx8IFswLCAwXSksXG4gICAgICAgICAgICAnYm90dG9tLWxlZnQnOiBQb2ludC5jb252ZXJ0KG9mZnNldFsnYm90dG9tLWxlZnQnXSB8fCBbMCwgMF0pLFxuICAgICAgICAgICAgJ2JvdHRvbS1yaWdodCc6IFBvaW50LmNvbnZlcnQob2Zmc2V0Wydib3R0b20tcmlnaHQnXSB8fCBbMCwgMF0pLFxuICAgICAgICAgICAgJ2xlZnQnOiBQb2ludC5jb252ZXJ0KG9mZnNldFsnbGVmdCddIHx8IFswLCAwXSksXG4gICAgICAgICAgICAncmlnaHQnOiBQb2ludC5jb252ZXJ0KG9mZnNldFsncmlnaHQnXSB8fCBbMCwgMF0pXG4gICAgICAgIH07XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHN1cHBvcnRlZCBmcm9tICdAbWFwYm94L21hcGJveC1nbC1zdXBwb3J0ZWQnO1xuXG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgTWFwIGZyb20gJy4vdWkvbWFwJztcbmltcG9ydCBOYXZpZ2F0aW9uQ29udHJvbCBmcm9tICcuL3VpL2NvbnRyb2wvbmF2aWdhdGlvbl9jb250cm9sJztcbmltcG9ydCBHZW9sb2NhdGVDb250cm9sIGZyb20gJy4vdWkvY29udHJvbC9nZW9sb2NhdGVfY29udHJvbCc7XG5pbXBvcnQgQXR0cmlidXRpb25Db250cm9sIGZyb20gJy4vdWkvY29udHJvbC9hdHRyaWJ1dGlvbl9jb250cm9sJztcbmltcG9ydCBTY2FsZUNvbnRyb2wgZnJvbSAnLi91aS9jb250cm9sL3NjYWxlX2NvbnRyb2wnO1xuaW1wb3J0IEZ1bGxzY3JlZW5Db250cm9sIGZyb20gJy4vdWkvY29udHJvbC9mdWxsc2NyZWVuX2NvbnRyb2wnO1xuaW1wb3J0IFBvcHVwIGZyb20gJy4vdWkvcG9wdXAnO1xuaW1wb3J0IE1hcmtlciBmcm9tICcuL3VpL21hcmtlcic7XG5pbXBvcnQgU3R5bGUgZnJvbSAnLi9zdHlsZS9zdHlsZSc7XG5pbXBvcnQgTG5nTGF0IGZyb20gJy4vZ2VvL2xuZ19sYXQnO1xuaW1wb3J0IExuZ0xhdEJvdW5kcyBmcm9tICcuL2dlby9sbmdfbGF0X2JvdW5kcyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgTWVyY2F0b3JDb29yZGluYXRlIGZyb20gJy4vZ2VvL21lcmNhdG9yX2Nvb3JkaW5hdGUnO1xuaW1wb3J0IHtFdmVudGVkfSBmcm9tICcuL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vdXRpbC9jb25maWcnO1xuaW1wb3J0IHtEZWJ1Z30gZnJvbSAnLi91dGlsL2RlYnVnJztcbmltcG9ydCB7aXNTYWZhcml9IGZyb20gJy4vdXRpbC91dGlsJztcbmltcG9ydCB7c2V0UlRMVGV4dFBsdWdpbiwgZ2V0UlRMVGV4dFBsdWdpblN0YXR1c30gZnJvbSAnLi9zb3VyY2UvcnRsX3RleHRfcGx1Z2luJztcbmltcG9ydCBXb3JrZXJQb29sIGZyb20gJy4vdXRpbC93b3JrZXJfcG9vbCc7XG5pbXBvcnQge3ByZXdhcm0sIGNsZWFyUHJld2FybWVkUmVzb3VyY2VzfSBmcm9tICcuL3V0aWwvZ2xvYmFsX3dvcmtlcl9wb29sJztcbmltcG9ydCB7Y2xlYXJUaWxlQ2FjaGV9IGZyb20gJy4vdXRpbC90aWxlX3JlcXVlc3RfY2FjaGUnO1xuaW1wb3J0IHtQZXJmb3JtYW5jZVV0aWxzfSBmcm9tICcuL3V0aWwvcGVyZm9ybWFuY2UnO1xuXG5jb25zdCBleHBvcnRlZCA9IHtcbiAgICB2ZXJzaW9uLFxuICAgIHN1cHBvcnRlZCxcbiAgICBzZXRSVExUZXh0UGx1Z2luLFxuICAgIGdldFJUTFRleHRQbHVnaW5TdGF0dXMsXG4gICAgTWFwLFxuICAgIE5hdmlnYXRpb25Db250cm9sLFxuICAgIEdlb2xvY2F0ZUNvbnRyb2wsXG4gICAgQXR0cmlidXRpb25Db250cm9sLFxuICAgIFNjYWxlQ29udHJvbCxcbiAgICBGdWxsc2NyZWVuQ29udHJvbCxcbiAgICBQb3B1cCxcbiAgICBNYXJrZXIsXG4gICAgU3R5bGUsXG4gICAgTG5nTGF0LFxuICAgIExuZ0xhdEJvdW5kcyxcbiAgICBQb2ludCxcbiAgICBNZXJjYXRvckNvb3JkaW5hdGUsXG4gICAgRXZlbnRlZCxcbiAgICBjb25maWcsXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgcmVzb3VyY2VzIGxpa2UgV2ViV29ya2VycyB0aGF0IGNhbiBiZSBzaGFyZWQgYWNyb3NzIG1hcHMgdG8gbG93ZXIgbG9hZFxuICAgICAqIHRpbWVzIGluIHNvbWUgc2l0dWF0aW9ucy4gYG1hcGJveGdsLndvcmtlclVybGAgYW5kIGBtYXBib3hnbC53b3JrZXJDb3VudGAsIGlmIGJlaW5nXG4gICAgICogdXNlZCwgbXVzdCBiZSBzZXQgYmVmb3JlIGBwcmV3YXJtKClgIGlzIGNhbGxlZCB0byBoYXZlIGFuIGVmZmVjdC5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBsaWZlY3ljbGUgb2YgdGhlc2UgcmVzb3VyY2VzIGlzIG1hbmFnZWQgYXV0b21hdGljYWxseSwgYW5kIHRoZXkgYXJlXG4gICAgICogbGF6aWx5IGluaXRpYWxpemVkIHdoZW4gYSBNYXAgaXMgZmlyc3QgY3JlYXRlZC4gQnkgaW52b2tpbmcgYHByZXdhcm0oKWAsIHRoZXNlXG4gICAgICogcmVzb3VyY2VzIHdpbGwgYmUgY3JlYXRlZCBhaGVhZCBvZiB0aW1lLCBhbmQgd2lsbCBub3QgYmUgY2xlYXJlZCB3aGVuIHRoZSBsYXN0IE1hcFxuICAgICAqIGlzIHJlbW92ZWQgZnJvbSB0aGUgcGFnZS4gVGhpcyBhbGxvd3MgdGhlbSB0byBiZSByZS11c2VkIGJ5IG5ldyBNYXAgaW5zdGFuY2VzIHRoYXRcbiAgICAgKiBhcmUgY3JlYXRlZCBsYXRlci4gVGhleSBjYW4gYmUgbWFudWFsbHkgY2xlYXJlZCBieSBjYWxsaW5nXG4gICAgICogYG1hcGJveGdsLmNsZWFyUHJld2FybWVkUmVzb3VyY2VzKClgLiBUaGlzIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIHlvdXIgd2ViIHBhZ2UgcmVtYWluc1xuICAgICAqIGFjdGl2ZSBidXQgc3RvcHMgdXNpbmcgbWFwcyBhbHRvZ2V0aGVyLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBwcmltYXJpbHkgdXNlZnVsIHdoZW4gdXNpbmcgR0wtSlMgbWFwcyBpbiBhIHNpbmdsZSBwYWdlIGFwcCwgd2hlcmVpbiBhIHVzZXJcbiAgICAgKiB3b3VsZCBuYXZpZ2F0ZSBiZXR3ZWVuIHZhcmlvdXMgdmlld3MgdGhhdCBjYW4gY2F1c2UgTWFwIGluc3RhbmNlcyB0byBjb25zdGFudGx5IGJlXG4gICAgICogY3JlYXRlZCBhbmQgZGVzdHJveWVkLlxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uIHByZXdhcm1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcGJveGdsLnByZXdhcm0oKVxuICAgICAqL1xuICAgIHByZXdhcm0sXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHVwIHJlc291cmNlcyB0aGF0IGhhdmUgcHJldmlvdXNseSBiZWVuIGNyZWF0ZWQgYnkgYG1hcGJveGdsLnByZXdhcm0oKWAuXG4gICAgICogTm90ZSB0aGF0IHRoaXMgaXMgdHlwaWNhbGx5IG5vdCBuZWNlc3NhcnkuIFlvdSBzaG91bGQgb25seSBjYWxsIHRoaXMgZnVuY3Rpb25cbiAgICAgKiBpZiB5b3UgZXhwZWN0IHRoZSB1c2VyIG9mIHlvdXIgYXBwIHRvIG5vdCByZXR1cm4gdG8gYSBNYXAgdmlldyBhdCBhbnkgcG9pbnRcbiAgICAgKiBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uIGNsZWFyUHJld2FybWVkUmVzb3VyY2VzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXBib3hnbC5jbGVhclByZXdhcm1lZFJlc291cmNlcygpXG4gICAgICovXG4gICAgY2xlYXJQcmV3YXJtZWRSZXNvdXJjZXMsXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuZCBzZXRzIHRoZSBtYXAncyBbYWNjZXNzIHRva2VuXShodHRwczovL3d3dy5tYXBib3guY29tL2hlbHAvZGVmaW5lLWFjY2Vzcy10b2tlbi8pLlxuICAgICAqXG4gICAgICogQHZhciB7c3RyaW5nfSBhY2Nlc3NUb2tlblxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjdXJyZW50bHkgc2V0IGFjY2VzcyB0b2tlbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcGJveGdsLmFjY2Vzc1Rva2VuID0gbXlBY2Nlc3NUb2tlbjtcbiAgICAgKiBAc2VlIFtEaXNwbGF5IGEgbWFwXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlcy8pXG4gICAgICovXG4gICAgZ2V0IGFjY2Vzc1Rva2VuKCk6ID9zdHJpbmcge1xuICAgICAgICByZXR1cm4gY29uZmlnLkFDQ0VTU19UT0tFTjtcbiAgICB9LFxuXG4gICAgc2V0IGFjY2Vzc1Rva2VuKHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgY29uZmlnLkFDQ0VTU19UT0tFTiA9IHRva2VuO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuZCBzZXRzIHRoZSBtYXAncyBkZWZhdWx0IEFQSSBVUkwgZm9yIHJlcXVlc3RpbmcgdGlsZXMsIHN0eWxlcywgc3ByaXRlcywgYW5kIGdseXBoc1xuICAgICAqXG4gICAgICogQHZhciB7c3RyaW5nfSBiYXNlQXBpVXJsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgYmFzZSBBUEkgVVJMLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwYm94Z2wuYmFzZUFwaVVybCA9ICdodHRwczovL2FwaS5tYXBib3guY29tJztcbiAgICAgKi9cbiAgICBnZXQgYmFzZUFwaVVybCgpOiA/c3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5BUElfVVJMO1xuICAgIH0sXG5cbiAgICBzZXQgYmFzZUFwaVVybCh1cmw6IHN0cmluZykge1xuICAgICAgICBjb25maWcuQVBJX1VSTCA9IHVybDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbmQgc2V0cyB0aGUgbnVtYmVyIG9mIHdlYiB3b3JrZXJzIGluc3RhbnRpYXRlZCBvbiBhIHBhZ2Ugd2l0aCBHTCBKUyBtYXBzLlxuICAgICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBoYWxmIHRoZSBudW1iZXIgb2YgQ1BVIGNvcmVzIChjYXBwZWQgYXQgNikuXG4gICAgICogTWFrZSBzdXJlIHRvIHNldCB0aGlzIHByb3BlcnR5IGJlZm9yZSBjcmVhdGluZyBhbnkgbWFwIGluc3RhbmNlcyBmb3IgaXQgdG8gaGF2ZSBlZmZlY3QuXG4gICAgICpcbiAgICAgKiBAdmFyIHtzdHJpbmd9IHdvcmtlckNvdW50XG4gICAgICogQHJldHVybnMge251bWJlcn0gTnVtYmVyIG9mIHdvcmtlcnMgY3VycmVudGx5IGNvbmZpZ3VyZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXBib3hnbC53b3JrZXJDb3VudCA9IDI7XG4gICAgICovXG4gICAgZ2V0IHdvcmtlckNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBXb3JrZXJQb29sLndvcmtlckNvdW50O1xuICAgIH0sXG5cbiAgICBzZXQgd29ya2VyQ291bnQoY291bnQ6IG51bWJlcikge1xuICAgICAgICBXb3JrZXJQb29sLndvcmtlckNvdW50ID0gY291bnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgYW5kIHNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGltYWdlcyAocmFzdGVyIHRpbGVzLCBzcHJpdGVzLCBpY29ucykgdG8gbG9hZCBpbiBwYXJhbGxlbCxcbiAgICAgKiB3aGljaCBhZmZlY3RzIHBlcmZvcm1hbmNlIGluIHJhc3Rlci1oZWF2eSBtYXBzLiAxNiBieSBkZWZhdWx0LlxuICAgICAqXG4gICAgICogQHZhciB7c3RyaW5nfSBtYXhQYXJhbGxlbEltYWdlUmVxdWVzdHNcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgcGFyYWxsZWwgcmVxdWVzdHMgY3VycmVudGx5IGNvbmZpZ3VyZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXBib3hnbC5tYXhQYXJhbGxlbEltYWdlUmVxdWVzdHMgPSAxMDtcbiAgICAgKi9cbiAgICBnZXQgbWF4UGFyYWxsZWxJbWFnZVJlcXVlc3RzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBjb25maWcuTUFYX1BBUkFMTEVMX0lNQUdFX1JFUVVFU1RTO1xuICAgIH0sXG5cbiAgICBzZXQgbWF4UGFyYWxsZWxJbWFnZVJlcXVlc3RzKG51bVJlcXVlc3RzOiBudW1iZXIpIHtcbiAgICAgICAgY29uZmlnLk1BWF9QQVJBTExFTF9JTUFHRV9SRVFVRVNUUyA9IG51bVJlcXVlc3RzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYnJvd3NlciBzdG9yYWdlIHVzZWQgYnkgdGhpcyBsaWJyYXJ5LiBVc2luZyB0aGlzIG1ldGhvZCBmbHVzaGVzIHRoZSBNYXBib3ggdGlsZVxuICAgICAqIGNhY2hlIHRoYXQgaXMgbWFuYWdlZCBieSB0aGlzIGxpYnJhcnkuIFRpbGVzIG1heSBzdGlsbCBiZSBjYWNoZWQgYnkgdGhlIGJyb3dzZXJcbiAgICAgKiBpbiBzb21lIGNhc2VzLlxuICAgICAqXG4gICAgICogVGhpcyBBUEkgaXMgc3VwcG9ydGVkIG9uIGJyb3dzZXJzIHdoZXJlIHRoZSBbYENhY2hlYCBBUEldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DYWNoZSlcbiAgICAgKiBpcyBzdXBwb3J0ZWQgYW5kIGVuYWJsZWQuIFRoaXMgaW5jbHVkZXMgYWxsIG1ham9yIGJyb3dzZXJzIHdoZW4gcGFnZXMgYXJlIHNlcnZlZCBvdmVyXG4gICAgICogYGh0dHBzOi8vYCwgZXhjZXB0IEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIE1vYmlsZS5cbiAgICAgKlxuICAgICAqIFdoZW4gY2FsbGVkIGluIHVuc3VwcG9ydGVkIGJyb3dzZXJzIG9yIGVudmlyb25tZW50cyAocHJpdmF0ZSBvciBpbmNvZ25pdG8gbW9kZSksIHRoZVxuICAgICAqIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdpdGggYW4gZXJyb3IgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAZnVuY3Rpb24gY2xlYXJTdG9yYWdlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIHdpdGggYW4gZXJyb3IgYXJndW1lbnQgaWYgdGhlcmUgaXMgYW4gZXJyb3IuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXBib3hnbC5jbGVhclN0b3JhZ2UoKTtcbiAgICAgKi9cbiAgICBjbGVhclN0b3JhZ2UoY2FsbGJhY2s/OiAoZXJyOiA/RXJyb3IpID0+IHZvaWQpIHtcbiAgICAgICAgY2xlYXJUaWxlQ2FjaGUoY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICB3b3JrZXJVcmw6ICcnXG59O1xuXG4vL1RoaXMgZ2V0cyBhdXRvbWF0aWNhbGx5IHN0cmlwcGVkIG91dCBpbiBwcm9kdWN0aW9uIGJ1aWxkcy5cbkRlYnVnLmV4dGVuZChleHBvcnRlZCwge2lzU2FmYXJpLCBnZXRQZXJmb3JtYW5jZU1ldHJpY3M6IFBlcmZvcm1hbmNlVXRpbHMuZ2V0UGVyZm9ybWFuY2VNZXRyaWNzfSk7XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgTWFwYm94IEdMIEpTIGluIHVzZSBhcyBzcGVjaWZpZWQgaW4gYHBhY2thZ2UuanNvbmAsXG4gKiBgQ0hBTkdFTE9HLm1kYCwgYW5kIHRoZSBHaXRIdWIgcmVsZWFzZS5cbiAqXG4gKiBAdmFyIHtzdHJpbmd9IHZlcnNpb25cbiAqL1xuXG4vKipcbiAqIFRlc3Qgd2hldGhlciB0aGUgYnJvd3NlciBbc3VwcG9ydHMgTWFwYm94IEdMIEpTXShodHRwczovL3d3dy5tYXBib3guY29tL2hlbHAvbWFwYm94LWJyb3dzZXItc3VwcG9ydC8jbWFwYm94LWdsLWpzKS5cbiAqXG4gKiBAZnVuY3Rpb24gc3VwcG9ydGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ9ZmFsc2VdIElmIGB0cnVlYCxcbiAqICAgdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGBmYWxzZWAgaWYgdGhlIHBlcmZvcm1hbmNlIG9mIE1hcGJveCBHTCBKUyB3b3VsZFxuICogICBiZSBkcmFtYXRpY2FsbHkgd29yc2UgdGhhbiBleHBlY3RlZCAoZS5nLiBhIHNvZnR3YXJlIFdlYkdMIHJlbmRlcmVyIHdvdWxkIGJlIHVzZWQpLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEBleGFtcGxlXG4gKiAvLyBTaG93IGFuIGFsZXJ0IGlmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgTWFwYm94IEdMXG4gKiBpZiAoIW1hcGJveGdsLnN1cHBvcnRlZCgpKSB7XG4gKiAgIGFsZXJ0KCdZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBNYXBib3ggR0wnKTtcbiAqIH1cbiAqIEBzZWUgW0NoZWNrIGZvciBicm93c2VyIHN1cHBvcnRdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvY2hlY2stZm9yLXN1cHBvcnQvKVxuICovXG5cbi8qKlxuICogU2V0cyB0aGUgbWFwJ3MgW1JUTCB0ZXh0IHBsdWdpbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvcGx1Z2lucy8jbWFwYm94LWdsLXJ0bC10ZXh0KS5cbiAqIE5lY2Vzc2FyeSBmb3Igc3VwcG9ydGluZyB0aGUgQXJhYmljIGFuZCBIZWJyZXcgbGFuZ3VhZ2VzLCB3aGljaCBhcmUgd3JpdHRlbiByaWdodC10by1sZWZ0LiBNYXBib3ggU3R1ZGlvIGxvYWRzIHRoaXMgcGx1Z2luIGJ5IGRlZmF1bHQuXG4gKlxuICogQGZ1bmN0aW9uIHNldFJUTFRleHRQbHVnaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwbHVnaW5VUkwgVVJMIHBvaW50aW5nIHRvIHRoZSBNYXBib3ggUlRMIHRleHQgcGx1Z2luIHNvdXJjZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCB3aXRoIGFuIGVycm9yIGFyZ3VtZW50IGlmIHRoZXJlIGlzIGFuIGVycm9yLlxuICogQHBhcmFtIHtib29sZWFufSBsYXp5IElmIHNldCB0byBgdHJ1ZWAsIG1hcGJveGdsIHdpbGwgZGVmZXIgbG9hZGluZyB0aGUgcGx1Z2luIHVudGlsIHJ0bCB0ZXh0IGlzIGVuY291bnRlcmVkLFxuICogICAgcnRsIHRleHQgd2lsbCB0aGVuIGJlIHJlbmRlcmVkIG9ubHkgYWZ0ZXIgdGhlIHBsdWdpbiBmaW5pc2hlcyBsb2FkaW5nLlxuICogQGV4YW1wbGVcbiAqIG1hcGJveGdsLnNldFJUTFRleHRQbHVnaW4oJ2h0dHBzOi8vYXBpLm1hcGJveC5jb20vbWFwYm94LWdsLWpzL3BsdWdpbnMvbWFwYm94LWdsLXJ0bC10ZXh0L3YwLjIuMC9tYXBib3gtZ2wtcnRsLXRleHQuanMnKTtcbiAqIEBzZWUgW0FkZCBzdXBwb3J0IGZvciByaWdodC10by1sZWZ0IHNjcmlwdHNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvbWFwYm94LWdsLXJ0bC10ZXh0LylcbiAqL1xuXG4vKipcbiAgKiBHZXRzIHRoZSBtYXAncyBbUlRMIHRleHQgcGx1Z2luXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9wbHVnaW5zLyNtYXBib3gtZ2wtcnRsLXRleHQpIHN0YXR1cy5cbiAgKiBUaGUgc3RhdHVzIGNhbiBiZSBgdW5hdmFpbGFibGVgIChpLmUuIG5vdCByZXF1ZXN0ZWQgb3IgcmVtb3ZlZCksIGBsb2FkaW5nYCwgYGxvYWRlZGAgb3IgYGVycm9yYC5cbiAgKiBJZiB0aGUgc3RhdHVzIGlzIGBsb2FkZWRgIGFuZCB0aGUgcGx1Z2luIGlzIHJlcXVlc3RlZCBhZ2FpbiwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICpcbiAgKiBAZnVuY3Rpb24gZ2V0UlRMVGV4dFBsdWdpblN0YXR1c1xuICAqIEBleGFtcGxlXG4gICogY29uc3QgcGx1Z2luU3RhdHVzID0gbWFwYm94Z2wuZ2V0UlRMVGV4dFBsdWdpblN0YXR1cygpO1xuICAqL1xuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRlZDtcblxuLy8gY2FuYXJ5IGFzc2VydDogdXNlZCB0byBjb25maXJtIHRoYXQgYXNzZXJ0cyBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHByb2R1Y3Rpb24gYnVpbGRcbmFzc2VydCh0cnVlLCAnY2FuYXJ5IGFzc2VydCcpO1xuIl0sIm5hbWVzIjpbImlzU3VwcG9ydGVkIiwib3B0aW9ucyIsIm5vdFN1cHBvcnRlZFJlYXNvbiIsIndpbmRvdyIsImRvY3VtZW50IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJldmVyeSIsImZpbHRlciIsImZvckVhY2giLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJtYXAiLCJzb21lIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJpc0FycmF5IiwiRnVuY3Rpb24iLCJiaW5kIiwiT2JqZWN0Iiwia2V5cyIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImlzU2VhbGVkIiwiaXNGcm96ZW4iLCJpc0V4dGVuc2libGUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImRlZmluZVByb3BlcnRpZXMiLCJzZWFsIiwiZnJlZXplIiwicHJldmVudEV4dGVuc2lvbnMiLCJKU09OIiwic3VwcG9ydGVkIiwid29ya2VyIiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwid29ya2VyVVJMIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiV29ya2VyIiwiZSIsInRlcm1pbmF0ZSIsInJldm9rZU9iamVjdFVSTCIsImlzV29ya2VyU3VwcG9ydGVkIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJjb25zdCIsImNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiaW1hZ2VEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwiaXNDYW52YXNHZXRJbWFnZURhdGFTdXBwb3J0ZWQiLCJ1bmRlZmluZWQiLCJpc1dlYkdMU3VwcG9ydGVkQ2FjaGUiLCJmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0IiwiZ2wiLCJhdHRyaWJ1dGVzIiwid2ViR0xDb250ZXh0QXR0cmlidXRlcyIsInByb2JhYmx5U3VwcG9ydHNDb250ZXh0Iiwic3VwcG9ydHNDb250ZXh0IiwiZ2V0V2ViR0xDb250ZXh0Iiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsImlzQ29udGV4dExvc3QiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJpc1dlYkdMU3VwcG9ydGVkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1hcGJveGdsIiwiYW50aWFsaWFzIiwiYWxwaGEiLCJzdGVuY2lsIiwiZGVwdGgiLCJET00iLCJ0YWdOYW1lIiwiY2xhc3NOYW1lIiwiY29udGFpbmVyIiwiZWwiLCJhcHBlbmRDaGlsZCIsIm5hbWVzcGFjZVVSSSIsImNyZWF0ZUVsZW1lbnROUyIsImRvY1N0eWxlIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJ0ZXN0UHJvcCIsInByb3BzIiwibGV0IiwiaSIsImxlbmd0aCIsInVzZXJTZWxlY3QiLCJzZWxlY3RQcm9wIiwiZGlzYWJsZURyYWciLCJlbmFibGVEcmFnIiwidHJhbnNmb3JtUHJvcCIsInNldFRyYW5zZm9ybSIsInZhbHVlIiwicGFzc2l2ZVN1cHBvcnRlZCIsImdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXJyIiwidGFyZ2V0IiwiY2FsbGJhY2siLCJjYXB0dXJlIiwic3VwcHJlc3NDbGljayIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicmVuZGVyU3R5bGVJbWFnZSIsImltYWdlIiwidXNlckltYWdlIiwicmVuZGVyIiwiZGF0YSIsInJlcGxhY2UiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwic2V0VGltZW91dCIsIm1vdXNlUG9zIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIlBvaW50IiwiY2xpZW50WCIsImxlZnQiLCJjbGllbnRMZWZ0IiwiY2xpZW50WSIsInRvcCIsImNsaWVudFRvcCIsInRvdWNoUG9zIiwidG91Y2hlcyIsInBvaW50cyIsInB1c2giLCJtb3VzZUJ1dHRvbiIsIkluc3RhbGxUcmlnZ2VyIiwiYnV0dG9uIiwiY3RybEtleSIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwidG9VcHBlckNhc2UiLCJyZW1vdmUiLCJub2RlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiSW1hZ2VNYW5hZ2VyIiwic3VwZXIiLCJ0aGlzIiwiaW1hZ2VzIiwidXBkYXRlZEltYWdlcyIsImNhbGxiYWNrRGlzcGF0Y2hlZFRoaXNGcmFtZSIsImxvYWRlZCIsInJlcXVlc3RvcnMiLCJwYXR0ZXJucyIsImF0bGFzSW1hZ2UiLCJSR0JBSW1hZ2UiLCJkaXJ0eSIsImlzTG9hZGVkIiwic2V0TG9hZGVkIiwiX25vdGlmeSIsImdldEltYWdlIiwiaWQiLCJhZGRJbWFnZSIsIl92YWxpZGF0ZSIsInZhbGlkIiwiX3ZhbGlkYXRlU3RyZXRjaCIsInN0cmV0Y2hYIiwiZmlyZSIsIkVycm9yRXZlbnQiLCJFcnJvciIsInN0cmV0Y2hZIiwiX3ZhbGlkYXRlQ29udGVudCIsImNvbnRlbnQiLCJzdHJldGNoIiwic2l6ZSIsImxhc3QiLCJwYXJ0IiwidXBkYXRlSW1hZ2UiLCJ2ZXJzaW9uIiwicmVtb3ZlSW1hZ2UiLCJvblJlbW92ZSIsImxpc3RJbWFnZXMiLCJnZXRJbWFnZXMiLCJpZHMiLCJoYXNBbGxEZXBlbmRlbmNpZXMiLCJyZXNwb25zZSIsIkV2ZW50IiwiY2xvbmUiLCJwaXhlbFJhdGlvIiwic2RmIiwiaGFzUmVuZGVyQ2FsbGJhY2siLCJCb29sZWFuIiwid2Fybk9uY2UiLCJnZXRQaXhlbFNpemUiLCJnZXRQYXR0ZXJuIiwicGF0dGVybiIsInBvc2l0aW9uIiwiYmluIiwicGFkZGluZyIsIngiLCJ5IiwiSW1hZ2VQb3NpdGlvbiIsIl91cGRhdGVQYXR0ZXJuQXRsYXMiLCJhdGxhc1RleHR1cmUiLCJ1cGRhdGUiLCJUZXh0dXJlIiwiUkdCQSIsIkxJTkVBUiIsIkNMQU1QX1RPX0VER0UiLCJiaW5zIiwicG90cGFjayIsImRzdCIsInJlc2l6ZSIsInciLCJoIiwic3JjIiwiY29weSIsImJlZ2luRnJhbWUiLCJkaXNwYXRjaFJlbmRlckNhbGxiYWNrcyIsIkV2ZW50ZWQiLCJUaW55U0RGIiwiSU5GIiwiZm9udFNpemUiLCJyYWRpdXMiLCJjdXRvZmYiLCJmb250RmFtaWx5IiwiZm9udFdlaWdodCIsImN0eCIsImZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsU3R5bGUiLCJncmlkT3V0ZXIiLCJGbG9hdDY0QXJyYXkiLCJncmlkSW5uZXIiLCJmIiwiZCIsInoiLCJ2IiwiSW50MTZBcnJheSIsIm1pZGRsZSIsIk1hdGgiLCJyb3VuZCIsInVzZXJBZ2VudCIsImVkdCIsImVkdDFkIiwic3FydCIsIm4iLCJxIiwiayIsInMiLCJkcmF3IiwiY2hhciIsImNsZWFyUmVjdCIsImZpbGxUZXh0IiwiaW1nRGF0YSIsImFscGhhQ2hhbm5lbCIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiYSIsInBvdyIsIm1heCIsIm1pbiIsIkdseXBoTWFuYWdlciIsInJlcXVlc3RNYW5hZ2VyIiwibG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5IiwiZW50cmllcyIsInNldFVSTCIsInVybCIsImdldEdseXBocyIsImdseXBocyIsImFsbCIsInN0YWNrIiwiYXN5bmNBbGwiLCJlbnRyeSIsInJlcXVlc3RzIiwicmFuZ2VzIiwiZ2x5cGgiLCJfdGlueVNERiIsInJhbmdlIiwiZmxvb3IiLCJsb2FkR2x5cGhSYW5nZSIsIl9kb2VzQ2hhclN1cHBvcnRMb2NhbEdseXBoIiwiY2IiLCJyZXN1bHQiLCJiaXRtYXAiLCJtZXRyaWNzIiwiaXNDaGFyIiwiZmFtaWx5IiwidGlueVNERiIsInRlc3QiLCJBbHBoYUltYWdlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYWR2YW5jZSIsImZvbnRzdGFjayIsInVybFRlbXBsYXRlIiwiYmVnaW4iLCJlbmQiLCJyZXF1ZXN0IiwidHJhbnNmb3JtUmVxdWVzdCIsIm5vcm1hbGl6ZUdseXBoc1VSTCIsIlJlc291cmNlVHlwZSIsIkdseXBocyIsImdldEFycmF5QnVmZmVyIiwicGFyc2VHbHlwaFBCRiIsIkxpZ2h0UG9zaXRpb25Qcm9wZXJ0eSIsInNwZWNpZmljYXRpb24iLCJzdHlsZVNwZWMiLCJsaWdodCIsInBvc3NpYmx5RXZhbHVhdGUiLCJwYXJhbWV0ZXJzIiwic3BoZXJpY2FsVG9DYXJ0ZXNpYW4iLCJleHByZXNzaW9uIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsImIiLCJ0IiwicHJvcGVydGllcyIsIlByb3BlcnRpZXMiLCJhbmNob3IiLCJEYXRhQ29uc3RhbnRQcm9wZXJ0eSIsImNvbG9yIiwiaW50ZW5zaXR5IiwiTGlnaHQiLCJsaWdodE9wdGlvbnMiLCJfdHJhbnNpdGlvbmFibGUiLCJUcmFuc2l0aW9uYWJsZSIsInNldExpZ2h0IiwiX3RyYW5zaXRpb25pbmciLCJ1bnRyYW5zaXRpb25lZCIsImdldExpZ2h0Iiwic2VyaWFsaXplIiwidmFsaWRhdGVMaWdodCIsIm5hbWUiLCJlbmRzV2l0aCIsInNldFRyYW5zaXRpb24iLCJzbGljZSIsInNldFZhbHVlIiwidXBkYXRlVHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uZWQiLCJoYXNUcmFuc2l0aW9uIiwicmVjYWxjdWxhdGUiLCJ2YWxpZGF0ZSIsImVtaXRWYWxpZGF0aW9uRXJyb3JzIiwiY2FsbCIsInZhbGlkYXRlU3R5bGUiLCJleHRlbmQiLCJzcHJpdGUiLCJMaW5lQXRsYXMiLCJuZXh0Um93IiwiZGFzaEVudHJ5IiwiZ2V0RGFzaCIsImRhc2hhcnJheSIsImtleSIsImpvaW4iLCJhZGREYXNoIiwiZ2V0RGFzaFJhbmdlcyIsImxpbmVBdGxhc1dpZHRoIiwicmlnaHQiLCJpc0Rhc2giLCJ6ZXJvTGVuZ3RoIiwiY3VycmVudERhc2hMZW5ndGgiLCJkYXNoTGVuZ3RoIiwiYWRkUm91bmREYXNoIiwiaGFsZlN0cmV0Y2giLCJpbmRleCIsImN1cnJJbmRleCIsImRpc3RMZWZ0IiwiYWJzIiwiZGlzdFJpZ2h0IiwibWluRGlzdCIsInNpZ25lZERpc3RhbmNlIiwiZGlzdE1pZGRsZSIsImRpc3RFZGdlIiwiYWRkUmVndWxhckRhc2giLCJuZXh0Iiwic3BsaWNlIiwiZmlyc3QiLCJ0ZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4U3ViSW1hZ2UyRCIsIkFMUEhBIiwiVU5TSUdORURfQllURSIsImNyZWF0ZVRleHR1cmUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJSRVBFQVQiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsInRleEltYWdlMkQiLCJEaXNwYXRjaGVyIiwid29ya2VyUG9vbCIsInBhcmVudCIsImFjdG9ycyIsImN1cnJlbnRBY3RvciIsInVuaXF1ZUlkIiwid29ya2VycyIsImFjcXVpcmUiLCJhY3RvciIsIkFjdG9yIiwidGlsZUpTT04iLCJwaWNrIiwidmVjdG9yX2xheWVycyIsInZlY3RvckxheWVycyIsInZlY3RvckxheWVySWRzIiwibGF5ZXIiLCJ0aWxlcyIsImNhbm9uaWNhbGl6ZVRpbGVzZXQiLCJnZXRKU09OIiwibm9ybWFsaXplU291cmNlVVJMIiwiU291cmNlIiwiYnJvd3NlciIsImZyYW1lIiwiYnJvYWRjYXN0IiwiZG9uZSIsInNlbmQiLCJnZXRBY3RvciIsInJlbGVhc2UiLCJUaWxlQm91bmRzIiwiYm91bmRzIiwibWluem9vbSIsIm1heHpvb20iLCJMbmdMYXRCb3VuZHMiLCJjb252ZXJ0IiwidmFsaWRhdGVCb3VuZHMiLCJjb250YWlucyIsInRpbGVJRCIsIndvcmxkU2l6ZSIsImxldmVsIiwibWVyY2F0b3JYZnJvbUxuZyIsImdldFdlc3QiLCJtZXJjYXRvcllmcm9tTGF0IiwiZ2V0Tm9ydGgiLCJjZWlsIiwiZ2V0RWFzdCIsImdldFNvdXRoIiwiVmVjdG9yVGlsZVNvdXJjZSIsImRpc3BhdGNoZXIiLCJldmVudGVkUGFyZW50Iiwic2NoZW1lIiwidGlsZVNpemUiLCJyZXBhcnNlT3ZlcnNjYWxlZCIsImlzVGlsZUNsaXBwZWQiLCJfbG9hZGVkIiwiX29wdGlvbnMiLCJfY29sbGVjdFJlc291cmNlVGltaW5nIiwiY29sbGVjdFJlc291cmNlVGltaW5nIiwic2V0RXZlbnRlZFBhcmVudCIsImxvYWQiLCJkYXRhVHlwZSIsIl90aWxlSlNPTlJlcXVlc3QiLCJsb2FkVGlsZUpTT04iLCJfcmVxdWVzdE1hbmFnZXIiLCJ0aWxlQm91bmRzIiwicG9zdFR1cm5zdGlsZUV2ZW50IiwiX2N1c3RvbUFjY2Vzc1Rva2VuIiwicG9zdE1hcExvYWRFdmVudCIsIl9nZXRNYXBJZCIsIl9za3VUb2tlbiIsInNvdXJjZURhdGFUeXBlIiwiaGFzVGlsZSIsImNhbm9uaWNhbCIsIm9uQWRkIiwic2V0U291cmNlUHJvcGVydHkiLCJjYW5jZWwiLCJzb3VyY2VDYWNoZXMiLCJjbGVhclRpbGVzIiwic2V0VGlsZXMiLCJzZXRVcmwiLCJsb2FkVGlsZSIsInRpbGUiLCJub3JtYWxpemVUaWxlVVJMIiwicGFyYW1zIiwiVGlsZSIsInVpZCIsInpvb20iLCJvdmVyc2NhbGVkWiIsIm92ZXJzY2FsZUZhY3RvciIsInNvdXJjZSIsImRldmljZVBpeGVsUmF0aW8iLCJzaG93Q29sbGlzaW9uQm94ZXMiLCJwcm9tb3RlSWQiLCJhYm9ydGVkIiwic3RhdHVzIiwicmVzb3VyY2VUaW1pbmciLCJfcmVmcmVzaEV4cGlyZWRUaWxlcyIsInNldEV4cGlyeURhdGEiLCJsb2FkVmVjdG9yRGF0YSIsInBhaW50ZXIiLCJjYWNoZUVudHJ5UG9zc2libHlBZGRlZCIsInJlbG9hZENhbGxiYWNrIiwic3RhdGUiLCJhYm9ydFRpbGUiLCJ1bmxvYWRUaWxlIiwidW5sb2FkVmVjdG9yRGF0YSIsIlJhc3RlclRpbGVTb3VyY2UiLCJyb3VuZFpvb20iLCJpbWciLCJjYWNoZUNvbnRyb2wiLCJleHBpcmVzIiwiZ2V0VGlsZVRleHR1cmUiLCJ1c2VNaXBtYXAiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJleHRUZXh0dXJlRmlsdGVyQW5pc290cm9waWMiLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJleHRUZXh0dXJlRmlsdGVyQW5pc290cm9waWNNYXgiLCJzYXZlVGlsZVRleHR1cmUiLCJSYXN0ZXJERU1UaWxlU291cmNlIiwiZW5jb2RpbmciLCJkZW0iLCJuZWVkc0hpbGxzaGFkZVByZXBhcmUiLCJyYXdJbWFnZURhdGEiLCJJbWFnZUJpdG1hcCIsIm9mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCIsImNvb3JkIiwibmVpZ2hib3JpbmdUaWxlcyIsIl9nZXROZWlnaGJvcmluZ1RpbGVzIiwiZGltIiwicHgiLCJweHciLCJ3cmFwIiwibngiLCJueHciLCJPdmVyc2NhbGVkVGlsZUlEIiwiYmFja2ZpbGxlZCIsImRlbVRleHR1cmUiLCJmYm8iLCJkZXN0cm95IiwiR2VvSlNPTlNvdXJjZSIsIl9yZW1vdmVkIiwiX2RhdGEiLCJfcmVzb3VyY2VUaW1pbmciLCJhdHRyaWJ1dGlvbiIsInNjYWxlIiwiRVhURU5UIiwid29ya2VyT3B0aW9ucyIsImNsdXN0ZXIiLCJnZW9qc29uVnRPcHRpb25zIiwidG9sZXJhbmNlIiwiZXh0ZW50IiwibWF4Wm9vbSIsImxpbmVNZXRyaWNzIiwiZ2VuZXJhdGVJZCIsInN1cGVyY2x1c3Rlck9wdGlvbnMiLCJjbHVzdGVyTWF4Wm9vbSIsIm1pblBvaW50cyIsImNsdXN0ZXJNaW5Qb2ludHMiLCJjbHVzdGVyUmFkaXVzIiwibG9nIiwiY2x1c3RlclByb3BlcnRpZXMiLCJfdXBkYXRlV29ya2VyRGF0YSIsInNldERhdGEiLCJnZXRDbHVzdGVyRXhwYW5zaW9uWm9vbSIsImNsdXN0ZXJJZCIsImdldENsdXN0ZXJDaGlsZHJlbiIsImdldENsdXN0ZXJMZWF2ZXMiLCJsaW1pdCIsIm9mZnNldCIsInJlc29sdmVVUkwiLCJzdHJpbmdpZnkiLCJhYmFuZG9uZWQiLCJtZXNzYWdlIiwiSW1hZ2VTb3VyY2UiLCJjb29yZGluYXRlcyIsIm5ld0Nvb3JkaW5hdGVzIiwic3VjY2Vzc0NhbGxiYWNrIiwiSW1hZ2UiLCJfZmluaXNoTG9hZGluZyIsInNldENvb3JkaW5hdGVzIiwiY29ybmVyQ29vcmRzIiwiTWVyY2F0b3JDb29yZGluYXRlIiwiZnJvbUxuZ0xhdCIsImNvb3JkcyIsIm1pblgiLCJJbmZpbml0eSIsIm1pblkiLCJtYXhYIiwibWF4WSIsImRNYXgiLCJMTjIiLCJ0aWxlc0F0Wm9vbSIsIkNhbm9uaWNhbFRpbGVJRCIsImdldENvb3JkaW5hdGVzQ2VudGVyVGlsZUlEIiwidGlsZUNvb3JkcyIsImdldFRpbGVQb2ludCIsIl9yb3VuZCIsIl9ib3VuZHNBcnJheSIsIlJhc3RlckJvdW5kc0FycmF5IiwiZW1wbGFjZUJhY2siLCJib3VuZHNCdWZmZXIiLCJwcmVwYXJlIiwiY3JlYXRlVmVydGV4QnVmZmVyIiwicmFzdGVyQm91bmRzQXR0cmlidXRlcyIsIm1lbWJlcnMiLCJib3VuZHNTZWdtZW50cyIsIlNlZ21lbnRWZWN0b3IiLCJzaW1wbGVTZWdtZW50IiwiZXF1YWxzIiwiYnVja2V0cyIsIlZpZGVvU291cmNlIiwidXJscyIsImdldFZpZGVvIiwidmlkZW8iLCJsb29wIiwidHJpZ2dlclJlcGFpbnQiLCJwbGF5IiwicGF1c2UiLCJzZWVrIiwic2Vjb25kcyIsInNlZWthYmxlUmFuZ2UiLCJzZWVrYWJsZSIsInN0YXJ0IiwiVmFsaWRhdGlvbkVycm9yIiwiY3VycmVudFRpbWUiLCJyZWFkeVN0YXRlIiwicGF1c2VkIiwiQ2FudmFzU291cmNlIiwiYyIsImwiLCJhbmltYXRlIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIl9oYXNJbnZhbGlkRGltZW5zaW9ucyIsIl9wbGF5aW5nIiwiZ2V0Q2FudmFzIiwicHJlbXVsdGlwbHkiLCJpc05hTiIsInNvdXJjZVR5cGVzIiwidmVjdG9yIiwicmFzdGVyIiwicmFzdGVyLWRlbSIsInJhc3RlckRlbSIsImdlb2pzb24iLCJnZXRQaXhlbFBvc01hdHJpeCIsInRyYW5zZm9ybSIsIm1hdDQiLCJjYWxjdWxhdGVQb3NNYXRyaXgiLCJ0b1Vud3JhcHBlZCIsInF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyIsInNvdXJjZUNhY2hlIiwic3R5bGVMYXllcnMiLCJzZXJpYWxpemVkTGF5ZXJzIiwicXVlcnlHZW9tZXRyeSIsImhhczNETGF5ZXIiLCJsYXllcnMiLCJzb3VyY2VJRCIsInF1ZXJ5SW5jbHVkZXMzRExheWVyIiwibWF4UGl0Y2hTY2FsZUZhY3RvciIsInRpbGVzSW4iLCJzb3J0Iiwic29ydFRpbGVzSW4iLCJyZW5kZXJlZEZlYXR1cmVMYXllcnMiLCJ0aWxlSW4iLCJ3cmFwcGVkVGlsZUlEIiwid3JhcHBlZCIsInF1ZXJ5UmVzdWx0cyIsIl9zdGF0ZSIsImNhbWVyYVF1ZXJ5R2VvbWV0cnkiLCJ3cmFwcGVkSURMYXllck1hcCIsIndyYXBwZWRJRCIsIndyYXBwZWRJRExheWVycyIsImxheWVySUQiLCJ0aWxlRmVhdHVyZXMiLCJ3cmFwcGVkSURGZWF0dXJlcyIsInJlc3VsdEZlYXR1cmVzIiwidGlsZUZlYXR1cmUiLCJmZWF0dXJlSW5kZXgiLCJtZXJnZVJlbmRlcmVkRmVhdHVyZUxheWVycyIsImZlYXR1cmVXcmFwcGVyIiwiZmVhdHVyZSIsImdldEZlYXR1cmVTdGF0ZSIsInNvdXJjZUxheWVyIiwiaWRBIiwiaWRCIiwiVGlsZUNhY2hlIiwicmVzZXQiLCJyZW1vdmVkRGF0YSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJvcmRlciIsImFkZCIsImV4cGlyeVRpbWVvdXQiLCJkYXRhV3JhcHBlciIsIl9nZXRBbmRSZW1vdmVCeUtleSIsImhhcyIsImdldEFuZFJlbW92ZSIsInNoaWZ0IiwiZ2V0QnlLZXkiLCJkYXRhSW5kZXgiLCJzZXRNYXhTaXplIiwiZmlsdGVyRm4iLCJyZW1vdmVkIiwiciIsIkluZGV4QnVmZmVyIiwiYXJyYXkiLCJkeW5hbWljRHJhdyIsImNyZWF0ZUJ1ZmZlciIsInVuYmluZFZBTyIsImJpbmRFbGVtZW50QnVmZmVyIiwic2V0IiwiYnVmZmVyRGF0YSIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiYXJyYXlCdWZmZXIiLCJEWU5BTUlDX0RSQVciLCJTVEFUSUNfRFJBVyIsInVwZGF0ZURhdGEiLCJidWZmZXJTdWJEYXRhIiwiZGVsZXRlQnVmZmVyIiwiQXR0cmlidXRlVHlwZSIsIkludDgiLCJVaW50OCIsIkludDE2IiwiVWludDE2IiwiSW50MzIiLCJVaW50MzIiLCJGbG9hdDMyIiwiVmVydGV4QnVmZmVyIiwiaXRlbVNpemUiLCJieXRlc1BlckVsZW1lbnQiLCJiaW5kVmVydGV4QnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiZW5hYmxlQXR0cmlidXRlcyIsInByb2dyYW0iLCJqIiwiYXR0cmliSW5kZXgiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInNldFZlcnRleEF0dHJpYlBvaW50ZXJzIiwidmVydGV4T2Zmc2V0IiwibWVtYmVyIiwidmVydGV4QXR0cmliUG9pbnRlciIsImNvbXBvbmVudHMiLCJCYXNlVmFsdWUiLCJkZWZhdWx0IiwiZ2V0RGVmYXVsdCIsImN1cnJlbnQiLCJzZXREZWZhdWx0IiwiQ2xlYXJDb2xvciIsIkNvbG9yIiwidHJhbnNwYXJlbnQiLCJnIiwiY2xlYXJDb2xvciIsIkNsZWFyRGVwdGgiLCJjbGVhckRlcHRoIiwiQ2xlYXJTdGVuY2lsIiwiY2xlYXJTdGVuY2lsIiwiQ29sb3JNYXNrIiwiY29sb3JNYXNrIiwiRGVwdGhNYXNrIiwiZGVwdGhNYXNrIiwiU3RlbmNpbE1hc2siLCJzdGVuY2lsTWFzayIsIlN0ZW5jaWxGdW5jIiwiZnVuYyIsIkFMV0FZUyIsInJlZiIsIm1hc2siLCJzdGVuY2lsRnVuYyIsIlN0ZW5jaWxPcCIsIktFRVAiLCJzdGVuY2lsT3AiLCJTdGVuY2lsVGVzdCIsImVuYWJsZSIsIlNURU5DSUxfVEVTVCIsImRpc2FibGUiLCJEZXB0aFJhbmdlIiwiZGVwdGhSYW5nZSIsIkRlcHRoVGVzdCIsIkRFUFRIX1RFU1QiLCJEZXB0aEZ1bmMiLCJMRVNTIiwiZGVwdGhGdW5jIiwiQmxlbmQiLCJCTEVORCIsIkJsZW5kRnVuYyIsIk9ORSIsIlpFUk8iLCJibGVuZEZ1bmMiLCJCbGVuZENvbG9yIiwiYmxlbmRDb2xvciIsIkJsZW5kRXF1YXRpb24iLCJGVU5DX0FERCIsImJsZW5kRXF1YXRpb24iLCJDdWxsRmFjZSIsIkNVTExfRkFDRSIsIkN1bGxGYWNlU2lkZSIsIkJBQ0siLCJjdWxsRmFjZSIsIkZyb250RmFjZSIsIkNDVyIsImZyb250RmFjZSIsIlByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiQWN0aXZlVGV4dHVyZVVuaXQiLCJURVhUVVJFMCIsImFjdGl2ZVRleHR1cmUiLCJWaWV3cG9ydCIsImRyYXdpbmdCdWZmZXJXaWR0aCIsImRyYXdpbmdCdWZmZXJIZWlnaHQiLCJ2aWV3cG9ydCIsIkJpbmRGcmFtZWJ1ZmZlciIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiQmluZFJlbmRlcmJ1ZmZlciIsImJpbmRSZW5kZXJidWZmZXIiLCJSRU5ERVJCVUZGRVIiLCJCaW5kVGV4dHVyZSIsIkJpbmRWZXJ0ZXhCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQmluZEVsZW1lbnRCdWZmZXIiLCJCaW5kVmVydGV4QXJyYXlPRVMiLCJ2YW8iLCJleHRWZXJ0ZXhBcnJheU9iamVjdCIsImJpbmRWZXJ0ZXhBcnJheU9FUyIsIlBpeGVsU3RvcmVVbnBhY2siLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19BTElHTk1FTlQiLCJQaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsIlBpeGVsU3RvcmVVbnBhY2tGbGlwWSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJGcmFtZWJ1ZmZlckF0dGFjaG1lbnQiLCJDb2xvckF0dGFjaG1lbnQiLCJzZXREaXJ0eSIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJEZXB0aEF0dGFjaG1lbnQiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsIkRFUFRIX0FUVEFDSE1FTlQiLCJGcmFtZWJ1ZmZlciIsImhhc0RlcHRoIiwiZnJhbWVidWZmZXIiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImNvbG9yQXR0YWNobWVudCIsImRlcHRoQXR0YWNobWVudCIsImRlbGV0ZVRleHR1cmUiLCJyZW5kZXJidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJkZWxldGVGcmFtZWJ1ZmZlciIsIkRlcHRoTW9kZSIsIlJlYWRPbmx5IiwiUmVhZFdyaXRlIiwiZGlzYWJsZWQiLCJTdGVuY2lsTW9kZSIsImZhaWwiLCJkZXB0aEZhaWwiLCJwYXNzIiwiQ29sb3JNb2RlIiwiYmxlbmRGdW5jdGlvbiIsIlJlcGxhY2UiLCJ1bmJsZW5kZWQiLCJhbHBoYUJsZW5kZWQiLCJDdWxsRmFjZU1vZGUiLCJtb2RlIiwiYmFja0NDVyIsIkNvbnRleHQiLCJnZXRFeHRlbnNpb24iLCJzdGVuY2lsVGVzdCIsImRlcHRoVGVzdCIsImJsZW5kIiwiY3VsbEZhY2VTaWRlIiwicGl4ZWxTdG9yZVVucGFjayIsInBpeGVsU3RvcmVVbnBhY2tQcmVtdWx0aXBseUFscGhhIiwicGl4ZWxTdG9yZVVucGFja0ZsaXBZIiwiZ2V0UGFyYW1ldGVyIiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiZXh0VGV4dHVyZUhhbGZGbG9hdCIsImV4dFJlbmRlclRvVGV4dHVyZUhhbGZGbG9hdCIsImV4dFRpbWVyUXVlcnkiLCJtYXhUZXh0dXJlU2l6ZSIsIk1BWF9URVhUVVJFX1NJWkUiLCJjcmVhdGVJbmRleEJ1ZmZlciIsImNyZWF0ZVJlbmRlcmJ1ZmZlciIsInN0b3JhZ2VGb3JtYXQiLCJyYm8iLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsInNldEN1bGxGYWNlIiwiY3VsbEZhY2VNb2RlIiwic2V0RGVwdGhNb2RlIiwiZGVwdGhNb2RlIiwic2V0U3RlbmNpbE1vZGUiLCJzdGVuY2lsTW9kZSIsInNldENvbG9yTW9kZSIsImNvbG9yTW9kZSIsImRlZXBFcXVhbCIsIlNvdXJjZUNhY2hlIiwib24iLCJfc291cmNlTG9hZGVkIiwiX3BhdXNlZCIsInJlbG9hZCIsIl9zb3VyY2VFcnJvcmVkIiwiX3NvdXJjZSIsImJpbmRBbGwiLCJjcmVhdGVTb3VyY2UiLCJfdGlsZXMiLCJfY2FjaGUiLCJfdW5sb2FkVGlsZSIsIl90aW1lcnMiLCJfY2FjaGVUaW1lcnMiLCJfbWF4VGlsZUNhY2hlU2l6ZSIsIl9sb2FkZWRQYXJlbnRUaWxlcyIsIl9jb3ZlcmVkVGlsZXMiLCJTb3VyY2VGZWF0dXJlU3RhdGUiLCJnZXRTb3VyY2UiLCJyZXN1bWUiLCJzaG91bGRSZWxvYWQiLCJfc2hvdWxkUmVsb2FkT25SZXN1bWUiLCJfbG9hZFRpbGUiLCJfYWJvcnRUaWxlIiwiY29hbGVzY2VDaGFuZ2VzIiwidXBsb2FkIiwiaW1hZ2VNYW5hZ2VyIiwiZ2V0SWRzIiwidmFsdWVzIiwiY29tcGFyZVRpbGVJZCIsImdldFJlbmRlcmFibGVJZHMiLCJzeW1ib2xMYXllciIsInJlbmRlcmFibGVzIiwiX2lzSWRSZW5kZXJhYmxlIiwiYV8iLCJiXyIsInJvdGF0ZWRBIiwiX3JvdGF0ZSIsImFuZ2xlIiwicm90YXRlZEIiLCJoYXNSZW5kZXJhYmxlUGFyZW50IiwicGFyZW50VGlsZSIsImZpbmRMb2FkZWRQYXJlbnQiLCJoYXNEYXRhIiwiaG9sZGluZ0ZvckZhZGUiLCJfcmVsb2FkVGlsZSIsIl90aWxlTG9hZGVkIiwicHJldmlvdXNTdGF0ZSIsInRpbWVBZGRlZCIsIm5vdyIsInJlZnJlc2hlZFVwb25FeHBpcmF0aW9uIiwiX3NldFRpbGVSZWxvYWRUaW1lciIsIl9iYWNrZmlsbERFTSIsImluaXRpYWxpemVUaWxlU3RhdGUiLCJib3JkZXJJZCIsImJvcmRlclRpbGUiLCJnZXRUaWxlQnlJRCIsImZpbGxCb3JkZXIiLCJkeCIsImR5IiwiYmFja2ZpbGxCb3JkZXIiLCJnZXRUaWxlIiwiX3JldGFpbkxvYWRlZENoaWxkcmVuIiwiaWRlYWxUaWxlcyIsIm1heENvdmVyaW5nWm9vbSIsInJldGFpbiIsInRvcG1vc3RMb2FkZWRJRCIsInBhcmVudElEIiwic2NhbGVkVG8iLCJtaW5Db3ZlcmluZ1pvb20iLCJwYXJlbnRUaWxlSUQiLCJfZ2V0TG9hZGVkVGlsZSIsInVwZGF0ZUNhY2hlU2l6ZSIsIndpZHRoSW5UaWxlcyIsImhlaWdodEluVGlsZXMiLCJ2aWV3RGVwZW5kZW50TWF4U2l6ZSIsIm1heFNpemUiLCJoYW5kbGVXcmFwSnVtcCIsImxuZyIsIndyYXBEZWx0YSIsIl9wcmV2TG5nIiwidW53cmFwVG8iLCJpZGVhbFRpbGVJRHMiLCJjZW50ZXIiLCJ1c2VkIiwiZ2V0VmlzaWJsZVVud3JhcHBlZENvb3JkaW5hdGVzIiwidW53cmFwcGVkIiwiY292ZXJpbmdUaWxlcyIsImNvdmVyaW5nWm9vbUxldmVsIiwibWF4T3Zlcnpvb21pbmciLCJtYXhVbmRlcnpvb21pbmciLCJfdXBkYXRlUmV0YWluZWRUaWxlcyIsImlzUmFzdGVyVHlwZSIsInBhcmVudHNGb3JGYWRpbmciLCJmYWRpbmdUaWxlcyIsImZhZGVFbmRUaW1lIiwiX2FkZFRpbGUiLCJyZXRhaW5lZElkIiwiY2xlYXJGYWRlSG9sZCIsImtleXNEaWZmZXJlbmNlIiwiaGFzU3ltYm9sQnVja2V0cyIsInNldEhvbGREdXJhdGlvbiIsIl9mYWRlRHVyYXRpb24iLCJzeW1ib2xGYWRlRmluaXNoZWQiLCJfcmVtb3ZlVGlsZSIsIl91cGRhdGVMb2FkZWRQYXJlbnRUaWxlQ2FjaGUiLCJyZWxlYXNlU3ltYm9sRmFkZVRpbGVzIiwiY2hlY2tlZCIsIm1pc3NpbmdUaWxlcyIsImNoaWxkQ29vcmQiLCJjaGlsZHJlbiIsImNoaWxkVGlsZSIsInBhcmVudFdhc1JlcXVlc3RlZCIsIndhc1JlcXVlc3RlZCIsInBhcmVudElkIiwidGlsZUtleSIsInBhdGgiLCJjdXJyZW50SWQiLCJjYWNoZWQiLCJ1c2VzIiwiZ2V0RXhwaXJ5VGltZW91dCIsInBvaW50UXVlcnlHZW9tZXRyeSIsInRpbGVSZXN1bHRzIiwiY2FtZXJhUG9pbnRRdWVyeUdlb21ldHJ5IiwiZ2V0Q2FtZXJhUXVlcnlHZW9tZXRyeSIsInAiLCJwb2ludENvb3JkaW5hdGUiLCJxdWVyeVBhZGRpbmciLCJ0aWxlU3BhY2VCb3VuZHMiLCJ0aWxlU3BhY2VRdWVyeUdlb21ldHJ5IiwidGlsZVNwYWNlQ2FtZXJhUXVlcnlHZW9tZXRyeSIsImdldFZpc2libGVDb29yZGluYXRlcyIsInBvc01hdHJpeCIsInNldEZlYXR1cmVTdGF0ZSIsImZlYXR1cmVJZCIsInVwZGF0ZVN0YXRlIiwicmVtb3ZlRmVhdHVyZVN0YXRlIiwiZ2V0U3RhdGUiLCJzZXREZXBlbmRlbmNpZXMiLCJuYW1lc3BhY2UiLCJkZXBlbmRlbmNpZXMiLCJyZWxvYWRUaWxlc0ZvckRlcGVuZGVuY2llcyIsIm5hbWVzcGFjZXMiLCJoYXNEZXBlbmRlbmN5IiwiYVdyYXAiLCJiV3JhcCIsIndvcmtlclVybCIsIlBSRUxPQURfUE9PTF9JRCIsIldvcmtlclBvb2wiLCJhY3RpdmUiLCJtYXBJZCIsIndvcmtlckNvdW50IiwiV2ViV29ya2VyIiwibnVtQWN0aXZlIiwiaXNQcmVsb2FkZWQiLCJnbG9iYWxXb3JrZXJQb29sIiwiYXZhaWxhYmxlTG9naWNhbFByb2Nlc3NvcnMiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwiZ2V0R2xvYmFsV29ya2VyUG9vbCIsImRlcmVmIiwicmVmUHJvcGVydGllcyIsImRlcmVmTGF5ZXJzIiwib3BlcmF0aW9ucyIsInNldFN0eWxlIiwiYWRkTGF5ZXIiLCJyZW1vdmVMYXllciIsInNldFBhaW50UHJvcGVydHkiLCJzZXRMYXlvdXRQcm9wZXJ0eSIsInNldEZpbHRlciIsImFkZFNvdXJjZSIsInJlbW92ZVNvdXJjZSIsInNldEdlb0pTT05Tb3VyY2VEYXRhIiwic2V0TGF5ZXJab29tUmFuZ2UiLCJzZXRMYXllclByb3BlcnR5Iiwic2V0Q2VudGVyIiwic2V0Wm9vbSIsInNldEJlYXJpbmciLCJzZXRQaXRjaCIsInNldFNwcml0ZSIsInNldEdseXBocyIsInNvdXJjZUlkIiwiYWZ0ZXIiLCJjb21tYW5kcyIsImNvbW1hbmQiLCJhcmdzIiwic291cmNlc1JlbW92ZWQiLCJ1cGRhdGVTb3VyY2UiLCJjYW5VcGRhdGVHZW9KU09OIiwiYmVmb3JlIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiaXNFcXVhbCIsImRpZmZMYXllclByb3BlcnR5Q2hhbmdlcyIsImxheWVySWQiLCJrbGFzcyIsInBsdWNrSWQiLCJpbmRleEJ5SWQiLCJncm91cCIsIlBhdGhJbnRlcnBvbGF0b3IiLCJwb2ludHNfIiwicGFkZGluZ18iLCJfZGlzdGFuY2VzIiwiZGlzdCIsInBhZGRlZExlbmd0aCIsImxlcnAiLCJjbGFtcCIsImN1cnJlbnRJbmRleCIsImRpc3RPZkN1cnJlbnRJZHgiLCJkaXN0VG9UYXJnZXQiLCJpZHhPZlByZXZQb2ludCIsImRpc3RPZlByZXZJZHgiLCJzZWdtZW50TGVuZ3RoIiwic2VnbWVudFQiLCJtdWx0IiwiR3JpZEluZGV4IiwiY2VsbFNpemUiLCJib3hDZWxscyIsImNpcmNsZUNlbGxzIiwieENlbGxDb3VudCIsInlDZWxsQ291bnQiLCJjaXJjbGVLZXlzIiwiYm94S2V5cyIsImJib3hlcyIsImNpcmNsZXMiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJib3hVaWQiLCJjaXJjbGVVaWQiLCJnZXRMYWJlbFBsYW5lTWF0cml4IiwicGl0Y2hXaXRoTWFwIiwicm90YXRlV2l0aE1hcCIsInBpeGVsc1RvVGlsZVVuaXRzIiwibSIsImxhYmVsUGxhbmVNYXRyaXgiLCJnZXRHbENvb3JkTWF0cml4IiwiZ2xDb29yZE1hdHJpeCIsInByb2plY3QiLCJwb2ludCIsIm1hdHJpeCIsInBvcyIsInh5VHJhbnNmb3JtTWF0NCIsInNpZ25lZERpc3RhbmNlRnJvbUNhbWVyYSIsImdldFBlcnNwZWN0aXZlUmF0aW8iLCJjYW1lcmFUb0NlbnRlckRpc3RhbmNlIiwiaXNWaXNpYmxlIiwiYW5jaG9yUG9zIiwiY2xpcHBpbmdCdWZmZXIiLCJ1cGRhdGVMaW5lTGFiZWxzIiwiYnVja2V0IiwiaXNUZXh0Iiwia2VlcFVwcmlnaHQiLCJzaXplRGF0YSIsInRleHRTaXplRGF0YSIsImljb25TaXplRGF0YSIsInBhcnRpYWxseUV2YWx1YXRlZFNpemUiLCJzeW1ib2xTaXplIiwiZHluYW1pY0xheW91dFZlcnRleEFycmF5IiwidGV4dCIsImljb24iLCJsaW5lVmVydGV4QXJyYXkiLCJwbGFjZWRTeW1ib2xzIiwicGxhY2VkU3ltYm9sQXJyYXkiLCJhc3BlY3RSYXRpbyIsInVzZVZlcnRpY2FsIiwic3ltYm9sIiwiaGlkZGVuIiwid3JpdGluZ01vZGUiLCJXcml0aW5nTW9kZSIsInZlcnRpY2FsIiwiaGlkZUdseXBocyIsIm51bUdseXBocyIsImFuY2hvclgiLCJhbmNob3JZIiwidmVjNCIsInBlcnNwZWN0aXZlUmF0aW8iLCJwaXRjaFNjYWxlZEZvbnRTaXplIiwidGlsZUFuY2hvclBvaW50IiwiYW5jaG9yUG9pbnQiLCJwcm9qZWN0aW9uQ2FjaGUiLCJwbGFjZVVuZmxpcHBlZCIsInBsYWNlR2x5cGhzQWxvbmdMaW5lIiwiZ2x5cGhPZmZzZXRBcnJheSIsIm5vdEVub3VnaFJvb20iLCJuZWVkc0ZsaXBwaW5nIiwiZHluYW1pY0xheW91dFZlcnRleEJ1ZmZlciIsInBsYWNlRmlyc3RBbmRMYXN0R2x5cGgiLCJmb250U2NhbGUiLCJsaW5lT2Zmc2V0WCIsImxpbmVPZmZzZXRZIiwiZmxpcCIsImdseXBoRW5kSW5kZXgiLCJnbHlwaFN0YXJ0SW5kZXgiLCJsaW5lU3RhcnRJbmRleCIsImxpbmVFbmRJbmRleCIsImxpbmVMZW5ndGgiLCJmaXJzdEdseXBoT2Zmc2V0IiwiZ2V0b2Zmc2V0WCIsImxhc3RHbHlwaE9mZnNldCIsImZpcnN0UGxhY2VkR2x5cGgiLCJwbGFjZUdseXBoQWxvbmdMaW5lIiwic2VnbWVudCIsImxhc3RQbGFjZWRHbHlwaCIsInJlcXVpcmVzT3JpZW50YXRpb25DaGFuZ2UiLCJmaXJzdFBvaW50IiwibGFzdFBvaW50IiwiaG9yaXpvbnRhbCIsInBsYWNlZEdseXBocyIsImZpcnN0QW5kTGFzdEdseXBoIiwib3JpZW50YXRpb25DaGFuZ2UiLCJnbHlwaEluZGV4IiwidGlsZVZlcnRleEluZGV4IiwidGlsZVNlZ21lbnRFbmQiLCJnZXR4IiwiZ2V0eSIsInByb2plY3RlZFZlcnRleCIsInByb2plY3RUcnVuY2F0ZWRMaW5lU2VnbWVudCIsInNpbmdsZUdseXBoIiwiYWRkRHluYW1pY0F0dHJpYnV0ZXMiLCJwcmV2aW91c1RpbGVQb2ludCIsImN1cnJlbnRUaWxlUG9pbnQiLCJwcmV2aW91c1Byb2plY3RlZFBvaW50IiwibWluaW11bUxlbmd0aCIsInByb2plY3Rpb25NYXRyaXgiLCJwcm9qZWN0ZWRVbml0VmVydGV4Iiwic3ViIiwiX3VuaXQiLCJwcm9qZWN0ZWRVbml0U2VnbWVudCIsIl9tdWx0IiwibWFnIiwib2Zmc2V0WCIsImFuY2hvclNlZ21lbnQiLCJjb21iaW5lZE9mZnNldFgiLCJkaXIiLCJQSSIsInByZXYiLCJkaXN0YW5jZVRvUHJldiIsImN1cnJlbnRTZWdtZW50RGlzdGFuY2UiLCJhYnNPZmZzZXRYIiwicGF0aFZlcnRpY2VzIiwiY3VycmVudFZlcnRleCIsInByb2plY3Rpb24iLCJwcmV2aW91c0xpbmVWZXJ0ZXhJbmRleCIsInNlZ21lbnRJbnRlcnBvbGF0aW9uVCIsInByZXZUb0N1cnJlbnQiLCJfYWRkIiwiX3BlcnAiLCJzZWdtZW50QW5nbGUiLCJhdGFuMiIsImtleXNMZW5ndGgiLCJpbnNlcnQiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIl9mb3JFYWNoQ2VsbCIsIl9pbnNlcnRCb3hDZWxsIiwiaW5zZXJ0Q2lyY2xlIiwiX2luc2VydENpcmNsZUNlbGwiLCJjZWxsSW5kZXgiLCJfcXVlcnkiLCJoaXRUZXN0IiwicHJlZGljYXRlIiwiX3F1ZXJ5Q2VsbCIsInNlZW5VaWRzIiwiYm94IiwiY2lyY2xlIiwiX3F1ZXJ5Q2lyY2xlIiwiX3F1ZXJ5Q2VsbENpcmNsZSIsInF1ZXJ5IiwiaGl0VGVzdENpcmNsZSIsInF1ZXJ5QXJncyIsImJveENlbGwiLCJjaXJjbGVDZWxsIiwiX2NpcmNsZUFuZFJlY3RDb2xsaWRlIiwiX2NpcmNsZXNDb2xsaWRlIiwiZm4iLCJhcmcxIiwiYXJnMiIsImN4MSIsIl9jb252ZXJ0VG9YQ2VsbENvb3JkIiwiY3kxIiwiX2NvbnZlcnRUb1lDZWxsQ29vcmQiLCJjeDIiLCJjeTIiLCJyMSIsInIyIiwiYm90aFJhZGlpIiwiY2lyY2xlWCIsImNpcmNsZVkiLCJoYWxmUmVjdFdpZHRoIiwiZGlzdFgiLCJoYWxmUmVjdEhlaWdodCIsImRpc3RZIiwiaGlkZGVuR2x5cGhBdHRyaWJ1dGVzIiwiRmxvYXQzMkFycmF5IiwibnVtIiwiZmxvYXQzMiIsIm91dCIsIkNvbGxpc2lvbkluZGV4IiwiZ3JpZCIsImlnbm9yZWRHcmlkIiwiR3JpZCIsInBpdGNoZmFjdG9yIiwiY29zIiwiX3BpdGNoIiwic2NyZWVuUmlnaHRCb3VuZGFyeSIsInNjcmVlbkJvdHRvbUJvdW5kYXJ5IiwiZ3JpZFJpZ2h0Qm91bmRhcnkiLCJncmlkQm90dG9tQm91bmRhcnkiLCJwaXhlbFZhbHVlIiwicGxhY2VDb2xsaXNpb25Cb3giLCJjb2xsaXNpb25Cb3giLCJhbGxvd092ZXJsYXAiLCJ0ZXh0UGl4ZWxSYXRpbyIsImNvbGxpc2lvbkdyb3VwUHJlZGljYXRlIiwicHJvamVjdGVkUG9pbnQiLCJwcm9qZWN0QW5kR2V0UGVyc3BlY3RpdmVSYXRpbyIsImFuY2hvclBvaW50WCIsImFuY2hvclBvaW50WSIsInRpbGVUb1ZpZXdwb3J0IiwidGxYIiwidGxZIiwiYnJYIiwiYnJZIiwiaXNJbnNpZGVHcmlkIiwib2Zmc2NyZWVuIiwiaXNPZmZzY3JlZW4iLCJwbGFjZUNvbGxpc2lvbkNpcmNsZXMiLCJsYWJlbFRvU2NyZWVuTWF0cml4Iiwic2hvd0NvbGxpc2lvbkNpcmNsZXMiLCJjaXJjbGVQaXhlbERpYW1ldGVyIiwidGV4dFBpeGVsUGFkZGluZyIsInBsYWNlZENvbGxpc2lvbkNpcmNsZXMiLCJ0aWxlVW5pdEFuY2hvclBvaW50Iiwic2NyZWVuQW5jaG9yUG9pbnQiLCJsYWJlbFBsYW5lRm9udFNjYWxlIiwiT05FX0VNIiwibGFiZWxQbGFuZUFuY2hvclBvaW50IiwiY29sbGlzaW9uRGV0ZWN0ZWQiLCJpbkdyaWQiLCJlbnRpcmVseU9mZnNjcmVlbiIsInNjcmVlblBsYW5lTWluIiwic2NyZWVuUGxhbmVNYXgiLCJpbnRlcnBvbGF0b3IiLCJwcm9qZWN0ZWRQYXRoIiwiY2lyY2xlRGlzdCIsInNjcmVlblNwYWNlUGF0aCIsInNlZ21lbnRzIiwibWluUG9pbnQiLCJtYXhQb2ludCIsImNsaXBMaW5lIiwibnVtQ2lyY2xlcyIsImNpcmNsZVBvc2l0aW9uIiwiY2VudGVyWCIsImNlbnRlclkiLCJxdWVyeVJlbmRlcmVkU3ltYm9scyIsInZpZXdwb3J0UXVlcnlHZW9tZXRyeSIsImdyaWRQb2ludCIsInNlZW5GZWF0dXJlcyIsImNvbmNhdCIsImZlYXR1cmVLZXkiLCJidWNrZXRJbnN0YW5jZUlkIiwiYmJveCIsImludGVyc2VjdGlvblRlc3RzIiwiaW5zZXJ0Q29sbGlzaW9uQm94IiwiaWdub3JlUGxhY2VtZW50IiwiY29sbGlzaW9uR3JvdXBJRCIsImluc2VydENvbGxpc2lvbkNpcmNsZXMiLCJjb2xsaXNpb25DaXJjbGVzIiwiZ2V0Vmlld3BvcnRNYXRyaXgiLCJPcGFjaXR5U3RhdGUiLCJwcmV2U3RhdGUiLCJpbmNyZW1lbnQiLCJwbGFjZWQiLCJza2lwRmFkZSIsIm9wYWNpdHkiLCJpc0hpZGRlbiIsIkpvaW50T3BhY2l0eVN0YXRlIiwicGxhY2VkVGV4dCIsInBsYWNlZEljb24iLCJKb2ludFBsYWNlbWVudCIsIkNvbGxpc2lvbkNpcmNsZUFycmF5IiwiaW52UHJvak1hdHJpeCIsInZpZXdwb3J0TWF0cml4IiwiUmV0YWluZWRRdWVyeURhdGEiLCJzb3VyY2VMYXllckluZGV4IiwiYnVja2V0SW5kZXgiLCJDb2xsaXNpb25Hcm91cHMiLCJjcm9zc1NvdXJjZUNvbGxpc2lvbnMiLCJtYXhHcm91cElEIiwiY29sbGlzaW9uR3JvdXBzIiwiY2FsY3VsYXRlVmFyaWFibGVMYXlvdXRTaGlmdCIsInRleHRPZmZzZXQiLCJ0ZXh0Qm94U2NhbGUiLCJnZXRBbmNob3JBbGlnbm1lbnQiLCJzaGlmdFgiLCJzaGlmdFkiLCJldmFsdWF0ZVZhcmlhYmxlT2Zmc2V0Iiwic2hpZnRWYXJpYWJsZUNvbGxpc2lvbkJveCIsInJvdGF0ZWRPZmZzZXQiLCJJRCIsIm5leHRHcm91cElEIiwiUGxhY2VtZW50IiwiZmFkZUR1cmF0aW9uIiwicHJldlBsYWNlbWVudCIsImNvbGxpc2lvbkluZGV4IiwicGxhY2VtZW50cyIsIm9wYWNpdGllcyIsInZhcmlhYmxlT2Zmc2V0cyIsInN0YWxlIiwiY29tbWl0VGltZSIsInJldGFpbmVkUXVlcnlEYXRhIiwiY29sbGlzaW9uQ2lyY2xlQXJyYXlzIiwicGxhY2VkT3JpZW50YXRpb25zIiwidXBkYXRlQ29sbGlzaW9uVmVydGljZXMiLCJjb2xsaXNpb25WZXJ0ZXhBcnJheSIsIm5vdFVzZWQiLCJnZXRCdWNrZXRQYXJ0cyIsInJlc3VsdHMiLCJzdHlsZUxheWVyIiwic29ydEFjcm9zc1RpbGVzIiwic3ltYm9sQnVja2V0IiwiZ2V0QnVja2V0IiwiYnVja2V0RmVhdHVyZUluZGV4IiwibGF0ZXN0RmVhdHVyZUluZGV4IiwibGF5ZXJJZHMiLCJjb2xsaXNpb25Cb3hBcnJheSIsImxheW91dCIsInBpeGVsc1RvVGlsZXMiLCJ0ZXh0TGFiZWxQbGFuZU1hdHJpeCIsImdsTWF0cml4IiwicGFydGlhbGx5RXZhbHVhdGVkVGV4dFNpemUiLCJjb2xsaXNpb25Hcm91cCIsInNvcnRLZXlSYW5nZXMiLCJzeW1ib2xJbnN0YW5jZVN0YXJ0Iiwic3ltYm9sSW5zdGFuY2VFbmQiLCJzeW1ib2xJbnN0YW5jZXMiLCJhdHRlbXB0QW5jaG9yUGxhY2VtZW50IiwidGV4dEJveCIsInRleHRBbGxvd092ZXJsYXAiLCJzeW1ib2xJbnN0YW5jZSIsIm9yaWVudGF0aW9uIiwiaWNvbkJveCIsInByZXZBbmNob3IiLCJ0ZXh0T2Zmc2V0MCIsInRleHRPZmZzZXQxIiwicGxhY2VkR2x5cGhCb3hlcyIsImNyb3NzVGlsZUlEIiwibWFya1VzZWRKdXN0aWZpY2F0aW9uIiwiYWxsb3dWZXJ0aWNhbFBsYWNlbWVudCIsIm1hcmtVc2VkT3JpZW50YXRpb24iLCJwbGFjZUxheWVyQnVja2V0UGFydCIsImJ1Y2tldFBhcnQiLCJzZWVuQ3Jvc3NUaWxlSURzIiwidGV4dE9wdGlvbmFsIiwiaWNvbk9wdGlvbmFsIiwiaWNvbkFsbG93T3ZlcmxhcCIsImhhc0ljb25UZXh0Rml0Iiwiek9yZGVyQnlWaWV3cG9ydFkiLCJhbHdheXNTaG93VGV4dCIsImhhc0ljb25EYXRhIiwiYWx3YXlzU2hvd0ljb24iLCJoYXNUZXh0RGF0YSIsImNvbGxpc2lvbkFycmF5cyIsImRlc2VyaWFsaXplQ29sbGlzaW9uQm94ZXMiLCJwbGFjZVN5bWJvbCIsInBsYWNlVGV4dCIsInBsYWNlSWNvbiIsInBsYWNlZFZlcnRpY2FsVGV4dCIsInBsYWNlZEdseXBoQ2lyY2xlcyIsInBsYWNlZEljb25Cb3hlcyIsInRleHRGZWF0dXJlSW5kZXgiLCJ2ZXJ0aWNhbFRleHRGZWF0dXJlSW5kZXgiLCJpY29uRmVhdHVyZUluZGV4IiwidXNlUnVudGltZUNvbGxpc2lvbkNpcmNsZXMiLCJ1cGRhdGVQcmV2aW91c09yaWVudGF0aW9uSWZOb3RQbGFjZWQiLCJpc1BsYWNlZCIsInByZXZpb3VzT3JpZW50YXRpb24iLCJwcmV2UGxhY2VkT3JpZW50YXRpb24iLCJwbGFjZVRleHRGb3JQbGFjZW1lbnRNb2RlcyIsInBsYWNlSG9yaXpvbnRhbEZuIiwicGxhY2VWZXJ0aWNhbEZuIiwibnVtVmVydGljYWxHbHlwaFZlcnRpY2VzIiwidmVydGljYWxUZXh0Qm94Iiwid3JpdGluZ01vZGVzIiwiYW5jaG9ycyIsInByZXZPZmZzZXRzIiwidW5zaGlmdCIsInBsYWNlQm94Rm9yVmFyaWFibGVBbmNob3JzIiwiY29sbGlzaW9uVGV4dEJveCIsImNvbGxpc2lvbkljb25Cb3giLCJ2YXJpYWJsZUljb25Cb3giLCJwbGFjZWRCb3giLCJwbGFjZW1lbnRBdHRlbXB0cyIsInZlcnRpY2FsSWNvbkJveCIsInByZXZPcmllbnRhdGlvbiIsInByZXZPZmZzZXQiLCJwbGFjZUJveCIsInBsYWNlZEZlYXR1cmUiLCJwbGFjZWRTeW1ib2wiLCJjZW50ZXJKdXN0aWZpZWRUZXh0U3ltYm9sSW5kZXgiLCJjb2xsaXNpb25DaXJjbGVEaWFtZXRlciIsInBsYWNlSWNvbkZlYXR1cmUiLCJzaGlmdGVkSWNvbkJveCIsImljb25XaXRob3V0VGV4dCIsIm51bUhvcml6b250YWxHbHlwaFZlcnRpY2VzIiwidGV4dFdpdGhvdXRJY29uIiwibnVtSWNvblZlcnRpY2VzIiwiY2lyY2xlQXJyYXkiLCJqdXN0UmVsb2FkZWQiLCJzeW1ib2xJbmRleGVzIiwiZ2V0U29ydGVkU3ltYm9sSW5kZXhlcyIsInN5bWJvbEluZGV4IiwicGxhY2VkQW5jaG9yIiwiYXV0b0luZGV4IiwidmVydGljYWxQbGFjZWRUZXh0U3ltYm9sSW5kZXgiLCJsZWZ0SnVzdGlmaWVkVGV4dFN5bWJvbEluZGV4IiwicmlnaHRKdXN0aWZpZWRUZXh0U3ltYm9sSW5kZXgiLCJnZXRBbmNob3JKdXN0aWZpY2F0aW9uIiwiaG9yaXpvbnRhbE9ubHkiLCJwbGFjZWRPcmllbnRhdGlvbiIsImNvbW1pdCIsInpvb21BdExhc3RSZWNlbmN5Q2hlY2siLCJwbGFjZW1lbnRDaGFuZ2VkIiwicHJldlpvb21BZGp1c3RtZW50Iiwiem9vbUFkanVzdG1lbnQiLCJzeW1ib2xGYWRlQ2hhbmdlIiwicHJldk9wYWNpdGllcyIsInByZXZPcmllbnRhdGlvbnMiLCJqb2ludFBsYWNlbWVudCIsInByZXZPcGFjaXR5Iiwiam9pbnRPcGFjaXR5IiwibGFzdFBsYWNlbWVudENoYW5nZVRpbWUiLCJ1cGRhdGVMYXllck9wYWNpdGllcyIsInVwZGF0ZUJ1Y2tldE9wYWNpdGllcyIsIm9wYWNpdHlWZXJ0ZXhBcnJheSIsImhhc0ljb25Db2xsaXNpb25Cb3hEYXRhIiwiaWNvbkNvbGxpc2lvbkJveCIsImhhc1RleHRDb2xsaXNpb25Cb3hEYXRhIiwidGV4dENvbGxpc2lvbkJveCIsImR1cGxpY2F0ZU9wYWNpdHlTdGF0ZSIsInZhcmlhYmxlUGxhY2VtZW50IiwiZGVmYXVsdE9wYWNpdHlTdGF0ZSIsImFkZE9wYWNpdGllcyIsImljb25PclRleHQiLCJudW1WZXJ0aWNlcyIsIm9wYWNpdHlTdGF0ZSIsImhhc0ljb24iLCJob3Jpem9udGFsSGlkZGVuIiwidmVydGljYWxIaWRkZW4iLCJwYWNrZWRPcGFjaXR5IiwicGFja09wYWNpdHkiLCJQQUNLRURfSElEREVOX09QQUNJVFkiLCJzeW1ib2xIaWRkZW4iLCJ1c2VIb3Jpem9udGFsIiwidmVydGljYWxQbGFjZWRJY29uU3ltYm9sSW5kZXgiLCJwbGFjZWRJY29uU3ltYm9sSW5kZXgiLCJudW1WZXJ0aWNhbEljb25WZXJ0aWNlcyIsInZhcmlhYmxlT2Zmc2V0IiwidmVydGljYWxJY29uVXNlZCIsInNvcnRGZWF0dXJlcyIsImZlYXR1cmVTb3J0T3JkZXIiLCJvcGFjaXR5VmVydGV4QnVmZmVyIiwiY29sbGlzaW9uVmVydGV4QnVmZmVyIiwiaW5zdGFuY2UiLCJwbGFjZW1lbnRJbnZQcm9qTWF0cml4IiwicGxhY2VtZW50Vmlld3BvcnRNYXRyaXgiLCJjb2xsaXNpb25DaXJjbGVBcnJheSIsImhhc1RyYW5zaXRpb25zIiwic3RpbGxSZWNlbnQiLCJkdXJhdGlvbkFkanVzdG1lbnQiLCJzZXRTdGFsZSIsInNoaWZ0MjUiLCJzaGlmdDI0Iiwic2hpZnQxNyIsInNoaWZ0MTYiLCJzaGlmdDkiLCJzaGlmdDgiLCJzaGlmdDEiLCJ0YXJnZXRCaXQiLCJvcGFjaXR5Qml0cyIsIkxheWVyUGxhY2VtZW50IiwiX3NvcnRBY3Jvc3NUaWxlcyIsImNvbnN0YW50T3IiLCJfY3VycmVudFRpbGVJbmRleCIsIl9jdXJyZW50UGFydEluZGV4IiwiX3NlZW5Dcm9zc1RpbGVJRHMiLCJfYnVja2V0UGFydHMiLCJjb250aW51ZVBsYWNlbWVudCIsInBsYWNlbWVudCIsInNob3VsZFBhdXNlUGxhY2VtZW50IiwiYnVja2V0UGFydHMiLCJzb3J0S2V5IiwiUGF1c2VhYmxlUGxhY2VtZW50IiwiZm9yY2VGdWxsUGxhY2VtZW50IiwiX2N1cnJlbnRQbGFjZW1lbnRJbmRleCIsIl9mb3JjZUZ1bGxQbGFjZW1lbnQiLCJfc2hvd0NvbGxpc2lvbkJveGVzIiwiX2RvbmUiLCJpc0RvbmUiLCJsYXllclRpbGVzIiwic3RhcnRUaW1lIiwiZWxhcHNlZFRpbWUiLCJwbGFjZW1lbnRab29tIiwiX2luUHJvZ3Jlc3NMYXllciIsInJvdW5kaW5nRmFjdG9yIiwiVGlsZUxheWVySW5kZXgiLCJpbmRleGVkU3ltYm9sSW5zdGFuY2VzIiwiZ2V0U2NhbGVkQ29vcmRpbmF0ZXMiLCJjaGlsZFRpbGVJRCIsImZpbmRNYXRjaGVzIiwibmV3VGlsZUlEIiwiem9vbUNyb3NzVGlsZUlEcyIsImluZGV4ZWRJbnN0YW5jZXMiLCJzY2FsZWRTeW1ib2xDb29yZCIsInRoaXNUaWxlU3ltYm9sIiwiQ3Jvc3NUaWxlSURzIiwibWF4Q3Jvc3NUaWxlSUQiLCJnZW5lcmF0ZSIsIkNyb3NzVGlsZVN5bWJvbExheWVySW5kZXgiLCJpbmRleGVzIiwidXNlZENyb3NzVGlsZUlEcyIsInpvb21JbmRleGVzIiwibmV3Wm9vbUluZGV4IiwiYWRkQnVja2V0IiwiY3Jvc3NUaWxlSURzIiwicmVtb3ZlQnVja2V0Q3Jvc3NUaWxlSURzIiwiTnVtYmVyIiwiY2hpbGRJbmRleCIsImlzQ2hpbGRPZiIsInBhcmVudEluZGV4IiwicmVtb3ZlZEJ1Y2tldCIsInJlbW92ZVN0YWxlQnVja2V0cyIsImN1cnJlbnRJRHMiLCJ0aWxlc0NoYW5nZWQiLCJDcm9zc1RpbGVTeW1ib2xJbmRleCIsImxheWVySW5kZXhlcyIsIm1heEJ1Y2tldEluc3RhbmNlSWQiLCJidWNrZXRzSW5DdXJyZW50UGxhY2VtZW50IiwibGF5ZXJJbmRleCIsInN5bWJvbEJ1Y2tldHNDaGFuZ2VkIiwiY3VycmVudEJ1Y2tldElEcyIsInBydW5lVW51c2VkTGF5ZXJzIiwidXNlZExheWVycyIsInVzZWRMYXllck1hcCIsInVzZWRMYXllciIsImV2ZW50ZWQiLCJlcnJvcnMiLCJfZW1pdFZhbGlkYXRpb25FcnJvcnMiLCJlcnJvciIsImlkZW50aWZpZXIiLCJzdXBwb3J0ZWREaWZmT3BlcmF0aW9ucyIsImRpZmZPcGVyYXRpb25zIiwiaWdub3JlZERpZmZPcGVyYXRpb25zIiwiZW1wdHkiLCJsYXRlc3QiLCJzdHlsZUtleSIsInNwZWMiLCJyZXF1aXJlZCIsImVtcHR5U3R5bGUiLCJTdHlsZSIsImdldFdvcmtlclBvb2wiLCJnbHlwaE1hbmFnZXIiLCJsaW5lQXRsYXMiLCJjcm9zc1RpbGVTeW1ib2xJbmRleCIsIl9sYXllcnMiLCJfc2VyaWFsaXplZExheWVycyIsIl9vcmRlciIsInpvb21IaXN0b3J5IiwiWm9vbUhpc3RvcnkiLCJfYXZhaWxhYmxlSW1hZ2VzIiwiX3Jlc2V0VXBkYXRlcyIsImdldFJlZmVycmVyIiwic2VsZiIsIl9ydGxUZXh0UGx1Z2luQ2FsbGJhY2siLCJyZWdpc3RlckZvclBsdWdpblN0YXRlQ2hhbmdlIiwiZXZlbnQiLCJwbHVnaW5TdGF0dXMiLCJwbHVnaW5VUkwiLCJ0cmlnZ2VyUGx1Z2luQ29tcGxldGlvbkV2ZW50IiwiZWxlbSIsIl92YWxpZGF0ZUxheWVyIiwibG9hZFVSTCIsImlzTWFwYm94VVJMIiwibm9ybWFsaXplU3R5bGVVUkwiLCJhY2Nlc3NUb2tlbiIsIl9yZXF1ZXN0IiwianNvbiIsIl9sb2FkIiwibG9hZEpTT04iLCJsb2FkRW1wdHkiLCJzdHlsZXNoZWV0Iiwic291cmNlcyIsIl9sb2FkU3ByaXRlIiwiY3JlYXRlU3R5bGVMYXllciIsIl9zZXJpYWxpemVMYXllcnMiLCJfc3ByaXRlUmVxdWVzdCIsImJhc2VVUkwiLCJmb3JtYXQiLCJqc29uUmVxdWVzdCIsIm5vcm1hbGl6ZVNwcml0ZVVSTCIsIlNwcml0ZUpTT04iLCJtYXliZUNvbXBsZXRlIiwiaW1hZ2VSZXF1ZXN0IiwiU3ByaXRlSW1hZ2UiLCJsb2FkU3ByaXRlIiwiX3VwZGF0ZWRTb3VyY2VzIiwiX2NoZWNrTG9hZGVkIiwiY2hhbmdlZCIsIl9jaGFuZ2VkIiwidXBkYXRlZElkcyIsIl91cGRhdGVkTGF5ZXJzIiwicmVtb3ZlZElkcyIsIl9yZW1vdmVkTGF5ZXJzIiwiX3VwZGF0ZVdvcmtlckxheWVycyIsImFjdGlvbiIsIl9yZWxvYWRTb3VyY2UiLCJfY2xlYXJTb3VyY2UiLCJfdXBkYXRlVGlsZXNGb3JDaGFuZ2VkSW1hZ2VzIiwiX3VwZGF0ZWRQYWludFByb3BzIiwic291cmNlc1VzZWRCZWZvcmUiLCJjaGFuZ2VkSW1hZ2VzIiwiX2NoYW5nZWRJbWFnZXMiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImNoYW5nZXMiLCJiZWFyaW5nIiwicGl0Y2giLCJ0cmFuc2l0aW9uIiwicmVtb3ZlT3JBZGRTb3VyY2VDb21tYW5kcyIsImRpZmZTb3VyY2VzIiwiYmVmb3JlTGF5ZXJzIiwiYmVmb3JlTGF5ZXIiLCJhZnRlckxheWVyIiwiaW5zZXJ0QmVmb3JlTGF5ZXJJZCIsImJlZm9yZU9yZGVyIiwiYWZ0ZXJPcmRlciIsImJlZm9yZUluZGV4IiwiYWZ0ZXJJbmRleCIsInRyYWNrZXIiLCJjbGVhbiIsInBhaW50IiwiZGlmZkxheWVycyIsImNvbnNvbGUiLCJ3YXJuIiwiZGlmZlN0eWxlcyIsIm9wIiwidW5pbXBsZW1lbnRlZE9wcyIsImFwcGx5IiwiX2FmdGVySW1hZ2VVcGRhdGVkIiwiaXNTb3VyY2VMb2FkZWQiLCJsYXllck9iamVjdCIsImdldExheWVyIiwidmFsaWRhdGVDdXN0b21TdHlsZUxheWVyIiwiYXJyYXlJbmRleCIsIl9sYXllck9yZGVyQ2hhbmdlZCIsIl91cGRhdGVMYXllciIsIm1vdmVMYXllciIsIm5ld0luZGV4IiwiaGFzTGF5ZXIiLCJnZXRGaWx0ZXIiLCJnZXRMYXlvdXRQcm9wZXJ0eSIsImdldFBhaW50UHJvcGVydHkiLCJzb3VyY2VUeXBlIiwiZ2V0VHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiZGVsYXkiLCJmaWx0ZXJPYmplY3QiLCJtZXRhZGF0YSIsIm1hcE9iamVjdCIsIl9mbGF0dGVuQW5kU29ydFJlbmRlcmVkRmVhdHVyZXMiLCJzb3VyY2VSZXN1bHRzIiwiaXNMYXllcjNEIiwiZmVhdHVyZXMzRCIsImxheWVyRmVhdHVyZXMiLCJpbnRlcnNlY3Rpb25aIiwiZmVhdHVyZXMiLCJ0b3Btb3N0M0QiLCJwb3AiLCJpbmNsdWRlZFNvdXJjZXMiLCJhdmFpbGFibGVJbWFnZXMiLCJyZW5kZXJlZFN5bWJvbHMiLCJidWNrZXRRdWVyeURhdGEiLCJxdWVyeURhdGEiLCJidWNrZXRTeW1ib2xzIiwibG9va3VwU3ltYm9sRmVhdHVyZXMiLCJsYXllclN5bWJvbHMiLCJzb3J0ZWRBIiwibGF5ZXJOYW1lIiwicXVlcnlTb3VyY2VGZWF0dXJlcyIsImRhdGFUaWxlcyIsImRhdGFJRCIsImFkZFNvdXJjZVR5cGUiLCJTb3VyY2VUeXBlIiwiZ2V0U291cmNlVHlwZSIsInNldFNvdXJjZVR5cGUiLCJ3b3JrZXJTb3VyY2VVUkwiLCJfdXBkYXRlIiwiX3JlbW92ZSIsInJ0bFRleHRQbHVnaW5FdmVudGVkIiwib2ZmIiwiX3VwZGF0ZVNvdXJjZXMiLCJfZ2VuZXJhdGVDb2xsaXNpb25Cb3hlcyIsIl91cGRhdGVQbGFjZW1lbnQiLCJwbGFjZW1lbnRDb21taXR0ZWQiLCJpc0xlc3NUaGFuIiwibGF5ZXJCdWNrZXRzQ2hhbmdlZCIsInBhdXNlYWJsZVBsYWNlbWVudCIsIl9yZWxlYXNlU3ltYm9sRmFkZVRpbGVzIiwiaWNvbnMiLCJzdGFja3MiLCJnZXRSZXNvdXJjZSIsIm1ha2VSZXF1ZXN0IiwicHJlbHVkZSIsImNvbXBpbGUiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZFBhdHRlcm4iLCJjbGlwcGluZ01hc2siLCJoZWF0bWFwIiwiaGVhdG1hcFRleHR1cmUiLCJjb2xsaXNpb25DaXJjbGUiLCJkZWJ1ZyIsImZpbGwiLCJmaWxsT3V0bGluZSIsImZpbGxPdXRsaW5lUGF0dGVybiIsImZpbGxQYXR0ZXJuIiwiZmlsbEV4dHJ1c2lvbiIsImZpbGxFeHRydXNpb25QYXR0ZXJuIiwiaGlsbHNoYWRlUHJlcGFyZSIsImhpbGxzaGFkZSIsImxpbmUiLCJsaW5lR3JhZGllbnQiLCJsaW5lUGF0dGVybiIsImxpbmVTREYiLCJzeW1ib2xJY29uIiwic3ltYm9sU0RGIiwic3ltYm9sVGV4dEFuZEljb24iLCJmcmFnbWVudFNvdXJjZSIsInZlcnRleFNvdXJjZSIsInJlIiwic3RhdGljQXR0cmlidXRlcyIsIm1hdGNoIiwiZnJhZ21lbnRVbmlmb3JtcyIsInZlcnRleFVuaWZvcm1zIiwic3RhdGljVW5pZm9ybXMiLCJmcmFnbWVudFByYWdtYXMiLCJvcGVyYXRpb24iLCJwcmVjaXNpb24iLCJhdHRyVHlwZSIsInVucGFja1R5cGUiLCJWZXJ0ZXhBcnJheU9iamVjdCIsImJvdW5kUHJvZ3JhbSIsImJvdW5kTGF5b3V0VmVydGV4QnVmZmVyIiwiYm91bmRQYWludFZlcnRleEJ1ZmZlcnMiLCJib3VuZEluZGV4QnVmZmVyIiwiYm91bmRWZXJ0ZXhPZmZzZXQiLCJib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIiLCJnZXRUb2tlbml6ZWRBdHRyaWJ1dGVzQW5kVW5pZm9ybXMiLCJ0b2tlbiIsInNwbGl0IiwibGF5b3V0VmVydGV4QnVmZmVyIiwicGFpbnRWZXJ0ZXhCdWZmZXJzIiwiaW5kZXhCdWZmZXIiLCJkeW5hbWljVmVydGV4QnVmZmVyIiwiZHluYW1pY1ZlcnRleEJ1ZmZlcjIiLCJwYWludEJ1ZmZlcnNEaWZmZXIiLCJib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIyIiwiZnJlc2hCaW5kIiwibnVtUHJldkF0dHJpYnV0ZXMiLCJudW1OZXh0QXR0cmlidXRlcyIsIm51bUF0dHJpYnV0ZXMiLCJjcmVhdGVWZXJ0ZXhBcnJheU9FUyIsImN1cnJlbnROdW1BdHRyaWJ1dGVzIiwiZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QnVmZmVyIiwiZGVsZXRlVmVydGV4QXJyYXlPRVMiLCJjb25maWd1cmF0aW9uIiwiZml4ZWRVbmlmb3JtcyIsInNob3dPdmVyZHJhd0luc3BlY3RvciIsImNyZWF0ZVByb2dyYW0iLCJzdGF0aWNBdHRySW5mbyIsImR5bmFtaWNBdHRySW5mbyIsImdldEJpbmRlckF0dHJpYnV0ZXMiLCJhbGxBdHRySW5mbyIsInN0YXRpY1VuaWZvcm1zSW5mbyIsImR5bmFtaWNVbmlmb3Jtc0luZm8iLCJnZXRCaW5kZXJVbmlmb3JtcyIsImFsbFVuaWZvcm1zSW5mbyIsInVuaWZvcm0iLCJkZWZpbmVzIiwiZnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJmYWlsZWRUb0NyZWF0ZSIsImF0dGFjaFNoYWRlciIsInZlcnRleFNoYWRlciIsInVuaWZvcm1Mb2NhdGlvbnMiLCJiaW5kQXR0cmliTG9jYXRpb24iLCJsaW5rUHJvZ3JhbSIsImRlbGV0ZVNoYWRlciIsIml0IiwidW5pZm9ybUxvY2F0aW9uIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiYmluZGVyVW5pZm9ybXMiLCJnZXRVbmlmb3JtcyIsInBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwiY3Jvc3NmYWRlIiwidGlsZVJhdGlvIiwidGlsZVpvb20iLCJudW1UaWxlcyIsInRpbGVTaXplQXROZWFyZXN0Wm9vbSIsInBpeGVsWCIsInBpeGVsWSIsInVfaW1hZ2UiLCJ1X3RleHNpemUiLCJpbWFnZUF0bGFzVGV4dHVyZSIsInVfc2NhbGUiLCJmcm9tU2NhbGUiLCJ0b1NjYWxlIiwidV9mYWRlIiwidV9waXhlbF9jb29yZF91cHBlciIsInVfcGl4ZWxfY29vcmRfbG93ZXIiLCJkcmF3TW9kZSIsInVuaWZvcm1WYWx1ZXMiLCJjdXJyZW50UHJvcGVydGllcyIsImR5bmFtaWNMYXlvdXRCdWZmZXIiLCJkeW5hbWljTGF5b3V0QnVmZmVyMiIsInNldFVuaWZvcm1zIiwicHJpbWl0aXZlU2l6ZSIsIkxJTkVTIiwiVFJJQU5HTEVTIiwiTElORV9TVFJJUCIsInZhb3MiLCJnZXRQYWludFZlcnRleEJ1ZmZlcnMiLCJkcmF3RWxlbWVudHMiLCJwcmltaXRpdmVMZW5ndGgiLCJVTlNJR05FRF9TSE9SVCIsInByaW1pdGl2ZU9mZnNldCIsImZpbGxFeHRydXNpb25Vbmlmb3JtVmFsdWVzIiwic2hvdWxkVXNlVmVydGljYWxHcmFkaWVudCIsIl9scCIsImxpZ2h0UG9zIiwibGlnaHRNYXQiLCJtYXQzIiwidmVjMyIsImxpZ2h0Q29sb3IiLCJ1X21hdHJpeCIsInVfbGlnaHRwb3MiLCJ1X2xpZ2h0aW50ZW5zaXR5IiwidV9saWdodGNvbG9yIiwidV92ZXJ0aWNhbF9ncmFkaWVudCIsInVfb3BhY2l0eSIsImZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybVZhbHVlcyIsInVfaGVpZ2h0X2ZhY3RvciIsImZpbGxVbmlmb3JtVmFsdWVzIiwiZmlsbFBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwiZmlsbE91dGxpbmVVbmlmb3JtVmFsdWVzIiwiZHJhd2luZ0J1ZmZlclNpemUiLCJ1X3dvcmxkIiwiZmlsbE91dGxpbmVQYXR0ZXJuVW5pZm9ybVZhbHVlcyIsImNpcmNsZVVuaWZvcm1WYWx1ZXMiLCJleHRydWRlU2NhbGUiLCJwaXhlbHNUb0dMVW5pdHMiLCJ1X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UiLCJ1X3NjYWxlX3dpdGhfbWFwIiwidHJhbnNsYXRlUG9zTWF0cml4IiwidV9waXRjaF93aXRoX21hcCIsInVfZGV2aWNlX3BpeGVsX3JhdGlvIiwidV9leHRydWRlX3NjYWxlIiwiY29sbGlzaW9uVW5pZm9ybVZhbHVlcyIsInVfcGl4ZWxzX3RvX3RpbGVfdW5pdHMiLCJ1X292ZXJzY2FsZV9mYWN0b3IiLCJjb2xsaXNpb25DaXJjbGVVbmlmb3JtVmFsdWVzIiwiaW52TWF0cml4IiwidV9pbnZfbWF0cml4IiwidV92aWV3cG9ydF9zaXplIiwiZGVidWdVbmlmb3JtVmFsdWVzIiwic2NhbGVSYXRpbyIsInVfY29sb3IiLCJ1X292ZXJsYXkiLCJ1X292ZXJsYXlfc2NhbGUiLCJjbGlwcGluZ01hc2tVbmlmb3JtVmFsdWVzIiwiaGVhdG1hcFVuaWZvcm1WYWx1ZXMiLCJ1X2ludGVuc2l0eSIsImxpbmVVbmlmb3JtVmFsdWVzIiwiY2FsY3VsYXRlTWF0cml4IiwidV9yYXRpbyIsInVfdW5pdHNfdG9fcGl4ZWxzIiwibGluZUdyYWRpZW50VW5pZm9ybVZhbHVlcyIsImltYWdlSGVpZ2h0IiwidV9pbWFnZV9oZWlnaHQiLCJsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXMiLCJ0aWxlWm9vbVJhdGlvIiwiY2FsY3VsYXRlVGlsZVJhdGlvIiwibGluZVNERlVuaWZvcm1WYWx1ZXMiLCJwb3NBIiwiZnJvbSIsInBvc0IiLCJ0byIsIndpZHRoQSIsIndpZHRoQiIsInVfcGF0dGVybnNjYWxlX2EiLCJ1X3BhdHRlcm5zY2FsZV9iIiwidV9zZGZnYW1tYSIsInVfdGV4X3lfYSIsInVfdGV4X3lfYiIsInVfbWl4IiwicmFzdGVyVW5pZm9ybVZhbHVlcyIsInBhcmVudFRMIiwicGFyZW50U2NhbGVCeSIsImZhZGUiLCJ1X3RsX3BhcmVudCIsInVfc2NhbGVfcGFyZW50IiwidV9idWZmZXJfc2NhbGUiLCJ1X2ZhZGVfdCIsIm1peCIsInVfaW1hZ2UwIiwidV9pbWFnZTEiLCJ1X2JyaWdodG5lc3NfbG93IiwidV9icmlnaHRuZXNzX2hpZ2giLCJ1X3NhdHVyYXRpb25fZmFjdG9yIiwic2F0dXJhdGlvbiIsInVfY29udHJhc3RfZmFjdG9yIiwiY29udHJhc3QiLCJ1X3NwaW5fd2VpZ2h0cyIsInNwaW5XZWlnaHRzIiwic2luIiwicXVhZFRyaWFuZ2xlcyIsInN5bWJvbEljb25Vbmlmb3JtVmFsdWVzIiwiZnVuY3Rpb25UeXBlIiwicm90YXRlSW5TaGFkZXIiLCJ0ZXhTaXplIiwidV9pc19zaXplX3pvb21fY29uc3RhbnQiLCJ1X2lzX3NpemVfZmVhdHVyZV9jb25zdGFudCIsInVfc2l6ZV90IiwidVNpemVUIiwidV9zaXplIiwidVNpemUiLCJ1X3BpdGNoIiwidV9yb3RhdGVfc3ltYm9sIiwidV9hc3BlY3RfcmF0aW8iLCJ1X2ZhZGVfY2hhbmdlIiwidV9sYWJlbF9wbGFuZV9tYXRyaXgiLCJ1X2Nvb3JkX21hdHJpeCIsInVfaXNfdGV4dCIsInVfdGV4dHVyZSIsInN5bWJvbFNERlVuaWZvcm1WYWx1ZXMiLCJpc0hhbG8iLCJ1X2dhbW1hX3NjYWxlIiwidV9pc19oYWxvIiwic3ltYm9sVGV4dEFuZEljb25Vbmlmb3JtVmFsdWVzIiwidGV4U2l6ZVNERiIsInRleFNpemVJY29uIiwidV90ZXhzaXplX2ljb24iLCJ1X3RleHR1cmVfaWNvbiIsImJhY2tncm91bmRVbmlmb3JtVmFsdWVzIiwiYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwiaW1hZ2VQb3NBIiwidG9TdHJpbmciLCJpbWFnZVBvc0IiLCJ1X3BhdHRlcm5fdGxfYSIsInRsIiwidV9wYXR0ZXJuX2JyX2EiLCJiciIsInVfcGF0dGVybl90bF9iIiwidV9wYXR0ZXJuX2JyX2IiLCJ1X3BhdHRlcm5fc2l6ZV9hIiwiZGlzcGxheVNpemUiLCJ1X3BhdHRlcm5fc2l6ZV9iIiwidV9zY2FsZV9hIiwidV9zY2FsZV9iIiwidV90aWxlX3VuaXRzX3RvX3BpeGVscyIsImJnUGF0dGVyblVuaWZvcm1WYWx1ZXMiLCJwcm9ncmFtVW5pZm9ybXMiLCJsb2NhdGlvbnMiLCJVbmlmb3JtTWF0cml4NGYiLCJVbmlmb3JtM2YiLCJVbmlmb3JtMWYiLCJVbmlmb3JtMWkiLCJVbmlmb3JtMmYiLCJVbmlmb3JtQ29sb3IiLCJ1X2NvbG9yX3JhbXAiLCJ1X2xhdHJhbmdlIiwidV9saWdodCIsInVfc2hhZG93IiwidV9oaWdobGlnaHQiLCJ1X2FjY2VudCIsInVfZGltZW5zaW9uIiwidV96b29tIiwidV91bnBhY2siLCJVbmlmb3JtNGYiLCJkcmF3Q29sbGlzaW9uRGVidWciLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGVBbmNob3IiLCJ0aWxlQmF0Y2hlcyIsImNpcmNsZUNvdW50IiwiY2lyY2xlT2Zmc2V0IiwiYnVmZmVycyIsImludlRyYW5zZm9ybSIsImNvbG9yTW9kZUZvclJlbmRlclBhc3MiLCJjaXJjbGVQcm9ncmFtIiwidmVydGV4RGF0YSIsIkNvbGxpc2lvbkNpcmNsZUxheW91dEFycmF5IiwiX3RyaW0iLCJiYXRjaCIsImNpcmNsZUlkeCIsImNvbGxpc2lvbiIsImVtcGxhY2UiLCJxdWFkQ291bnQiLCJ0cmlDb3VudCIsIlF1YWRUcmlhbmdsZUFycmF5IiwiaWR4IiwidWludDE2IiwiY3JlYXRlUXVhZFRyaWFuZ2xlcyIsImNvbGxpc2lvbkNpcmNsZUxheW91dCIsInVuaWZvcm1zIiwiaWRlbnRpdHlNYXQ0IiwiY2FsY3VsYXRlVmFyaWFibGVSZW5kZXJTaGlmdCIsInJlbmRlclRleHRTaXplIiwidXBkYXRlVmFyaWFibGVBbmNob3JzRm9yQnVja2V0IiwidGlsZVNjYWxlIiwidXBkYXRlVGV4dEZpdEljb24iLCJkeW5hbWljVGV4dExheW91dFZlcnRleEFycmF5IiwiZHluYW1pY0ljb25MYXlvdXRWZXJ0ZXhBcnJheSIsInBsYWNlZFRleHRTaGlmdHMiLCJ0aWxlQW5jaG9yIiwicHJvamVjdGVkQW5jaG9yIiwic3ltYm9sUHJvamVjdGlvbiIsImV2YWx1YXRlU2l6ZUZvckZlYXR1cmUiLCJ0aWxlUGl4ZWxSYXRpbyIsInNoaWZ0ZWRBbmNob3IiLCJyb3RhdGUiLCJhc3NvY2lhdGVkSWNvbkluZGV4IiwicGxhY2VkSWNvbnMiLCJnZXRTeW1ib2xQcm9ncmFtTmFtZSIsImlzU0RGIiwiaWNvbnNJblRleHQiLCJkcmF3TGF5ZXJTeW1ib2xzIiwicm90YXRpb25BbGlnbm1lbnQiLCJwaXRjaEFsaWdubWVudCIsInRyIiwiYWxvbmdMaW5lIiwiaGFzU29ydEtleSIsInNvcnRGZWF0dXJlc0J5S2V5IiwiZGVwdGhNb2RlRm9yU3VibGF5ZXIiLCJ0aWxlUmVuZGVyU3RhdGUiLCJwcm9ncmFtQ29uZmlndXJhdGlvbiIsInByb2dyYW1Db25maWd1cmF0aW9ucyIsInNkZkljb25zIiwidHJhbnNmb3JtZWQiLCJhdGxhc0ludGVycG9sYXRpb24iLCJhdGxhc1RleHR1cmVJY29uIiwiYXRsYXNJbnRlcnBvbGF0aW9uSWNvbiIsImdseXBoQXRsYXNUZXh0dXJlIiwicm90YXRpbmciLCJ6b29taW5nIiwia2luZCIsIk5FQVJFU1QiLCJpY29uU2NhbGVkIiwiaWNvbnNOZWVkTGluZWFyIiwiaGFzVmFyaWFibGVBbmNob3JzIiwidUxhYmVsUGxhbmVNYXRyaXgiLCJ1Z2xDb29yZE1hdHJpeCIsImhhc0hhbG8iLCJjYW5PdmVybGFwIiwic2VnbWVudFN0YXRlIiwiVEVYVFVSRTEiLCJkcmF3U3ltYm9sRWxlbWVudHMiLCJkcmF3RmlsbFRpbGVzIiwiaXNPdXRsaW5lIiwicHJvZ3JhbU5hbWUiLCJwYXR0ZXJuUHJvcGVydHkiLCJnZXRDcm9zc2ZhZGVQYXJhbWV0ZXJzIiwicGF0dGVybnNMb2FkZWQiLCJ1cGRhdGVQYWludEJ1ZmZlcnMiLCJjb25zdGFudFBhdHRlcm4iLCJpbWFnZUF0bGFzIiwiYXRsYXMiLCJwb3NUbyIsInBhdHRlcm5Qb3NpdGlvbnMiLCJwb3NGcm9tIiwic2V0Q29uc3RhbnRQYXR0ZXJuUG9zaXRpb25zIiwidGlsZU1hdHJpeCIsImluZGV4QnVmZmVyMiIsInNlZ21lbnRzMiIsInN0ZW5jaWxNb2RlRm9yQ2xpcHBpbmciLCJkcmF3RXh0cnVzaW9uVGlsZXMiLCJyZW5kZXJIaWxsc2hhZGUiLCJzaGFkb3ciLCJoaWdobGlnaHQiLCJhY2NlbnQiLCJhemltdXRoYWwiLCJhbGlnbiIsIm1vdmluZyIsInRvTG5nTGF0IiwibGF0IiwiaGlsbHNoYWRlVW5pZm9ybVZhbHVlcyIsInJhc3RlckJvdW5kc0J1ZmZlciIsInF1YWRUcmlhbmdsZUluZGV4QnVmZmVyIiwicmFzdGVyQm91bmRzU2VnbWVudHMiLCJwcmVwYXJlSGlsbHNoYWRlIiwidGV4dHVyZVN0cmlkZSIsInN0cmlkZSIsInBpeGVsRGF0YSIsImdldFBpeGVscyIsInJlbmRlclRleHR1cmUiLCJnZXRVbnBhY2tWZWN0b3IiLCJoaWxsc2hhZGVVbmlmb3JtUHJlcGFyZVZhbHVlcyIsImdldEZhZGVWYWx1ZXMiLCJzaW5jZVRpbGUiLCJzaW5jZVBhcmVudCIsImlkZWFsWiIsImZhZGVJbiIsImNoaWxkT3BhY2l0eSIsInRvcENvbG9yIiwiYnRtQ29sb3IiLCJsZWZ0Q29sb3IiLCJyaWdodENvbG9yIiwiY2VudGVyQ29sb3IiLCJkcmF3SG9yaXpvbnRhbExpbmUiLCJsaW5lV2lkdGgiLCJkcmF3RGVidWdTU1JlY3QiLCJkcmF3VmVydGljYWxMaW5lIiwiU0NJU1NPUl9URVNUIiwic2Npc3NvciIsImRyYXdEZWJ1Z1RpbGUiLCJlbXB0eVRleHR1cmUiLCJyZWQiLCJkZWJ1Z0J1ZmZlciIsInRpbGVCb3JkZXJJbmRleEJ1ZmZlciIsImRlYnVnU2VnbWVudHMiLCJ0aWxlUmF3RGF0YSIsImxhdGVzdFJhd1RpbGVEYXRhIiwidGlsZVNpemVLYiIsImJ5dGVMZW5ndGgiLCJ0aWxlSWRUZXh0IiwiaW5pdERlYnVnT3ZlcmxheUNhbnZhcyIsImRlYnVnT3ZlcmxheUNhbnZhcyIsImN0eDJkIiwic2hhZG93Q29sb3IiLCJzaGFkb3dCbHVyIiwic3Ryb2tlU3R5bGUiLCJzdHJva2VUZXh0IiwiZGVidWdPdmVybGF5VGV4dHVyZSIsImRyYXdUZXh0VG9PdmVybGF5IiwicmVuZGVyUGFzcyIsInBpeGVsVG9UaWxlU2NhbGUiLCJ1cGRhdGVWYXJpYWJsZUFuY2hvcnMiLCJzdHJva2VXaWR0aCIsInN0cm9rZU9wYWNpdHkiLCJzZWdtZW50c1JlbmRlclN0YXRlcyIsInNlZ21lbnRzU3RhdGUiLCJoZWF0bWFwRmJvIiwiSEFMRl9GTE9BVF9PRVMiLCJiaW5kVGV4dHVyZVRvRnJhbWVidWZmZXIiLCJjb2xvclJhbXBUZXh0dXJlIiwiY29sb3JSYW1wIiwidGV4dHVyZVVuaXQiLCJjb2xvclJhbXBVbml0IiwiaGVhdG1hcFRleHR1cmVVbmlmb3JtVmFsdWVzIiwidmlld3BvcnRCdWZmZXIiLCJ2aWV3cG9ydFNlZ21lbnRzIiwicmVuZGVyVGV4dHVyZVRvTWFwIiwiZ3JhZGllbnQiLCJwcm9ncmFtSWQiLCJmaXJzdFRpbGUiLCJwcmV2UHJvZ3JhbSIsInByb2dyYW1DaGFuZ2VkIiwibGluZUNsaXBzQXJyYXkiLCJsYXllckdyYWRpZW50IiwiZ3JhZGllbnRzIiwiZ3JhZGllbnRUZXh0dXJlIiwiZ3JhZGllbnRWZXJzaW9uIiwidGV4dHVyZVJlc29sdXRpb24iLCJzdGVwSW50ZXJwb2xhbnQiLCJzb3VyY2VNYXhab29tIiwicG90ZW50aWFsT3Zlcnpvb20iLCJuZXh0UG93ZXJPZlR3byIsIm1heExpbmVMZW5ndGgiLCJyZW5kZXJDb2xvclJhbXAiLCJncmFkaWVudEV4cHJlc3Npb24iLCJldmFsdWF0aW9uS2V5IiwicmVzb2x1dGlvbiIsImNsaXBzIiwibGF5b3V0VmVydGV4QnVmZmVyMiIsIm9wYXF1ZVBhc3NFbmFibGVkRm9yTGF5ZXIiLCJmaWxsLWV4dHJ1c2lvbiIsIkxFUVVBTCIsImRlcHRoUmFuZ2VGb3IzRCIsInN0ZW5jaWxNb2RlRm9yM0QiLCJ0aWxlSURzIiwic3RlbmNpbENvbmZpZ0Zvck92ZXJsYXAiLCJzdGVuY2lsTW9kZXMiLCJtaW5UaWxlWiIsInJlZ2lzdGVyRmFkZUR1cmF0aW9uIiwidGV4dHVyZUZpbHRlciIsImlzUGF0dGVybk1pc3NpbmciLCJ0aWxlRXh0ZW50QnVmZmVyIiwidGlsZUV4dGVudFNlZ21lbnRzIiwiaW1wbGVtZW50YXRpb24iLCJwcmVyZW5kZXIiLCJzZXRDdXN0b21MYXllckRlZmF1bHRzIiwiY3VzdG9tTGF5ZXJNYXRyaXgiLCJzZXRCYXNlU3RhdGUiLCJyZW5kZXJpbmdNb2RlIiwiUGFpbnRlciIsIl90aWxlVGV4dHVyZXMiLCJzZXR1cCIsIm51bVN1YmxheWVycyIsImRlcHRoRXBzaWxvbiIsImdwdVRpbWVycyIsInRpbGVFeHRlbnRBcnJheSIsIlBvc0FycmF5IiwicG9zQXR0cmlidXRlcyIsImRlYnVnQXJyYXkiLCJyYXN0ZXJCb3VuZHNBcnJheSIsInZpZXdwb3J0QXJyYXkiLCJ0aWxlTGluZVN0cmlwSW5kaWNlcyIsIkxpbmVTdHJpcEluZGV4QXJyYXkiLCJxdWFkVHJpYW5nbGVJbmRpY2VzIiwiVHJpYW5nbGVJbmRleEFycmF5Iiwic3RlbmNpbENsZWFyTW9kZSIsIm5leHRTdGVuY2lsSUQiLCJjdXJyZW50U3RlbmNpbFNvdXJjZSIsIl9yZW5kZXJUaWxlQ2xpcHBpbmdNYXNrcyIsIl90aWxlQ2xpcHBpbmdNYXNrSURzIiwiUkVQTEFDRSIsIk5PVEVRVUFMIiwiRVFVQUwiLCJzdGVuY2lsVmFsdWVzIiwielRvU3RlbmNpbE1vZGUiLCJHRVFVQUwiLCJfc2hvd092ZXJkcmF3SW5zcGVjdG9yIiwiQ09OU1RBTlRfQ09MT1IiLCJjdXJyZW50TGF5ZXIiLCJvcGFxdWVQYXNzQ3V0b2ZmIiwic2VsZWN0ZWRTb3VyY2UiLCJjb29yZHNBc2NlbmRpbmciLCJjb29yZHNEZXNjZW5kaW5nIiwiY29vcmRzRGVzY2VuZGluZ1N5bWJvbCIsInJldmVyc2UiLCJpczNEIiwiaGFzT2Zmc2NyZWVuUGFzcyIsInJlbmRlckxheWVyIiwiYmxhY2siLCJzaG93VGlsZUJvdW5kYXJpZXMiLCJzaG93UGFkZGluZyIsImJvdHRvbSIsImNlbnRlclBvaW50IiwiZHJhd0Nyb3NzaGFpciIsImRyYXdEZWJ1Z1BhZGRpbmciLCJncHVUaW1pbmdTdGFydCIsImdwdVRpbWluZ0VuZCIsImdwdVRpbWluZyIsImV4dCIsImxheWVyVGltZXIiLCJjYWxscyIsImNwdVRpbWUiLCJjcmVhdGVRdWVyeUVYVCIsImJlZ2luUXVlcnlFWFQiLCJUSU1FX0VMQVBTRURfRVhUIiwiZW5kUXVlcnlFWFQiLCJjb2xsZWN0R3B1VGltZXJzIiwiY3VycmVudExheWVyVGltZXJzIiwicXVlcnlHcHVUaW1lcnMiLCJncHVUaW1lciIsImdwdVRpbWUiLCJnZXRRdWVyeU9iamVjdEVYVCIsIlFVRVJZX1JFU1VMVF9FWFQiLCJkZWxldGVRdWVyeUVYVCIsImluVmlld3BvcnRQaXhlbFVuaXRzVW5pdHMiLCJzaW5BIiwiY29zQSIsInRyYW5zbGF0aW9uIiwidHJhbnNsYXRlZE1hdHJpeCIsInRleHR1cmVzIiwiY2FjaGUiLCJjYWNoZUtleSIsInNoYWRlcnMiLCJGcnVzdHVtIiwicGxhbmVzXyIsInBsYW5lcyIsImZyb21JbnZQcm9qZWN0aW9uTWF0cml4IiwiaW52UHJvaiIsImZydXN0dW1Db29yZHMiLCJmcnVzdHVtUGxhbmVzIiwiQWFiYiIsIm1pbl8iLCJtYXhfIiwicXVhZHJhbnQiLCJxTWluIiwicU1heCIsImF4aXMiLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJpbnRlcnNlY3RzIiwiZnJ1c3R1bSIsImFhYmJQb2ludHMiLCJmdWxseUluc2lkZSIsInBsYW5lIiwicG9pbnRzSW5zaWRlIiwicHJvak1pbiIsIk1BWF9WQUxVRSIsInByb2pNYXgiLCJFZGdlSW5zZXRzIiwibnVtYmVyIiwiZ2V0Q2VudGVyIiwib3RoZXIiLCJ0b0pTT04iLCJUcmFuc2Zvcm0iLCJtaW5ab29tIiwibWluUGl0Y2giLCJtYXhQaXRjaCIsInJlbmRlcldvcmxkQ29waWVzIiwibWF4VmFsaWRMYXRpdHVkZSIsIl9yZW5kZXJXb3JsZENvcGllcyIsIl9taW5ab29tIiwiX21heFpvb20iLCJfbWluUGl0Y2giLCJfbWF4UGl0Y2giLCJzZXRNYXhCb3VuZHMiLCJfY2VudGVyIiwiTG5nTGF0IiwiX2ZvdiIsIl91bm1vZGlmaWVkIiwiX2VkZ2VJbnNldHMiLCJfcG9zTWF0cml4Q2FjaGUiLCJfYWxpZ25lZFBvc01hdHJpeENhY2hlIiwibGF0UmFuZ2UiLCJfY2FsY01hdHJpY2VzIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2VudGVyT2Zmc2V0IiwiX3N1YiIsIl9kaXYiLCJyb3RhdGlvbk1hdHJpeCIsIm1hdDIiLCJmb3YiLCJfem9vbSIsInpvb21TY2FsZSIsInpvb21GcmFjdGlvbiIsIl9jb25zdHJhaW4iLCJpc1BhZGRpbmdFcXVhbCIsImludGVycG9sYXRlUGFkZGluZyIsInNjYWxlWm9vbSIsIlVud3JhcHBlZFRpbGVJRCIsInV0bCIsInV0ciIsInVibCIsInViciIsIncwIiwidzEiLCJhY3R1YWxaIiwiY2VudGVyQ29vcmQiLCJjYW1lcmFGcnVzdHVtIiwibmV3Um9vdFRpbGUiLCJhYWJiIiwiZnVsbHlWaXNpYmxlIiwiaW50ZXJzZWN0UmVzdWx0IiwibG9uZ2VzdERpbSIsImRpc3RhbmNlU3EiLCJ2ZWMyIiwiY2hpbGRYIiwiY2hpbGRZIiwidW5tb2RpZmllZCIsImxuZ2xhdCIsInVucHJvamVjdCIsInNldExvY2F0aW9uQXRQb2ludCIsImxvYyIsImxvY2F0aW9uQ29vcmRpbmF0ZSIsIm5ld0NlbnRlciIsImNvb3JkaW5hdGVMb2NhdGlvbiIsImxvY2F0aW9uUG9pbnQiLCJjb29yZGluYXRlUG9pbnQiLCJwb2ludExvY2F0aW9uIiwiY29vcmQwIiwiY29vcmQxIiwicGl4ZWxNYXRyaXhJbnZlcnNlIiwieTAiLCJ6MCIsInoxIiwicGl4ZWxNYXRyaXgiLCJnZXRCb3VuZHMiLCJnZXRNYXhCb3VuZHMiLCJsbmdSYW5nZSIsInVud3JhcHBlZFRpbGVJRCIsImFsaWduZWQiLCJwb3NNYXRyaXhLZXkiLCJ1bndyYXBwZWRYIiwiYWxpZ25lZFByb2pNYXRyaXgiLCJwcm9qTWF0cml4IiwibWVyY2F0b3JNYXRyaXgiLCJfY29uc3RyYWluaW5nIiwic3kiLCJzeCIsImgyIiwidzIiLCJ0YW4iLCJncm91bmRBbmdsZSIsImZvdkFib3ZlQ2VudGVyIiwidG9wSGFsZlN1cmZhY2VEaXN0YW5jZSIsImZhcloiLCJuZWFyWiIsIm1lcmNhdG9yWmZyb21BbHRpdHVkZSIsInhTaGlmdCIsInlTaGlmdCIsImFuZ2xlQ29zIiwiYW5nbGVTaW4iLCJhbGlnbmVkTSIsImdldENhbWVyYVBvaW50IiwieU9mZnNldCIsIkhhc2giLCJoYXNoTmFtZSIsInBlbmRpbmciLCJ0aW1lcklkIiwibGF0ZXIiLCJfaGFzaE5hbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJfdXBkYXRlSGFzaCIsIl91cGRhdGVIYXNoVW50aHJvdHRsZWQiLCJhZGRUbyIsIl9tYXAiLCJfb25IYXNoQ2hhbmdlIiwiZ2V0SGFzaFN0cmluZyIsIm1hcEZlZWRiYWNrIiwiZ2V0Wm9vbSIsIkxOMTAiLCJnZXRCZWFyaW5nIiwiZ2V0UGl0Y2giLCJoYXNoIiwiZm91bmQiLCJwYXJ0cyIsImxvY2F0aW9uIiwiX2dldEN1cnJlbnRIYXNoIiwia2V5dmFsIiwiZHJhZ1JvdGF0ZSIsImlzRW5hYmxlZCIsInRvdWNoWm9vbVJvdGF0ZSIsImp1bXBUbyIsImhyZWYiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwiU2VjdXJpdHlFcnJvciIsImRlZmF1bHRJbmVydGlhT3B0aW9ucyIsImxpbmVhcml0eSIsImVhc2luZyIsImJlemllciIsImRlZmF1bHRQYW5JbmVydGlhT3B0aW9ucyIsImRlY2VsZXJhdGlvbiIsIm1heFNwZWVkIiwiZGVmYXVsdFpvb21JbmVydGlhT3B0aW9ucyIsImRlZmF1bHRCZWFyaW5nSW5lcnRpYU9wdGlvbnMiLCJkZWZhdWx0UGl0Y2hJbmVydGlhT3B0aW9ucyIsIkhhbmRsZXJJbmVydGlhIiwiZXh0ZW5kRHVyYXRpb24iLCJlYXNlT3B0aW9ucyIsImNhbGN1bGF0ZUVhc2luZyIsImFtb3VudCIsImluZXJ0aWFEdXJhdGlvbiIsImluZXJ0aWFPcHRpb25zIiwic3BlZWQiLCJfaW5lcnRpYUJ1ZmZlciIsInJlY29yZCIsInNldHRpbmdzIiwiX2RyYWluSW5lcnRpYUJ1ZmZlciIsInRpbWUiLCJpbmVydGlhIiwiX29uTW92ZUVuZCIsInBhbkluZXJ0aWFPcHRpb25zIiwiZGVsdGFzIiwicGFuIiwicGluY2hBcm91bmQiLCJhcm91bmQiLCJ6b29tRGVsdGEiLCJiZWFyaW5nRGVsdGEiLCJwaXRjaERlbHRhIiwicGFuRGVsdGEiLCJub01vdmVTdGFydCIsIk1hcE1vdXNlRXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwiZ2V0Q2FudmFzQ29udGFpbmVyIiwibG5nTGF0IiwiX2RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwiTWFwVG91Y2hFdmVudCIsImNoYW5nZWRUb3VjaGVzIiwibG5nTGF0cyIsImN1cnIiLCJhcnIiLCJkaXYiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSIsIk1hcFdoZWVsRXZlbnQiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMiIsIk1hcEV2ZW50SGFuZGxlciIsIl9jbGlja1RvbGVyYW5jZSIsImNsaWNrVG9sZXJhbmNlIiwiX21vdXNlZG93blBvcyIsIndoZWVsIiwiX2ZpcmVQcmV2ZW50YWJsZSIsIm1vdXNlZG93biIsIm1vdXNldXAiLCJjbGljayIsImRibGNsaWNrIiwibW91c2VvdmVyIiwibW91c2VvdXQiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJ0b3VjaGNhbmNlbCIsIm1hcEV2ZW50IiwiaXNBY3RpdmUiLCJCbG9ja2FibGVNYXBFdmVudEhhbmRsZXIiLCJfZGVsYXlDb250ZXh0TWVudSIsIl9jb250ZXh0TWVudUV2ZW50IiwibW91c2Vtb3ZlIiwiY29udGV4dG1lbnUiLCJsaXN0ZW5zIiwiQm94Wm9vbUhhbmRsZXIiLCJfZWwiLCJfY29udGFpbmVyIiwiZ2V0Q29udGFpbmVyIiwiaW5kZXhUb3VjaGVzIiwib2JqIiwiX2VuYWJsZWQiLCJfYWN0aXZlIiwic2hpZnRLZXkiLCJfc3RhcnRQb3MiLCJfbGFzdFBvcyIsIm1vdXNlbW92ZVdpbmRvdyIsIl9ib3giLCJwMCIsImNsYXNzTGlzdCIsIl9maXJlRXZlbnQiLCJtb3VzZXVwV2luZG93IiwicDEiLCJjYW1lcmFBbmltYXRpb24iLCJmaXRTY3JlZW5Db29yZGluYXRlcyIsImxpbmVhciIsImtleWRvd24iLCJrZXlDb2RlIiwiU2luZ2xlVGFwUmVjb2duaXplciIsIm51bVRvdWNoZXMiLCJjZW50cm9pZCIsIm1hcFRvdWNoZXMiLCJ0aW1lU3RhbXAiLCJzdW0iLCJnZXRDZW50cm9pZCIsIm5ld1RvdWNoZXMiLCJUYXBSZWNvZ25pemVyIiwic2luZ2xlVGFwIiwibnVtVGFwcyIsImxhc3RUaW1lIiwibGFzdFRhcCIsImNvdW50IiwidGFwIiwic29vbkVub3VnaCIsImNsb3NlRW5vdWdoIiwiVGFwWm9vbUhhbmRsZXIiLCJfem9vbUluIiwiX3pvb21PdXQiLCJ6b29tSW5Qb2ludCIsInpvb21PdXRQb2ludCIsImVhc2VUbyIsIkJVVFRPTlNfRkxBR1MiLCJNb3VzZUhhbmRsZXIiLCJfbW92ZWQiLCJfbGFzdFBvaW50IiwiX2V2ZW50QnV0dG9uIiwiX2NvcnJlY3RCdXR0b24iLCJfbW92ZSIsImV2ZW50QnV0dG9uIiwiZmxhZyIsImJ1dHRvbnMiLCJidXR0b25TdGlsbFByZXNzZWQiLCJNb3VzZVBhbkhhbmRsZXIiLCJNb3VzZVJvdGF0ZUhhbmRsZXIiLCJNb3VzZVBpdGNoSGFuZGxlciIsIlRvdWNoUGFuSGFuZGxlciIsIl9taW5Ub3VjaGVzIiwiX3RvdWNoZXMiLCJfc3VtIiwiX2NhbGN1bGF0ZVRyYW5zZm9ybSIsInRvdWNoUG9pbnRTdW0iLCJ0b3VjaERlbHRhU3VtIiwidG91Y2hEZWx0YUNvdW50IiwicHJldlBvaW50IiwiVHdvVG91Y2hIYW5kbGVyIiwiZ2V0VG91Y2hCeUlkIiwiZ2V0Wm9vbURlbHRhIiwiZGlzdGFuY2UiLCJsYXN0RGlzdGFuY2UiLCJfZmlyc3RUd29Ub3VjaGVzIiwiX3N0YXJ0IiwiX2Fyb3VuZENlbnRlciIsIlRvdWNoWm9vbUhhbmRsZXIiLCJfZGlzdGFuY2UiLCJfc3RhcnREaXN0YW5jZSIsImdldEJlYXJpbmdEZWx0YSIsImFuZ2xlV2l0aCIsIlRvdWNoUm90YXRlSGFuZGxlciIsIl9taW5EaWFtZXRlciIsIl9zdGFydFZlY3RvciIsIl92ZWN0b3IiLCJsYXN0VmVjdG9yIiwiX2lzQmVsb3dUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJiZWFyaW5nRGVsdGFTaW5jZVN0YXJ0IiwiaXNWZXJ0aWNhbCIsIlRvdWNoUGl0Y2hIYW5kbGVyIiwiX3ZhbGlkIiwiX2ZpcnN0TW92ZSIsIl9sYXN0UG9pbnRzIiwidmVjdG9yQSIsInZlY3RvckIiLCJnZXN0dXJlQmVnaW5zVmVydGljYWxseSIsIm1vdmVkQSIsIm1vdmVkQiIsImlzU2FtZURpcmVjdGlvbiIsImRlZmF1bHRPcHRpb25zIiwicGFuU3RlcCIsImJlYXJpbmdTdGVwIiwicGl0Y2hTdGVwIiwiS2V5Ym9hcmRIYW5kbGVyIiwic3RlcE9wdGlvbnMiLCJfcGFuU3RlcCIsIl9iZWFyaW5nU3RlcCIsIl9waXRjaFN0ZXAiLCJfcm90YXRpb25EaXNhYmxlZCIsImVhc2VPdXQiLCJhbHRLZXkiLCJtZXRhS2V5Iiwiem9vbURpciIsImJlYXJpbmdEaXIiLCJwaXRjaERpciIsInhEaXIiLCJ5RGlyIiwiZWFzZUlkIiwiZGlzYWJsZVJvdGF0aW9uIiwiZW5hYmxlUm90YXRpb24iLCJTY3JvbGxab29tSGFuZGxlciIsImhhbmRsZXIiLCJfaGFuZGxlciIsIl9kZWx0YSIsIl9kZWZhdWx0Wm9vbVJhdGUiLCJfd2hlZWxab29tUmF0ZSIsInNldFpvb21SYXRlIiwiem9vbVJhdGUiLCJzZXRXaGVlbFpvb21SYXRlIiwid2hlZWxab29tUmF0ZSIsIl9maW5pc2hUaW1lb3V0IiwiaXNab29taW5nIiwiX3pvb21pbmciLCJkZWx0YU1vZGUiLCJXaGVlbEV2ZW50IiwiRE9NX0RFTFRBX0xJTkUiLCJkZWx0YVkiLCJ0aW1lRGVsdGEiLCJfbGFzdFdoZWVsRXZlbnRUaW1lIiwiX3R5cGUiLCJfbGFzdFZhbHVlIiwiX3RpbWVvdXQiLCJfb25UaW1lb3V0IiwiX2xhc3RXaGVlbEV2ZW50IiwiaW5pdGlhbEV2ZW50IiwiX2ZyYW1lSWQiLCJfYXJvdW5kIiwiX2Fyb3VuZFBvaW50IiwiX3RyaWdnZXJSZW5kZXJGcmFtZSIsInJlbmRlckZyYW1lIiwiZXhwIiwiX3RhcmdldFpvb20iLCJfc3RhcnRab29tIiwiX2Vhc2luZyIsIl9zbW9vdGhPdXRFYXNpbmciLCJ0YXJnZXRab29tIiwic3RhcnRab29tIiwiZmluaXNoZWQiLCJub0luZXJ0aWEiLCJuZWVkc1JlbmRlckZyYW1lIiwiX2Vhc2UiLCJfcHJldkVhc2UiLCJlYXNlIiwiRG91YmxlQ2xpY2tab29tSGFuZGxlciIsImNsaWNrWm9vbSIsIlRhcFpvb20iLCJfY2xpY2tab29tIiwiX3RhcFpvb20iLCJDbGlja1pvb21IYW5kbGVyIiwiVGFwRHJhZ1pvb21IYW5kbGVyIiwiX3RhcCIsIl9zd2lwZVBvaW50IiwiX3N3aXBlVG91Y2giLCJfdGFwVGltZSIsIm5ld1N3aXBlUG9pbnQiLCJEcmFnUGFuSGFuZGxlciIsIm1vdXNlUGFuIiwidG91Y2hQYW4iLCJfbW91c2VQYW4iLCJfdG91Y2hQYW4iLCJfaW5lcnRpYU9wdGlvbnMiLCJEcmFnUm90YXRlSGFuZGxlciIsIm1vdXNlUm90YXRlIiwibW91c2VQaXRjaCIsIl9waXRjaFdpdGhSb3RhdGUiLCJwaXRjaFdpdGhSb3RhdGUiLCJfbW91c2VSb3RhdGUiLCJfbW91c2VQaXRjaCIsIlRvdWNoWm9vbVJvdGF0ZUhhbmRsZXIiLCJ0b3VjaFpvb20iLCJ0b3VjaFJvdGF0ZSIsInRhcERyYWdab29tIiwiX3RvdWNoWm9vbSIsIl90b3VjaFJvdGF0ZSIsIl90YXBEcmFnWm9vbSIsImlzTW92aW5nIiwiZHJhZyIsIlJlbmRlckZyYW1lRXZlbnQiLCJoYXNDaGFuZ2UiLCJIYW5kbGVyTWFuYWdlciIsIl9oYW5kbGVycyIsIl9oYW5kbGVyc0J5SWQiLCJfY2hhbmdlcyIsIl9pbmVydGlhIiwiX2JlYXJpbmdTbmFwIiwiYmVhcmluZ1NuYXAiLCJfcHJldmlvdXNBY3RpdmVIYW5kbGVycyIsIl9ldmVudHNJblByb2dyZXNzIiwiX2FkZERlZmF1bHRIYW5kbGVycyIsIl9saXN0ZW5lcnMiLCJwYXNzaXZlIiwiaGFuZGxlV2luZG93RXZlbnQiLCJoYW5kbGVFdmVudCIsImJveFpvb20iLCJ0YXBab29tIiwiZG91YmxlQ2xpY2tab29tIiwidG91Y2hQaXRjaCIsImRyYWdQYW4iLCJzY3JvbGxab29tIiwia2V5Ym9hcmQiLCJpbnRlcmFjdGl2ZSIsImhhbmRsZXJOYW1lIiwiYWxsb3dlZCIsInN0b3AiLCJhbGxvd0VuZEFuaW1hdGlvbiIsIl91cGRhdGluZ0NhbWVyYSIsIl9maXJlRXZlbnRzIiwiaXNSb3RhdGluZyIsIl9ibG9ja2VkQnlBY3RpdmUiLCJhY3RpdmVIYW5kbGVycyIsIm15TmFtZSIsIl9nZXRNYXBUb3VjaGVzIiwiZXZlbnROYW1lIiwiaW5wdXRFdmVudCIsIm1lcmdlZEhhbmRsZXJSZXN1bHQiLCJldmVudHNJblByb2dyZXNzIiwibWVyZ2VIYW5kbGVyUmVzdWx0IiwiZGVhY3RpdmF0ZWRIYW5kbGVycyIsIl9zdG9wIiwiaGFuZGxlclJlc3VsdCIsImV2ZW50RGF0YSIsIl9hcHBseUNoYW5nZXMiLCJjb21iaW5lZCIsImNvbWJpbmVkRXZlbnRzSW5Qcm9ncmVzcyIsImNvbWJpbmVkRGVhY3RpdmF0ZWRIYW5kbGVycyIsImNoYW5nZSIsIl91cGRhdGVNYXBUcmFuc2Zvcm0iLCJjb21iaW5lZFJlc3VsdCIsIm5ld0V2ZW50c0luUHJvZ3Jlc3MiLCJ3YXNNb3ZpbmciLCJub3dNb3ZpbmciLCJzdGFydEV2ZW50cyIsIm9yaWdpbmFsRW5kRXZlbnQiLCJlbmRFdmVudHMiLCJzdGlsbE1vdmluZyIsImluZXJ0aWFsRWFzZSIsInNob3VsZFNuYXBUb05vcnRoIiwicmVzZXROb3J0aCIsIl9yZXF1ZXN0RnJhbWUiLCJfcmVuZGVyVGFza1F1ZXVlIiwiQ2FtZXJhIiwiX21vdmluZyIsInBhbkJ5IiwicGFuVG8iLCJ6b29tVG8iLCJ6b29tSW4iLCJ6b29tT3V0IiwiZ2V0UGFkZGluZyIsInNldFBhZGRpbmciLCJyb3RhdGVUbyIsInJlc2V0Tm9ydGhQaXRjaCIsInNuYXBUb05vcnRoIiwiY2FtZXJhRm9yQm91bmRzIiwiX2NhbWVyYUZvckJveEFuZEJlYXJpbmciLCJnZXROb3J0aFdlc3QiLCJnZXRTb3V0aEVhc3QiLCJkZWZhdWx0UGFkZGluZyIsImVkZ2VQYWRkaW5nIiwicDB3b3JsZCIsInAxd29ybGQiLCJwMHJvdGF0ZWQiLCJwMXJvdGF0ZWQiLCJ1cHBlclJpZ2h0IiwibG93ZXJMZWZ0Iiwic2NhbGVYIiwic2NhbGVZIiwicm90YXRlZFBhZGRpbmdPZmZzZXQiLCJvZmZzZXRBdEZpbmFsWm9vbSIsImZpdEJvdW5kcyIsIl9maXRJbnRlcm5hbCIsImNhbGN1bGF0ZWRPcHRpb25zIiwiZmx5VG8iLCJ6b29tQ2hhbmdlZCIsImJlYXJpbmdDaGFuZ2VkIiwicGl0Y2hDaGFuZ2VkIiwiZGVmYXVsdEVhc2luZyIsImVzc2VudGlhbCIsInByZWZlcnNSZWR1Y2VkTW90aW9uIiwic3RhcnRCZWFyaW5nIiwic3RhcnRQaXRjaCIsInN0YXJ0UGFkZGluZyIsIl9ub3JtYWxpemVCZWFyaW5nIiwib2Zmc2V0QXNQb2ludCIsInBvaW50QXRPZmZzZXQiLCJsb2NhdGlvbkF0T2Zmc2V0IiwiX25vcm1hbGl6ZUNlbnRlciIsImFyb3VuZFBvaW50IiwiZGVsdGEiLCJmaW5hbFNjYWxlIiwiY3VycmVudGx5IiwiX3JvdGF0aW5nIiwicGl0Y2hpbmciLCJfcGl0Y2hpbmciLCJfcGFkZGluZyIsIl9lYXNlSWQiLCJfcHJlcGFyZUVhc2UiLCJiYXNlIiwic3BlZWR1cCIsIl9maXJlTW92ZUV2ZW50cyIsImludGVycnVwdGluZ0Vhc2VJZCIsIl9hZnRlckVhc2UiLCJ3YXNab29taW5nIiwid2FzUm90YXRpbmciLCJ3YXNQaXRjaGluZyIsImNvZXJjZWRPcHRpb25zIiwiY3VydmUiLCJyaG8iLCJ1MSIsIndNYXgiLCJyaG8yIiwic2luaCIsImNvc2giLCJyMCIsInUiLCJTIiwiaXNGaW5pdGUiLCJzY3JlZW5TcGVlZCIsIm1heER1cmF0aW9uIiwiaXNFYXNpbmciLCJfZWFzZUZyYW1lSWQiLCJhbGxvd0dlc3R1cmVzIiwiX2NhbmNlbFJlbmRlckZyYW1lIiwiX29uRWFzZUZyYW1lIiwiX29uRWFzZUVuZCIsIm9uRWFzZUVuZCIsImhhbmRsZXJzIiwiZmluaXNoIiwiX2Vhc2VTdGFydCIsIl9lYXNlT3B0aW9ucyIsIl9yZXF1ZXN0UmVuZGVyRnJhbWUiLCJfcmVuZGVyRnJhbWVDYWxsYmFjayIsImN1cnJlbnRCZWFyaW5nIiwiZGlmZiIsIkF0dHJpYnV0aW9uQ29udHJvbCIsImdldERlZmF1bHRQb3NpdGlvbiIsImNvbXBhY3QiLCJfY29tcGFjdEJ1dHRvbiIsIl90b2dnbGVBdHRyaWJ1dGlvbiIsIl9zZXRFbGVtZW50VGl0bGUiLCJfaW5uZXJDb250YWluZXIiLCJzZXRBdHRyaWJ1dGUiLCJfdXBkYXRlQXR0cmlidXRpb25zIiwiX3VwZGF0ZUVkaXRMaW5rIiwiX3VwZGF0ZURhdGEiLCJfdXBkYXRlQ29tcGFjdCIsIl9hdHRyaWJIVE1MIiwiZWxlbWVudCIsInRpdGxlIiwic3RyIiwiX2dldFVJU3RyaW5nIiwiZWRpdExpbmsiLCJfZWRpdExpbmsiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGVPd25lciIsInN0eWxlSWQiLCJjb25maWciLCJBQ0NFU1NfVE9LRU4iLCJwYXJhbVN0cmluZyIsImFjYyIsIkZFRURCQUNLX1VSTCIsIl9oYXNoIiwicmVsIiwiYXR0cmlidXRpb25zIiwiY3VzdG9tQXR0cmlidXRpb24iLCJvd25lciIsImF0dHJpYkhUTUwiLCJhdHRyaWIiLCJpbm5lckhUTUwiLCJvZmZzZXRXaWR0aCIsIkxvZ29Db250cm9sIiwiZGlzcGxheSIsIl91cGRhdGVMb2dvIiwiX2xvZ29SZXF1aXJlZCIsIm1hcGJveF9sb2dvIiwiY29udGFpbmVyQ2hpbGRyZW4iLCJUYXNrUXVldWUiLCJfcXVldWUiLCJfaWQiLCJfY2xlYXJlZCIsIl9jdXJyZW50bHlSdW5uaW5nIiwiY2FuY2VsbGVkIiwicnVubmluZyIsInRhc2siLCJydW4iLCJxdWV1ZSIsImRlZmF1bHRMb2NhbGUiLCJBdHRyaWJ1dGlvbkNvbnRyb2wuVG9nZ2xlQXR0cmlidXRpb24iLCJBdHRyaWJ1dGlvbkNvbnRyb2wuTWFwRmVlZGJhY2siLCJGdWxsc2NyZWVuQ29udHJvbC5FbnRlciIsIkZ1bGxzY3JlZW5Db250cm9sLkV4aXQiLCJHZW9sb2NhdGVDb250cm9sLkZpbmRNeUxvY2F0aW9uIiwiR2VvbG9jYXRlQ29udHJvbC5Mb2NhdGlvbk5vdEF2YWlsYWJsZSIsIkxvZ29Db250cm9sLlRpdGxlIiwiTmF2aWdhdGlvbkNvbnRyb2wuUmVzZXRCZWFyaW5nIiwiTmF2aWdhdGlvbkNvbnRyb2wuWm9vbUluIiwiTmF2aWdhdGlvbkNvbnRyb2wuWm9vbU91dCIsIlNjYWxlQ29udHJvbC5GZWV0IiwiU2NhbGVDb250cm9sLk1ldGVycyIsIlNjYWxlQ29udHJvbC5LaWxvbWV0ZXJzIiwiU2NhbGVDb250cm9sLk1pbGVzIiwiU2NhbGVDb250cm9sLk5hdXRpY2FsTWlsZXMiLCJhdHRyaWJ1dGlvbkNvbnRyb2wiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJ0cmFja1Jlc2l6ZSIsInJlZnJlc2hFeHBpcmVkVGlsZXMiLCJtYXhUaWxlQ2FjaGVTaXplIiwiTWFwIiwiX2ludGVyYWN0aXZlIiwiX2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJfcHJlc2VydmVEcmF3aW5nQnVmZmVyIiwiX2FudGlhbGlhcyIsIl90cmFja1Jlc2l6ZSIsIl9jcm9zc1NvdXJjZUNvbGxpc2lvbnMiLCJfY3Jvc3NGYWRpbmdGYWN0b3IiLCJfY29udHJvbHMiLCJfbWFwSWQiLCJfbG9jYWxlIiwibG9jYWxlIiwiUmVxdWVzdE1hbmFnZXIiLCJIVE1MRWxlbWVudCIsIm1heEJvdW5kcyIsIl9zZXR1cENvbnRhaW5lciIsIl9zZXR1cFBhaW50ZXIiLCJfb25XaW5kb3dPbmxpbmUiLCJfb25XaW5kb3dSZXNpemUiLCJmaXRCb3VuZHNPcHRpb25zIiwiX2xvY2FsSWRlb2dyYXBoRm9udEZhbWlseSIsImFkZENvbnRyb2wiLCJsb2dvUG9zaXRpb24iLCJjb250cm9sIiwiY29udHJvbEVsZW1lbnQiLCJwb3NpdGlvbkNvbnRhaW5lciIsIl9jb250cm9sUG9zaXRpb25zIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNvbnRyb2wiLCJjaSIsImhhc0NvbnRyb2wiLCJkaW1lbnNpb25zIiwiX2NvbnRhaW5lckRpbWVuc2lvbnMiLCJfcmVzaXplQ2FudmFzIiwiZmlyZU1vdmluZyIsInNldE1pblpvb20iLCJnZXRNaW5ab29tIiwic2V0TWF4Wm9vbSIsImdldE1heFpvb20iLCJzZXRNaW5QaXRjaCIsImdldE1pblBpdGNoIiwic2V0TWF4UGl0Y2giLCJnZXRNYXhQaXRjaCIsImdldFJlbmRlcldvcmxkQ29waWVzIiwic2V0UmVuZGVyV29ybGRDb3BpZXMiLCJfY3JlYXRlRGVsZWdhdGVkTGlzdGVuZXIiLCJsaXN0ZW5lciIsIm1vdXNlaW4iLCJkZWxlZ2F0ZXMiLCJkZWxlZ2F0ZWRMaXN0ZW5lciIsIl9kZWxlZ2F0ZWRMaXN0ZW5lcnMiLCJvbmNlIiwiZGVsZWdhdGVkTGlzdGVuZXJzIiwibGlzdGVuZXJzIiwicmVtb3ZlRGVsZWdhdGVkTGlzdGVuZXIiLCJnZW9tZXRyeSIsIl9kaWZmU3R5bGUiLCJfdXBkYXRlU3R5bGUiLCJfbGF6eUluaXRFbXB0eVN0eWxlIiwiX3VwZGF0ZURpZmYiLCJnZXRTdHlsZSIsImlzU3R5bGVMb2FkZWQiLCJhcmVUaWxlc0xvYWRlZCIsIkhUTUxJbWFnZUVsZW1lbnQiLCJleGlzdGluZ0ltYWdlIiwiaGFzSW1hZ2UiLCJsb2FkSW1hZ2UiLCJiZWZvcmVJZCIsIl9jYW52YXNDb250YWluZXIiLCJfY2FudmFzIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJfZGV0ZWN0TWlzc2luZ0NTUyIsImdldENvbXB1dGVkU3R5bGUiLCJfbWlzc2luZ0NTU0NhbmFyeSIsImdldFByb3BlcnR5VmFsdWUiLCJ2aXNpYmlsaXR5IiwiY2FudmFzQ29udGFpbmVyIiwiX2NvbnRleHRMb3N0IiwiX2NvbnRleHRSZXN0b3JlZCIsImNvbnRyb2xDb250YWluZXIiLCJfY29udHJvbENvbnRhaW5lciIsInBvc2l0aW9ucyIsInBvc2l0aW9uTmFtZSIsIl9vbk1hcFNjcm9sbCIsIndlYnBTdXBwb3J0ZWQiLCJ0ZXN0U3VwcG9ydCIsIl9mcmFtZSIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJfc3R5bGVEaXJ0eSIsIl9zb3VyY2VzRGlydHkiLCJ1cGRhdGVTdHlsZSIsIl9yZW5kZXIiLCJwYWludFN0YXJ0VGltZVN0YW1wIiwiZnJhbWVTdGFydFRpbWUiLCJjcm9zc0ZhZGluZyIsIkV2YWx1YXRpb25QYXJhbWV0ZXJzIiwiZmFjdG9yIiwiY3Jvc3NGYWRpbmdGYWN0b3IiLCJfcGxhY2VtZW50RGlydHkiLCJyZW5kZXJDUFVUaW1lIiwicmVuZGVyR1BVVGltZSIsImZyYW1lTGF5ZXJRdWVyaWVzIiwicmVuZGVyZWRMYXllclRpbWVzIiwibGF5ZXJUaW1lcyIsInNvbWV0aGluZ0RpcnR5IiwiX3JlcGFpbnQiLCJfZnVsbHlMb2FkZWQiLCJleHRlbnNpb24iLCJsb3NlQ29udGV4dCIsInJlbW92ZU5vZGUiLCJfc2hvd1RpbGVCb3VuZGFyaWVzIiwiX3Nob3dQYWRkaW5nIiwicmVwYWludCIsInZlcnRpY2VzIiwiX3ZlcnRpY2VzIiwiX3NldENhY2hlTGltaXRzIiwiY2hlY2tUaHJlc2hvbGQiLCJzZXRDYWNoZUxpbWl0cyIsInNob3dDb21wYXNzIiwic2hvd1pvb20iLCJ2aXN1YWxpemVQaXRjaCIsIk5hdmlnYXRpb25Db250cm9sIiwiX3pvb21JbkJ1dHRvbiIsIl9jcmVhdGVCdXR0b24iLCJfem9vbU91dEJ1dHRvbiIsIl9jb21wYXNzIiwiX2NvbXBhc3NJY29uIiwiX3VwZGF0ZVpvb21CdXR0b25zIiwiaXNNYXgiLCJpc01pbiIsIl9yb3RhdGVDb21wYXNzQXJyb3ciLCJfc2V0QnV0dG9uVGl0bGUiLCJNb3VzZVJvdGF0ZVdyYXBwZXIiLCJwcmlvclBvcyIsImRpc3RTcXIiLCJkb3duIiwibW92ZSIsIm9mZlRlbXAiLCJ0YXJnZXRUb3VjaGVzIiwiYW5jaG9yVHJhbnNsYXRlIiwidG9wLWxlZnQiLCJ0b3AtcmlnaHQiLCJib3R0b20tbGVmdCIsImJvdHRvbS1yaWdodCIsImFwcGx5QW5jaG9yQ2xhc3MiLCJwcmVmaXgiLCJNYXJrZXIiLCJsZWdhY3lPcHRpb25zIiwiX2FuY2hvciIsIl9jb2xvciIsIl9zY2FsZSIsIl9kcmFnZ2FibGUiLCJkcmFnZ2FibGUiLCJfaXNEcmFnZ2luZyIsIl9yb3RhdGlvbiIsInJvdGF0aW9uIiwiX3JvdGF0aW9uQWxpZ25tZW50IiwiX3BpdGNoQWxpZ25tZW50IiwiX2VsZW1lbnQiLCJfb2Zmc2V0IiwiX2RlZmF1bHRNYXJrZXIiLCJzdmciLCJjcmVhdGVOUyIsInNldEF0dHJpYnV0ZU5TIiwiZGVmYXVsdEhlaWdodCIsImRlZmF1bHRXaWR0aCIsIm1hcmtlckxhcmdlIiwicGFnZTEiLCJyeCIsInJ5IiwiZWxsaXBzZSIsImJnUGF0aCIsImJvcmRlciIsImJvcmRlclBhdGgiLCJtYWtpIiwiY2lyY2xlQ29udGFpbmVyIiwiY2lyY2xlMSIsImNpcmNsZTIiLCJfcG9wdXAiLCJzZXREcmFnZ2FibGUiLCJfb25NYXBDbGljayIsIl9hZGREcmFnSGFuZGxlciIsIl9vblVwIiwiX29uTW92ZSIsImdldExuZ0xhdCIsIl9sbmdMYXQiLCJzZXRMbmdMYXQiLCJfcG9zIiwiZ2V0RWxlbWVudCIsInNldFBvcHVwIiwicG9wdXAiLCJfb25LZXlQcmVzcyIsIl9vcmlnaW5hbFRhYkluZGV4IiwicmVtb3ZlQXR0cmlidXRlIiwibGluZWFyT2Zmc2V0IiwibWFya2VySGVpZ2h0IiwiZ2V0QXR0cmlidXRlIiwiY29kZSIsImxlZ2FjeUNvZGUiLCJjaGFyQ29kZSIsInRvZ2dsZVBvcHVwIiwidGFyZ2V0RWxlbWVudCIsImdldFBvcHVwIiwiaXNPcGVuIiwic21hcnRXcmFwIiwiZ2V0T2Zmc2V0Iiwic2V0T2Zmc2V0IiwiX3BvaW50ZXJkb3duUG9zIiwiX3Bvc2l0aW9uRGVsdGEiLCJwb2ludGVyRXZlbnRzIiwic2hvdWxkQmVEcmFnZ2FibGUiLCJpc0RyYWdnYWJsZSIsInNldFJvdGF0aW9uIiwiZ2V0Um90YXRpb24iLCJzZXRSb3RhdGlvbkFsaWdubWVudCIsImFsaWdubWVudCIsImdldFJvdGF0aW9uQWxpZ25tZW50Iiwic2V0UGl0Y2hBbGlnbm1lbnQiLCJnZXRQaXRjaEFsaWdubWVudCIsInBvc2l0aW9uT3B0aW9ucyIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsIm1heGltdW1BZ2UiLCJ0cmFja1VzZXJMb2NhdGlvbiIsInNob3dBY2N1cmFjeUNpcmNsZSIsInNob3dVc2VyTG9jYXRpb24iLCJHZW9sb2NhdGVDb250cm9sIiwiZ2VvbG9jYXRpb24iLCJfbnVtYmVyT2ZXYXRjaGVzIiwiX2NoZWNrR2VvbG9jYXRpb25TdXBwb3J0IiwiX3NldHVwVUkiLCJfZ2VvbG9jYXRpb25XYXRjaElEIiwiY2xlYXJXYXRjaCIsIl91c2VyTG9jYXRpb25Eb3RNYXJrZXIiLCJfYWNjdXJhY3lDaXJjbGVNYXJrZXIiLCJfb25ab29tIiwiX25vVGltZW91dCIsInVwZGF0ZVN1cHBvcnQiLCJfc3VwcG9ydHNHZW9sb2NhdGlvbiIsInBlcm1pc3Npb25zIiwidGhlbiIsImNhdGNoIiwiX2lzT3V0T2ZNYXBNYXhCb3VuZHMiLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsIl9zZXRFcnJvclN0YXRlIiwiX3dhdGNoU3RhdGUiLCJfZ2VvbG9jYXRlQnV0dG9uIiwiX29uU3VjY2VzcyIsIl91cGRhdGVNYXJrZXIiLCJfZmluaXNoIiwiX2xhc3RLbm93blBvc2l0aW9uIiwiX3VwZGF0ZUNhbWVyYSIsIl9kb3RFbGVtZW50IiwiYWNjdXJhY3kiLCJ0b0JvdW5kcyIsImdlb2xvY2F0ZVNvdXJjZSIsIl9hY2N1cmFjeSIsIl91cGRhdGVDaXJjbGVSYWRpdXMiLCJtZXRlcnNQZXJQaXhlbCIsImRpc3RhbmNlVG8iLCJjaXJjbGVEaWFtZXRlciIsIl9jaXJjbGVFbGVtZW50IiwiX29uRXJyb3IiLCJfY2xlYXJXYXRjaCIsIl90aW1lb3V0SWQiLCJ0cmlnZ2VyIiwiX3NldHVwIiwid2F0Y2hQb3NpdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsIm1heFdpZHRoIiwidW5pdCIsIlNjYWxlQ29udHJvbCIsInVwZGF0ZVNjYWxlIiwibWF4TWV0ZXJzIiwibWF4RmVldCIsInNldFNjYWxlIiwibWF4RGlzdGFuY2UiLCJwb3cxMCIsIm11bHRpcGxpZXIiLCJnZXREZWNpbWFsUm91bmROdW0iLCJzZXRVbml0IiwiRnVsbHNjcmVlbkNvbnRyb2wiLCJfZnVsbHNjcmVlbiIsIl9mdWxsc2NyZWVuY2hhbmdlIiwiX2NoZWNrRnVsbHNjcmVlblN1cHBvcnQiLCJfY2hhbmdlSWNvbiIsImZ1bGxzY3JlZW5FbmFibGVkIiwibW96RnVsbFNjcmVlbkVuYWJsZWQiLCJtc0Z1bGxzY3JlZW5FbmFibGVkIiwid2Via2l0RnVsbHNjcmVlbkVuYWJsZWQiLCJfZnVsbHNjcmVlbkJ1dHRvbiIsIl91cGRhdGVUaXRsZSIsIl9vbkNsaWNrRnVsbHNjcmVlbiIsIl9nZXRUaXRsZSIsIl9pc0Z1bGxzY3JlZW4iLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJtc0Z1bGxzY3JlZW5FbGVtZW50IiwidG9nZ2xlIiwiZXhpdEZ1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsIndlYmtpdENhbmNlbEZ1bGxTY3JlZW4iLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwiY2xvc2VCdXR0b24iLCJjbG9zZU9uQ2xpY2siLCJmb2N1c0FmdGVyT3BlbiIsImZvY3VzUXVlcnlTZWxlY3RvciIsIlBvcHVwIiwiX29uQ2xvc2UiLCJjbG9zZU9uTW92ZSIsIl9mb2N1c0ZpcnN0RWxlbWVudCIsIl90cmFja1BvaW50ZXIiLCJfb25Nb3VzZU1vdmUiLCJfb25Nb3VzZVVwIiwiX2NvbnRlbnQiLCJfb25EcmFnIiwidHJhY2tQb2ludGVyIiwic2V0VGV4dCIsInNldERPTUNvbnRlbnQiLCJjcmVhdGVUZXh0Tm9kZSIsInNldEhUTUwiLCJodG1sIiwiY2hpbGQiLCJmcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInRlbXAiLCJnZXRNYXhXaWR0aCIsInNldE1heFdpZHRoIiwiaHRtbE5vZGUiLCJoYXNDaGlsZE5vZGVzIiwiX2NyZWF0ZUNsb3NlQnV0dG9uIiwiYWRkQ2xhc3NOYW1lIiwicmVtb3ZlQ2xhc3NOYW1lIiwidG9nZ2xlQ2xhc3NOYW1lIiwiX2Nsb3NlQnV0dG9uIiwiY3Vyc29yIiwiX3RpcCIsIm5vcm1hbGl6ZU9mZnNldCIsImNvcm5lck9mZnNldCIsImNvbnZlcnRlZE9mZnNldCIsImFuY2hvckNvbXBvbmVudHMiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRlZFBvcyIsImZpcnN0Rm9jdXNhYmxlIiwiZm9jdXMiLCJleHBvcnRlZCIsInNldFJUTFRleHRQbHVnaW4iLCJnZXRSVExUZXh0UGx1Z2luU3RhdHVzIiwicG9vbCIsImJhc2VBcGlVcmwiLCJBUElfVVJMIiwibWF4UGFyYWxsZWxJbWFnZVJlcXVlc3RzIiwiTUFYX1BBUkFMTEVMX0lNQUdFX1JFUVVFU1RTIiwibnVtUmVxdWVzdHMiLCJjbGVhclN0b3JhZ2UiLCJjbGVhclRpbGVDYWNoZSJdLCJtYXBwaW5ncyI6IndGQWtCQSxTQUFTQSxFQUFZQyxHQUNqQixPQUFRQyxFQUFtQkQsR0FHL0IsU0FBU0MsRUFBbUJELEdBQ3hCLE1BYXlCLG9CQUFYRSxRQUE4QyxvQkFBYkMsU0FidEIsZ0JB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
